/*!webui - 1.0.0 - author - 2018-08-22 10:51:05 *//*!webui - 1.0.0 - author - 2018-08-22 10:51:04 *//**
 * author: young
 * createdDate: 2018/6/26
 * description: 基础全局变量定义
 */
// window= {};
// BI = BI || {};
_global.BICst = _global.BICst || {};BI.resourceURL = "file?path=/com/fr/web/ui/resource/";
BI.ExportExcelURL = "/design/report/data/export";
BI.GlobalExportExcelURL = "/design/report/data/global/export/excel";
BI.GlobalExportPdfURL = "/design/report/data/global/export/pdf";
BI.ImageURL = BI.fineServletURL + "/resources?path=/com/finebi/web/resources/images/1x/";BICst.CACHE = {
    PACKAGE_PREFIX: "package_", // 缓存业务包

    REGION_COLUMN_SIZE_PREFIX: "region_column_size_"// 缓存表格区域宽度 + wId
};!(function () {
    BI.pool = BI.pool || {};
    BI.pool = BI.extend({
        authPool: {},
        confPool: {},
        parameterPool: {},
        transferPool: {},
        userInfoPool: {},
        groups: {},
        packages: {},
        tables: {},
        fields: {}
    }, BI.pool);
})();BICst = BICst || {};
BICst.CURSOR = "-webkit-grabbing";

BICst.TABLE_THEME_COLOR = "#04b1c2";
// tab切换 empty-content
BICst.TAB = {
    EMPTY: 1,
    CONTENT: 2
};

BICst.REQUEST_STATUS = {
    LOADING: 0,
    SUCCESS: 1,
    FAIL: 2,
    WARNING: 3
};

BICst.PREVIEW_TABLE_STATUS = {
    LOADING: 0,
    TABLE: 1,
    ERROR: 2
};

BICst.AGG_FUNC = ["SUM_AGG", "AVG_AGG", "MEDIAN_AGG", "MAX_AGG", "MIN_AGG", "STDEV_AGG", "VAR_AGG", "COUNT_AGG", "COUNTD_AGG"];

BICst.SELECT_DATA_SEGMENT = {
    SECTION_ALL: 0x1,
    SECTION_PACKAGE: 0x10,
    SECTION_FIELD: 0x100,
    SECTION_TABLE: 0x1000
};

BICst.BACKGROUND_TYPE = {
    COLOR: "color",
    IMAGE: "image",
    MAP: "map"
};

BICst.STRING_CONTROL = {
    SINGLE: 0,
    MULTI: 1,
    TEXT: 2,
    NO_BAR: 3
};

BICst.THEME_NAME = {
    DEFAULT: "DEFAULT",
    DARK: "DARK",
    STYLE1: "STYLE1",
    STYLE2: "STYLE2",
    STYLE3: "STYLE3",
    STYLE4: "STYLE4"
};

BICst.WIDGET_GAP = {
    GAP: 1,
    NO_GAP: 2
};

BICst.CHART_STYLE = {
    NORMAL: 1,
    GRADIENT: 2
};

BICst.TABLE_STYLE = {
    STYLE1: 1,
    STYLE2: 2,
    STYLE3: 3
};

BICst.LIST_LABEL_TYPE = {
    ALL: "_*_"
};

BICst.WIDGET_OPERATOR = {
    DELETE: "DELETE",
    DETAIL: "DETAIL",
    ASC: "ASC",
    DES: "DES",
    CLEAR: "CLEAR",
    RENAME: "RENAME",
    COPY: "COPY",
    ALLOW_OVERLAP: "ALLOW_OVERLAP",
    DEFAULT_CONTROL: "DEFAULT_CONTROL",
    CUSTOMIZE_CONTROL: "CUSTOMIZE_CONTROL",
    PASS_DEFAULT: "PASS_DEFAULT",
    FROM: "FROM",
    DESC: "DESC",
    CUSTOM_SORT: "CUSTOM_SORT",
    FILTER: "FILTER"
};

BICst.DIMENSION_COMBO = {
    ASCEND: 1,
    DESCEND: 2,
    CUSTOM_SORT: 3,
    DELETE: 4,
    STRING_SAME_VALUE_GROUP: 5,
    STRING_CUSTOM_GROUP: 6,
    NUMBER_SAME_VALUE_GROUP: 7,
    NUMBER_CUSTOM_GROUP_TYPE: {
        AUTO: 8,
        CUSTOM: 9
    },
    NUMBER_CUSTOM_GROUP: 10,
    DATE: {
        YMD: 11,
        YW: 12,
        YM: 13,
        YQ: 14,
        YEAR: 15,
        QUARTER: 16,
        MORE: 17,
        MONTH: 18,
        WEEK: 19,
        WEEKDAY: 20,
        DAY: 21,
        HOUR: 22,
        MINUTE: 23,
        SECOND: 24,
        YMDH: 25,
        YMDHM: 26,
        YMDHMS: 27
    },
    FILTER: 28,
    DETAIL_FILTER: 29,
    NUMBER_FORMAT: 30,
    DATE_FORMAT: 31,
    DATE_FORMAT_SPLIT: 32,
    DATE_FORMAT_CHINESE: 33,
    COPY: 34,
    SHOW_MISSING_TIME: 35,
    CATEGORY_AXIS_SETTING: 37,
    SUMMARY_TYPE: 38,
    RAPID_CALCULATION: 39,
    TARGET_FILTER: 40,
    SPECIAL_DISPLAY: 41,
    ANALYSIS_HELPER_SETTING: 42,
    VALUE_AXIS_SETTING: 43,
    TURN_ON_ACCUMULATION: 44,
    REPEAT_CAL: 45,
    COUNTER_DEPENDENCE: 46,
    DRILL_ORDER: 47,
    EDIT_CLUSTER: 48,
    SET_NAME: 49
};

BICst.DETAIL_DIMENSION_COMBO = {
    FILER: 1,
    DATE: {
        YMD: 11,
        YW: 12,
        YM: 13,
        YQ: 14,
        YEAR: 15,
        QUARTER: 16,
        MORE: 17,
        MONTH: 18,
        WEEK: 19,
        WEEKDAY: 20,
        DAY: 21,
        HOUR: 22,
        MINUTE: 23,
        SECOND: 24,
        YMDH: 25,
        YMDHM: 26,
        YMDHMS: 27
    },
    DELETE: 2
};

BICst.DETAIL_CALC_TARGET_COMBO = {};

BICst.REUSE_PANE = {
    WIDGET: 2,
    TEMPLATE: 1,
    FOLDER: 0
};

BICst.ADMIN_USER_ID = "-999";

BICst.ALL_VALUE = {
    NOT_IN_GROUP: 99,
    IN_GROUP: 100
};

BICst.SHOW_TIME = {
    SHOW: 1,
    NOT_SHOW: 2
};

BICst.DEFAULT_CHART_COLOR = ["#b25657", "#e18169", "#f1c15f", "#f4ab98", "#c82d31", "#fa706d"];

BICst.WORDS = {
    ENTIRE: "entire",
    GRAPHIC: "graphic",
    MULTI: "multi",
    AUTO: "auto",
    FACET: "facet",
    H_MEASURES_OVERLAPPED: "hMeasureOverlapped",
    V_MEASURES_OVERLAPPED: "vMeasureOverlapped",
    MEASURES_TO_GEOMS: "measuresToGeoms",

    H_CUSTOM_UNIT: "hCustomUnit",
    V_CUSTOM_UNIT: "vCustomUnit",
    H_UNIT: "hUnit",
    V_UNIT: "vUnit",

    H_CUSTOM_SIZE: "hCustomSize",
    V_CUSTOM_SIZE: "vCustomSize",
    H_SIZE: "hSize",
    V_SIZE: "vSize",

    HEAT: "heat",

    TOP: "top",
    BOTTOM: "bottom",
    LEFT: "left",
    RIGHT: "right",

    WORLD: "world",

    SEMI_SELECTED: "semiSelected",

    UN_SELECTED: "unSelected",

    AREA_SUFFIX: "-area.json",
    POINT_SUFFIX: "-point.json"
};

BICst.PREFIX = {
    TIME_START: "_start",
    TIME_END: "_end"
};

BICst.FONT_FAMILY_COMBO = [{
    text: BI.i18nText("BI-Basic_Microsoft_YaHei"),
    value: "Microsoft YaHei"
}, {
    text: BI.i18nText("BI-Basic_Sim_Hei"),
    value: "SimHei"
}, {
    text: BI.i18nText("BI-Basic_You_Yuan"),
    value: "YouYuan"
}, {
    text: BI.i18nText("BI-Basic_Sim_Sun"),
    value: "SimSun"
}, {
    text: BI.i18nText("BI-Basic_Kai_Ti"),
    value: "KaiTi"
}, {
    text: BI.i18nText("BI-Basic_ST_Xihei"),
    value: "STXihei"
}, {
    text: BI.i18nText("BI-Basic_ST_Heiti"),
    value: "STHeiti"
}, {
    text: BI.i18nText("BI-Basic_ST_Kaiti"),
    value: "STKaiti"
}, {
    text: BI.i18nText("BI-Basic_ST_Song"),
    value: "STSong"
}, {
    text: BI.i18nText("BI-Basic_Hiragino_Sans_GB_W3"),
    value: "Hiragino Sans GB W3"
}, {
    text: "Arial",
    value: "Arial"
}, {
    text: "Microsoft Tai Le",
    value: "Microsoft Tai Le"
}, {
    text: "Tahoma",
    value: "Tahoma"
}, {
    text: "Helvetica",
    value: "Helvetica"
}, {
    text: "Verdana",
    value: "Verdana"
}, {
    text: "Times New Roman",
    value: "Times New Roman"
}];

BICst.TABLE_STYLE = {
    STYLE1: 1,      // 普通风格
    STYLE2: 2,        // 蓝色表头的
    STYLE3: 3     // 内容间隔色
};

BICst.IMAGE_SIZE = {
    ORIGINAL: "ORIGINAL",
    EQUAL: "EQUAL",
    WIDGET_SIZE: "WIDGET_SIZE"
};

BICst.TABLE_CHART_SETTING = {
    ATTRIBUTE: 1,
    STYLE: 2
};

BICst.TABLE_AGG_METHOD_SHOW = {
    ROW: 1,
    COLUMN: 2,
    ROW_COLUMN: 3
};

BICst.AUTO_CUSTOM = {
    AUTO: 1,
    CUSTOM: 2
};

BICst.TABLE_TYPE = {
    MULTI_COLUMN: 1,
    TREE: 2
};

BICst.FONT_STYLE = {
    BOLD: 1,
    ITALIC: 2,
    UNDERLINE: 3
};

BICst.FONT_ALIGN = {
    LEFT: 1,
    CENTER: 2,
    RIGHT: 3
};

BICst.FORMULA_WIDGET_FIELD_TYPE = -1;

BICst.EXPAND_TYPE = {
    CELL: 1,
    HEADER: 2,
    CROSS_CELL: 3,
    CROSS_HEADER: 4
};

BICst.FIELD_COMBO = {
    COPY: 1,
    DELETE: 2,
    RENAME: 3,
    FILTER: 4
};

BICst.TABLE_STYLE_EXPANDER = {
    TABLE_FONT: "tableFont",
    TITLE: "title",
    TITLE_BACKGROUND: "titleBackground",
    WIDGET_BACKGROUND: "widgetBackground",
    DETAIL_ATTR: "detailAttr",
    DETAIL_FORMAT: "detailFormat",
    DETAIL_TABLE_STYLE: "detailTableStyle",
    GROUP_ATTR: "groupAttr",
    GROUP_FORMAT: "groupFormat",
    METRIC: "metric",
    GROUP_STYLE: "groupStyle"
};

BICst.DRILL_ORDER = {
    FIXED: "fixed",
    UNFIXED: "unfixed"
};


BICst.CHART_ATTR_NAMES = {
    COLOR: "color",
    HEAT_COLOR: "heatColor",
    SIZE: "size",
    SYMBOL: "symbol",
    LABEL: "label",
    TOOLTIP: "tooltip",
    GRANULARITY: "granularity",
    LINE_CONNECTION: "lineConnect",
    PIE_RADIUS: "pieRadius",
    PIE_ANGLE: "pieAngle",
    TEXT: "text",
    GAUGE_POINTER: "gaugePointNumber",
    GAUGE_MAX_VALUE: "gaugeMaxValue"
};

BICst.MIN_GRADIENT_NUM = 2;

BICst.UNDO_STEP = 10;

// tooltip、label、text的富文本的类型
BICst.CHART_RICH_TEXT = {
    DEFAULT: "default",     // 未做改动
    MODIFIED: "modified",   // 已被用户修改
    MULTI_CONTENT: "multiContent",   // “多个内容”
    SAME_CONTENT: "sameContent"     // 多个指标的内容都相同
};

// 存放在富文本中参数中的一些key
BICst.RICH_TEXT_INFO = {
    DATA_ID: "data-id",
    DATA_NAME: "data-name",
    DATA_FULL_NAME: "data-full-name",
    DATA_ORIGIN_ID: "data-origin-id",
    DATA_ORIGIN_NAME: "data-origin-name",
    DATA_ORIGIN_FULL_NAME: "data-origin-full-name",
    DATA_IS_INSERT_PARAM: "data-is-insert-param",
    DATA_IS_MISSING_FIELD: "data-is-missing-field",
    ALT: "alt",
    SRC: "src"
};

BICst.GIS_MAP_TYPE = {
    // fixme: 暂时先用null来代替
    AUTO: null
};

BICst.DIMENSION_STATE = {
    NORMAL: 0,
    FIELD_MISS: 1,
    FIELD_TYPE_ERROR: 2,
    AGG_IN_DETAIL: 3,
    GROUP_TYPE_ERROR: 4
};

BICst.FORMULA_STATE = {
    VALID: "valid",
    INVALID: "invalid",
    AGG_INVALID: "aggInvalid",
    FIELD_MISS: "field_miss",
    NOT_SUPPORT_STRING_OR_DATE: "no_string_or_date",
    DETAIL_FILTER_NOT_SUPPORT: "detail filter not support"
};

BICst.FIELD_STATE = {
    NORMAL: 0,
    FIELD_MISS: 1,
    FIELD_TYPE_ERROR: 2,
    // 明细表聚合计算指标
    AGG_IN_DETAIL: 3,
    WRONG_FORMULA: 4,
    NO_AUTH: 5
};

BICst.ROOT_FOLDER = -1;

BICst.MAX_SHOWN_SIZE = 1000;

BICst.COOKIE = {
    PATH: "/",
    TOKEN: "fine_auth_token"
};

BICst.DEC_ERROR_CODE = {
    JWT_EXPIRED: "21300018"
};

BICst.ENTRY_TYPE = {
    EDIT: 0,
    VIEW: 1,
    SHARE: 2,
    JUMP: 3,
    MOUNT: 4,
    HOME: 5,
    SHARE_TO_ME: 6
};

BICst.HISTORY_HASH = {
    OPEN_DETAIL: "open_detail"
};

BICst.DEFAULT_CHART_COLOR_LIST = [{
    text: "默认",
    value: "默认",
    colors: [
        "#ffbf53",
        "#04b1c2",
        "#f07474",
        "#c55784",
        "#9a5fb3",
        "#cf62d7",
        "#5e78ea",
        "#51b3f0",
        "#69d4dc",
        "#49b788",
        "#9ccc66",
        "#ffdb03",
        "#c18c00",
        "#363636",
        "#426fb3",
        "#66bf7f",
        "#f9cd76",
        "#392884",
        "#00ae71",
        "#93aad6",
        "#490761",
        "#faf14b",
        "#955305",
        "#016241",
        "#7388c1",
        "#8f1e20",
        "#f9cd76",
        "#d69b01",
        "#b7b7b7",
        "#511f90",
        "#99d0b9",
        "#c7c300"
    ]
}];

BICst.REGULAR_STRING = {
    HTML_STYLE_TAG: "<font[\\s\\S]*?>|</font>|<span[\\s\\S]*?>|</span>|<b[\\s\\S]*?>|</b>|<u[\\s\\S]*?>|</u>|<i\\s+(.*?)>|<i>|</i>|<div[\\s\\S]*?>|</div>|<p[\\s\\S]*?>|</p>|<strong[\\s\\S]*?>|</strong>|<em[\\s\\S]*?>|</em>|<br>",
    HTML_ONLY_STYLE_TAG: "<font[\\s\\S]*?>|</font>|<span[\\s\\S]*?>|</span>|<b\\s+(.*?)>|<b>|</b>|<u[\\s\\S]*?>|</u>|<i\\s+(.*?)>|<i>|</i>|<strong[\\s\\S]*?>|</strong>|<em[\\s\\S]*?>|</em>|<div[\\s\\S]style(.*?)>|</div>|<p[\\s\\S]style(.*?)>|</p>",
    PLACE_HOLDER: "\\$[\\{][^\\}]*[\\}]",
    IMAGE: "<img.*?[^!]>"
};


BICst.TEMPLATE_BACKGROUND = ["template/background_style3.png", "template/background_style6.png"];
!(function () {
    BI.Func = BI.Func || {};

    BI.extend(BI.Func, {
        // 获取字符宽度
        getGBWidth: function (str) {
            str = str + "";
            str = str.replace(/[^\x00-\xff]/g, "xx");
            return Math.ceil(str.length / 2);
        },

        fit: function (widths) {
            function sumBy (array, it) {
                var res = 0;
                BI.each(array, function (i, width) {
                    res += it(i, width);
                });
                return res;
            }

            if (widths.length < 2) {
                return {a: widths[0], b: 0};
            }
            var w11 = widths.length;
            var w12 = (1 + widths.length) * widths.length / 2;
            var w21 = w12;
            var w22 = sumBy(widths, function (i, width) {
                return (i + 1) * (i + 1);
            });
            var f1 = BI.sum(widths);
            var f2 = sumBy(widths, function (i, width) {
                return (i + 1) * width;
            });
            return {
                a: (f2 * w12 - f1 * w22) / (w12 * w21 - w11 * w22),
                b: (f2 * w11 - f1 * w21) / (w11 * w22 - w21 * w12)
            };
        },

        checkFormulaValidation: (function () {
            var formulas = new BI.LRU(100);
            return function (condition, callback) {
                var str = condition.str;
                var origin = condition.origin;
                var fieldsMap = condition.fieldsMap;

                if (!BI.isEmptyString(str)) {
                    if (formulas.has(str)) {
                        // BI-19231
                        callback(formulas.get(str));
                    }
                    BI.Utils.getFormulaValidation({
                        expression: str,
                        formula: origin,
                        fieldsMap: fieldsMap
                    }, function (response) {
                        var flag = false;
                        if (response.validation === "invalid") {
                            flag = false;
                        } else if (response.validation === "valid") {
                            flag = true;
                        }
                        formulas.put(str, flag);
                        callback(flag, response.type, response.errorCode);
                    });
                } else {
                    callback(true);
                }
            };
        })(),

        getFormulaStringFromFormulaValue: function (formulaValue) {
            var formulaString = "";
            var regx = /\$[\{][^\}]*[\}]|\w*\w|\$\{[^\$\(\)\+\-\*\/)\$,]*\w\}|\$\{[^\$\(\)\+\-\*\/]*\w\}|\$\{[^\$\(\)\+\-\*\/]*[\u4e00-\u9fa5]\}|\w|(.)/g;
            var result = formulaValue.match(regx);
            BI.each(result, function (i, item) {
                var fieldRegx = /\$[\{][^\}]*[\}]/;
                var str = item.match(fieldRegx);
                if (BI.isNotEmptyArray(str)) {
                    formulaString = formulaString + str[0].substring(2, item.length - 1);
                } else {
                    formulaString = formulaString + item;
                }
            });
            return formulaString;
        },

        getSortedResult: function (items, key) {
            var zhItems = [], enItems = [];
            var regx = /[\u4e00-\u9fa5]/;
            BI.each(items, function (i, item) {
                var text = item.text;

                if (BI.isNull(item.text)) {
                    text = item.value;

                    if (BI.isNull(item.value)) {
                        text = item;
                    }
                }

                if (BI.isNotNull(key)) {
                    text = item[key];
                }
                if (BI.isNotNull(text)) {
                    if (BI.isNotNull(text.match(regx))) {
                        var py = BI.makeFirstPY(text);
                        item.py = BI.toUpperCase(py);
                        zhItems.push(item);
                    } else {
                        item.py = text;
                        enItems.push(item);
                    }
                }
            });
            return BI.concat(BI.sortBy(enItems, "py"), BI.sortBy(zhItems, "py"));
        },

        getCompleteImageUrl: function (attachId) {
            if (BI.contains(BICst.TEMPLATE_BACKGROUND, attachId)) {
                // 默认上传图片
                return BI.ImageURL + attachId;
            }
            // token马上删除
            var share = BI.getShareLink(),
                version = BI.pool.version || "v5",
                moduleRouter = "/design" + (BI.pool.moduleRouter || "");
            var url = BI.fineServletURL + "/" + version + moduleRouter + "/image/" + attachId;
            if (share) {
                url = url + "?link=" + share;
            }
            return url;
        },

        getCompleteTileImageUrl: function (tiledId) {
            var share = BI.getShareLink(),
                version = BI.pool.version || "v5",
                moduleRouter = "/design" + (BI.pool.moduleRouter || "");
            var url = BI.fineServletURL  + "/" + version + moduleRouter + "/widget/chart/tiles/" + tiledId;

            if (share) {
                url = url + "?link=" + share;
            }

            return url;
        },

        getWidgetFontClass: function (widgetType) {
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                    return "table-type-group-icon";
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    return "table-type-cross-icon";
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "table-type-complex-icon";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "table-type-detail-icon";
                case BICst.DESIGN.WIDGET.IMAGE:
                    return "widget-image-font";
                case BICst.DESIGN.WIDGET.WEB:
                    return "widget-web-font";
                case BICst.DESIGN.WIDGET.CONTENT:
                    return "widget-content-font";
                case BICst.DESIGN.WIDGET.STRING:
                    return "widget-string-font";
                case BICst.DESIGN.WIDGET.NUMBER:
                    return "widget-number-interval-font";
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    return "widget-data-section-font";
                case BICst.DESIGN.WIDGET.YEAR:
                    return "widget-year-font";
                case BICst.DESIGN.WIDGET.QUARTER:
                    return "widget-quarter-font";
                case BICst.DESIGN.WIDGET.MONTH:
                    return "widget-month-font";
                case BICst.DESIGN.WIDGET.TREE:
                    return "widget-tree-font";
                case BICst.DESIGN.WIDGET.DATE:
                    return "widget-date-font";
                case BICst.DESIGN.WIDGET.DATE_PANE:
                    return "widget-data-pane-font";
                case BICst.DESIGN.WIDGET.GENERAL_QUERY:
                    return "widget-control-filter-font";
                case BICst.DESIGN.WIDGET.QUERY:
                    return "widget-query-font";
                case BICst.DESIGN.WIDGET.RESET:
                    return "widget-reset-font";
                case BICst.DESIGN.WIDGET.TREE_LABEL:
                    return "widget-label-tree-font";
                case BICst.DESIGN.WIDGET.TREE_LIST:
                    return "widget-list-tree-font";
                case BICst.DESIGN.WIDGET.INTERVAL_SLIDER:
                    return "widget-interval-slider-font";
                case BICst.DESIGN.WIDGET.STRING_LIST:
                    return "widget-list-string-font";
                case BICst.DESIGN.WIDGET.STRING_LABEL:
                    return "widget-label-string-font";
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                default:
                    return "widget-data-section-font";
            }
        },

        getCalculationDateShowValue: function (obj) {
            var date = BI.getDate();
            if (BI.isNotNull(obj.year)) {
                date = BI.getDate((date.getFullYear() + BI.parseInt(obj.year)), date.getMonth(), date.getDate());
            }
            if (BI.isNotNull(obj.quarter)) {
                date = date.getOffsetQuarter(BI.parseInt(obj.quarter));
            }
            if (BI.isNotNull(obj.month)) {
                date = date.getOffsetMonth(BI.parseInt(obj.month));
            }
            if (BI.isNotNull(obj.week)) {
                date = date.getOffsetDate(BI.parseInt(obj.week) * 7);
            }
            if (BI.isNotNull(obj.day)) {
                date = date.getOffsetDate(BI.parseInt(obj.day));
            }
            if (BI.isNotNull(obj.workDay)) {
                // todo 根据工作日做偏移 暂时按天偏移
                date = date.getOffsetDate(BI.parseInt(obj.workDay));
            }
            if (BI.isNotNull(obj.position) && obj.position !== BI.DynamicDateCard.OFFSET.CURRENT) {
                date = this.getBeginDate(date, obj);
            }
            return date;
        },

        getBeginDate: function (date, obj) {
            if (BI.isNotNull(obj.day)) {
                return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), date.getMonth(), 1) : BI.getDate(date.getFullYear(), date.getMonth(), (date.getLastDateOfMonth()).getDate());
            }
            if (BI.isNotNull(obj.week)) {
                return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? date.getWeekStartDate() : date.getWeekEndDate();
            }
            if (BI.isNotNull(obj.month)) {
                return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), date.getMonth(), 1) : BI.getDate(date.getFullYear(), date.getMonth(), (date.getLastDateOfMonth()).getDate());
            }
            if (BI.isNotNull(obj.quarter)) {
                return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? date.getQuarterStartDate() : date.getQuarterEndDate();
            }
            if (BI.isNotNull(obj.year)) {
                return obj.position === BI.DynamicDateCard.OFFSET.BEGIN ? BI.getDate(date.getFullYear(), 0, 1) : BI.getDate(date.getFullYear(), 11, 31);
            }
        },

        encodeParam: function (data) {
            for (var key in data) {
                if (_.isObject(data[key])) {
                    data[key] = window.encodeURIComponent(BI.jsonEncode(data[key]));
                } else {
                    data[key] = window.encodeURIComponent(data[key]);
                }
            }
            return data;
        },

        decodeParam: function (data) {
            for (var key in data) {
                data[key] = window.decodeURIComponent(data[key]);
                if (_.isObject(data[key])) {
                    data[key] = BI.jsonDecode(data[key]);
                }
            }
            return data;
        },

        doActionByForm: function (url, data, options) {
            options = options || {};
            url = BI.fineServletURL + "/v5" + url;
            var config = {
                method: options.method,
                url: url,
                data: data,
                target: options.target
            };
            var $form = $("<form method=\"" + config.method + "\" />");
            $form.attr("action", config.url);
            $form.attr("method", config.method || "post");
            $form.attr("target", config.target || "_self");
            if (options.notEncode === true) {
            } else {
                config.data = this.encodeParam(config.data);
            }
            for (var key in config.data) {
                $form.append("<input type=\"hidden\" name=\"" + key + "\" value=\"" + config.data[key] + "\" />");
            }
            $(document.body).append($form);
            $form[0].submit();
            $form.destroy();
        },

        getHtmlStringHeight: function (htmlString) {
            return $("<div>").html(htmlString).getDomHeight();
        },

        parseHEXAlpha: function (hex, alpha) {
            var rgb = BI.DOM.hex2rgb(hex);
            var rgbJSON = BI.DOM.rgb2json(rgb);
            rgbJSON.a = alpha;
            return BI.DOM.json2rgba(rgbJSON);
        }
    });
})();
!(function () {
    var CONSTANTS = {
        SUCCESS: 200
    };

    function getUrlParam (name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = window.location.search.substr(1).match(reg);
        if (r !== null) return r[2];
        return null;
    }

    function getReqURL () {
        return BI.fineServletURL ? BI.fineServletURL : Dec.fineServletURL;
    }

    function getReqOptions (reqOptions) {
        var options = BI.deepClone(reqOptions) || {};
        options.originalOptions = reqOptions;
        // 登录信息通过url传递
        var token = BI.getToken();
        var link = getUrlParam("link");
        if (token) {
            options.headers = options.headers || {};
            options.headers.Authorization = "Bearer " + token;
            options.headers.sessionId = BI.sessionId;
        }
        var version = "v5";
        if (options.version) {
            version = options.version;
        }

        options.url = getReqURL() + "/" + version + options.url;

        // 公共链接的验证信息
        if(link) {
            options.url = options.url + "?link=" + link;
        }

        // 权限验证信息(数据准备没有相关信息)
        // fay说先这么改
        if(BI.designConfigure && BI.pool && BI.pool.confPool) {
            options.url += (link ? "&" : "?") + "reportId=" + BI.designConfigure.reportId + "&entryType=" + BI.pool.confPool.entryType;
        }

        // 自定义timeoutHandler和errorHandler
        options.errorHandler = options.errorHandler || BI.ErrorHandler.commonErrorHandler;
        options.timeoutHandler = options.timeoutHandler || BI.TimeoutTimer.commonTimeoutHandler;
        return options;
    }

    BI.extend(BI, {
        asyncAjax: (function () {
            return function (reqOptions) {
                var options = getReqOptions(reqOptions);
                var opt = options.opt || {};
                !opt.noProgress && NProgress.start();
                var reqId = BI.UUID();
                var req = $.ajax({
                    url: options.url,
                    type: options.type,
                    headers: options.headers,
                    contentType: "application/json;charset=UTF-8",
                    // FIXME: BI-27950，先粗暴解决一下。问题原因在于ie下JSON.stringify(view)返回{}，暂时没找到好的解决方法
                    data: options.type === "GET" ? null : JSON.stringify(Fix.toJSON(options.data)),
                    dataType: "json",
                    cache: false,
                    async: true,
                    error: function (error, status) {
                        if (error.status === CONSTANTS.SUCCESS || status === "abort") {
                            return;
                        }

                        // 需要重试的error
                        options.errorHandler && options.errorHandler(options.originalOptions, error);

                    },
                    complete: function (res, status) {
                        !opt.noProgress && NProgress.done();
                        BI.TimeoutTimer.removeReq(reqId);
                        if (status === "success" && BI.isFunction(options.success)) {
                            options.success(BI.jsonDecode(res.responseText));
                        }
                        if (BI.isFunction(options.complete)) {
                            options.complete(BI.jsonDecode(res.responseText), status);
                        }
                    }
                });
                BI.TimeoutTimer.addReq(reqId, {
                    ajax: req,
                    options: options.originalOptions,
                    timeoutHandler: options.timeoutHandler
                });
                var abort = req.abort;
                req.abort = function () {
                    abort();
                    BI.TimeoutTimer.removeReq(reqId);
                };
                return req;
            };
        })(),

        syncAjax: (function () {
            return function (options) {
                options = getReqOptions(options);
                options.data.sessionId = BI.sessionId;
                var opt = options.opt || {};
                !opt.noProgress && NProgress.start();
                $.ajax({
                    url: options.url,
                    type: options.type,
                    headers: options.headers,
                    contentType: "application/json;charset=UTF-8",
                    data: options.type === "GET" ? null : JSON.stringify(options.data),
                    dataType: "json",
                    cache: false,
                    async: false,
                    error: function () {
                        BI.Msg.toast("ajax error !", "warning");
                    },
                    complete: function (res, status) {
                        !opt.noProgress && NProgress.done();
                        if (status === "success" && BI.isFunction(options.success)) {
                            options.success(BI.jsonDecode(res.responseText));
                        }
                        if (BI.isFunction(options.complete)) {
                            options.complete(BI.jsonDecode(res.responseText), status);
                        }
                    }
                });
            };
        })(),

        getToken: function () {
            return BI.Cache.getCookie(BICst.COOKIE.TOKEN);
        },

        getShareLink: function () {
            return getUrlParam("link");
        },

        downloadProgress: function (url, data, handler) {
            var options = getReqOptions({
                url: url
            });
            var xhr = new XMLHttpRequest();
            // 下载进度监控
            xhr.addEventListener("load", handler, false);
            xhr.open("POST", options.url);
            xhr.responseType = "blob";
            xhr.setRequestHeader("Content-Type", "application/json");
            xhr.setRequestHeader("Authorization", options.headers.Authorization);
            xhr.send(JSON.stringify(data));
        },

        reqGet: function (url, data, success, complete, opt) {
            return BI.asyncAjax({
                url: url,
                type: "GET",
                data: data,
                success: success,
                complete: complete,
                opt: opt
            });
        },
        reqPost: function (url, data, success, complete, opt) {
            return BI.asyncAjax({
                url: url,
                type: "POST",
                data: data,
                success: success,
                complete: complete,
                opt: opt
            });
        },
        reqPostSync: function (url, data, success, complete, opt) {
            BI.syncAjax({
                url: url,
                type: "POST",
                data: data,
                success: success,
                complete: complete,
                opt: opt
            });
        },
        reqDelete: function (url, data, success, complete, opt) {
            return BI.asyncAjax({
                url: url,
                type: "DELETE",
                data: data,
                success: success,
                complete: complete,
                opt: opt
            });
        },
        reqPut: function (url, data, success, complete, opt) {
            return BI.asyncAjax({
                url: url,
                type: "PUT",
                data: data,
                success: success,
                complete: complete,
                opt: opt
            });
        }
    });
})();
!(function () {
    BI.Socket = BI.Socket || {};

    BI.extend(BI.Socket, {
        initSocket: function () {
            var query = {
                token: BI.getToken(),
                username: BI.personal.username,
                lockBySessionId: BI.pool.confPool.lockBySessionId,
                sessionId: BI.sessionId
            };

            var ports = BI.system.webSocket.webSocketPort;
            function createConnect (v) {
                if (v > BI.size(ports)) {
                    return;
                }
                var port = ports[v];
                BI.socket = io.connect(window.location.hostname + ":" + port + BI.system.webSocket.webSocketNameSpace, {
                    query: query,
                    reconnection: false
                });

                // 监听到失败或者超时时使用下一个端口
                BI.socket.on("connect_error", function () {
                    createConnect(v + 1);
                });

                BI.socket.on("connect_timeout", function () {
                    createConnect(v + 1);
                });
            }
            createConnect(0);
        }
    });
})();// common utils
!(function () {
    BI.Utils = BI.Utils || {};

    BI.extend(BI.Utils, {
        // common utils
        getIconByTableType: function (type) {
            switch (type) {
                case BICst.TABLE.ANALYSIS:
                    return "analysis-table-font";
                case BICst.TABLE.DATABASE:
                    return "database-table-font";
                case BICst.TABLE.EXCEL:
                    return "excel-table-font";
                case BICst.TABLE.SQL:
                    return "sql-table-font";
                default:
                    return "database-table-font";
            }
        },

        getFormulaDetails: function (data, callback, complete) {
            if (BI.isNull(BI.FormulaOriginCollections) || BI.isNull(BI.FormulaJSONs)) {
                BI.reqPost("/common/formula/all", {}, function (res) {
                    var data = res.data;

                    BI.FormulaOriginCollections = data.formula;
                    BI.FormulaJSONs = data.formulaJSONs;

                    callback();
                }, complete);
            } else {
                callback();
            }
        },

        // url: "/v5/design/{tableName}/{fieldName}" param: {tableName: "A", fieldName: "a"}
        getEncodeURL: function (urlTemplate, param) {
            return urlTemplate.replaceAll("\\{(.*?)\\}", function (ori, str) {
                return BI.encodeURIComponent(BI.isObject(param) ? param[str] : param);
            });
        }
    });
    
    // license
    BI.extend(BI.Utils, {
        getLicense: function (callback, complete) {
            BI.reqGet("/conf/license", "", callback, complete);
        }
    });

})();
/**
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTableTreeNumber
 * @extends BI.Widget
 */
BI.SequenceTableTreeNumber = BI.inherit(BI.Widget, {

    _defaultConfig: function () {
        return BI.extend(BI.SequenceTableTreeNumber.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-sequence-table-tree-number",
            isNeedFreeze: false,
            startSequence: 1, // 开始的序号
            scrollTop: 0,
            headerRowSize: 25,
            rowSize: 25,

            sequenceHeaderCreator: BI.emptyFn,

            header: [],
            items: [], // 二维数组

            // 交叉表头
            crossHeader: [],
            crossItems: []
        });
    },

    _init: function () {
        BI.SequenceTableTreeNumber.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.vCurr = 1;
        this.hCurr = 1;
        this.tasks = [];
        this.renderedCells = [];
        this.renderedKeys = [];

        this.container = BI.createWidget({
            type: "bi.absolute",
            width: 60,
            scrollable: false
        });

        this.scrollContainer = BI.createWidget({
            type: "bi.vertical",
            scrollable: false,
            scrolly: false,
            items: [this.container]
        });

        this.headerContainer = BI.createWidget({
            type: "bi.absolute",
            cls: "bi-border",
            width: 58,
            scrollable: false
        });

        this.layout = BI.createWidget({
            type: "bi.vtape",
            element: this,
            items: [{
                el: this.headerContainer,
                height: this._getHeaderHeight() - 2
            }, {el: {type: "bi.layout"}, height: 2}, {
                el: this.scrollContainer
            }]
        });
        // 缓存第一行对应的序号
        this.start = this.options.startSequence;
        this.cache = {};
        this._nextState();

        this._populate();
    },

    _getNextSequence: function (nodes) {
        var self = this;
        var start = this.start;
        var cnt = this.start;

        function track (node) {
            // 如果已经有缓存了就不改计数了，复杂表会出现这种情况
            self.cache[node.text || node.value] || (self.cache[node.text || node.value] = cnt);
            cnt++;
        }

        BI.each(nodes, function (i, node) {
            if (BI.isNotEmptyArray(node.children)) {
                BI.each(node.children, function (index, child) {
                    if (index === 0) {
                        if (self.cache[child.text || child.value]) {
                            start = cnt = self.cache[child.text || child.value];
                        }
                    }
                    track(child);
                });
            }
        });
        this.start = cnt;
        return start;
    },

    _getStart: function (nodes) {
        var self = this;
        var start = this.start;
        BI.some(nodes, function (i, node) {
            if (BI.isNotEmptyArray(node.children)) {
                return BI.some(node.children, function (index, child) {
                    if (index === 0) {
                        if (self.cache[child.text || child.value]) {
                            start = self.cache[child.text || child.value];
                            return true;
                        }
                    }
                });
            }
        });
        return start;
    },

    _formatNumber: function (nodes) {
        var self = this, o = this.options;
        var result = [];
        var count = this._getStart(nodes);

        function getLeafCount (node) {
            var cnt = 0;
            if (BI.isNotEmptyArray(node.children)) {
                BI.each(node.children, function (index, child) {
                    cnt += getLeafCount(child);
                });
                if (/** node.children.length > 1 && **/BI.isNotEmptyArray(node.values)) {
                    cnt++;
                }
            } else {
                cnt++;
            }
            return cnt;
        }

        var start = 0, top = 0;
        BI.each(nodes, function (i, node) {
            if (BI.isArray(node.children)) {
                BI.each(node.children, function (index, child) {
                    var cnt = getLeafCount(child);
                    result.push({
                        text: count++,
                        start: start,
                        top: top,
                        cnt: cnt,
                        index: index,
                        height: cnt * o.rowSize
                    });
                    start += cnt;
                    top += cnt * o.rowSize;
                });
                if (BI.isNotEmptyArray(node.values)) {
                    result.push({
                        text: BI.i18nText("BI-Summary_Values"),
                        start: start++,
                        top: top,
                        cnt: 1,
                        isSummary: true,
                        height: o.rowSize
                    });
                    top += o.rowSize;
                }
            }
        });
        return result;
    },

    _layout: function () {
        var self = this, o = this.options;
        var headerHeight = this._getHeaderHeight() - 2;
        var items = this.layout.attr("items");
        if (o.isNeedFreeze === false) {
            items[0].height = 0;
            items[1].height = 0;
        } else if (o.isNeedFreeze === true) {
            items[0].height = headerHeight;
            items[1].height = 2;
        }
        this.layout.attr("items", items);
        this.layout.resize();
        try {
            this.scrollContainer.element.scrollTop(o.scrollTop);
        } catch (e) {

        }
    },

    _getHeaderHeight: function () {
        var o = this.options;
        return o.headerRowSize * (o.crossHeader.length + (o.header.length > 0 ? 1 : 0));
    },

    _nextState: function () {
        var o = this.options;
        this._getNextSequence(o.items);
    },

    _prevState: function () {
        var self = this, o = this.options;
        var firstChild;
        BI.some(o.items, function (i, node) {
            if (BI.isNotEmptyArray(node.children)) {
                return BI.some(node.children, function (j, child) {
                    firstChild = child;
                    return true;
                });
            }
        });
        if (firstChild && BI.isNotEmptyObject(this.cache)) {
            this.start = this.cache[firstChild.text || firstChild.value];
        } else {
            this.start = 1;
        }
        this._nextState();
    },

    _getMaxScrollTop: function (numbers) {
        var cnt = 0;
        BI.each(numbers, function (i, number) {
            cnt += number.cnt;
        });
        return Math.max(0, cnt * this.options.rowSize - (this.options.height - this._getHeaderHeight()) + BI.DOM.getScrollWidth());
    },

    _createHeader: function () {
        var o = this.options;
        BI.createWidget({
            type: "bi.absolute",
            element: this.headerContainer,
            items: [{
                el: o.sequenceHeaderCreator() || {
                    type: "bi.table_style_cell",
                    cls: "sequence-table-title-cell",
                    height: this._getHeaderHeight() - 2,
                    styleGetter: o.headerCellStyleGetter,
                    text: BI.i18nText("BI-Number_Index")
                },
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            }]
        });
    },

    _calculateChildrenToRender: function () {
        var self = this, o = this.options;

        var renderedCells = [], renderedKeys = [];
        var numbers = this._formatNumber(o.items);
        var intervalTree = BI.PrefixIntervalTree.uniform(numbers.length, 0);
        BI.each(numbers, function (i, number) {
            intervalTree.set(i, number.height);
        });
        var scrollTop = BI.clamp(o.scrollTop, 0, this._getMaxScrollTop(numbers));
        var index = intervalTree.greatestLowerBound(scrollTop);
        var offsetTop = -(scrollTop - (index > 0 ? intervalTree.sumTo(index - 1) : 0));
        var height = offsetTop;
        var bodyHeight = o.height - this._getHeaderHeight();
        while (height < bodyHeight && index < numbers.length) {
            renderedKeys.push(index);
            offsetTop += numbers[index].height;
            height += numbers[index].height;
            index++;
        }

        BI.each(renderedKeys, function (i, key) {
            var index = BI.deepIndexOf(self.renderedKeys, key);
            if (index > -1) {
                if (numbers[key].height !== self.renderedCells[index]._height) {
                    self.renderedCells[index]._height = numbers[key].height;
                    self.renderedCells[index].el.setHeight(numbers[key].height);
                }
                if (numbers[key].top !== self.renderedCells[index].top) {
                    self.renderedCells[index].top = numbers[key].top;
                    self.renderedCells[index].el.element.css("top", numbers[key].top + "px");
                }
                renderedCells.push(self.renderedCells[index]);
            } else {
                var child = BI.createWidget(BI.extend({
                    type: "bi.table_style_cell",
                    cls: "sequence-table-number-cell bi-border-left bi-border-right bi-border-bottom",
                    width: 60,
                    styleGetter: numbers[key].isSummary === true ? function () {
                        return o.summaryCellStyleGetter(true);
                    } : function (key) {
                        return function () {
                            return o.sequenceCellStyleGetter(key);
                        };
                    }(numbers[key].index)
                }, numbers[key]));
                renderedCells.push({
                    el: child,
                    left: 0,
                    top: numbers[key].top,
                    _height: numbers[key].height
                });
            }
        });

        // 已存在的， 需要添加的和需要删除的
        var existSet = {}, addSet = {}, deleteArray = [];
        BI.each(renderedKeys, function (i, key) {
            if (BI.deepContains(self.renderedKeys, key)) {
                existSet[i] = key;
            } else {
                addSet[i] = key;
            }
        });
        BI.each(this.renderedKeys, function (i, key) {
            if (BI.deepContains(existSet, key)) {
                return;
            }
            if (BI.deepContains(addSet, key)) {
                return;
            }
            deleteArray.push(i);
        });
        BI.each(deleteArray, function (i, index) {
            self.renderedCells[index].el.destroy();
        });
        var addedItems = [];
        BI.each(addSet, function (index) {
            addedItems.push(renderedCells[index]);
        });
        BI.createWidget({
            type: "bi.absolute",
            element: this.container,
            items: addedItems
        });
        this.renderedCells = renderedCells;
        this.renderedKeys = renderedKeys;

        this.container.setHeight(intervalTree.sumUntil(numbers.length));
    },

    _restore: function () {
        BI.each(this.renderedCells, function (i, cell) {
            cell.el.destroy();
        });
        this.renderedCells = [];
        this.renderedKeys = [];
    },

    _populate: function () {
        var self = this;
        BI.each(this.tasks, function (i, task) {
            task.apply(self);
        });
        this.tasks = [];
        this.headerContainer.empty();
        this._createHeader();
        this._layout();
        this._calculateChildrenToRender();
    },

    setVerticalScroll: function (scrollTop) {
        if (this.options.scrollTop !== scrollTop) {
            this.options.scrollTop = scrollTop;
            try {
                this.scrollContainer.element.scrollTop(scrollTop);
            } catch (e) {

            }
        }
    },

    getVerticalScroll: function () {
        return this.options.scrollTop;
    },

    setVPage: function (v) {
        if (v <= 1) {
            this.cache = {};
            this.start = this.options.startSequence;
            this._restore();
            this.tasks.push(this._nextState);
        } else if (v === this.vCurr + 1) {
            this.tasks.push(this._nextState);
        } else if (v === this.vCurr - 1) {
            this.tasks.push(this._prevState);
        }
        this.vCurr = v;
    },

    setHPage: function (v) {
        if (v !== this.hCurr) {
            this.tasks.push(this._prevState);
        }
        this.hCurr = v;
    },

    restore: function () {
        this._restore();
    },

    populate: function (items, header, crossItems, crossHeader) {
        var o = this.options;
        if (items && items !== this.options.items) {
            o.items = items;
            this._restore();
            this.tasks.push(this._prevState);
        }
        if (header && header !== this.options.header) {
            o.header = header;
        }
        if (crossItems && crossItems !== this.options.crossItems) {
            o.crossItems = crossItems;
        }
        if (crossHeader && crossHeader !== this.options.crossHeader) {
            o.crossHeader = crossHeader;
        }
        this._populate();
    }
});
BI.shortcut("bi.sequence_table_tree_number", BI.SequenceTableTreeNumber);/**
 * @author: Teller
 * @createdAt: 2018/6/15 下午5:35
 * @Description
*/

!(function () {
    var constants = {
        YEAR: "YEAR",
        MONTH: "MONTH",
        WEEK: "WEEK"
    };
    var getContainsType = function (types) {
        // 检查是否含有限制范围以外的值
        var checkHasOtherType = function (types, limits) {
            return BI.some(types, function (index, type) {
                return !BI.contains(limits, type);
            });
        };

        var containTypes = function (types, expects) {
            var contain = true;

            BI.each(expects, function (index, type) {
                contain = contain && BI.contains(types, type);
            });

            return contain;
        };

        // 使用的字段只包含以下粒度	年周
        var isOnlyYearWeek = function (types) {
            var allTypes = BI.uniq(types);

            if (checkHasOtherType(allTypes, [
                BICst.GROUP.YW,
                BICst.GROUP.Y,
                BICst.GROUP.WEEK_COUNT
            ])) return false;

            if (BI.contains(allTypes, BICst.GROUP.YW)) return true;

            return BI.contains(allTypes, BICst.GROUP.Y) && BI.contains(allTypes, BICst.GROUP.WEEK_COUNT);
        };

        // 使用的字段只包含以下粒度	年季度
        var isOnlyYearQuarter = function (types) {
            var allTypes = BI.uniq(types);

            if (checkHasOtherType(allTypes, [
                BICst.GROUP.YS,
                BICst.GROUP.Y,
                BICst.GROUP.S
            ])) return false;

            if (BI.contains(allTypes, BICst.GROUP.YS)) return true;

            return BI.contains(allTypes, BICst.GROUP.Y) && BI.contains(allTypes, BICst.GROUP.S);
        };

        // 使用的字段只包含以下粒度	年月
        var isOnlyYearMonth = function (types) {
            var allTypes = BI.uniq(types);

            if (checkHasOtherType(allTypes, [
                BICst.GROUP.YS,
                BICst.GROUP.Y,
                BICst.GROUP.S,
                BICst.GROUP.YM,
                BICst.GROUP.M
            ])) return false;

            if (BI.contains(allTypes, BICst.GROUP.YM)) return true;

            return (BI.contains(allTypes, BICst.GROUP.Y) || BI.contains(allTypes, BICst.GROUP.YS)) && BI.contains(allTypes, BICst.GROUP.M);
        };

        var isYearMonthDay = function (types) {
            var allTypes = BI.uniq(types);

            // 年月 + 日 或 年月日 或 年 + 月 + 日
            return containTypes(allTypes, [BICst.GROUP.YM, BICst.GROUP.D])
                || containTypes(allTypes, [BICst.GROUP.YMD])
                || containTypes(allTypes, [BICst.GROUP.Y, BICst.GROUP.M, BICst.GROUP.D]);
        };

        var isYearWeekWeekday = function (types) {
            var allTypes = BI.uniq(types);

            // 年周 + 星期 或 年 + 周 + 星期
            return containTypes(allTypes, [BICst.GROUP.YW, BICst.GROUP.W])
                || containTypes(allTypes, [BICst.GROUP.Y, BICst.GROUP.WEEK_COUNT, BICst.GROUP.W]);
        };

        // 使用的字段只包含以下粒度	年周 年季度 年月
        if (isOnlyYearWeek(types) || isOnlyYearQuarter(types) || isOnlyYearMonth(types)) {
            return [constants.YEAR];
        }

        // 最小粒度是日
        if (BI.contains(types, BICst.GROUP.D) || BI.contains(types, BICst.GROUP.YMD)) {
            if (!isYearMonthDay(types)) {
                return [];
            }
            return [constants.YEAR, constants.MONTH, constants.WEEK];
        }

        // 星期粒度
        if (isYearWeekWeekday(types)) {
            return [constants.YEAR, constants.WEEK];
        }
        return [];
    };

    var Service = BI.inherit(BI.OB, {
        // 同期同比灰化service
        // 传入同期同比的List，返回筛选后的list，直接替换外部
        // list: [同期，环期，同期比，环比]
        // unSupportGroupTypes：日以下粒度的value值
        // valueMap: 同期children的valueMap
        // rateMap: 同期比children的valueMap
        getItems: function (list, valueMap, rateMap) {
            // 灰化所有选项
            var ashedList = function () {
                BI.each(list, function (index, item) {
                    if (BI.has(item, "el")) {
                        item.el.disabled = true;
                    } else {
                        item.disabled = true;
                    }
                });

                return list;
            };

            // 无时间分组同期同比灰化
            if (!this.model.hasDateTypeInGroup) {
                return ashedList();
            }

            var unSupportGroupTypes = [
                BICst.GROUP.HOUR,
                BICst.GROUP.MINUTE,
                BICst.GROUP.SECOND,
                BICst.GROUP.YMDH,
                BICst.GROUP.YMDHM,
                BICst.GROUP.YMDHMS
            ];

            var unSupport = BI.some(this.model.allDateGroupTypes, function (index, type) {
                return BI.contains(unSupportGroupTypes, type);
            });

            // 日以下粒度灰化
            if (unSupport) {
                return ashedList();
            }

            var containsType = getContainsType(this.model.allDateGroupTypes);

            var yearOnYearChildren = BI.filter(BI.deepClone(list[0].children), function (idx, item) {
                return BI.contains(BI.reduce(containsType, function (item, result) {
                    return BI.concat(result, valueMap[item]);
                }, []), item.value);
            });
            var yearOnYearRateChildren = BI.filter(BI.deepClone(list[2].children), function (idx, item) {
                return BI.contains(BI.reduce(containsType, function (item, result) {
                    return BI.concat(result, rateMap[item]);
                }, []), item.value);
            });

            yearOnYearChildren.length === 0 ? list[0].el.disabled = true : list[0].children = yearOnYearChildren;
            yearOnYearRateChildren.length === 0 ? list[2].el.disabled = true : list[2].children = yearOnYearRateChildren;
            return list;
        },

        getTypes: function (types) {
            return getContainsType(types);
        }
    });

    BI.service("bi.service.common.combo", Service);
})();
!(function () {
    BI.Utils = BI.Utils || {};

    BI.extend(BI.Utils, {
        getOriginFieldNameById: function (fId) {
            try {
                var fieldCodeName = BI.last(fId.split("_"));
                return BI.cjkDecode(fieldCodeName);
            } catch (err) {
                return "";
            }
        },

        getOriginTableNameById: function (fId) {
            try {
                var fieldCodeName = BI.first(fId.split("_"));
                return BI.cjkDecode(fieldCodeName);
            } catch (err) {
                return "";
            }
        },

        getFieldDisplayName: function (field, fieldsMap, tableType) {
            if (BI.isNotNull(fieldsMap) && (BI.isNull(tableType) || tableType === BICst.TABLE.ANALYSIS)) {
                return fieldsMap[field.id];
            }
            return field.transferName || field.name;
        },

        getTableDisplayName: function (table) {
            return table.transferName || table.name;
        },

        getIconByFieldType: function (type) {
            switch (type) {
                case BICst.COLUMN.STRING:
                    return "string-field-font";
                case BICst.COLUMN.NUMBER:
                    return "number-field-font";
                case BICst.COLUMN.DATE:
                    return "date-field-font";
                case BICst.COLUMN.COUNTER:
                    return "counter-field-font";
                case BICst.COLUMN.ROW:
                    return "row-field-font";
                default:
                    return "string-field-font";
            }
        },

        isDimensionRegion1ByRegionType: function (regionType) {
            return BI.parseInt(regionType) >= BI.parseInt(BICst.REGION.DIMENSION1) &&
                BI.parseInt(regionType) < BI.parseInt(BICst.REGION.DIMENSION2);
        },
        getTextByFieldType: function (type) {
            switch (type) {
                case BICst.COLUMN.STRING:
                    return BI.i18nText("BI-Basic_Text");
                case BICst.COLUMN.NUMBER:
                    return BI.i18nText("BI-Basic_Number");
                case BICst.COLUMN.DATE:
                    return BI.i18nText("BI-Basic_Date");
                default:
                    return "";
            }
        },

        // 获取公共子表
        getCommonForeignOfTables: function (tableNames, relations) {
            var self = this;
            var commonTables = [],
                foreignTableMap = {};
            BI.each(tableNames, function (i, tableName) {
                foreignTableMap[tableName] = self.getForeignTablesOfTable(tableName, relations);
            });
            // 求公共部分
            var base = false;
            BI.each(foreignTableMap, function (tableName, tables) {
                if (!base) {
                    commonTables = tables;
                    base = true;
                } else {
                    commonTables = BI.filter(commonTables, function (i, table) {
                        return tables.contains(table);
                    });
                }
            });
            // 字表包含自身
            return BI.uniq(commonTables.concat(tableNames));
        },

        getForeignTablesOfTable: function (tableName, relations, foreignTables) {
            var self = this;
            foreignTables = foreignTables || [];
            BI.each(relations, function (rId, relation) {
                var baseTable = relation.base,
                    relativeTable = relation.relative;
                if (relation.type === BICst.RELATION_TYPE.MANY_TO_ONE) {
                    baseTable = relation.relative;
                    relativeTable = relation.base;
                }
                var name;
                if (baseTable.tableName === tableName) {
                    name = relativeTable.tableName;
                    if (!foreignTables.contains(name)) {
                        foreignTables.push(name);
                        self.getForeignTablesOfTable(name, relations, foreignTables);
                    }
                }
                if (relation.type === BICst.RELATION_TYPE.ONE_TO_ONE &&
                    relativeTable.tableName === tableName) {
                    name = baseTable.tableName;
                    if (!foreignTables.contains(name)) {
                        foreignTables.push(name);
                        self.getForeignTablesOfTable(name, relations, foreignTables);
                    }
                }
            });
            return BI.uniq(foreignTables);
        },

        getPrimaryTablesOfTable: function (tableName, relations, parentTables) {
            var self = this;
            parentTables = parentTables || [];
            BI.each(relations, function (j, relation) {
                var priTable = relation.base;
                var forTable = relation.relative;
                if (relation.type === BICst.RELATION_TYPE.MANY_TO_ONE) {
                    priTable = relation.relative;
                    forTable = relation.base;
                }
                var name;
                if (forTable.tableName === tableName) {
                    name = priTable.tableName;
                    if (!parentTables.contains(name)) {
                        parentTables.push(name);
                        self.getPrimaryTablesOfTable(name, relations, parentTables);
                    }
                }
                if (relation.type === BICst.RELATION_TYPE.ONE_TO_ONE &&
                    priTable.tableName === tableName) {
                    name = forTable.tableName;
                    if (!parentTables.contains(name)) {
                        parentTables.push(name);
                        self.getPrimaryTablesOfTable(name, relations, parentTables);
                    }
                }
            });
            return BI.uniq(parentTables);
        }
    });
})();
!(function () {
    var AddDashboard = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-add-dashboard",
            name: BI.i18nText("BI-Platform_New_Dashboard"),
            parentNodeId: null,
            button: {
                type: "bi.button",
                text: BI.i18nText("BI-Conf_Create_Widget"),
                level: "ignore"
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.bubble_combo",
                destroyWhenHide: true,
                el: this.options.button,
                ref: function () {
                    self.combo = this;
                },
                popup: {
                    type: "bi.bubble_bar_popup_view",
                    minWidth: 260,
                    destroyWhenHide: true,
                    el: {
                        type: "bi.add_dashboard.popup",
                        name: this.options.name,
                        parentNodeId: this.options.parentNodeId,
                        minWidth: 260,
                        ref: function () {
                            self.popup = this;
                        }
                    },
                    buttons: [{
                        text: BI.i18nText("BI-Basic_Cancel"),
                        level: "ignore",
                        height: 24,
                        stopPropagation: true,
                        handler: function () {
                            self.combo.hideView();
                        }
                    }, {
                        text: BI.i18nText("BI-Basic_Sure"),
                        height: 24,
                        stopPropagation: true,
                        ref: function () {
                            self.saveButton = this;
                        },
                        handler: function () {
                            if (self.popup.checkValid()) {
                                self.fireEvent("EVENT_CHANGE", self.popup.getValue());
                                self.combo.hideView();
                            }
                        }
                    }]
                }
            };
        }
    });
    BI.shortcut("bi.add_dashboard", AddDashboard);
})();/**
 * Created by wangrui on 2018/5/1.
 */
!(function () {
    var SaveAsPopup = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-add-dashboard-popup",
            name: BI.i18nText("BI-Platform_New_Dashboard"),
            parentNodeId: null
        },

        _store: function () {
            return BI.Models.getModel("bi.model.add_dashboard.popup", {
                name: this.options.name,
                parentNodeId: this.options.parentNodeId
            });
        },

        watch: {
            treeNodeItems: function (treeNodeItems) {
                this.locationCombo.populate(treeNodeItems);
            },
            parentNodeId: function (parentNodeId) {
                this.locationCombo.setValue(parentNodeId);
                this.name.focus();
                this.editorError.hideError();
            }
        },

        beforeInit: function (callback) {
            this.store.getAllFiles(callback);
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                height: 85,
                items: [{
                    type: "bi.htape",
                    tgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Name"),
                        height: 24,
                        width: 50
                    }, {
                        type: "bi.error_label",
                        width: 190,
                        el: {
                            type: "bi.editor",
                            cls: "bi-border widget-name-editor bi-focus-shadow",
                            height: 22,
                            ref: function (ref) {
                                self.name = ref;
                            },
                            value: this.model.name,
                            validationChecker: BI.bind(this.store.checkName, this.store),
                            quitChecker: function () {
                                return false;
                            },
                            errorText: function () {
                                return BI.i18nText(self.model.errorText);
                            },
                            listeners: [{
                                eventName: BI.SignEditor.EVENT_VALID,
                                action: function (v) {
                                    self.editorError.hideError();
                                    self.store.setName(v);
                                }
                            }, {
                                eventName: BI.SignEditor.EVENT_ERROR,
                                action: function (v) {
                                    self.store.setName(v);
                                }
                            }, {
                                eventName: BI.SignEditor.EVENT_CHANGE,
                                action: function () {
                                    self.editorError.hideError();
                                    self.store.setName(this.getValue());
                                }
                            }, {
                                eventName: BI.SignEditor.EVENT_BLUR,
                                action: function () {
                                    self.editorError.hideError();
                                }
                            }]
                        },
                        ref: function (_ref) {
                            self.editorError = _ref;
                        }
                    }],
                    height: 24
                }, {
                    type: "bi.htape",
                    tgap: 10,
                    height: 30,
                    bgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Position"),
                        height: 24,
                        width: 50
                    }, {
                        type: "bi.multilayer_select_tree_combo",

                        width: 190,
                        ref: function (ref) {
                            self.locationCombo = ref;
                        },
                        items: this.model.treeNodeItems,
                        value: this.model.parentNodeId,
                        listeners: [{
                            eventName: BI.MultiLayerSelectTreeCombo.EVENT_CHANGE,
                            action: function () {
                                self.store.setParentNodeId(this.getValue()[0]);
                            }
                        }]
                    }]
                }],
                hgap: 10
            };
        },

        _closePopup: function () {
            this.fireEvent("EVENT_CHANGE");
        },

        checkValid: function () {
            if (this.store.checkName(this.model.name)) {
                return true;
            }
            this.editorError.showError(BI.i18nText(this.model.errorText));
            return false;
        },
        getValue: function () {
            return {
                name: this.model.name,
                catalog: this.model.parentNodeCatalog,
                reportId: this.model.reportId
            };
        }
    });
    BI.shortcut("bi.add_dashboard.popup", SaveAsPopup);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {

        _init: function () {
            this.service = BI.Services.getService("bi.service.common.fragment.add_dashboard");
            this.treeNodesMap = {}; // node节点下所有子节点
            this.treeNodeNamesMap = {}; // node节点下所有子节点的name,
            this.userId = null; // 根目录id应该是userID.但是模板里面取不到userId
        },

        state: function () {
            return {
                parentNodeId: null,   // 当前选中位置id
                name: this.options.name,
                treeNodeItems: [],
                isValid: true
            };
        },

        computed: {
            parentNodeCatalog: function () {
                if (this.model.parentNodeId === this.userId) {
                    return [];
                }
                var parentNode = BI.get(this.treeNodesMap, this.model.parentNodeId);
                return parentNode.catalog.concat(parentNode.text);

            },
            allNames: function () {
                return this.treeNodeNamesMap[this.model.parentNodeId];
            },
            reportId: function () {
                if (BI.isNotNull(BI.designModel)) {
                    return BI.designModel.reportId;
                }
                return "";
            },
            errorText: function () {
                if (this.model.allNames.contains(this.model.name)) {
                    return "BI-Platform_Dashboard_Name_No_Repeat";
                } else if (BI.isEmptyString(this.model.name)) {
                    return "BI-Platform_Dashboard_Name_No_Blank";
                }
                return "";
            }
        },

        actions: {
            getAllFiles: function (callback) {
                var self = this;
                BI.Utils.getAllReportList(function (res) {
                    self._initData(res);
                    BI.isFunction(callback) && callback();
                });
            },
            checkName: function (name) {
                return !this.model.allNames.contains(name) && name !== "";
            },

            setName: function (name) {
                this.model.name = name;
            },
            setParentNodeId: function (parentNodeId) {
                this.model.parentNodeId = parentNodeId;
            }
        },
        _initData: function (res) {
            if (BI.isNull(this.userId)) {
                this.userId = this.service.getRootId(res.data);
            }
            var parentNodeId = this._getParentNodeId(res.data);
            var result = this.service.formatList(res.data, parentNodeId);
            this.treeNodesMap = result.itemsMap;
            this.treeNodeNamesMap = result.folderFileMap;
            var rootItem = {
                id: this.userId,
                text: BI.i18nText("BI-Platform_Dashboard"),
                title: BI.i18nText("BI-Platform_Dashboard"),
                value: this.userId,
                catalog: []
            };
            result.items[this.userId] = rootItem;
            this.model.treeNodeItems = [rootItem].concat(result.items);
            this.model.parentNodeId = parentNodeId;
            var curFolderList = this._getCurFolderFiles();
            this.model.name = BI.Func.createDistinctName(curFolderList, this.model.name);
        },

        _getParentNodeId: function (allFileList) {
            if (BI.isNotNull(BI.designModel)) { // 模板内部另存为
                var find = BI.find(allFileList, function (index, item) {
                    return item.id === BI.designModel.reportId;
                });
                // BI-21190 别人分享的文件找不到
                if (find) {
                    return find.pId === this.userId ? this.userId : find.pId;
                }
                return this.userId;
            }
            return this.options.parentNodeId || this.userId;

        },
        _getCurFolderFiles: function () {
            return BI.map(this.treeNodeNamesMap[this.model.parentNodeId], function (index, name) {
                return {name: name};
            });
        }
    });
    BI.model("bi.model.add_dashboard.popup", Model);
})();
/**
 * author: young
 * createdDate: 2018/5/17
 * description:
 */
!(function () {
    BI.extend(BI.Msg, {
        customAlert: function (title, warningTitle, content, callback, cancel) {
            var name = BI.UUID();
            var footer;
            if (callback) {
                footer = {
                    type: "bi.right_vertical_adapt",
                    lgap: 10,
                    items: [{
                        type: "bi.button",
                        text: BI.i18nText("BI-Basic_Cancel"),
                        level: "ignore",
                        handler: function () {
                            BI.isFunction(cancel) && cancel();
                            BI.Popovers.remove(name);
                        }
                    }, {
                        type: "bi.button",
                        text: BI.i18nText("BI-Basic_Sure"),
                        handler: function () {
                            callback();
                            BI.Popovers.remove(name);
                        }
                    }]
                };
            } else {
                footer = {
                    type: "bi.right_vertical_adapt",
                    lgap: 10,
                    items: [{
                        type: "bi.button",
                        text: BI.i18nText("BI-Basic_Close"),
                        level: "ignore",
                        handler: function () {
                            BI.Popovers.remove(name);
                        }
                    }]
                };
            }
            BI.Popovers.create(name, {
                type: "bi.bar_popover",
                header: title,
                body: {
                    type: "bi.flex_center",
                    cls: "bi-custom-alert",
                    items: [{
                        type: "bi.left",
                        items: [{
                            type: "bi.center_adapt",
                            items: [{
                                type: "bi.icon"
                            }],
                            cls: "warning-icon failure-warning-font icon-size-50",
                            width: 80,
                            height: 50
                        }, {
                            type: "bi.vertical",
                            items: [{
                                type: "bi.label",
                                cls: "warning-title",
                                text: warningTitle,
                                textHeight: 24,
                                whiteSpace: "normal",
                                textAlign: "left"
                            }, {
                                type: "bi.label",
                                cls: "content",
                                text: content,
                                textHeight: 24,
                                whiteSpace: "normal",
                                textAlign: "left"
                            }]
                        }]
                    }]
                },
                footer: footer,
                size: "small"
            }).open(name);
        }
    });

    BI.extend(BI.Msg, {
        customWarning: function (title, warningTitle, content, callBack, cancelCallback) {
            var name = BI.UUID();
            BI.Popovers.create(name, {
                type: "bi.bar_popover",
                size: "small",
                header: title,
                body: {
                    type: "bi.flex_center",
                    cls: "bi-custom-alert",
                    items: [{
                        type: "bi.left",
                        items: [{
                            type: "bi.center_adapt",
                            items: [{
                                type: "bi.icon"
                            }],
                            cls: "warning-icon failure-warning-font icon-size-50",
                            width: 80,
                            height: 50
                        }, {
                            type: "bi.center_adapt",
                            items: [{
                                type: "bi.vertical",
                                items: [{
                                    type: "bi.label",
                                    cls: "warning-title",
                                    text: warningTitle,
                                    textHeight: BI.isEmptyString(warningTitle) ? 0 : 24,
                                    whiteSpace: "normal",
                                    textAlign: "left"
                                },{
                                    type: "bi.label",
                                    cls: "content",
                                    text: content,
                                    textHeight: 24,
                                    whiteSpace: "normal",
                                    textAlign: "left"
                                }]
                            }],
                            height: 50
                        }]
                    }]
                },
                footer: {
                    type: "bi.right_vertical_adapt",
                    lgap: 10,
                    items: [{
                        type: "bi.button",
                        text: BI.i18nText("BI-Basic_Cancel"),
                        level: "ignore",
                        handler: function () {
                            BI.Popovers.remove(name);
                            cancelCallback && cancelCallback();
                        }
                    }, {
                        type: "bi.button",
                        text: BI.i18nText("BI-Basic_Sure"),
                        handler: function () {
                            BI.Popovers.remove(name);
                            callBack && callBack();
                        }
                    }]
                },
                listeners: [{
                    eventName: "EVENT_CLOSE",
                    action: function () {
                        BI.Popovers.remove(name);
                        cancelCallback && cancelCallback();
                    }
                }]
            }).open(name);
        }
    });
})();
/**
 * 表关联树
 *
 * Created by GUY on 2015/12/15.
 * @class BI.BranchRelation
 * @extends BI.Widget
 */
BI.BranchRelation = BI.inherit(BI.Widget, {

    _defaultConfig: function () {
        return BI.extend(BI.BranchRelation.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-branch-relation-tree",
            items: [],

            centerOffset: 0, // 重心偏移量
            direction: BI.Direction.Bottom,
            align: BI.VerticalAlign.Top
        });
    },

    _init: function () {
        BI.BranchRelation.superclass._init.apply(this, arguments);
        this.populate(this.options.items);
    },

    // 树分层
    _stratification: function () {
        var levels = [];
        this.tree.recursion(function (node, route) {
            // node.isRoot = route.length <= 1;
            node.leaf = node.isLeaf();
            if (!levels[route.length - 1]) {
                levels[route.length - 1] = [];
            }
            levels[route.length - 1].push(node);
        });
        return levels;
    },

    // 计算所有节点的叶子结点个数
    _calculateLeaves: function () {
        var count = 0;

        function track (node) {
            var c = 0;
            if (node.isLeaf()) {
                return 1;
            }
            BI.each(node.getChildren(), function (i, child) {
                c += track(child);
            });
            node.set("leaves", c);
            return c;
        }

        count = track(this.tree.getRoot());
        return count;
    },

    // 树平移
    _translate: function (levels) {
        var adjust = [];
        var maxLevel = levels.length;
        BI.each(levels, function (i, nodes) {
            if (!adjust[i]) {
                adjust[i] = [];
            }
            BI.each(nodes, function (j, node) {
                if (node.isLeaf() && i < maxLevel - 1) {
                    var newNode = new BI.Node(BI.UUID());
                    // newNode.isEmptyRoot = node.isRoot || node.isEmptyRoot;
                    newNode.isNew = true;
                    // 把node向下一层移
                    var tar = 0;
                    if (j > 0) {
                        var c = nodes[j - 1].getLastChild();
                        tar = levels[i + 1].indexOf(c) + 1;
                    }
                    levels[i + 1].splice(tar, 0, node);
                    // 新增一个临时树节点
                    var index = node.parent.getChildIndex(node.id);
                    node.parent.removeChildByIndex(index);
                    node.parent.addChild(newNode, index);
                    newNode.addChild(node);
                    adjust[i].push(newNode);
                    nodes[j] = newNode;
                } else {
                    adjust[i].push(node);
                }
            });
        });
        return adjust;
    },

    // 树补白
    _fill: function (levels) {
        var adjust = [];
        var maxLevel = levels.length;
        BI.each(levels, function (i, nodes) {
            if (!adjust[i]) {
                adjust[i] = [];
            }
            BI.each(nodes, function (j, node) {
                if (node.isLeaf() && i < maxLevel - 1) {
                    var newNode = new BI.Node(BI.UUID());
                    newNode.leaf = true;
                    newNode.width = node.width;
                    newNode.height = node.height;
                    newNode.isNew = true;
                    // 把node向下一层移
                    var tar = 0;
                    if (j > 0) {
                        var c = nodes[j - 1].getLastChild();
                        tar = levels[i + 1].indexOf(c) + 1;
                    }
                    levels[i + 1].splice(tar, 0, newNode);
                    // 新增一个临时树节点
                    node.addChild(newNode);
                }
                adjust[i].push(node);
            });
        });
        return adjust;
    },

    // 树调整
    _adjust: function (adjust) {
        while (true) {
            var isAllNeedAjust = false;
            BI.backEach(adjust, function (i, nodes) {
                BI.each(nodes, function (j, node) {
                    if (!node.isNew) {
                        var needAdjust = true;
                        BI.any(node.getChildren(), function (k, n) {
                            if (!n.isNew) {
                                needAdjust = false;
                                return true;
                            }
                        });
                        if (!node.isLeaf() && needAdjust === true) {
                            var allChilds = [];
                            BI.each(node.getChildren(), function (k, n) {
                                allChilds = allChilds.concat(n.getChildren());
                            });
                            node.removeAllChilds();
                            BI.each(allChilds, function (k, c) {
                                node.addChild(c);
                            });
                            var newNode = new BI.Node(BI.UUID());
                            // newNode.isEmptyRoot = node.isRoot || node.isEmptyRoot;
                            newNode.isNew = true;
                            var index = node.parent.getChildIndex(node.id);
                            node.parent.removeChildByIndex(index);
                            node.parent.addChild(newNode, index);
                            newNode.addChild(node);
                            isAllNeedAjust = true;
                        }
                    }
                });
            });
            if (isAllNeedAjust === false) {
                break;
            } else {// 树重构
                adjust = this._stratification();
            }
        }
        return adjust;
    },

    _calculateWidth: function () {
        var o = this.options;
        var width = 0;

        function track1 (node) {
            var w = 0;
            if (node.isLeaf()) {
                return node.width;
            }
            BI.each(node.getChildren(), function (i, child) {
                w += track1(child);
            });
            return w;
        }

        function track2 (node) {
            var w = 0;
            if (node.isLeaf()) {
                return node.height;
            }
            BI.each(node.getChildren(), function (i, child) {
                w += track2(child);
            });
            return w;
        }

        if (this._isVertical()) {
            width = track1(this.tree.getRoot());
        } else {
            width = track2(this.tree.getRoot());
        }

        return width;
    },

    _isVertical: function () {
        var o = this.options;
        return o.direction === BI.Direction.Top || o.direction === BI.Direction.Bottom;
    },

    _calculateHeight: function () {
        var o = this.options;
        var height = 0;

        function track1 (node) {
            var h = 0;
            BI.each(node.getChildren(), function (i, child) {
                h = Math.max(h, track1(child));
            });
            return h + (node.height || 0);
        }

        function track2 (node) {
            var h = 0;
            BI.each(node.getChildren(), function (i, child) {
                h = Math.max(h, track2(child));
            });
            return h + (node.width || 0);
        }

        if (this._isVertical()) {
            height = track1(this.tree.getRoot());
        } else {
            height = track2(this.tree.getRoot());
        }
        return height;
    },

    _calculateXY: function (levels) {
        var o = this.options;
        var width = this._calculateWidth();
        var height = this._calculateHeight();
        var levelCount = levels.length;
        var allLeavesCount = this._calculateLeaves();
        // 计算坐标
        var xy = {};
        var levelHeight = height / levelCount;
        BI.each(levels, function (i, nodes) {
            // 计算权重
            var weights = [];
            BI.each(nodes, function (j, node) {
                weights[j] = (node.get("leaves") || 1) / allLeavesCount;
            });
            BI.each(nodes, function (j, node) {
                // 求前j个元素的权重
                var weight = BI.sum(weights.slice(0, j));
                // 求坐标
                var x = weight * width + weights[j] * width / 2;
                var y = i * levelHeight + levelHeight / 2;
                xy[node.id] = {x: x, y: y};
            });
        });
        return xy;
    },

    _stroke: function (levels, xy) {
        var height = this._calculateHeight();
        var levelCount = levels.length;
        var levelHeight = height / levelCount;
        var self = this, o = this.options;
        switch (o.direction) {
            case BI.Direction.Top:
                BI.each(levels, function (i, nodes) {
                    BI.each(nodes, function (j, node) {
                        if (node.getChildrenLength() > 0 && !node.leaf) {
                            var path = "";
                            var start = xy[node.id];
                            var split = start.y + levelHeight / 2;
                            path += "M" + start.x + "," + (start.y + o.centerOffset) + "L" + start.x + "," + split;
                            var end = [];
                            BI.each(node.getChildren(), function (t, c) {
                                var e = end[t] = xy[c.id];
                                path += "M" + e.x + "," + (e.y + o.centerOffset) + "L" + e.x + "," + split;
                            });
                            if (end.length > 0) {
                                path += "M" + BI.first(end).x + "," + split + "L" + BI.last(end).x + "," + split;
                            }
                            self.svg.path(path).attr("stroke", "#d4dadd");
                        }
                    });
                });
                break;
            case BI.Direction.Bottom:
                BI.each(levels, function (i, nodes) {
                    BI.each(nodes, function (j, node) {
                        if (node.getChildrenLength() > 0 && !node.leaf) {
                            var path = "";
                            var start = xy[node.id];
                            var split = start.y - levelHeight / 2;
                            path += "M" + start.x + "," + (start.y - o.centerOffset) + "L" + start.x + "," + split;
                            var end = [];
                            BI.each(node.getChildren(), function (t, c) {
                                var e = end[t] = xy[c.id];
                                path += "M" + e.x + "," + (e.y - o.centerOffset) + "L" + e.x + "," + split;
                            });
                            if (end.length > 0) {
                                path += "M" + BI.first(end).x + "," + split + "L" + BI.last(end).x + "," + split;
                            }
                            self.svg.path(path).attr("stroke", "#d4dadd");
                        }
                    });
                });
                break;
            case BI.Direction.Left:
                BI.each(levels, function (i, nodes) {
                    BI.each(nodes, function (j, node) {
                        if (node.getChildrenLength() > 0 && !node.leaf) {
                            var path = "";
                            var start = xy[node.id];
                            var split = start.y + levelHeight / 2;
                            path += "M" + (start.y + o.centerOffset) + "," + start.x + "L" + split + "," + start.x;
                            var end = [];
                            BI.each(node.getChildren(), function (t, c) {
                                var e = end[t] = xy[c.id];
                                path += "M" + (e.y + o.centerOffset) + "," + e.x + "L" + split + "," + e.x;
                            });
                            if (end.length > 0) {
                                path += "M" + split + "," + BI.first(end).x + "L" + split + "," + BI.last(end).x;
                            }
                            self.svg.path(path).attr("stroke", "#d4dadd");
                        }
                    });
                });
                break;
            case BI.Direction.Right:
                BI.each(levels, function (i, nodes) {
                    BI.each(nodes, function (j, node) {
                        if (node.getChildrenLength() > 0 && !node.leaf) {
                            var path = "";
                            var start = xy[node.id];
                            var split = start.y - levelHeight / 2;
                            path += "M" + (start.y - o.centerOffset) + "," + start.x + "L" + split + "," + start.x;
                            var end = [];
                            BI.each(node.getChildren(), function (t, c) {
                                var e = end[t] = xy[c.id];
                                path += "M" + (e.y - o.centerOffset) + "," + e.x + "L" + split + "," + e.x;
                            });
                            if (end.length > 0) {
                                path += "M" + split + "," + BI.first(end).x + "L" + split + "," + BI.last(end).x;
                            }
                            self.svg.path(path).attr("stroke", "#d4dadd");
                        }
                    });
                });
                break;
        }
    },

    _createBranches: function (levels) {
        var self = this, o = this.options;
        if (o.direction === BI.Direction.Bottom || o.direction === BI.Direction.Right) {
            levels = levels.reverse();
        }
        var xy = this._calculateXY(levels);
        // 画图
        this._stroke(levels, xy);
    },

    _isNeedAdjust: function () {
        var o = this.options;
        return o.direction === BI.Direction.Top && o.align === BI.VerticalAlign.Bottom || o.direction === BI.Direction.Bottom && o.align === BI.VerticalAlign.Top
            || o.direction === BI.Direction.Left && o.align === BI.HorizontalAlign.Right || o.direction === BI.Direction.Right && o.align === BI.HorizontalAlign.Left;
    },

    setValue: function (value) {

    },

    getValue: function () {

    },

    populate: function (items) {
        var self = this, o = this.options;
        o.items = items || [];
        this.empty();
        items = BI.Tree.transformToTreeFormat(o.items);
        this.tree = new BI.Tree();
        this.tree.initTree(items);

        this.svg = BI.createWidget({
            type: "bi.svg"
        });

        // 树分层
        var levels = this._stratification();

        if (this._isNeedAdjust()) {
            // 树平移
            var adjust = this._translate(levels);
            // 树调整
            adjust = this._adjust(adjust);

            this._createBranches(adjust);
        } else {
            var adjust = this._fill(levels);

            this._createBranches(adjust);
        }

        var container = BI.createWidget({
            type: "bi.layout",
            width: this._isVertical() ? this._calculateWidth() : this._calculateHeight(),
            height: this._isVertical() ? this._calculateHeight() : this._calculateWidth()
        });
        BI.createWidget({
            type: "bi.absolute",
            element: container,
            items: [{
                el: this.svg,
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            }]
        });
        if (this._isVertical()) {
            items = [{
                type: "bi.handstand_branch_tree",
                expander: {
                    direction: o.direction
                },
                el: {
                    layouts: [{
                        type: "bi.horizontal_adapt",
                        verticalAlign: o.align
                    }]
                },
                items: items
            }];
        } else {
            items = [{
                type: "bi.branch_tree",
                expander: {
                    direction: o.direction
                },
                el: {
                    layouts: [{
                        type: "bi.vertical"
                    }, {
                        type: o.align === BI.HorizontalAlign.Left ? "bi.left" : "bi.right"
                    }]
                },
                items: items
            }];
        }
        BI.createWidget({
            type: "bi.adaptive",
            element: container,
            items: items
        });
        BI.createWidget({
            type: "bi.center_adapt",
            scrollable: true,
            element: this,
            items: [container]
        });
    }
});
BI.BranchRelation.EVENT_CHANGE = "BranchRelation.EVENT_CHANGE";
BI.shortcut("bi.branch_relation", BI.BranchRelation);/**
 * 倒立的Branch
 * @class BI.HandStandBranchExpander
 * @extend BI.Widget
 * create by young
 */
BI.HandStandBranchExpander = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.HandStandBranchExpander.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-handstand-branch-expander",
            direction: BI.Direction.Top,
            logic: {
                dynamic: true
            },
            el: {type: "bi.label"},
            popup: {}
        });
    },

    _init: function () {
        BI.HandStandBranchExpander.superclass._init.apply(this, arguments);
        var o = this.options;
        this._initExpander();
        this._initBranchView();
        BI.createWidget(BI.extend({
            element: this
        }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
            items: BI.LogicFactory.createLogicItemsByDirection(o.direction, {
                type: "bi.center_adapt",
                items: [this.expander]
            }, this.branchView)
        }))));
    },

    _initExpander: function () {
        var self = this, o = this.options;
        this.expander = BI.createWidget(o.el);
        this.expander.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    _initBranchView: function () {
        var self = this, o = this.options;
        this.branchView = BI.createWidget(o.popup, {});
        this.branchView.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    populate: function (items) {
        this.branchView.populate.apply(this.branchView, arguments);
    },

    getValue: function () {
        return this.branchView.getValue();
    }
});
BI.HandStandBranchExpander.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.handstand_branch_expander", BI.HandStandBranchExpander);/**
 * @class BI.BranchExpander
 * @extend BI.Widget
 * create by young
 */
BI.BranchExpander = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.BranchExpander.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-branch-expander",
            direction: BI.Direction.Left,
            logic: {
                dynamic: true
            },
            el: {},
            popup: {}
        });
    },

    _init: function () {
        BI.BranchExpander.superclass._init.apply(this, arguments);
        var o = this.options;
        this._initExpander();
        this._initBranchView();
        BI.createWidget(BI.extend({
            element: this
        }, BI.LogicFactory.createLogic(BI.LogicFactory.createLogicTypeByDirection(o.direction), BI.extend({}, o.logic, {
            items: BI.LogicFactory.createLogicItemsByDirection(o.direction, this.expander, this.branchView)
        }))));
    },

    _initExpander: function () {
        var self = this, o = this.options;
        this.expander = BI.createWidget(o.el, {
            type: "bi.label",
            width: 30,
            height: "100%"
        });
        this.expander.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    _initBranchView: function () {
        var self = this, o = this.options;
        this.branchView = BI.createWidget(o.popup, {});
        this.branchView.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    populate: function (items) {
        this.branchView.populate.apply(this.branchView, arguments);
    },

    getValue: function () {
        return this.branchView.getValue();
    }
});
BI.BranchExpander.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.branch_expander", BI.BranchExpander);/**
 * @class BI.HandStandBranchTree
 * @extends BI.Widget
 * create by young
 * 横向分支的树
 */
BI.HandStandBranchTree = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.HandStandBranchTree.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-handstand-branch-tree",
            expander: {},
            el: {},
            items: []
        });
    },
    _init: function () {
        BI.HandStandBranchTree.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.branchTree = BI.createWidget({
            type: "bi.custom_tree",
            element: this,
            expander: BI.extend({
                type: "bi.handstand_branch_expander",
                el: {},
                popup: {
                    type: "bi.custom_tree"
                }
            }, o.expander),
            el: BI.extend({
                type: "bi.button_tree",
                chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                layouts: [{
                    type: "bi.horizontal_adapt"
                }]
            }, o.el),
            items: this.options.items
        });
        this.branchTree.on(BI.CustomTree.EVENT_CHANGE, function () {
            self.fireEvent(BI.HandStandBranchTree.EVENT_CHANGE, arguments);
        });
        this.branchTree.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    populate: function () {
        this.branchTree.populate.apply(this.branchTree, arguments);
    },

    getValue: function () {
        return this.branchTree.getValue();
    }
});
BI.HandStandBranchTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.handstand_branch_tree", BI.HandStandBranchTree);/**
 * @class BI.BranchTree
 * @extends BI.Widget
 * create by young
 * 横向分支的树
 */
BI.BranchTree = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.BranchTree.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-branch-tree",
            expander: {},
            el: {},
            items: []
        });
    },
    _init: function () {
        BI.BranchTree.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.branchTree = BI.createWidget({
            type: "bi.custom_tree",
            element: this,
            expander: BI.extend({
                type: "bi.branch_expander",
                el: {},
                popup: {
                    type: "bi.custom_tree"
                }
            }, o.expander),
            el: BI.extend({
                type: "bi.button_tree",
                chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                layouts: [{
                    type: "bi.vertical"
                }]
            }, o.el),
            items: this.options.items
        });
        this.branchTree.on(BI.CustomTree.EVENT_CHANGE, function () {
            self.fireEvent(BI.BranchTree.EVENT_CHANGE, arguments);
        });
        this.branchTree.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
    },

    populate: function () {
        this.branchTree.populate.apply(this.branchTree, arguments);
    },

    getValue: function () {
        return this.branchTree.getValue();
    }
});
BI.BranchTree.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.branch_tree", BI.BranchTree);/**
 * Created by Urthur on 2018/2/1.
 */
!(function () {
    var Chart = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-component-chart"
        },

        render: function () {
            this.isSetOptions = false;
            this.vanCharts = VanCharts.init(this.element[0]);
        },


        populate: function (options) {
            var self = this;

            if (this.isSetOptions) {
                this.vanCharts.setData(options);
                return;
            }

            var setOptions = function () {
                self.vanCharts.setOptions(options);
                self.isSetOptions = true;
            };
            BI.nextTick(setOptions);
        }
    });
    BI.shortcut("bi.component.chart", Chart);
}());
/**
 * 新建并选中某个分组按钮
 *
 * Created by GUY on 2015/9/25.
 * @class BI.Copy2GroupAddButton
 * @extends BI.BasicButton
 */
BI.Copy2GroupAddButton = BI.inherit(BI.BasicButton, {

    props: {
        baseCls: "bi-copy2group-add-button",
        shadow: true,
        isShadowShowingOnSelected: true,
        height: 30
    },

    render: function () {
        var self = this, o = this.options;

        BI.createWidget({
            type: "bi.htape",
            items: [{
                el: {
                    type: "bi.icon_button",
                    cls: "move2group-add-font"
                },
                width: 30
            }, {
                el: {
                    ref: function (_ref) {
                        self.text = _ref;
                    },
                    type: "bi.label",
                    textAlign: "left",
                    text: BI.i18nText("BI-Create_And_Select") + "\"江苏\"",
                    height: o.height
                }
            }]
        });
    },

    setValue: function (v) {
        this.text.setValue(BI.i18nText("BI-Create_And_Select") + "\"" + v + "\"");
        this.setTitle(BI.i18nText("BI-Create_And_Select") + "\"" + v + "\"", {
            container: "body"
        });
    },

    doClick: function () {
        BI.Copy2GroupAddButton.superclass.doClick.apply(this, arguments);
        if (this.isValid()) {
            this.fireEvent(BI.Copy2GroupAddButton.EVENT_CHANGE);
        }
    }
});
BI.Copy2GroupAddButton.EVENT_CHANGE = "Copy2GroupAddButton.EVENT_CHANGE";
BI.shortcut("bi.copy2group_add_button", BI.Copy2GroupAddButton);
/**
 * guy
 * 复选导航条
 * Created by GUY on 2015/9/25.
 * @class BI.Copy2GroupBar
 * @extends BI.Widget
 */
BI.Copy2GroupBar = BI.inherit(BI.Widget, {
    props: {
        extraCls: "bi-copy2group-bar"
    },
    render: function () {
        var self = this;

        return {
            type: "bi.vertical",
            element: this,
            vgap: 5,
            hgap: 5,
            items: [{
                ref: function (_ref) {
                    self.search = _ref;
                },
                type: "bi.text_editor",
                watermark: BI.i18nText("BI-Basic_Search_Group"),
                allowBlank: true,
                listeners: [{
                    eventName: BI.Controller.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_CHANGE,
                    action: function () {
                        self.button.setValue(this.getValue());
                        if(this.getValue() !== "") {
                            self.fireEvent(BI.Copy2GroupBar.EVENT_CHANGE);
                        }
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_EMPTY,
                    action: function () {
                        self.button.invisible();
                        self.fireEvent(BI.Copy2GroupBar.EVENT_EMPTY);
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_START,
                    action: function () {
                        self.button.visible();
                        self.fireEvent(BI.Copy2GroupBar.EVENT_START);
                    }
                }]
            }, {
                ref: function (_ref) {
                    self.button = _ref;
                },
                type: "bi.copy2group_add_button",
                listeners: [{
                    eventName: BI.Copy2GroupAddButton.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent(BI.Copy2GroupBar.EVENT_CLICK_BUTTON);
                    }
                }]
            }]
        };
    },

    mounted: function () {
        this.button.invisible();
    },

    blur: function () {
        this.search.blur();
    },

    setButtonVisible: function (b) {
        this.button.setVisible(b);
    },

    getValue: function () {
        return this.search.getValue();
    },

    setValue: function (v) {
        this.search.setValue(v);
        this.button.setValue(v);
    }
});
BI.Copy2GroupBar.EVENT_CHANGE = "Copy2GroupBar.EVENT_CHANGE";
BI.Copy2GroupBar.EVENT_START = "Copy2GroupBar.EVENT_START";
BI.Copy2GroupBar.EVENT_EMPTY = "Copy2GroupBar.EVENT_EMPTY";
BI.Copy2GroupBar.EVENT_CLICK_BUTTON = "Copy2GroupBar.EVENT_CLICK_BUTTON";
BI.shortcut("bi.copy2group_bar", BI.Copy2GroupBar);
/**
 * 复制到分组下拉框
 *
 * Created by GUY on 2015/9/25.
 * @class BI.Copy2GroupCombo
 * @extends BI.Widget
 */
BI.Copy2GroupCombo = BI.inherit(BI.Single, {
    props: {
        baseCls: "bi-copy2group-combo",
        height: 30,
        tipType: "warning",
        items: []
    },

    render: function () {
        var self = this, o = this.options;

        this.popup = this._createPopup(this.options.items);

        return {
            type: "bi.combo",
            isNeedAdjustWidth: false,
            el: {
                ref: function (_ref) {
                    self.trigger = _ref;
                },
                type: "bi.group_trigger",
                iconClass: "custom-copy-group-font",
                text: BI.i18nText("BI-Basic_Copy_To_Group"),
                height: o.height
            },
            popup: {
                ref: function (_ref) {
                    self.multipopup = _ref;
                },
                type: "bi.multi_popup_view",
                width: 200,
                stopPropagation: false,
                el: this.popup,
                tool: {
                    ref: function (_ref) {
                        self.searcher = _ref;
                    },
                    type: "bi.searcher",
                    el: {
                        ref: function (_ref) {
                            self.tools = _ref;
                        },
                        type: "bi.copy2group_bar",
                        listeners: [{
                            eventName: BI.Copy2GroupBar.EVENT_CHANGE,
                            action: function () {
                                // 5.0中去除了复制并添加的功能
                                // this.setButtonVisible(!self.searcher.hasMatched());
                                this.setButtonVisible(false);
                                self.combo.adjustHeight();
                                self.searcher.adjustHeight();
                            }
                        }, {
                            eventName: BI.Copy2GroupBar.EVENT_CLICK_BUTTON,
                            action: function () {
                                self.fireEvent(BI.Copy2GroupCombo.EVENT_CLICK_BUTTON);
                                self.searcher.stopSearch();
                            }
                        }, {
                            eventName: BI.Copy2GroupBar.EVENT_EMPTY,
                            action: function () {
                                self.combo.adjustHeight();
                            }
                        }, {
                            eventName: BI.Copy2GroupBar.EVENT_START,
                            action: function () {
                                self.combo.adjustHeight();
                                self.searcher.adjustHeight();
                            }
                        }]
                    },
                    chooseType: BI.Selection.Multi,
                    adapter: this.popup,
                    listeners: [{
                        eventName: BI.Searcher.EVENT_CHANGE,
                        action: function () {

                        }
                    }]
                },
                listeners: [{
                    eventName: BI.MultiPopupView.EVENT_CLICK_TOOLBAR_BUTTON,
                    action: function (value) {
                        switch (value) {
                            case 0 :
                                self.fireEvent(BI.Copy2GroupCombo.EVENT_CONFIRM);
                                self.combo.hideView();
                                break;
                            default :
                                break;
                        }
                    }
                }]
            },
            ref: function (_ref) {
                self.combo = _ref;
            },
            listeners: [{
                eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                action: function () {
                    self.fireEvent(BI.Copy2GroupCombo.EVENT_BEFORE_POPUPVIEW);
                }
            }, {
                eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
                action: function () {
                    self.searcher.stopSearch();
                }
            }]
        };
    },

    _init: function () {
        BI.Copy2GroupCombo.superclass._init.apply(this, arguments);

    },

    _createItems: function (items) {
        return BI.createItems(items, {
            type: "bi.multi_select_item",
            height: 25,
            handler: function () {}
        });
    },

    _createPopup: function (items, opt) {
        return BI.createWidget(BI.extend({
            type: "bi.button_group",
            items: this._createItems(items),
            chooseType: 1,
            layouts: [{
                type: "bi.vertical"
            }]
        }, opt));
    },


    scrollToBottom: function () {
        var self = this;
        BI.delay(function () {
            self.popup.element.scrollTop(BI.MAX);
        }, 30);
    },

    populate: function (items) {
        this.options.items = items;
        this.combo.populate(this._createItems(items));
    },

    setValue: function (v) {
        this.combo.setValue(v);
        this.searcher.setValue(v);
    },

    getTargetValue: function () {
        return this.tools.getValue();
    },

    getValue: function () {
        return this.searcher.getValue();
    }
});
BI.Copy2GroupCombo.EVENT_BEFORE_POPUPVIEW = "Copy2GroupCombo.EVENT_BEFORE_POPUPVIEW";
BI.Copy2GroupCombo.EVENT_CHANGE = "Copy2GroupCombo.EVENT_CHANGE";
BI.Copy2GroupCombo.EVENT_CONFIRM = "Copy2GroupCombo.EVENT_CONFIRM";
BI.Copy2GroupCombo.EVENT_CLICK_BUTTON = "Copy2GroupCombo.EVENT_CLICK_BUTTON";
BI.shortcut("bi.copy2group_combo", BI.Copy2GroupCombo);
/**
 * @Author: Young
 * @CreationDate 2018-01-11 15:00
 * @Description
 */
!(function () {
    var Combo = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-field-type-combo",
            value: BICst.COLUMN.STRING,
            height: 30,
            tip: false,
            tipText: ""
        },
        mounted: function () {
            if (BI.isKey(this.options.value))  {
                this.combo.setValue(this.options.value);
            }
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                adjustLength: 2,
                trigger: "",
                el: this._createTrigger(),
                popup: {
                    type: "bi.bubble_bar_popup_view",
                    el: {
                        type: "bi.vertical_adapt",
                        items: [{
                            type: "bi.label",
                            text: o.tipText,
                            textAlign: "left",
                            width: 300
                        }],
                        width: 300,
                        height: 100,
                        hgap: 20
                    },
                    buttons: [{
                        value: BI.i18nText("BI-Basic_Cancel"),
                        level: "ignore",
                        handler: function () {
                            self.outerCombo.hideView();
                        }
                    },{
                        value: BI.i18nText("BI-Basic_Sure"),
                        handler: function () {
                            self.combo.showView();
                            self.outerCombo.hideView();
                        }
                    }],
                    minWidth: 300,
                    maxHeight: 120
                },
                ref: function (ref) {
                    self.outerCombo = ref;
                }
            };
        },

        _createItems: function () {
            return [{
                text: BI.Utils.getTextByFieldType(BICst.COLUMN.STRING),
                value: BICst.COLUMN.STRING,
                iconCls: BI.Utils.getIconByFieldType(BICst.COLUMN.STRING)
            }, {
                text: BI.Utils.getTextByFieldType(BICst.COLUMN.NUMBER),
                value: BICst.COLUMN.NUMBER,
                iconCls: BI.Utils.getIconByFieldType(BICst.COLUMN.NUMBER)
            }, {
                text: BI.Utils.getTextByFieldType(BICst.COLUMN.DATE),
                value: BICst.COLUMN.DATE,
                iconCls: BI.Utils.getIconByFieldType(BICst.COLUMN.DATE)
            }];
        },

        _createTrigger: function () {
            var self = this;
            var items = this._createItems();
            var o = this.options;
            return {
                type: "bi.combo",
                trigger: "",
                el: {
                    type: "bi.component.field_type_combo.trigger",
                    items: items,
                    height: o.height + 2,
                    text: o.text,
                    value: o.value,
                    title: o.title,
                    tipType: o.tipType,
                    warningTitle: o.warningTitle,
                    cls: "field-type-trigger",
                    handler: BI.bind(self._click, self)
                },
                popup: {
                    el: {
                        type: "bi.icon_text_value_combo_popup",
                        items: items,
                        value: o.value,
                        listeners: [{
                            eventName: BI.IconTextValueCombo.EVENT_CHANGE,
                            action: function () {
                                self.setValue(this.getValue());
                                self.combo.hideView();
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }, {
                            eventName: BI.Controller.EVENT_CHANGE,
                            action: function () {
                                self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                            }
                        }]
                    },
                    maxHeight: 300
                },
                ref: function (_ref) {
                    self.combo = _ref;
                }
            };
        },

        _click: function () {
            var o = this.options;
            if(o.tip === true) {
                if(this.combo.isViewVisible() || this.outerCombo.isViewVisible()) {
                    this.combo.hideView();
                    this.outerCombo.hideView();
                }else {
                    this.outerCombo.showView();
                }
            }else {
                if(this.combo.isViewVisible()) {
                    this.combo.hideView();
                }else {
                    this.combo.showView();
                }
            }
        },

        getValue: function () {
            return this.combo.getValue();
        },
        setValue: function (v) {
            this.combo.setValue(v);
        }
    });
    BI.shortcut("bi.component.field_type_combo", Combo);
})();
/**
 * Created by lei.wang on 2018/6/25.
 */
(function () {

    var Widget = BI.inherit(BI.BasicButton, {
        render: function () {
            var o = this.options, self = this;
            return {
                type: "bi.select_icon_text_trigger",
                items: o.items,
                height: o.height + 2,
                text: o.text,
                value: o.value,
                title: o.title,
                tipType: o.tipType,
                warningTitle: o.warningTitle,
                ref: function (_ref) {
                    self.trigger = _ref;
                }
            };
        },

        setValue: function (value) {
            this.trigger.setValue(value);
        }

    });
    BI.shortcut("bi.component.field_type_combo.trigger", Widget);
}());
/**
 * Created by GUY on 2016/4/25.
 *
 * @class BI.FormulaCombo
 * @extend BI.Widget
 */
!(function () {
    var Combo = BI.inherit(BI.Widget, {

        _constant: {
            POPUP_HEIGHT: 450,
            POPUP_WIDTH: 600,
            POPUP_V_GAP: 10,
            POPUP_H_GAP: 10,
            ADJUST_LENGTH: 2,
            HEIGHT_MAX: 10000,
            MAX_HEIGHT: 500,
            MAX_WIDTH: 600,
            COMBO_TRIGGER_WIDTH: 300,
            $point: null
        },

        props: {
            baseCls: "bi-formula-combo",
            height: 30,
            items: [],
            errorFieldItems: [],
            formulaInvalid: false,
            value: ""
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                isNeedAdjustWidth: false,
                adjustLength: this._constant.ADJUST_LENGTH,
                el: {
                    type: "bi.formula_combo_trigger",
                    height: o.height,
                    items: o.items,
                    value: o.value,
                    tipType: o.tipType,
                    keyword: o.keyword,
                    warningTitle: o.warningTitle,
                    errorFieldItems: o.errorFieldItems,
                    formulaInvalid: o.formulaInvalid,
                    text: BI.Func.getFormulaStringFromFormulaValue(o.value),
                    ref: function (_ref) {
                        self.input = _ref;
                    }
                },
                popup: {
                    el: {
                        type: "bi.absolute",
                        height: this._constant.HEIGHT_MAX,
                        width: this._constant.POPUP_WIDTH,
                        items: [{
                            el: {
                                type: "bi.formula_combo_popup",
                                fieldItems: o.items,
                                errorFieldItems: o.errorFieldItems,
                                $point: o.$point,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.setValue(self.formulaPopup.getValue());
                                        self.formulaInputCombo.hideView();
                                        self.fireEvent(Combo.EVENT_CHANGE);
                                    }
                                }, {
                                    eventName: "EVENT_VALUE_CANCEL",
                                    action: function () {
                                        self.formulaInputCombo.hideView();
                                    }
                                }],
                                ref: function (_ref) {
                                    self.formulaPopup = _ref;
                                }
                            },
                            top: this._constant.POPUP_V_GAP,
                            left: this._constant.POPUP_H_GAP,
                            right: this._constant.POPUP_V_GAP,
                            bottom: 0
                        }]
                    },
                    stopPropagation: false,
                    maxHeight: this._constant.MAX_HEIGHT,
                    width: this._constant.MAX_WIDTH
                },
                listeners: [{
                    eventName: BI.Combo.EVENT_AFTER_POPUPVIEW,
                    action: function () {
                        self.formulaPopup.setValue(self.input.getValue());
                    }
                }, {
                    eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                    action: function () {
                        self.formulaPopup.setValue(self.input.getValue());
                    }
                }],
                ref: function (_ref) {
                    self.formulaInputCombo = _ref;
                }
            };
        },

        setValue: function (v) {
            if (this.formulaInputCombo.isViewVisible()) {
                this.formulaInputCombo.hideView();
            }
            this.input.setValue(v);
        },

        getFormulaTargetIds: function () {
            return this.formulaPopup.getFormulaTargetIds();
        },

        getValue: function () {
            return this.input.getValue();
        }
    });
    Combo.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.formula_combo", Combo);
}());
/**
 * Created by GUY on 2016/4/25.
 *
 * @class BI.FormulaComboPopup
 * @extend BI.Widget
 */
!(function () {
    var Popup = BI.inherit(BI.Widget, {

        _constant: {
            BUTTON_HEIGHT: 24,
            SOUTH_HEIGHT: 44,
            SOUTH_H_GAP: 10
        },

        props: {
            baseCls: "bi-formula-pane-popup",
            errorFieldItems: []
        },

        beforeInit: function (callback) {
            BI.Utils.getFormulaDetails({}, function () {
                callback();
            });
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.new_formula_insert",
                        errorFieldItems: o.errorFieldItems,
                        fieldItems: o.fieldItems,
                        listeners: [{
                            eventName: BI.NewFormulaInsert.EVENT_VALID,
                            action: function () {
                                self.confirmButton.setEnable(true);
                            }
                        }, {
                            eventName: BI.NewFormulaInsert.EVENT_ERROR,
                            action: function () {
                                self.confirmButton.setEnable(false);
                            }
                        }],
                        ref: function (_ref) {
                            self.formula = _ref;
                        }
                    },
                    height: "fill"
                }, {
                    el: {
                        type: "bi.right_vertical_adapt",
                        height: this._constant.SOUTH_HEIGHT,
                        items: [{
                            type: "bi.button",
                            level: "ignore",
                            height: this._constant.BUTTON_HEIGHT,
                            text: BI.i18nText("BI-Basic_Cancel"),
                            listeners: [{
                                eventName: BI.Button.EVENT_CHANGE,
                                action: function () {
                                    self.setValue(self.oldValue);
                                    self.fireEvent(Popup.EVENT_VALUE_CANCEL);
                                }
                            }]
                        }, {
                            type: "bi.button",
                            level: "common",
                            height: this._constant.BUTTON_HEIGHT,
                            text: BI.i18nText("BI-Basic_OK"),
                            listeners: [{
                                eventName: BI.Button.EVENT_CHANGE,
                                action: function () {
                                    self.fireEvent(Popup.EVENT_CHANGE);
                                }
                            }],
                            ref: function (_ref) {
                                self.confirmButton = _ref;
                            }
                        }],
                        lgap: this._constant.SOUTH_H_GAP
                    },
                    height: this._constant.SOUTH_HEIGHT
                }]
            };
        },

        getFormulaTargetIds: function () {
            return this.formula.getUsedFields();
        },

        getValue: function () {
            return this.formula.getValue();
        },

        setValue: function (v) {
            this.oldValue = v;
            this.formula.setValue(v);
        }
    });
    Popup.EVENT_CHANGE = "EVENT_CHANGE";
    Popup.EVENT_VALUE_CANCEL = "EVENT_VALUE_CANCEL";
    BI.shortcut("bi.formula_combo_popup", Popup);
}());
/**
 * Created by GUY on 2016/4/25.
 *
 * @class BI.FormulaComboTrigger
 * @extend BI.Widget
 */
!(function () {
    var Trigger = BI.inherit(BI.Trigger, {
        props: {
            baseCls: "bi-formula-combo-trigger",
            height: 30,
            items: [],
            errorFieldItems: [],
            formulaInvalid: false,
            value: ""
        },

        render: function () {
            var self = this, o = this.options;
            var item = this._getFormulaTextItem(o.value);
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.warning_label",
                        height: 17,
                        textAlign: "left",
                        text: item.text,
                        title: item.title,
                        tipType: item.tipType,
                        ref: function (_ref) {
                            self.editor = _ref;
                        }
                    },
                    tgap: 6,
                    lgap: 5
                }]
            };
        },

        _getFormulaTextItem: function (formulaValue) {
            var self = this, o = this.options;
            if(o.formulaInvalid === true) {
                return this._getFormulaTextWithoutFormulaInvalid(formulaValue);
            }else if(BI.isEmptyArray(o.errorFieldItems)) {
                return self._getFormulaTextWithoutError(formulaValue);
            }
            return self._getFormulaTextWithError(formulaValue);
        },

        /**
         * 处理不存在错误信息的公式
         * @param formulaValue 公式值
         */
        _getFormulaTextWithoutError: function (formulaValue) {
            var self = this;
            var result = this._splitFormulaValue(formulaValue);
            var formulaText = "";
            BI.each(result, function (i, item) {
                var fieldRegx = /\$[\{][^\}]*[\}]/;
                var str = item.match(fieldRegx);
                if (BI.isNotEmptyArray(str)) {
                    var id = str[0].substring(2, item.length - 1);
                    var field = self._getFieldFromItems(id);
                    formulaText += BI.isNull(field) ? id : field.text;
                } else {
                    formulaText += item;
                }
            });

            return {
                text: formulaText,
                title: formulaText,
                tipType: "success"
            };
        },


        /**
         * 处理公式不合法情况
         */
        _getFormulaTextWithoutFormulaInvalid: function (formulaValue) {
            var result = this._getFormulaTextWithoutError(formulaValue);
            return {
                tipType: "warning",
                title: BI.i18nText("BI-Basic_Formula_Invalid"),
                text: "<font color='#ff4949'>" + result.text + "</font>"
            };
        },

        /**
         * 处理存在错误信息的公式值，仅标红错误的字段名
         * 现在交互的逻辑是:
         * 如果同时存在字段丢失和字段类型改变,显示字段丢失,不显示字段改变
         * 等到解决了字段丢失之后才显示字段改变
         * @param formulaValue 公式值
         */
        _getFormulaTextWithError: function (formulaValue) {
            var self = this, o = this.options;
            var formulaItems = this._splitFormulaValue(formulaValue);
            var displayItem = [];
            var errorFieldItems = o.errorFieldItems;
            var errorFieldNames = [];
            BI.each(formulaItems, function (idx, item) {
                var fieldRegx = /\$[\{][^\}]*[\}]/;
                var str = item.match(fieldRegx);
                if(BI.isNotEmptyArray(str)) {
                    var id = str[0].substring(2, item.length - 1);
                    var find = self._getFieldFromErrorItems(id, errorFieldItems);
                    if(BI.isNotNull(find)) {
                        errorFieldNames.push(find.text);
                        displayItem.push(find.text);
                    }else {
                        find = self._getFieldFromItems(id);
                        var text = BI.isNull(find) ? id : find.text;
                        displayItem.push(text);
                    }
                }else {
                    displayItem.push(item);
                }
            });

            var title = "";
            var tipType = "";
            if(BI.isEmptyArray(errorFieldNames)) {
                title = displayItem.join("");
                tipType = "success";
            }else {
                title = errorFieldNames.join(",");
                title = title + BI.i18nText("BI-Conf_FieldName_Missing");
                tipType = "warning";
            }
            var text = "";
            BI.each(displayItem, function (idx, item) {
                var error = errorFieldNames.indexOf(item) !== -1;
                text += !error ? item : "<font color='#ff4949'>" + item + "</font>";
            });
            return {
                text: text,
                title: title,
                tipType: tipType
            };
        },

        _getFieldFromErrorItems: function (fieldId, errorFieldItems) {
            return BI.find(errorFieldItems, function (idx, item) {
                return item.value === fieldId;
            });
        },

        _getFieldFromItems: function (fieldId) {
            return BI.find(BI.flatten(this.options.items), function (i, item) {
                return fieldId === item.value;
            });
        },

        _splitFormulaValue: function (formulaValue) {
            var regx = /\$[\{][^\}]*[\}]|\w*\w|\$\{[^\$\(\)\+\-\*\/)\$,]*\w\}|\$\{[^\$\(\)\+\-\*\/]*\w\}|\$\{[^\$\(\)\+\-\*\/]*[\u4e00-\u9fa5]\}|\w|(.)/g;
            return formulaValue.match(regx);
        },

        getValue: function () {
            return this.options.value;
        },

        setValue: function (v) {
            this.options.value = v;
            var item = this._getFormulaTextItem(v);
            this.editor.setText(item.text);
            this.editor.setTitle(item.title);
            this.editor.attr("tipType", item.tipType);
        }
    });
    BI.shortcut("bi.formula_combo_trigger", Trigger);
}());
/**
 * @Author: Young
 * @CreationDate 2018-01-24 9:33
 * @Description
 */
!(function () {
    var Combo = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-icon-text-warning-combo",
            items: [],
            text: "",
            value: "",
            tipType: "",
            title: "",
            iconCls: "",
            warningTitle: "",
            triggerCls: "",
            isDefaultInit: false
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                adjustLength: 2,
                isDefaultInit: o.isDefaultInit,
                el: {
                    type: "bi.select_icon_text_trigger",
                    items: o.items,
                    height: o.height,
                    text: o.text,
                    iconCls: o.iconCls,
                    value: o.value,
                    title: o.title,
                    tipType: o.tipType,
                    warningTitle: o.warningTitle,
                    cls: o.triggerCls,
                    ref: function () {
                        self.combo = this;
                    }
                },
                popup: {
                    el: {
                        type: "bi.icon_text_value_combo_popup",
                        items: o.items,
                        value: o.value,
                        ref: function () {
                            self.comboPopup = this;
                        },
                        listeners: [{
                            eventName: BI.IconTextValueCombo.EVENT_CHANGE,
                            action: function () {
                                self.setValue(this.getValue());
                                self.combo.hideView();
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }]
                    },
                    maxHeight: 300
                },
                ref: function (ref) {
                    self.combo = ref;
                },
                listeners: [{
                    eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
                    action: function () {
                        self.fireEvent("EVENT_HIDE");
                    }
                }]
            };
        },

        getValue: function () {
            var value = this.combo.getValue();
            return BI.isNull(value) ? [] : (BI.isArray(value) ? value : [value]);
        },

        populate: function (items) {
            this.options.items = items;
            this.comboPopup.populate(items);
            this.combo.populate(items);
            this.combo.setValue(this.options.value);
        }
    });
    BI.shortcut("bi.component.icon_text_warning_combo", Combo);
})();/**
 * author: young
 * createdDate: 2018/5/19
 * description: icon_text_warning_combo + tree_popup
 */
!(function () {
    var Combo = BI.inherit(BI.Single, {
        props: {
            value: "",
            text: "",
            title: "",
            warningTitle: "",
            iconCls: "",
            items: [{
                text: "",
                value: "",
                children: []
            }],
            width: 120,
            height: 24
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                adjustLength: 2,
                el: {
                    type: "bi.select_icon_text_trigger",
                    items: o.items,
                    height: o.height,
                    text: o.text,
                    value: o.value,
                    title: o.title,
                    iconCls: o.iconCls,
                    tipType: o.tipType,
                    warningTitle: o.warningTitle,
                    cls: o.triggerCls,
                    ref: function (ref) {
                        self.trigger = ref;
                    }
                },
                popup: {
                    el: {
                        type: "bi.custom_tree",
                        value: o.value,
                        items: this._createItems(),
                        listeners: [{
                            eventName: BI.CustomTree.EVENT_CHANGE,
                            action: function () {
                                self.trigger.setValue(this.getValue());
                                self.combo.hideView();
                                self.fireEvent("EVENT_CHANGE", this.getValue()[0]);
                            }
                        }]
                    }
                },
                ref: function (ref) {
                    self.combo = ref;
                }
            };
        },

        _createItems: function () {
            var items = [];
            // 当前只支持一层树
            BI.each(this.options.items, function (i, item) {
                var id = BI.UUID();
                items.push({
                    id: id,
                    text: item.text,
                    value: item.value,
                    type: "bi.arrow_group_node",
                    open: item.open
                });
                if (BI.isNotEmptyArray(item.children)) {
                    BI.each(item.children, function (i, child) {
                        items.push({
                            id: BI.UUID(),
                            pId: id,
                            text: child.text,
                            value: child.value,
                            type: "bi.multilayer_icon_tree_leaf_item",
                            iconCls: child.iconCls,
                            layer: 1
                        });
                    });
                }
            });
            return items;
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        getValue: function () {
            return this.combo.getValue();
        },

        populate: function (items) {
            this.options.items = items;
            this.combo.populate(this._createItems());
        }
    });
    BI.shortcut("bi.components.icon_text_warning_tree_combo", Combo);
})();(function () {
    /**
     * 单选框
     * Created by GameJian on 2016/1/28.
     */
    var constants = {
        RADIO_ITEMS: [{
            text: BI.i18nText("BI-Basic_Original_Size"),
            title: BI.i18nText("BI-Basic_Original_Size"),
            cls: "radio-text",
            width: 65,
            selected: true,
            value: BICst.IMAGE_SIZE.ORIGINAL
        }, {
            text: BI.i18nText("BI-Basic_Equal_Size_Adapt"),
            title: BI.i18nText("BI-Basic_Equal_Size_Adapt"),
            cls: "radio-text",
            width: 75,
            value: BICst.IMAGE_SIZE.EQUAL
        }, {
            text: BI.i18nText("BI-Basic_Widget_Size_Adapt"),
            title: BI.i18nText("BI-Basic_Widget_Size_Adapt"),
            cls: "radio-text",
            width: 75,
            value: BICst.IMAGE_SIZE.WIDGET_SIZE
        }]
    };

    var ImageButtonSize = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-image-button-size",
            width: 230,
            value: BICst.IMAGE_SIZE.ORIGINAL
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.left",
                items: [{
                    ref: function (_ref) {
                        self.sizeChooser = _ref;
                    },
                    value: o.value,
                    type: "bi.button_group",
                    scrollable: false,
                    items: BI.map(constants.RADIO_ITEMS, function (i, item) {
                        return BI.extend(item, {
                            type: "bi.single_select_radio_item",
                            hgap: 5
                        });
                    }),
                    layouts: [{
                        type: "bi.left"
                    }],
                    listeners: [{
                        eventName: BI.Controller.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                        }
                    }, {
                        eventName: BI.ButtonGroup.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(ImageButtonSize.EVENT_CHANGE, arguments);
                        }
                    }]
                }],
                hgap: 5
            };
        },

        getValue: function () {
            return this.sizeChooser.getValue()[0];
        },

        setValue: function (v) {
            this.sizeChooser.setValue(v);
        }
    });

    ImageButtonSize.EVENT_CHANGE = "ImageButtonSize.EVENT_CHANGE";
    BI.shortcut("bi.image_button_size", ImageButtonSize);
})();
(function () {
    /**
     * 图片尺寸控件
     * Created by GameJian on 2016/1/28.
     */
    var ImageButtonSizeCombo = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-image-button-size-combo",
            title: BI.i18nText("BI-Basic_Image_Size")
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.combo",
                ref: function (_ref) {
                    self.combo = _ref;
                },
                isNeedAdjustWidth: false,
                direction: "top",
                adjustYOffset: 3,
                offsetStyle: "right",
                el: {
                    type: "bi.icon_button",
                    ref: function (_ref) {
                        self.trigger = _ref;
                    },
                    cls: "image-size-font",
                    title: o.title,
                    width: 24,
                    height: 24
                },
                popup: {
                    el: {
                        type: "bi.image_button_size",
                        ref: function (_ref) {
                            self.sizeChooser = _ref;
                        },
                        value: o.value,
                        listeners: [{
                            eventName: "ImageButtonSize.EVENT_CHANGE",
                            action: function () {
                                self.fireEvent(ImageButtonSizeCombo.EVENT_CHANGE, arguments);
                            }
                        }]
                    },
                    stopPropagation: false
                }
            };
        },

        setValue: function (v) {
            this.sizeChooser.setValue(v);
        },

        getValue: function () {
            return this.sizeChooser.getValue();
        }
    });
    ImageButtonSizeCombo.EVENT_CHANGE = "ImageButtonSizeCombo.EVENT_CHANGE";
    BI.shortcut("bi.image_button_size_combo", ImageButtonSizeCombo);
})();
/**
 * @author: Teller
 * @createdAt: 2018/8/1 下午5:27
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.BasicButton, {

        props: {
            baseCls: "bi-move-copy-group-trigger cursor-pointer",
            iconClass: "pack-move-font-blue",
            text: BI.i18nText("BI-Basic_Move_To_Group"),
            height: 24
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vertical_adapt",
                height: o.height,
                items: [{
                    type: "bi.icon_change_button",
                    iconCls: o.iconClass,
                    clear: true,
                    width: 16,
                    ref: function (_ref) {
                        self.triggerIcon = _ref;
                    }
                }, {
                    el: {
                        type: "bi.label",
                        text: o.text
                    },
                    lgap: 5
                }, {
                    type: "bi.icon_label",
                    cls: "common-pull-down-font"
                }]
            };
        },

        setValue: function () {}
    });
    BI.shortcut("bi.group_trigger", Widget);
})();
/**
 * 新建并选中某个分组按钮
 *
 * Created by GUY on 2015/9/25.
 * @class BI.Move2GroupAddButton
 * @extends BI.BasicButton
 */
BI.Move2GroupAddButton = BI.inherit(BI.BasicButton, {

    props: {
        baseCls: "bi-move2group-add-button",
        shadow: true,
        isShadowShowingOnSelected: true,
        height: 30
    },

    render: function () {
        var self = this,  o = this.options;
        this.text = BI.createWidget();
        return {
            type: "bi.htape",
            items: [{
                el: {
                    type: "bi.icon_button",
                    cls: "move2group-add-font"
                },
                width: 30
            }, {
                el: {
                    type: "bi.label",
                    textAlign: "left",
                    text: BI.i18nText("BI-Create_And_Move_To") + "\"江苏\"",
                    height: o.height,
                    ref: function (_ref) {
                        self.text = _ref;
                    }
                }
            }]
        };
    },

    setValue: function (v) {
        this.text.setValue(BI.i18nText("BI-Create_And_Move_To") + "\"" + v + "\"");
        this.setTitle(BI.i18nText("BI-Create_And_Move_To") + "\"" + v + "\"", {
            container: "body"
        });
    },

    doClick: function () {
        BI.Move2GroupAddButton.superclass.doClick.apply(this, arguments);
        if (this.isValid()) {
            this.fireEvent(BI.Move2GroupAddButton.EVENT_CHANGE);
        }
    }
});
BI.Move2GroupAddButton.EVENT_CHANGE = "Move2GroupAddButton.EVENT_CHANGE";
BI.shortcut("bi.move2group_add_button", BI.Move2GroupAddButton);
/**
 * guy
 * 复选导航条
 * Created by GUY on 2015/9/25.
 * @class BI.Move2GroupBar
 * @extends BI.Widget
 */
BI.Move2GroupBar = BI.inherit(BI.Widget, {
    props: {
        extraCls: "bi-move2group-bar"
    },

    render: function () {
        var self = this;

        return {
            type: "bi.vertical",
            vgap: 5,
            hgap: 5,
            items: [{
                type: "bi.text_editor",
                watermark: BI.i18nText("BI-Basic_Search_Group"),
                allowBlank: true,
                ref: function (_ref) {
                    self.search = _ref;
                },
                listeners: [{
                    eventName: BI.Controller.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_START,
                    action: function () {
                        self.button.visible();
                        self.fireEvent(BI.Move2GroupBar.EVENT_START);
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_EMPTY,
                    action: function () {
                        self.button.invisible();
                        self.fireEvent(BI.Move2GroupBar.EVENT_EMPTY);
                    }
                }, {
                    eventName: BI.TextEditor.EVENT_CHANGE,
                    action: function () {
                        self.button.setValue(this.getValue());
                        if (this.getValue() !== "") {
                            self.fireEvent(BI.Move2GroupBar.EVENT_CHANGE);
                        }
                    }
                }]
            }, {
                type: "bi.move2group_add_button",
                ref: function (_ref) {
                    self.button = _ref;
                },
                listeners: [{
                    eventName: BI.Move2GroupAddButton.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent(BI.Move2GroupBar.EVENT_CLICK_BUTTON);
                    }
                }]
            }]
        };
    },

    mounted: function () {
        this.button.invisible();
    },

    blur: function () {
        this.search.blur();
    },

    setButtonVisible: function (b) {
        this.button.setVisible(b);
    },

    getValue: function () {
        return this.search.getValue();
    },

    setValue: function (v) {
        this.search.setValue(v);
        this.button.setValue(v);
    }
});
BI.Move2GroupBar.EVENT_START = "Move2GroupBar.EVENT_START";
BI.Move2GroupBar.EVENT_EMPTY = "Move2GroupBar.EVENT_EMPTY";
BI.Move2GroupBar.EVENT_CHANGE = "Move2GroupBar.EVENT_CHANGE";
BI.Move2GroupBar.EVENT_CLICK_BUTTON = "Move2GroupBar.EVENT_CLICK_BUTTON";
BI.shortcut("bi.move2group_bar", BI.Move2GroupBar);
/**
 * 移动到分组下拉框
 *
 * Created by GUY on 2015/9/25.
 * @class BI.Move2GroupCombo
 * @extends BI.Widget
 */
BI.Move2GroupCombo = BI.inherit(BI.Single, {
    props: {
        baseCls: "bi-move2group-combo",
        height: 30,
        tipType: "warning",
        items: []
    },

    render: function () {
        var self = this, o = this.options;

        this.popup = this._createPopup(this.options.items);

        return {
            type: "bi.combo",
            el: {
                type: "bi.group_trigger",
                height: o.height,
                title: o.title
            },
            isNeedAdjustWidth: false,
            popup: {
                width: 200,
                stopPropagation: false,
                el: this.popup,
                tool: {
                    type: "bi.searcher",
                    el: {
                        type: "bi.move2group_bar",
                        ref: function (_ref) {
                            self.tools = _ref;
                        },
                        listeners: [{
                            eventName: BI.Move2GroupBar.EVENT_START,
                            action: function () {
                                self.combo.adjustHeight();
                                self.searcher.adjustHeight();
                            }
                        }, {
                            eventName: BI.Move2GroupBar.EVENT_EMPTY,
                            action: function () {
                                self.combo.adjustHeight();
                            }
                        }, {
                            eventName: BI.Move2GroupBar.EVENT_CLICK_BUTTON,
                            action: function () {
                                self.fireEvent(BI.Move2GroupCombo.EVENT_CLICK_NEW_BUTTON);
                                self.searcher.stopSearch();
                                self.combo.hideView();
                            }
                        }, {
                            eventName: BI.Move2GroupBar.EVENT_CHANGE,
                            action: function () {
                                // 5.0中去除了添加分组并移入的功能
                                // this.setButtonVisible(!self.searcher.hasMatched());
                                this.setButtonVisible(false);
                                self.combo.adjustHeight();
                                self.searcher.adjustHeight();
                            }
                        }]
                    },
                    adapter: this.popup,
                    ref: function (_ref) {
                        self.searcher = _ref;
                    },
                    listeners: [{
                        eventName: BI.Searcher.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(BI.Move2GroupCombo.EVENT_CONFIRM);
                            self.combo.hideView();
                        }
                    }]
                }
            },
            ref: function (_ref) {
                self.combo = _ref;
            },
            listeners: [{
                eventName: BI.Combo.EVENT_CHANGE,
                action: function () {
                    self.combo.hideView();
                    self.fireEvent(BI.Move2GroupCombo.EVENT_CONFIRM);
                }
            }, {
                eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                action: function () {
                    self.fireEvent(BI.Move2GroupCombo.EVENT_BEFORE_POPUPVIEW);
                }
            }, {
                eventName: BI.Combo.EVENT_AFTER_HIDEVIEW,
                action: function () {
                    self.searcher.stopSearch();
                }
            }]
        };
    },

    _createItems: function (items) {
        return BI.createItems(items, {
            type: "bi.single_select_item",
            height: 25,
            handler: function () {}
        });
    },

    _createPopup: function (items, opt) {
        return BI.createWidget(BI.extend({
            type: "bi.button_group",
            items: this._createItems(items),
            chooseType: 0,
            layouts: [{
                type: "bi.vertical"
            }]
        }, opt));
    },

    populate: function (items) {
        this.options.items = items;
        this.combo.populate(this._createItems(items));
    },

    setValue: function (v) {
        this.combo.setValue(v);
    },

    getTargetValue: function () {
        return this.tools.getValue();
    },

    getValue: function () {
        var value = this.searcher.getValue();
        return value[0];

    }
});
BI.Move2GroupCombo.EVENT_BEFORE_POPUPVIEW = "Move2GroupCombo.EVENT_BEFORE_POPUPVIEW";
BI.Move2GroupCombo.EVENT_CHANGE = "Move2GroupCombo.EVENT_CHANGE";
BI.Move2GroupCombo.EVENT_CONFIRM = "Move2GroupCombo.EVENT_CONFIRM";
BI.Move2GroupCombo.EVENT_CLICK_NEW_BUTTON = "Move2GroupCombo.EVENT_CLICK_NEW_BUTTON";
BI.shortcut("bi.move2group_combo", BI.Move2GroupCombo);
/**
 * @author: Teller
 * @createdAt: 2018/2/8 下午7:39
 * @Description
 */

!(function () {
    var constants = {
        COMBO_LINE_HEIGHT: 24,
        VGAP: 10,
        LABEL_WIDTH: 58,
        EDITOR_WIDTH: 150,
        LGAP: 5
    };

    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-component-custom-group-number-auto",
            space: ""
        },

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.number.auto");
        },

        watch: {
            lengthText: function (lengthText) {
                this.lengthLabel.setValue(lengthText);
            },

            groupInterval: function (groupInterval) {
                this.spaceEditor.setValue(groupInterval);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                vgap: constants.VGAP,
                items: [{
                    type: "bi.htape",
                    height: constants.COMBO_LINE_HEIGHT,
                    items: [{
                        el: {
                            type: "bi.vertical_adapt",
                            items: [{
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Group_Space"),
                                textAlign: "left"
                            }]
                        },
                        width: constants.LABEL_WIDTH
                    }, {
                        type: "bi.editor",
                        value: this.model.groupInterval,
                        ref: function () {
                            self.spaceEditor = this;
                        },
                        validationChecker: function (v) {
                            return BI.isNumeric(v) && v > 0;
                        },
                        errorText: BI.i18nText("BI-Conf_Please_Input_Positive_Number"),
                        listeners: [{
                            eventName: BI.SignEditor.EVENT_CONFIRM,
                            action: function () {
                                self.store.setGroupInterval(self.getValue());
                            }
                        }],
                        cls: "bi-border",
                        height: constants.COMBO_LINE_HEIGHT
                    }]
                }, {
                    type: "bi.left",
                    vgap: constants.VGAP,
                    items: [{
                        type: "bi.layout",
                        width: constants.LABEL_WIDTH,
                        height: constants.COMBO_LINE_HEIGHT
                    }, {
                        type: "bi.label",
                        cls: "group-count",
                        textAlign: "left",
                        ref: function () {
                            self.lengthLabel = this;
                        },
                        text: this.model.lengthText
                    }]
                }]
            };
        },

        getValue: function () {
            return this.spaceEditor.getValue();
        }
    });
    BI.shortcut("bi.component.custom_group.number.auto", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/1/23 下午3:07
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        context: ["lengthText", "groupInterval", "groupLength"],

        actions: {
            setGroupInterval: function (v) {
                this.model.groupInterval = parseFloat(v);
            }
        }
    });
    BI.model("bi.model.component.custom_group.number.auto", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/8 下午7:24
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {
        props: {
            editorWidth: 148,
            intervalWidth: 315
        },

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.number.custom");
        },

        watch: {
            customItems: function (customItems) {
                this.listPane.populate(this._mapItems(customItems));

                if (BI.size(customItems) === 0) {
                    this.store.setValidText(BI.i18nText("BI-Conf_Save_After_Add_Group"));
                } else {
                    this._checkIntervalsValid();
                }
            },

            rangeValidates: function () {
                var self = this;

                if (BI.isNull(this.numberIntervals)) return;

                BI.each(this.model.rangeValidates, function (index, valid) {
                    var nodeId = self.model.nodes[index].id;

                    var isCurrentValid = self.numberIntervals[nodeId].isStateValid();

                    if (isCurrentValid && !valid) {
                        self.numberIntervals[nodeId].showError();
                    } else {
                        self.numberIntervals[nodeId].hideError();
                    }
                });
            },

            nodeSize: function (newSize, oldSize) {
                var self = this;

                if (newSize - oldSize === 1) {
                    BI.defer(function () {
                        self.listPane.element.scrollTop(BI.MAX);
                    });
                }
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.list_pane",
                    ref: function () {
                        self.listPane = this;
                    },
                    el: {
                        type: "bi.virtual_group",
                        chooseType: BI.ButtonGroup.CHOOSE_TYPE_NONE,
                        ref: function () {
                            self.buttonGroup = this;
                        },
                        layouts: [{
                            type: "bi.vertical"
                        }]
                    },
                    items: this._mapItems(this.model.customItems)
                }, {
                    height: 30,
                    el: {
                        type: "bi.vertical_adapt",
                        lgap: 5,
                        items: [{
                            type: "bi.checkbox",
                            selected: this.model.useOther !== false,
                            ref: function () {
                                self.checkbox = this;
                            },
                            listeners: [{
                                eventName: BI.Checkbox.EVENT_CHANGE,
                                action: function () {
                                    var selected = self.checkbox.isSelected();
                                    self.editor.setEnable(selected);
                                    self.store.setUseOther(self._getEditorValue());
                                }
                            }]
                        }, {
                            type: "bi.label",
                            cls: "bi-tips",
                            value: BI.i18nText("BI-Basic_Left_Number_Values")
                        }, {
                            type: "bi.editor",
                            cls: "bi-border",
                            value: this.model.useOther || BI.i18nText("BI-Basic_Others"),
                            width: 100,
                            height: 22,
                            disabled: this.model.useOther === false,
                            ref: function () {
                                self.editor = this;
                            },
                            listeners: [{
                                eventName: BI.Editor.EVENT_CHANGE,
                                action: function () {
                                    self.store.setUseOther(self._getEditorValue());
                                }
                            }]
                        }]
                    }
                }]
            };
        },

        addGroup: function () {
            this.store.addGroup();
        },

        _getEditorValue: function () {
            var selected = this.checkbox.isSelected();

            return selected ? this.editor.getValue() : false;
        },

        _mapItems: function (items) {
            var self = this, o = this.options;

            if (BI.isNull(this.numberIntervals)) {
                this.numberIntervals = {};
            }

            return BI.map(items, function (index, customItem) {
                return BI.extend(customItem, {
                    editorWidth: o.editorWidth,
                    intervalWidth: o.intervalWidth,
                    ref: function (_ref) {
                        self.numberIntervals[customItem.id] = _ref;
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function (value) {
                            self.store.setNodesByIndex(index, value);

                            self._checkIntervalsValid();
                        }
                    }, {
                        eventName: "EVENT_DELETE_GROUP",
                        action: function () {
                            self.store.deleteGroupById(customItem.id);
                        }
                    }, {
                        eventName: "EVENT_ERROR",
                        action: function () {
                            self.store.setValidText(BI.i18nText("BI-Conf_Save_After_Fix_Error"));
                        }
                    }]
                });
            });
        },

        _checkIntervalsValid: function () {
            var self = this;

            // 这一步校验是否有非范围重叠的错误
            var valid = !BI.some(this.numberIntervals, function (id, numberInterval) {
                if (!BI.contains(self.model.nodeIds, id)) return false;

                return !numberInterval.isStateValid();
            });

            if (valid) {
                valid = valid && this.store.checkRangeValidation();
            }

            this.store.setValidText(valid ? "" : BI.i18nText("BI-Conf_Save_After_Fix_Error"));
        }
    });

    BI.shortcut("bi.component.custom_group.number.custom", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/8 下午7:13
 * @Description
*/

!(function () {
    var getDefaultName = function (nodes) {
        return BI.i18nText("BI-Basic_Group") + (nodes.length + 1);
    };

    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                rangeValidates: []
            };
        },

        context: ["customItems", "validText", "useOther", "nodes"],

        computed: {
            nodeSize: function () {
                return BI.size(this.model.nodes);
            },

            nodeIds: function () {
                return BI.map(this.model.nodes, "id");
            }
        },

        actions: {
            setValidText: function (v) {
                this.model.validText = v;
            },

            setUseOther: function (v) {
                this.model.useOther = v;
            },
            setNodesByIndex: function (index, value) {
                this.model.nodes[index] = value;
            },
            addGroup: function () {
                var defaultSpace = 100;
                var length = BI.size(this.model.nodes);

                if (length === 0) {
                    this.model.nodes.push({
                        id: BI.UUID(),
                        min: 0,
                        max: defaultSpace,
                        groupName: getDefaultName(this.model.nodes),
                        closeMin: true,
                        closeMax: false,
                        valid: true
                    });
                } else {
                    var lastMax = parseFloat(this.model.nodes[length - 1].max);
                    this.model.nodes.push({
                        id: BI.UUID(),
                        min: lastMax,
                        max: lastMax + defaultSpace,
                        groupName: getDefaultName(this.model.nodes),
                        closeMin: true,
                        closeMax: false,
                        valid: true
                    });
                }
            },
            deleteGroupById: function (id) {
                var index = BI.findIndex(this.model.nodes, function (i, node) {
                    return node.id === id;
                });

                if (index === -1) return;

                this.model.nodes.splice(index, 1);
            },

            checkRangeValidation: function () {
                var self = this;
                var length = BI.size(this.model.nodes);
                var results = BI.makeArray(length, true);

                for (var i = 0; i < length - 1; i++) {
                    for (var j = i + 1; j < length; j++) {
                        if (!results[j]) continue;

                        var interval1 = self.model.nodes[i];
                        var interval2 = self.model.nodes[j];

                        var case1 = false;
                        var case2 = false;

                        if (interval1.closeMax && interval2.closeMin) {
                            case1 = parseFloat(interval2.min) <= parseFloat(interval1.max);
                        } else {
                            case1 = parseFloat(interval2.min) < parseFloat(interval1.max);
                        }

                        if (interval1.closeMin && interval2.closeMax) {
                            case2 = parseFloat(interval1.min) <= parseFloat(interval2.max);
                        } else {
                            case2 = parseFloat(interval1.min) < parseFloat(interval2.max);
                        }

                        results[j] = results[j] && !(case1 && case2);
                    }
                }

                this.model.rangeValidates = results;

                return !BI.contains(results, false);
            }
        }
    });
    BI.model("bi.model.component.custom_group.number.custom", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/8 下午7:28
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.number.custom_pane");
        },

        watch: {
            addButtonValid: function (addButtonValid) {
                this.addButton.setEnable(addButtonValid);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.panel",
                title: BI.i18nText("BI-Basic_Custom_Grouping_Dot"),
                titleButtons: [{
                    type: "bi.icon_text_item",
                    ref: function (_ref) {
                        self.addButton = _ref;
                    },
                    cls: "custom-add-group-font",
                    readonly: true,
                    clear: true,
                    height: 16,
                    width: 74,
                    disabled: !this.model.addButtonValid,
                    text: BI.i18nText("BI-Basic_Add_Group"),
                    handler: function () {
                        self.custom.addGroup();
                    }
                }],
                el: {
                    type: "bi.component.custom_group.number.custom",
                    ref: function (_ref) {
                        self.custom = _ref;
                    }
                }
            };
        }
    });
    BI.shortcut("bi.component.custom_group.number.custom_pane", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/5/7 下午2:38
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        context: ["validText", "nodes"],

        computed: {
            addButtonValid: function () {
                // 为空时要可添加
                return BI.isEmptyArray(this.model.nodes) || BI.isEmptyString(this.model.validText);
            }
        }
    });
    BI.model("bi.model.component.custom_group.number.custom_pane", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/1/15 下午2:30
 * @Description
 */

!(function () {
    var Widget = BI.inherit(BI.Single, {
        props: {
            min: 0,
            max: 0,
            closeMin: true,
            closeMax: false,
            itemHeight: 24,
            editorWidth: 147,
            intervalWidth: 320,
            baseCls: "bi-component-custom-group-number-item"
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                height: 40,
                items: [{
                    el: {
                        type: "bi.vertical",
                        cls: "bi-bubble",
                        invisible: true,
                        items: [{
                            type: "bi.label",
                            cls: "bubble-error",
                            text: BI.i18nText("BI-Basic_Range_Cannot_Be_Crossed")
                        }],
                        ref: function (_ref) {
                            self.error = _ref;
                        }
                    },
                    top: -20,
                    left: 250
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        items: [{
                            type: "bi.sign_editor",
                            cls: "bi-border",
                            value: o.groupName,
                            width: o.editorWidth,
                            height: o.itemHeight,
                            rgap: 15,
                            lgap: 10,
                            ref: function () {
                                self.groupName = this;
                            },
                            listeners: [{
                                eventName: BI.SignEditor.EVENT_CONFIRM,
                                action: function () {
                                    self.fireEvent("EVENT_CHANGE", self.getValue(), self);
                                }
                            }]
                        }, {
                            ref: function () {
                                self.numberInterval = this;
                            },
                            type: "bi.number_interval",
                            min: o.min,
                            max: o.max,
                            width: o.intervalWidth,
                            height: o.itemHeight,
                            closeMin: o.closeMin,
                            closeMax: o.closeMax,
                            listeners: [{
                                eventName: BI.NumberInterval.EVENT_CHANGE,
                                action: function () {
                                    self.fireEvent("EVENT_CHANGE", self.getValue(), self);
                                }
                            }, {
                                eventName: BI.NumberInterval.EVENT_ERROR,
                                action: function () {
                                    self.fireEvent("EVENT_ERROR");
                                }
                            }, {
                                eventName: BI.NumberInterval.EVENT_VALID,
                                action: function () {
                                    self.fireEvent("EVENT_VALID");
                                }
                            }]
                        }, {
                            type: "bi.icon_button",
                            cls: "close-font",
                            width: 18,
                            height: o.itemHeight,
                            handler: function () {
                                self.fireEvent("EVENT_DELETE_GROUP");
                            }
                        }]
                    }, top: 0, right: 0, bottom: 0, left: 0
                }]
            };
        },

        isStateValid: function () {
            return this.numberInterval.isStateValid();
        },

        showNumTip: function () {
            this.numberInterval.showNumTip();
        },

        getValue: function () {
            return BI.extend(this.numberInterval.getValue(), {
                id: this.options.id,
                groupName: this.groupName.getValue(),
                valid: true
            });
        },

        showError: function () {
            this.error.setVisible(true);

            // 如果要combo里面的trigger要变红需要添加一个class或者再用一个默认有class的combo
            // this.numberInterval.element.addClass("number-error");
        },

        hideError: function () {
            this.error.setVisible(false);
        }
    });
    BI.shortcut("bi.component.custom_group.number.item", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/1/15 下午1:36
 * @Description
 */

!(function () {
    var getDefaultName = function (nodes) {
        return BI.i18nText("BI-Basic_Group") + (nodes.length + 1);
    };

    var Model = BI.inherit(Fix.Model, {
        state: function () {
            var o = this.options;
            var value = o.value || {};

            var useOther = BI.i18nText("BI-Basic_Others");

            if (BI.isEmptyString(value.useOther)) {
                useOther = false;
            } else if (BI.isNotEmptyString(value.useOther)) {
                useOther = value.useOther;
            }

            return {
                type: o.type,
                max: undefined,
                min: undefined,
                useOther: useOther,
                nodes: value.nodes || null,
                interval: "",
                groupInterval: value.groupInterval || "",
                validText: ""
            };
        },

        watch: {
            gen: {
                handler: function (gen) {
                    var interval = BI.parseFloat(gen.genMax.sub(gen.genMin)).div(5);

                    if (interval === 0) interval = 2;
                    this.model.interval = interval;

                    if (this.model.groupInterval === "") {
                        this.model.groupInterval = this.model.interval;
                    }

                    if (BI.isNull(this.model.nodes)) {
                        var current = gen.genMin;
                        var nodes = [];
                        var min, max;
                        while (current + this.model.groupInterval < gen.genMax) {
                            min = current;
                            max = current + this.model.groupInterval;
                            nodes.push({
                                id: BI.UUID(),
                                min: min,
                                max: max,
                                closeMin: true,
                                closeMax: false,
                                groupName: getDefaultName(nodes),
                                valid: true
                            });
                            current += this.model.groupInterval;
                        }

                        if (current <= gen.genMax) {
                            min = current;
                            max = gen.genMax;
                            nodes.push({
                                id: BI.UUID(),
                                min: min,
                                max: max,
                                closeMin: true,
                                closeMax: true,
                                groupName: getDefaultName(nodes),
                                valid: true
                            });
                        }

                        this.model.nodes = nodes;
                    }

                },
                sync: true
            }
        },

        computed: {
            gen: function () {
                return BI.Services.getService("bi.service.component.custom_group.number").calcInterval.apply(this);
            },

            groupLength: function () {
                var length = 1;
                if (!BI.isEmptyString(this.model.groupInterval)) {
                    var minus = parseFloat(this.model.gen.genMax) - parseFloat(this.model.gen.genMin);
                    length = minus === 0 ? 5 : Math.ceil(minus / parseFloat(this.model.groupInterval));
                }
                return length;
            },

            lengthText: function () {
                var text = BI.i18nText("BI-Conf_Already_Divided_Field_To_Groups", this.model.groupLength);
                if (this.model.groupLength > 1000) {
                    text += "，" + BI.i18nText("BI-Conf_Recommend_Less_Than_1000_Groups");
                }
                return text;
            },

            customItems: function () {
                return BI.map(this.model.nodes, function (index, node) {
                    return BI.extend({
                        id: node.id,
                        type: "bi.component.custom_group.number.item",
                        height: 40,
                        max: "",
                        closeMax: true,
                        min: "",
                        closeMin: true,
                        groupName: node.groupName,
                        valid: node.valid
                    }, node);
                });
            }
        },

        childContext: ["lengthText", "groupInterval", "customItems", "validText", "useOther", "nodes", "groupLength"],

        actions: {
            getData: function (callback) {
                var self = this;
                this.options.reqFunc(function (value) {
                    self.setMax(value.max);
                    self.setMin(value.min);

                    if (BI.isFunction(callback)) callback();
                });
            },

            setMax: function (v) {
                this.model.max = v;
            },
            setMin: function (v) {
                this.model.min = v;
            },
            setType: function (v) {
                this.model.type = v;
            }
        }
    });
    BI.model("bi.model.component.custom_group.number", Model);
})();
!(function () {
    var checkMagnifyCount = function (number) {
        var numText = number + "";
        var dotText = numText.split(".")[0];
        return dotText.length;
    };

    var cutSmall = function (val, i) {
        return BI.parseFloat(val.substring(0, i));
    };

    var cutBig = function (val, i) {
        var add = "0.";
        if (val[i] === "0") {
            return BI.parseFloat(val);
        }
        val = val.substring(0, i);
        var length = val.length - 2;
        while (--length > 0) {
            add += "0";
        }
        add += "1";
        if (val[i - 1] === ".") {
            return BI.parseFloat(val).add(1);
        }
        return BI.parseFloat(val).add(BI.parseFloat(add));
    };

    var Service = BI.inherit(BI.OB, {
        calcInterval: function () {
            var min = Math.abs(this.model.min) + "";
            var max = Math.abs(this.model.max) + "";

            var minCount = checkMagnifyCount(min);
            var maxCount = checkMagnifyCount(max);

            var count = minCount > maxCount ? minCount : maxCount;
            var magnify = 1;
            // 缩小补零
            var s = "0.";
            while (count - minCount > 0) {
                s += "0";
                minCount++;
            }
            min = min.replace(".", "");
            min = s + min;
            s = "0.";
            while (count - maxCount > 0) {
                s += "0";
                maxCount++;
            }
            max = max.replace(".", "");
            max = s + max;

            // 后面补零对齐
            var zeros = max.length - min.length;
            if (zeros > 0) {
                while (zeros-- > 0) {
                    min += "0";
                }
            } else {
                while (zeros++ < 0) {
                    max += "0";
                }
            }
            // 截零
            var i = max.length - 1;
            while (min[i] === "0" && max[i] === "0" && this.model.min !== 0 && this.model.max !== 0) {
                i--;
            }

            while (count-- > 0) {
                magnify *= 10;
            }

            // 截位/截位+1
            min = this.model.min < 0 ? -(cutBig(min, i)) : cutSmall(min, i);
            max = this.model.max < 0 ? -(cutSmall(max, i)) : cutBig(max, i);

            // (max - min) / 5
            return {
                genMin: min.mul(magnify),
                genMax: max.mul(magnify)
            };
        }
    });

    BI.service("bi.service.component.custom_group.number", Service);
})();
!(function () {
    var Widget = BI.inherit(BI.BasicButton, {
        props: {
            baseCls: (BI.BasicButton.baseCls || "") + " bi-text-button",
            height: 24,
            textAlign: "center",
            whiteSpace: "nowrap",
            textWidth: null,
            textHeight: null,
            hgap: 0,
            valueRight: "",
            py: "",
            textLeft: "",
            valueLeft: "",
            keywords: "",
            visible: true
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.left",
                items: [{
                    type: "bi.label",
                    cls: "button-label",
                    textAlign: o.textAlign,
                    whiteSpace: o.whiteSpace,
                    textHeight: o.textHeight,
                    height: o.height,
                    lgap: o.hgap,
                    text: o.valueLeft,
                    value: o.valueLeft,
                    py: o.py,
                    ref: function () {
                        self.textLeft = this;
                    }
                }, {
                    type: "bi.label",
                    cls: "button-label bi-tips",
                    textAlign: o.textAlign,
                    whiteSpace: o.whiteSpace,
                    textHeight: o.textHeight,
                    height: o.height,
                    rgap: o.hgap,
                    text: o.textRight,
                    value: o.valueRight,
                    ref: function () {
                        self.textRight = this;
                    }
                }]
            };
        },

        mounted: function () {
            var o = this.options;

            this.doRedMark(o.keywords);

            if (o.valueRight !== "") {
                this.doHighLight();
            }

            this.setVisible(o.visible);
        },

        doClick: function () {
            Widget.superclass.doClick.apply(this, arguments);
        },

        doRedMark: function () {
            this.textLeft.doRedMark.apply(this.textLeft, arguments);
        },

        unRedMark: function () {
            this.textLeft.unRedMark.apply(this.textLeft, arguments);
        },

        doHighLight: function () {
            this.textLeft.doHighLight.apply(this.textLeft, arguments);
            // this.textRight.doHighLight.apply(this.textRight, arguments);
        },

        unHighLight: function () {
            this.textLeft.unHighLight.apply(this.textLeft, arguments);
        },

        getValueLeft: function () {
            return this.textLeft.getValue();
        },

        getValueRight: function () {
            return this.textRight.getValue();
        },

        getValue: function () {
            return this.getValueLeft();
        }
    });

    BI.shortcut("bi.component.custom_group.string.group_expander.button", Widget);
})();
!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            keywords: "",
            validationChecker: BI.emptyFn,
            readonly: false,
            baseCls: "bi-component-custom-group-string-group-expander"
        },

        _getItems: function () {
            var o = this.options;

            var items = [];

            var content = o.group.content;

            if (BI.isNull(content) || BI.isEmptyArray(content)) {
                return [{
                    type: "bi.label",
                    cls: "bi-tips",
                    text: "空",
                    height: 25
                }];
            }

            var paneTypes = BI.Constants.getConstant("bi.constants.component.custom_group.string.paneTypes");
            var isSelectPane = o.paneType === paneTypes.SELECT;

            BI.some(content, function (index, value) {
                // 面板上每個分組最多只展示1000個字段
                if (BI.size(items) >= BICst.MAX_SHOWN_SIZE) return true;

                var valueLeft = value.value;
                var valueRight = value.valueRight || "";

                items.push({
                    type: "bi.component.custom_group.string.group_expander.button",
                    title: isSelectPane ? BI.i18nText("BI-Basic_Click_Cancel_Choose_Field") : valueLeft + valueRight,
                    valueLeft: valueLeft,
                    valueRight: valueRight,
                    selected: value.selected,
                    cls: "item-custom-group bi-list-item-active",
                    hgap: 10,
                    visible: BI.isNull(value.visible) ? true : value.visible,
                    keywords: o.keywords
                });

                return false;
            });

            return items;
        },

        render: function () {
            var self = this, o = this.options;

            var paneTypes = BI.Constants.getConstant("bi.constants.component.custom_group.string.paneTypes");
            var readonly;

            switch (o.paneType) {
                case paneTypes.SEARCH:
                case paneTypes.SELECT:
                    readonly = true;
                    break;
                default:
                    readonly = o.readonly || false;
            }

            return {
                type: "bi.expander",
                isDefaultInit: true,
                el: {
                    type: "bi.component.custom_group.string.group_expander.node",
                    ref: function (_ref) {
                        self.node = _ref;
                    },
                    validationChecker: function (v) {
                        return o.validationChecker(v, self.attr("id"));
                    },
                    errorText: o.errorText,
                    cls: "bi-border-bottom " + (readonly ? "readonly" : ""),
                    hoverClass: "search-close-h-font",
                    height: 40,
                    open: true,
                    value: o.group.value,
                    readonly: readonly,
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            var name = self.node.getValue();

                            if (o.group.value !== name) self.fireEvent("EVENT_CHANGE_NAME", name);
                        }
                    }, {
                        eventName: "EVENT_DELETE",
                        action: function () {
                            self.fireEvent("EVENT_DELETE");
                        }
                    }]
                },
                popup: {
                    type: "bi.button_group",
                    ref: function () {
                        self.buttons = this;
                    },
                    chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                    items: self._getItems(),
                    layouts: [{
                        type: "bi.left"
                    }],
                    listeners: [{
                        eventName: BI.ButtonGroup.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                }
            };
        },
        getNotSelectedValue: function () {
            return this.buttons.getNotSelectedValue();
        },
        getSelectedValue: function () {
            return this.buttons.getValue();
        },
        focusTitle: function () {
            this.node.focusTitle();
        },
        getAllValue: function () {
            return BI.map(this.buttons.getAllButtons(), function (index, button) {
                return button.getValue();
            });
        }
    });

    BI.shortcut("bi.component.custom_group.string.group_expander", Widget);
})();
!(function () {
    var Widget = BI.inherit(BI.NodeButton, {
        props: {
            baseCls: "bi-arrow-group-node bi-border-bottom bi-list-item",
            open: false,
            height: 25
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.htape",
                element: this,
                items: [{
                    width: 23,
                    el: {
                        iconWidth: 13,
                        iconHeight: 13,
                        ref: function () {
                            self.checkbox = this;
                        },
                        type: "bi.arrow_group_node_checkbox"
                    }
                }, {
                    type: o.readonly ? "bi.label" : "bi.editor",
                    allowBlank: false,
                    textAlign: "left",
                    hgap: 0,
                    whiteSpace: "nowrap",
                    errorText: function (v) {
                        if (BI.isFunction(o.errorText)) return o.errorText(v);

                        if (BI.isEmptyString(v)) return BI.i18nText("BI-Basic_Group_Name_Not_Empty");

                        return BI.i18nText("BI-Basic_Group_Name_Taken");
                    },
                    textHeight: o.height,
                    height: o.height,
                    validationChecker: o.validationChecker,
                    py: o.py,
                    value: o.value,
                    ref: function () {
                        self.editor = this;
                    },
                    listeners: [{
                        eventName: BI.SignEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                }, {
                    el: {
                        type: "bi.bubble_combo",
                        cls: "delete-combo",
                        disabled: o.readonly,
                        el: {
                            type: "bi.icon_button",
                            cls: "delete-font",
                            height: 40
                        },
                        popup: {
                            type: "bi.bubble_bar_popup_view",
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Confirm_Delete_Group") + "：" + o.value,
                                height: 40,
                                textAlign: "left",
                                lgap: 10
                            },
                            buttons: [{
                                value: BI.i18nText("BI-Basic_Sure"),
                                height: 24,
                                handler: function () {
                                    self.fireEvent("EVENT_DELETE");
                                    self.deleteButton.hideView();
                                }
                            }, {
                                value: BI.i18nText("BI-Basic_Cancel"),
                                level: "ignore",
                                height: 24,
                                handler: function () {
                                    self.deleteButton.hideView();
                                }
                            }],
                            minWidth: 260,
                            minHeight: 40
                        },
                        stopPropagation: true,
                        ref: function (ref) {
                            self.deleteButton = ref;
                        }
                    },
                    width: 25
                }]
            };
        },

        focusTitle: function () {
            this.editor && this.editor.focus();
        },

        doRedMark: function () {
            this.text.doRedMark.apply(this.text, arguments);
        },

        unRedMark: function () {
            this.text.unRedMark.apply(this.text, arguments);
        },

        doClick: function () {
            Widget.superclass.doClick.apply(this, arguments);
            this.checkbox.setSelected(this.isOpened());
        },

        setOpened: function (v) {
            Widget.superclass.setOpened.apply(this, arguments);
            this.checkbox.setSelected(v);
        },

        setValue: function (v) {
            return this.editor.setValue(v);
        },

        getValue: function () {
            return this.editor.getValue();
        }
    });

    BI.shortcut("bi.component.custom_group.string.group_expander.node", Widget);
})();
!(function () {
    var Pane = BI.inherit(BI.Pane, {

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.string.pane");
        },

        _mapItems: function (expanders) {
            var self = this;

            return BI.map(expanders, function (index, expander) {
                return BI.extend(expander, {
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.store.replaceGroupByGroupId({
                                id: expander.group.id,
                                selected: this.getSelectedValue()
                            });
                        }
                    }, {
                        eventName: "EVENT_CHANGE_NAME",
                        action: function (name) {
                            self.store.changeGroupName({
                                id: expander.group.id,
                                value: name
                            });
                        }
                    }, {
                        eventName: "EVENT_DELETE",
                        action: function () {
                            self.store.deleteGroupById(expander.group.id);
                        }
                    }]
                });
            });
        },

        watch: {
            expanders: function (expanders) {
                this.buttonGroup.populate(this._mapItems(expanders));
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.button_group",
                items: this._mapItems(this.model.expanders),
                ref: function () {
                    self.buttonGroup = this;
                },
                layouts: [{
                    type: "bi.vertical"
                }]
            };
        },

        scrollToBottom: function () {
            this.element.scrollTop(BI.MAX);
        },

        focusLastTitle: function () {
            BI.last(this.buttonGroup.getAllButtons()).focusTitle();
        }
    });
    BI.shortcut("bi.component.custom_group.string.pane", Pane);

    var SelectedPane = BI.inherit(Pane, {
        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.string.selected_pane");
        },

        _mapItems: function (expanders) {
            var self = this;

            return BI.map(expanders, function (index, expander) {
                return BI.extend(expander, {
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.store.replaceGroupByGroupId({
                                id: expander.group.id,
                                selected: this.getNotSelectedValue()
                            });
                        }
                    }]
                });
            });
        }
    });
    BI.shortcut("bi.component.custom_group.string.selected_pane", SelectedPane);

    var SearchPane = BI.inherit(Pane, {
        props: {
            baseCls: "bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.string.search_pane");
        },

        _mapItems: function (expanders) {
            var self = this;

            return BI.map(expanders, function (index, expander) {
                return BI.extend(expander, {
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.store.replaceGroupByGroupId({
                                id: expander.group.id,
                                allValues: this.getAllValue(),
                                selected: this.getSelectedValue()
                            });
                        }
                    }]
                });
            });
        },

        populate: function () {}
    });
    BI.shortcut("bi.component.custom_group.string.search_pane", SearchPane);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["groups", "valueMaps", "unAvailableNames", "useOtherValue"],

        computed: {
            allNames: function () {
                return BI.map(this.model.groups, function (index, group) {
                    return group.value;
                });
            },

            expanders: function () {
                var self = this;

                var paneTypes = BI.Constants.getConstant("bi.constants.component.custom_group.string.paneTypes");

                return BI.map(this.model.groups, function (index, group) {
                    return {
                        type: "bi.component.custom_group.string.group_expander",
                        paneType: paneTypes.NONE,
                        readonly: index === 0,
                        validationChecker: function (v) {
                            return !BI.any(self.model.unAvailableNames, function (i, name) {
                                if (name === group.value) return false;

                                return name === v;
                            });
                        },
                        group: {
                            id: group.id,
                            value: group.value,
                            content: BI.map(group.content, function (i, value) {
                                var valueRight = BI.Services.getService("bi.service.component.custom_group.string.pane").calcValueRight.apply(self, [value]);

                                return {
                                    value: value,
                                    selected: BI.indexOf(group.selected, value) !== -1,
                                    valueRight: valueRight
                                };
                            })
                        }
                    };
                });
            }
        },

        actions: {
            replaceGroupByGroupId: function  (group) {
                BI.Services.getService("bi.service.component.custom_group.string.pane").replaceGroupByGroupId.apply(this, [group]);
            },

            changeGroupName: function (group) {
                var foundGroup = BI.find(this.model.groups, function (index, modelGroup) {
                    return modelGroup.id === group.id;
                });

                foundGroup.value = group.value;
            },

            deleteGroupById: function (gid) {
                var self = this;

                var index = BI.findIndex(this.model.groups, function (index, modelGroup) {
                    return modelGroup.id === gid;
                });

                if (index === -1) return;

                var group = this.model.groups[index];

                var valuesForDefault = [];

                BI.each(group.content, function (index, value) {
                    if (BI.size(self.model.valueMaps[value]) > 1) return;
                    valuesForDefault.push(value);
                });

                var defaultGroup = this.model.groups[0];

                this.model.groups.splice(0, 1, {
                    id: defaultGroup.id,
                    selected: defaultGroup.selected,
                    content: defaultGroup.content.concat(valuesForDefault),
                    value: defaultGroup.value
                });

                this.model.groups.splice(index, 1);
            }
        }
    });
    BI.model("bi.model.component.custom_group.string.pane", Model);
})();
!(function () {
    var SearchModel = BI.inherit(Fix.Model, {
        context: ["groups", "valueMaps", "searchCheckboxSelected", "keywords", "allSelected"],

        watch: {
            calcResults: function (calcResults) {
                var current = calcResults.selectLength, all = calcResults.allSelectLength;

                var result = all - current;

                var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.checkbox");

                if (current === 0) {
                    this.model.searchCheckboxSelected = states.NONE;
                } else if (result === 0) {
                    this.model.searchCheckboxSelected = states.ALL;
                } else {
                    this.model.searchCheckboxSelected = states.HALF;
                }
            },

            "calcResults || allSelected": {
                handler: function () {
                    var self = this;
                    var groups = this.model.calcResults.groups;

                    BI.each(groups, function (index, group) {
                        var selected;
                        var allFound = BI.map(group.content, "value");
                        var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.allSelect");

                        switch (self.model.allSelected) {
                            case states.SELECTED_STATE:
                                selected = BI.uniq(group.selected.concat(allFound));
                                break;
                            case states.UNSELECTED_STATE:
                                BI.remove(group.selected, function (index, value) {
                                    return BI.indexOf(allFound, value) !== -1;
                                });
                                selected = group.selected;
                                break;
                            default:
                                selected = group.selected;
                        }

                        self.replaceGroup({
                            id: group.id,
                            selected: selected
                        });
                    });
                }
            }
        },

        computed: {
            calcResults: function () {
                var self = this;

                if (this.model.keywords === "") {
                    return {
                        groups: [],
                        selectLength: 0,
                        allSelectLength: 0
                    };
                }

                var groups = [];
                var selectLength = 0;
                var allSelectLength = 0;

                BI.each(this.model.groups, function (index, group) {
                    var result = BI.Func.getSearchResult(group.content, self.model.keywords, "value");
                    var finded = result.find;
                    var matched = result.match;

                    var allFinded = matched.concat(finded);
                    allSelectLength += BI.size(allFinded);

                    if (allSelectLength === 0) return;

                    var content = [];

                    BI.each(allFinded, function (index, value) {
                        if (BI.indexOf(group.content, value) === -1) return;

                        var valueRight = BI.Services.getService("bi.service.component.custom_group.string.pane").calcValueRight.apply(self, [value]);

                        var selected = BI.indexOf(group.selected, value) !== -1;

                        if (selected) {
                            selectLength++;
                        }

                        content.push({
                            valueRight: valueRight,
                            value: value,
                            selected: selected,
                            visible: BI.indexOf(allFinded, value) !== -1
                        });
                    });

                    if (BI.size(content) === 0) return;

                    groups.push({
                        content: content,
                        id: group.id,
                        value: group.value,
                        selected: group.selected
                    });
                });

                return {
                    groups: groups,
                    selectLength: selectLength,
                    allSelectLength: allSelectLength
                };
            },

            selectLength: function () {
                return this.model.calcResults.selectLength;
            },

            expanders: function () {
                var self = this, groups = this.model.calcResults.groups;

                if (BI.isEmptyArray(groups)) {
                    return [{
                        type: "bi.label",
                        cls: "bi-tips",
                        text: "空",
                        height: 25
                    }];
                }

                var paneTypes = BI.Constants.getConstant("bi.constants.component.custom_group.string.paneTypes");

                return BI.map(groups, function (index, group) {
                    return {
                        type: "bi.component.custom_group.string.group_expander",
                        paneType: paneTypes.SEARCH,
                        group: group,
                        keywords: self.model.keywords
                    };
                });
            }
        },

        actions: {
            replaceGroup: function (group) {
                // searchPane不使用service的，因为要合并selected不是单纯的替换
                var self = this;

                BI.any(this.model.groups, function (index, modelGroup) {
                    var compare = modelGroup.id === group.id;

                    if (!compare) return false;

                    var allValues = group.allValues;
                    var selected = BI.filter(modelGroup.selected, function (index, select) {
                        return BI.indexOf(allValues, select) === -1;
                    });
                    selected = BI.uniq(selected.concat(group.selected));

                    self.model.groups.splice(index, 1, {
                        id: modelGroup.id,
                        value: modelGroup.value,
                        selected: selected,
                        content: modelGroup.content
                    });

                    return true;
                });
            },
            replaceGroupByGroupId: function  (group) {
                // 将人为设置的全选状态清为默认状态
                var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.allSelect");
                this.model.allSelected = states.NORMAL_STATE;
                this.replaceGroup(group);
            }
        }
    });
    BI.model("bi.model.component.custom_group.string.search_pane", SearchModel);
})();
!(function () {
    var SelectedModel = BI.inherit(Fix.Model, {
        context: ["groups", "selects"],

        computed: {
            expanders: function () {
                var paneTypes = BI.Constants.getConstant("bi.constants.component.custom_group.string.paneTypes");

                return BI.map(this.model.selects, function (index, group) {
                    return {
                        type: "bi.component.custom_group.string.group_expander",
                        paneType: paneTypes.SELECT,
                        group: {
                            id: group.id,
                            value: group.value,
                            content: BI.map(group.content, function (i, value) {
                                return {
                                    value: value,
                                    selected: false
                                };
                            })
                        }
                    };
                });
            }
        },

        actions: {
            replaceGroupByGroupId: function  (group) {
                BI.Services.getService("bi.service.component.custom_group.string.pane").replaceGroupByGroupId.apply(this, [group]);
            }
        }
    });
    BI.model("bi.model.component.custom_group.string.selected_pane", SelectedModel);
})();
!(function () {
    var Service = BI.inherit(BI.OB, {
        calcValueRight: function (value) {
            var valueRight = "";

            var mapArr = this.model.valueMaps[value];

            if (BI.isNull(mapArr) || mapArr.length <= 1) return valueRight;

            valueRight = "（";

            BI.each(mapArr, function (idx, name) {
                valueRight += name + "、";
            });

            valueRight = valueRight.substring(0, valueRight.length - 1) + ")";

            return valueRight;
        },

        replaceGroupByGroupId: function (group) {
            var self = this;

            BI.any(this.model.groups, function (index, modelGroup) {
                var compare = modelGroup.id === group.id;

                if (!compare) return false;

                self.model.groups.splice(index, 1, {
                    id: group.id || modelGroup.id,
                    value: group.value || modelGroup.value,
                    selected: group.selected || modelGroup.selected,
                    content: group.content || modelGroup.content
                });

                return true;
            });
        }
    });

    BI.service("bi.service.component.custom_group.string.pane", Service);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/18 下午1:54
 * @Description
*/

!(function () {
    BI.constant("bi.constants.component.custom_group.string.allSelect", {
        NORMAL_STATE: "NORMAL_STATE",
        UNSELECTED_STATE: "UNSELECTED_STATE",
        SELECTED_STATE: "SELECTED_STATE"
    });

    BI.constant("bi.constants.component.custom_group.string.checkbox", {
        ALL: "ALL",
        HALF: "HALF",
        NONE: "NONE"
    });

    BI.constant("bi.constants.component.custom_group.string.paneTypes", {
        SELECT: "SELECT",
        SEARCH: "SEARCH",
        NONE: "NONE"
    });
})();
!(function () {
    var constant = {
        OTHER_GROUP_EN: "other",
        BUTTON_HEIGHT: 24,
        POPUP_WIDTH: 580,
        POPUP_HEIGHT: 350,
        VGAP: 10,
        SEARCH_HEIGHT: 30
    };

    var Widget = BI.inherit(BI.Widget, {

        props: {
            cls: "bi-custom-group-string",
            showCopyButton: true,
            bubbleId: BI.UUID()
        },

        _store: function () {
            return BI.Models.getModel("bi.model.component.custom_group.string", {
                group: Fix.toJSON(this.options.group) || {},
                requestFunc: this.options.reqFunc
            });
        },

        beforeInit: function (callback) {
            this.store.requestData(callback);
        },

        watch: {
            triggerButtonValue: function (triggerButtonValue) {
                this.triggerButton.setValue(triggerButtonValue);

                this.triggerButton.doRedMark(this.model.selectsLength);
            },

            selectsLength: function (selectsLength) {
                var enbaled = selectsLength > 0;

                this.move2Combo.setEnable(enbaled);

                this.move2Combo.attr("tipType", enbaled ? "success" : "warning");
            },

            groupValues: function (groupValues) {
                this.move2Combo.populate(groupValues);
            },

            copyGroupValues: function (copyGroupValues) {
                this.copy2Combo.populate(copyGroupValues);
            },

            copyToButtonEnable: function (copyToButtonEnable) {
                this.copy2Combo.setEnable(copyToButtonEnable);
                this.copy2Combo.attr("tipType", copyToButtonEnable ? "success" : "warning");
            },

            checkboxSelected: function (checkboxSelected) {
                this.editor.setEnable(checkboxSelected);
            },

            searchCheckboxSelected: function (searchCheckboxSelected) {
                var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.checkbox");

                switch (searchCheckboxSelected) {
                    case states.ALL:
                        this.searchCheckbox.setSelected(true);
                        break;
                    case states.HALF:
                        this.searchCheckbox.setHalfSelected(true);
                        break;
                    case states.NONE:
                    default:
                        this.searchCheckbox.setSelected(false);
                }
            },

            showBubble: function (showBubble) {
                showBubble ? this._showBubble() : this._hideBubble();
            },

            searchCheckboxDisabled: function (searchCheckboxDisabled) {
                this.searchCheckbox.setEnable(!searchCheckboxDisabled);
            }
        },

        _showBubble: function () {
            var self = this;

            BI.Bubbles.show(this.options.bubbleId, BI.i18nText("BI-Basic_Move_To_Group_Failed"), this, {
                offsetStyle: "center"
            });

            BI.delay(function () {
                self.store.setShowBubble(false);
            }, 5000);
        },

        _hideBubble: function () {
            BI.Bubbles.hide(this.options.bubbleId);
        },

        render: function () {
            var self = this;

            self.fieldPane = BI.createWidget({
                type: "bi.component.custom_group.string.pane"
            });

            var buttonHeigthWithGap = constant.VGAP * 2 + constant.BUTTON_HEIGHT;

            return {
                type: "bi.vtape",
                items: [{
                    height: buttonHeigthWithGap,
                    el: {
                        type: "bi.vertical",
                        cls: "bi-custom-group-combo bi-custom-group-top",
                        vgap: 10,
                        items: [{
                            type: "bi.center_adapt",
                            items: [{
                                type: "bi.combo",
                                isNeedAdjustHeight: false,
                                isNeedAdjustWidth: false,
                                isDefaultInit: true,
                                el: {
                                    type: "bi.button",
                                    width: 80,
                                    hgap: 5,
                                    value: this.model.triggerButtonValue,
                                    level: "ignore",
                                    ref: function () {
                                        self.triggerButton = this;

                                        self.triggerButton.doRedMark(self.model.selectsLength);
                                    },
                                    readonly: false,
                                    height: constant["BUTTON_HEIGHT"]
                                },
                                popup: {
                                    width: constant.POPUP_WIDTH,
                                    maxHeight: constant.POPUP_HEIGHT,
                                    el: {
                                        type: "bi.component.custom_group.string.selected_pane",
                                        height: constant.POPUP_HEIGHT
                                    }
                                },
                                listeners: [{
                                    eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                                    action: function () {
                                        self.searcher.stopSearch();
                                    }
                                }]
                            }, {
                                type: "bi.right",
                                lgap: 20,
                                items: [{
                                    type: "bi.copy2group_combo",
                                    disabled: true,
                                    tipType: "warning",
                                    items: this.model.copyGroupValues,
                                    height: constant["BUTTON_HEIGHT"],
                                    warningTitle: function () {
                                        if (self.model.selectsLength === 0) {
                                            return BI.i18nText("BI-Basic_Not_Select_Any");
                                        }

                                        return BI.i18nText("BI-Basic_UnGroup_Data_Only_Can_Be_Moved");
                                    },
                                    ref: function () {
                                        self.copy2Combo = this;
                                        self.copy2Combo.setVisible(self.options.showCopyButton);
                                    },
                                    listeners: [{
                                        eventName: BI.Copy2GroupCombo.EVENT_CONFIRM,
                                        action: function () {
                                            var value = self.copy2Combo.getValue();

                                            self.store.copySelectsToGroup(value);
                                        }
                                    }, {
                                        eventName: BI.Copy2GroupCombo.EVENT_CLICK_BUTTON,
                                        action: function () {
                                            var targetValue = self.copy2Combo.getTargetValue();
                                            var group = self.store.createGroup(targetValue);

                                            self.store.copySelectsToGroup([group.value]);
                                        }
                                    }]
                                }, {
                                    type: "bi.move2group_combo",
                                    tipType: "warning",
                                    items: this.model.groupValues,
                                    disabled: true,
                                    warningTitle: BI.i18nText("BI-Basic_Not_Select_Any"),
                                    height: constant["BUTTON_HEIGHT"],
                                    ref: function () {
                                        self.move2Combo = this;
                                    },
                                    listeners: [{
                                        eventName: BI.Move2GroupCombo.EVENT_CLICK_NEW_BUTTON,
                                        action: function () {
                                            var targetValue = self.move2Combo.getTargetValue();
                                            var group = self.store.createGroup(targetValue);

                                            self.store.moveSelectsTo(group.value);
                                        }
                                    }, {
                                        eventName: BI.Move2GroupCombo.EVENT_CONFIRM,
                                        action: function () {
                                            var value = self.move2Combo.getValue();

                                            self.store.moveSelectsTo(value);
                                        }
                                    }]
                                }, {
                                    type: "bi.icon_text_item",
                                    cls: "custom-add-group-font",
                                    text: BI.i18nText("BI-Basic_Add_Group"),
                                    width: 76,
                                    readonly: true,
                                    height: constant["BUTTON_HEIGHT"],
                                    clear: true,
                                    ref: function () {
                                        self.addButton = this;
                                    },
                                    handler: function () {
                                        var group = self.store.createGroup();

                                        self.store.moveSelectsTo(group.value, true);

                                        BI.defer(function () {
                                            self.fieldPane.scrollToBottom();
                                            self.fieldPane.focusLastTitle();
                                        });
                                    }
                                }]
                            }]
                        }]
                    }
                }, {
                    height: constant.SEARCH_HEIGHT,
                    el: {
                        type: "bi.htape",
                        cls: "custom-search",
                        height: "fill",
                        items: [{
                            width: "fill",
                            el: {
                                type: "bi.searcher",
                                adapter: self.fieldPane,
                                isDefaultInit: true,
                                ref: function () {
                                    self.searcher = this;
                                },
                                popup: {
                                    type: "bi.component.custom_group.string.search_pane"
                                },
                                listeners: [{
                                    eventName: BI.Searcher.EVENT_START,
                                    action: function () {
                                        self.store.setKeywords(self.searcher.getKeyword());
                                    }
                                }, {
                                    eventName: BI.Searcher.EVENT_STOP,
                                    action: function () {
                                        self.store.setKeywords(self.searcher.getKeyword());

                                        self.store.resetAllSelected();
                                    }
                                }, {
                                    eventName: BI.Searcher.EVENT_SEARCHING,
                                    action: function () {
                                        self.store.setKeywords(self.searcher.getKeyword());
                                    }
                                }]
                            }
                        }, {
                            width: 110,
                            el: {
                                type: "bi.multi_select_bar",
                                cls: "bi-custom-group-searcher-toolbar bi-card",
                                text: BI.i18nText("BI-Basic_Select_All_Search_Results"),
                                disabled: this.model.searchCheckboxDisabled,
                                ref: function (_ref) {
                                    self.searchCheckbox = _ref;
                                },
                                listeners: [{
                                    eventName: BI.MultiSelectBar.EVENT_CHANGE,
                                    action: function () {
                                        var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.allSelect");

                                        self.store.setAllSelected(self.searchCheckbox.isSelected() ? states.SELECTED_STATE : states.UNSELECTED_STATE);
                                    }
                                }]
                            }
                        }]
                    }
                }, {
                    height: "fill",
                    el: self.fieldPane
                }, {
                    height: buttonHeigthWithGap,
                    el: {
                        type: "bi.vertical_adapt",
                        rgap: 5,
                        items: [{
                            type: "bi.checkbox",
                            selected: this.model.checkboxSelected,
                            ref: function () {
                                self.checkbox = this;
                            },
                            listeners: [{
                                eventName: BI.Checkbox.EVENT_CHANGE,
                                action: function () {
                                    var value = self.checkbox.isSelected() ? self.editor.getValue() : false;
                                    self.store.setUseOther(value);
                                }
                            }]
                        }, {
                            type: "bi.label",
                            value: BI.i18nText("BI-Basic_Ungrouped_Value_To")
                        }, {
                            type: "bi.editor",
                            cls: "custom-group-editor bi-border",
                            value: this.model.useOtherValue,
                            ref: function () {
                                self.editor = this;
                            },
                            errorText: function (v) {
                                return BI.i18nText(BI.isEmptyString(v) ? "BI-Basic_Group_Name_Not_Empty" : "BI-Basic_Group_Name_Taken");
                            },
                            validationChecker: function (v) {
                                var findIndex = -1;

                                BI.any(self.model.groupValues, function (index, valueObj) {
                                    var compare = valueObj.value === v;

                                    if (!compare) return false;

                                    findIndex = index;

                                    return true;
                                });

                                return findIndex === -1;
                            },
                            width: 88,
                            height: 28,
                            disabled: !this.model.checkboxSelected,
                            listeners: [{
                                eventName: BI.Editor.EVENT_CONFIRM,
                                action: function () {
                                    self.store.setUseOther(self.editor.getValue());
                                }
                            }]
                        }]
                    }
                }]
            };
        },

        getValue: function () {
            return this.store.getValue();
        }
    });

    BI.shortcut("bi.component.custom_group.string", Widget);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            var o = this.options;

            if (BI.isEmptyString(o.group.useOther)) {
                o.group.useOther = false;
            }

            return {
                useOther: o.group.useOther || false,
                groups: [],
                loading: false,
                searchCheckboxSelected: "NONE",
                useOtherValue: o.group.useOther || BI.i18nText("BI-Basic_Other"),
                showBubble: false,
                keywords: "",
                allSelected: BI.Constants.getConstant("bi.constants.component.custom_group.string.allSelect").NORMAL_STATE
            };
        },

        computed: {
            selects: function () {
                var groups = [];
                BI.each(this.model.groups, function (index, group) {
                    var selected = group.selected;
                    if (BI.isEmptyArray(selected)) return;

                    groups.push({
                        content: BI.map(selected, function (index, value) {
                            return value;
                        }),
                        id: group.id,
                        value: group.value
                    });
                });

                return groups;
            },

            selectsLength: function () {
                var length = 0;

                BI.each(this.model.groups, function (index, group) {
                    length += group.selected.length;
                });

                return length;
            },

            checkboxSelected: function () {
                return this.model.useOther !== false;
            },

            copyToButtonEnable: function () {
                var firstNotSelected = false;

                if (BI.isEmptyArray(this.model.groups)) {
                    firstNotSelected = true;
                } else {
                    firstNotSelected = BI.isEmptyArray(this.model.groups[0].selected);
                }

                return this.model.selectsLength > 0 && firstNotSelected;
            },

            triggerButtonValue: function () {
                return BI.i18nText("BI-Basic_Has_Selected_{R1}_Item", this.model.selectsLength);
            },

            allGroupNames: function () {
                var names = BI.map(this.model.groups, function (index, group) {
                    return group.value;
                });

                names.push(this.model.useOtherValue);

                return names;
            },

            unAvailableNames: function () {
                var names = BI.map(this.model.groups[0].content, function (index, value) {
                    return value;
                });

                return this.model.allGroupNames.concat(names);
            },

            groupValues: function () {
                return BI.map(this.model.groups, function (index, group) {
                    return {
                        id: group.id,
                        value: group.value
                    };
                });
            },

            copyGroupValues: function () {
                var arr = BI.deepClone(this.model.groupValues);
                arr.shift();

                return arr;
            },

            valueMaps: function () {
                var map = {};

                BI.each(this.model.groups, function (index, group) {
                    if (index === 0) return;

                    BI.each(group.content, function (i, value) {
                        if (BI.has(map, value)) {
                            map[value].push(group.value);
                        } else {
                            map[value] = [group.value];
                        }
                    });
                });

                return map;
            },

            searchCheckboxDisabled: function () {
                return this.model.keywords === "";
            }
        },

        childContext: ["groups", "valueMaps", "selects", "loading", "searchCheckboxSelected", "unAvailableNames", "keywords", "allSelected", "useOtherValue"],

        actions: {
            requestData: function (callback) {
                var self = this, o = this.options;

                o.requestFunc(function (values) {
                    self.reformat(values);
                    if (BI.isFunction(callback)) callback();
                });
            },

            setLoading: function (value) {
                this.model.loading = value;
            },

            setUseOther: function (value) {
                this.model.useOther = value;

                if (value !== false) {
                    this.model.useOtherValue = value;
                }
            },

            reformat: function (values) {
                var self = this, o = this.options;

                var unGroupedValues = BI.deepClone(values);

                BI.each(o.group.details, function (index, detail) {
                    var content = BI.map(detail.content, "value");

                    BI.each(content, function (index, val) {
                        if (BI.indexOf(values, val) === -1) {
                            BI.remove(content, val);
                        } else {
                            BI.remove(unGroupedValues, val);
                        }
                    });

                    self.model.groups.push({
                        content: content,
                        id: detail.id,
                        value: detail.value,
                        selected: []
                    });
                });

                this.model.groups.unshift({
                    content: unGroupedValues,
                    id: BI.UUID(),
                    value: BI.i18nText("BI-Basic_None_Group"),
                    selected: []
                });
            },

            createGroup: function (groupName) {
                var id = BI.UUID();

                if (BI.isNull(groupName)) {
                    groupName = BI.Func.createDistinctName(BI.map(this.model.unAvailableNames, function (index, name) {
                        return {
                            name: name
                        };
                    }), BI.i18nText("BI-Basic_New_Group"));
                }

                var group = {
                    content: [],
                    id: id,
                    value: groupName,
                    selected: []
                };

                this.model.groups.push(group);

                return group;
            },

            moveSelectsTo: function (targetName) {
                var self = this;

                var targetGroupIndex = BI.findIndex(this.model.groups, function (index, group) {
                    return targetName === group.value;
                });

                var targetGroup = this.model.groups[targetGroupIndex];

                if (targetGroupIndex === 0) {
                    var checkSelects = [];

                    BI.each(this.model.groups, function (index, group) {
                        checkSelects = checkSelects.concat(group.selected);
                    });

                    var result = BI.any(checkSelects, function (index, value) {
                        return BI.indexOf(self.model.allGroupNames, value) !== -1;
                    });

                    this.setShowBubble(result);

                    if (result) return false;
                }

                if (BI.isNull(targetGroup)) return;

                var selectsContent = [];

                BI.each(self.model.groups, function (index, group) {
                    if (BI.isEmptyArray(group.selected)) return;

                    var groupContent = [];

                    BI.each(group.content, function (idx, value) {
                        var targetIndex = BI.indexOf(group.selected, value);

                        if (targetIndex !== -1) {
                            selectsContent.push(value);
                        } else {
                            groupContent.push(value);
                        }
                    });

                    self.model.groups.splice(index, 1, {
                        content: groupContent,
                        selected: [],
                        id: group.id,
                        value: group.value
                    });
                });

                self.model.groups.splice(targetGroupIndex, 1, {
                    id: targetGroup.id,
                    value: targetGroup.value,
                    selected: [],
                    content: BI.uniq(targetGroup.content.concat(selectsContent))
                });

                return true;
            },

            copySelectsToGroup: function (targetNames) {
                var self = this;

                // 创建新的groups
                BI.each(this.model.groups, function (currentIndex, currentGroup) {
                    var compare = BI.indexOf(targetNames, currentGroup.value) !== -1;

                    if (!compare) return;

                    var content = [];

                    BI.each(self.model.selects, function (i, select) {
                        BI.each(select.content, function (index, value) {
                            content.push(value);
                        });
                    });

                    self.model.groups.splice(currentIndex, 1, {
                        id: currentGroup.id,
                        value: currentGroup.value,
                        content: BI.uniq(currentGroup.content.concat(content)),
                        selected: []
                    });
                });

                // 清空selected
                BI.each(this.model.groups, function (index, group) {
                    group.selected = [];
                });
            },

            setShowBubble: function (v) {
                this.model.showBubble = v;
            },

            setKeywords: function (value) {
                this.model.keywords = value;
            },

            setAllSelected: function (v) {
                this.model.allSelected = v;
            },

            resetAllSelected: function () {
                var states = BI.Constants.getConstant("bi.constants.component.custom_group.string.allSelect");

                this.model.allSelected = states.NORMAL_STATE;
            },

            getValue: function () {
                var details = BI.map(this.model.groups, function (index, group) {
                    return {
                        content: BI.map(group.content, function (i, value) {
                            return {
                                value: value
                            };
                        }),
                        id: group.id,
                        value: group.value
                    };
                });

                details.shift();

                return {
                    details: details,
                    useOther: this.model.useOther || ""
                };
            }
        }
    });

    BI.model("bi.model.component.custom_group.string", Model);
})();
/**
 * author: young
 * createdDate: 2018/3/22
 * description:
 */
!(function () {
    var itemHeight = 24;
    var Model = BI.inherit(Fix.Model, {

        _init: function () {
            this.openedNodes = [];
            this.service = BI.Services.getService("bi.service.components.data_list.fields");
        },

        state: function () {
            return {
                keyword: "",
                selected: null,
                fields: this.options.fields,
                selectedFields: this.options.selectedFields,
                markedFieldIds: this.options.markedFieldIds,
                tableType: this.options.tableType,
                fieldsMap: this.options.fieldsMap,
                showAddAll: this.options.showAddAll,
                expandDate: this.options.expandDate,
                multiPathPopover: true
            };
        },

        computed: {
            fieldItems: function () {
                var self = this;
                var fields = this.model.fields;
                if (this.model.keyword !== "") {
                    var res = BI.Func.getSearchResult(fields, this.model.keyword, "transferName");
                    fields = res.match.concat(res.find);
                }
                var fieldsInfo = this.service.getAllRelativeFields(this.model.fields);
                var fieldIds = BI.map(fields, "id");
                BI.each(fieldsInfo.circleMap, function (id) {
                    if (!BI.contains(fieldIds, id)) {
                        BI.find(self.model.fields, function (idx, field) {
                            if (field.id === id) {
                                fields.push(field);
                            }
                        });
                    }
                });
                return this.service.sortItemsByFieldType(fields);
            },

            validFieldItems: function () {
                return this.service.getAllValidFields(this.model.fieldItems);
            },

            scrollTopLength: function () {
                var index = 0;
                if (this.model.markedFieldIds.length > 0) {
                    var id = this.model.markedFieldIds[0];
                    BI.some(this.model.fieldItems, function (i, field) {
                        if (field.id === id) {
                            index = i;
                            return true;
                        }
                    });
                }
                return index * itemHeight;
            },

            selectedFieldIds: function () {
                return BI.map(this.model.selectedFields, "field");
            },

            items: function () {
                var self = this;
                if (BI.isEmptyArray(this.model.fieldItems)) {
                    var tip = BI.isNotEmptyString(this.model.keyword) ? BI.i18nText("BI-Conf_No_Match_Field") : BI.i18nText("BI-Basic_Empty");
                    return [{
                        type: "bi.label",
                        cls: "bi-tips",
                        text: tip
                    }];
                }
                var service = BI.Services.getService("bi.service.components.data_list.fields");
                var fieldsInfo = service.getAllRelativeFields(this.model.fieldItems);

                var fields = BI.map(fieldsInfo.fields, function (i, field) {
                    // 处理日期字段
                    var name = BI.Utils.getFieldDisplayName(field, self.model.fieldsMap, self.model.tableType);
                    if (field.type === BICst.COLUMN.DATE && self.model.expandDate) {

                        var items = service.datePopup, moreItems = service.moreDatePopup;
                        items = BI.map(items, function (i, item) {
                            return self._dateItemCreator(item, field, 15);
                        });
                        items.push({
                            type: "bi.expander",
                            stopPropagation: true,
                            el: {
                                type: "bi.icon_text_icon_node",
                                iconCls1: "",
                                iconCls2: "data-list-date-open-font",
                                text: BI.i18nText("BI-Basic_More_Group"),
                                height: 24,
                                open: this.openedNodes.contains(field.id + "more")
                            },
                            popup: {
                                type: "bi.button_group",
                                items: BI.map(moreItems, function (i, item) {
                                    return self._dateItemCreator(item, field, 30);
                                }),
                                layouts: [{
                                    type: "bi.vertical"
                                }]
                            },
                            listeners: [{
                                eventName: BI.Expander.EVENT_EXPAND,
                                action: function () {
                                    self._openNode(field.id + "more");
                                }
                            }, {
                                eventName: BI.Expander.EVENT_COLLAPSE,
                                action: function () {
                                    self._closeNode(field.id + "more");
                                }
                            }]
                        });
                        return {
                            type: "bi.expander",
                            el: {
                                type: "bi.icon_text_icon_node",
                                cls: "bi-list-item",
                                iconCls1: BI.Utils.getIconByFieldType(field.type),
                                iconCls2: "data-list-date-open-font",
                                text: name,
                                title: name,
                                value: field.id,
                                keyword: self.model.keyword,
                                warningTitle: BI.i18nText("BI-Conf_Field_Already_Select"),
                                height: 24,
                                open: self.openedNodes.contains(field.id)
                            },
                            popup: {
                                type: "bi.button_group",
                                items: items,
                                layouts: [{
                                    type: "bi.vertical"
                                }]
                            },
                            listeners: [{
                                eventName: BI.Expander.EVENT_EXPAND,
                                action: function () {
                                    self._openNode(field.id);
                                }
                            }, {
                                eventName: BI.Expander.EVENT_COLLAPSE,
                                action: function () {
                                    self._closeNode(field.id);
                                }
                            }]
                        };
                    }
                    return this._getFieldStructure(field);
                }, this);
                if (BI.isNotEmptyObject(fieldsInfo.circleMap)) {
                    var circleMap = fieldsInfo.circleMap;
                    BI.each(this.model.fieldItems, function (i, field) {
                        var id = field.id;
                        if (BI.isNotEmptyArray(circleMap[id])) {
                            var fieldName = BI.Utils.getFieldDisplayName(field, self.model.fieldsMap, self.model.tableType);
                            var cls = "bi-list-item";
                            if (self.model.markedFieldIds.indexOf(field.id) > -1) {
                                cls += " marked-item";
                            }
                            fields.push({
                                type: "bi.expander",
                                stopPropagation: true,
                                text: fieldName,
                                el: BI.extend(self._getFieldStructure(field), {
                                    type: "bi.components.data_list.expander.node",
                                    text: fieldName,
                                    title: fieldName,
                                    value: field.id,
                                    keyword: self.model.keyword,
                                    warningTitle: BI.i18nText("BI-Conf_Field_Already_Select"),
                                    height: itemHeight,
                                    cls: cls,
                                    iconCls: BI.Utils.getIconByFieldType(field.type),
                                    open: self.openedNodes.contains(field.id) || BI.isNotEmptyString(self.model.keyword)
                                }),
                                popup: {
                                    type: "bi.button_group",
                                    items: BI.map(circleMap[id], function (idx, obj) {
                                        var text = BI.Utils.getFieldDisplayName(obj, self.model.fieldsMap, self.model.tableType);
                                        return {
                                            type: "bi.blank_icon_text_item",
                                            cls: BI.Utils.getIconByFieldType(field.type) + " bi-list-item bi-point-components-data-list-field",
                                            height: itemHeight,
                                            blankWidth: 30,
                                            keyword: self.model.keyword,
                                            disabled: self._isSelectedField(obj.id),
                                            warningTitle: BI.i18nText("BI-Conf_Field_Already_Select"),
                                            text: text,
                                            value: {field: obj.id}
                                        };
                                    })
                                },
                                listeners: [{
                                    eventName: BI.Expander.EVENT_EXPAND,
                                    action: function () {
                                        self._openNode(field.id, true);
                                    }
                                }, {
                                    eventName: BI.Expander.EVENT_COLLAPSE,
                                    action: function () {
                                        self._closeNode(field.id);
                                    }
                                }]
                            });
                        }
                    });
                }
                return fields;
            }
        },

        actions: {
            setKeyword: function (keyword) {
                this.model.keyword = keyword;
                this.model.markedFieldIds = [];
            },

            setOpenMultiPathPopover: function () {
                this.model.multiPathPopover = !this.model.multiPathPopover;
            },

            setFields: function (v) {
                this.model.fields = v;
            },

            setSelectedFields: function (v) {
                this.model.selectedFields = v;
            },

            setAllFieldsSelected: function () {

            },

            setTableType: function (v) {
                this.model.tableType = v;
            },

            setFieldsMap: function (fieldsMap) {
                this.model.fieldsMap = fieldsMap;
            },

            setSelectedField: function (v) {
                this.model.selected = v;
            }
        },

        _openNode: function (id) {
            this.openedNodes.push(id);
        },

        _closeNode: function (id) {
            BI.remove(this.openedNodes, id);
        },

        _isSelectedField: function (fieldId, group, relations) {
            return BI.some(this.model.selectedFields, function (i, fieldOb) {
                if (BI.isNotNull(group)) {
                    return fieldOb.group === group && fieldOb.field === fieldId;
                }
                if (BI.isNotNull(relations)) {
                    var service = BI.Services.getService("bi.service.conf.pack.analysis.selectfield");
                    var currRelations = service.transformPath(fieldOb.path);

                    return fieldOb.field === fieldId && BI.isEqual(currRelations, relations);
                }
                return fieldOb.field === fieldId;
            });
        },

        _dateItemCreator: function (item, field, blankWidth) {
            return {
                type: "bi.blank_icon_text_item",
                cls: "date-field-font bi-list-item",
                height: 24,
                blankWidth: blankWidth,
                disabled: this._isSelectedField(field.id, item.value),
                warningTitle: BI.i18nText("BI-Conf_Field_Already_Select"),
                text: item.text,
                value: {
                    field: field.id,
                    group: item.value
                }
            };
        },

        _getFieldStructure: function (field) {
            var self = this;
            var name = BI.Utils.getFieldDisplayName(field, this.model.fieldsMap, this.model.tableType);
            var cls = BI.Utils.getIconByFieldType(field.type) + " bi-list-item bi-point-components-data-list-field";
            if (this.model.markedFieldIds.indexOf(field.id) > -1) {
                cls += " marked-item";
            }
            var isSelected = false;
            if (BI.contains(this.model.selectedFieldIds, field.id)) {
                isSelected = true;
            }

            var isDisabled = this._isSelectedField(field.id, null, field.relations);

            var item = {
                type: "bi.icon_text_item",
                cls: cls,
                text: name,
                title: name,
                selected: isSelected,
                value: {field: field.id},
                disabled: isDisabled,
                warningTitle: BI.i18nText("BI-Conf_Field_Already_Select"),
                height: 24
            };

            if (field.isMultiPath && isDisabled) {
                return {
                    type: "bi.htape",
                    height: 24,
                    items: [item, {
                        type: "bi.icon_button",
                        width: 24,
                        height: 24,
                        cls: "change-path-font",
                        title: BI.i18nText("BI-Conf_Change_Router", name),
                        handler: function () {
                            self.setOpenMultiPathPopover();
                        }
                    }]
                };
            }

            return item;
        }
    });
    BI.model("bi.model.components.data_list.fields", Model);
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-23 16:01
 * @Description
 */
!(function () {
    var Fields = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-component-datalist-fields",
            fields: [],
            fieldsMap: {},
            tableType: BICst.TABLE.ANALYSIS,
            selectedFields: [],
            showAddAll: true,
            expandDate: true,
            markedFieldIds: [],
            rgap: 10,
            lgap: 10
        },

        _store: function () {
            return BI.Models.getModel("bi.model.components.data_list.fields", {
                fields: this.options.fields,
                fieldsMap: this.options.fieldsMap,
                selectedFields: this.options.selectedFields,
                markedFieldIds: this.options.markedFieldIds,
                tableType: this.options.tableType,
                showAddAll: this.options.showAddAll,
                expandDate: this.options.expandDate
            });
        },

        watch: {
            items: function (v) {
                var keyword = BI.isNotEmptyArray(this.model.fieldItems) ? this.model.keyword : null;
                this.fields.populate(v, keyword);
            },

            multiPathPopover: function () {
                this.fireEvent("EVENT_CHANGE_PATH");
            }
        },

        mounted: function () {
            var self = this;
            if (this.model.scrollTopLength !== 0) {
                BI.nextTick(function () {
                    self.fields.element.scrollTop(self.model.scrollTopLength);
                });
            }
        },

        render: function () {
            var self = this;
            this.openedNodes = [];
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.search_editor",
                    watermark: BI.i18nText("BI-Conf_Search_Field"),
                    height: 24,
                    ref: function (ref) {
                        self.search = ref;
                    },
                    listeners: [{
                        eventName: BI.SearchEditor.EVENT_CHANGE,
                        action: BI.bind(this._search, this)
                    }, {
                        eventName: BI.SearchEditor.EVENT_CLEAR,
                        action: BI.bind(this._search, this)
                    }]
                }, {
                    type: "bi.left_vertical_adapt",
                    items: [{
                        type: "bi.text_button",
                        cls: "add-all-button",
                        text: BI.i18nText("BI-Conf_Add_All"),
                        listeners: [{
                            eventName: BI.TextButton.EVENT_CHANGE,
                            action: function () {
                                self.store.setAllFieldsSelected();
                                self.fireEvent("ADD_ALL", self.model.validFieldItems, self.model.keyword);
                            }
                        }]
                    }],
                    height: this.options.showAddAll ? 24 : 0
                }, {
                    type: "bi.button_group",
                    items: this.model.items,
                    layouts: [{
                        type: "bi.vertical"
                    }],
                    behaviors: {
                        redmark: function () {
                            return true;
                        }
                    },
                    ref: function (ref) {
                        self.fields = ref;
                    },
                    listeners: [{
                        eventName: BI.ButtonGroup.EVENT_CHANGE,
                        action: function (v) {
                            self.store.setSelectedField(v);
                            self.fireEvent("CHANGE", v);
                        }
                    }]
                }],
                lgap: this.options.lgap,
                rgap: this.options.rgap,
                vgap: 5
            };
        },

        _search: function () {
            var keyword = this.search.getValue();
            this.store.setKeyword(keyword);
        },

        populate: function (fields, selectedFields, tableType, fieldsMap) {
            this.store.setFields(fields);
            this.store.setSelectedFields(selectedFields);
            this.store.setTableType(tableType);
            this.store.setFieldsMap(fieldsMap);
        }
    });
    BI.shortcut("bi.components.data_list.fields", Fields);
})();
/**
 * author: young
 * createdDate: 2018/3/19
 * description:
 */
!(function () {
    var Service = BI.inherit(BI.OB, {
        datePopup: [{
            text: BI.i18nText("BI-Basic_YMD_Date"),
            value: BICst.GROUP.YMD
        }, {
            text: BI.i18nText("BI-Basic_Year_Fen"),
            value: BICst.GROUP.Y
        }, {
            text: BI.i18nText("BI-Basic_Quarter"),
            value: BICst.GROUP.S
        }, {
            text: BI.i18nText("BI-Basic_Month_Fen"),
            value: BICst.GROUP.M
        }, {
            text: BI.i18nText("BI-Basic_Week_XingQi"),
            value: BICst.GROUP.W
        }, {
            text: BI.i18nText("BI-Basic_Date_Day"),
            value: BICst.GROUP.D
        }],
        moreDatePopup: [{
            text: BI.i18nText("BI-Basic_Week_Count"),
            value: BICst.GROUP.WEEK_COUNT
        }, {
            text: BI.i18nText("BI-Basic_Hour_Sin"),
            value: BICst.GROUP.HOUR
        }, {
            text: BI.i18nText("BI-Basic_Minute"),
            value: BICst.GROUP.MINUTE
        }, {
            text: BI.i18nText("BI-Basic_Seconds"),
            value: BICst.GROUP.SECOND
        }, {
            text: BI.i18nText("BI-Basic_Year_Quarter"),
            value: BICst.GROUP.YS
        }, {
            text: BI.i18nText("BI-Basic_Year_Month"),
            value: BICst.GROUP.YM
        }, {
            text: BI.i18nText("BI-Basic_Year_Week"),
            value: BICst.GROUP.YW
        }, {
            text: BI.i18nText("BI-Basic_YMDH"),
            value: BICst.GROUP.YMDH
        }, {
            text: BI.i18nText("BI-Basic_YMDHM"),
            value: BICst.GROUP.YMDHM
        }, {
            text: BI.i18nText("BI-Basic_Detail_Date"),
            value: BICst.GROUP.YMDHMS
        }],

        getAllValidFields: function (fields) {
            var invalidFieldIds = new Set();
            BI.each(fields, function (index, field) {
                var fieldName = field.name;
                if (fieldName) {
                    var names = fieldName.split("-");
                    if (names.length > 1) {
                        invalidFieldIds.add(names[0]);
                    }
                }
            });
            return BI.filter(fields, function (index, field) {
                return !invalidFieldIds.has(field.name);
            });
        },

        // 这边为自循环字段服务，拿的是字段原始名来确定关系
        getAllRelativeFields: function (fields) {
            var map = {};
            var newFields = [];
            var sset = new Set(), store = [], map2Id = {}, res = {};
            BI.each(fields, function (i, field) {
                var fieldName = field.name;
                if (fieldName) {
                    var name = fieldName.split("-")[0];
                    map2Id[fieldName] = field.id;
                    if (sset.has(name)) {
                        store.push(name);
                    } else {
                        sset.add(name);
                    }
                }
            });
            if (store.length > 0 &&
                BI.every(store, function (i, name) {
                    return BI.isNotNull(map2Id[name]);
                })) {
                BI.each(fields, function (i, field) {
                    var fieldName = field.name;
                    var name = fieldName.split("-")[0];
                    var contains = store.contains(name);
                    if (name !== fieldName && contains) {
                        if (!res[name]) {
                            res[name] = [];
                        }
                        res[name].push(field);
                    } else if (!contains) {
                        newFields.push(field);
                    }
                });
                BI.each(res, function (name, fs) {
                    map[map2Id[name]] = fs;
                });
            } else {
                newFields = fields;
            }
            return {
                fields: newFields,
                circleMap: map
            };
        },

        sortItemsByFieldType: function (fields) {
            // BI-23426
            fields = BI.sortBy(fields, [function (field) {
                return BI.makeFirstPY(field.transferName);
            }]);
            var number = [], string = [], date = [], other = [];
            BI.each(fields, function (index, filed) {
                switch (filed.type) {
                    case BICst.COLUMN.STRING:
                        string.push(filed);
                        break;
                    case BICst.COLUMN.NUMBER :
                        number.push(filed);
                        break;
                    case  BICst.COLUMN.DATE :
                        date.push(filed);
                        break;
                    default:
                        other.push(filed);
                        break;
                }
            });
            return number.concat(string, date, other);
        }
    });
    BI.service("bi.service.components.data_list.fields", Service);
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-26 9:14
 * @Description
 */
!(function () {
    var Header = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-component-datalist-fields-header",
            name: "",
            textAlign: "left",
            fieldType: 16,
            removeField: BI.emptyFn
        },
        render: function () {
            var o = this.options;
            return {
                type: "bi.htape",
                items: [{
                    type: "bi.center_adapt",
                    cls: BI.Utils.getIconByFieldType(o.fieldType),
                    items: [{
                        type: "bi.icon"
                    }],
                    width: 30,
                    height: 30
                }, {
                    type: "bi.label",
                    text: o.name,
                    title: o.name,
                    textAlign: o.textAlign,
                    height: 30
                }, {
                    type: "bi.icon_button",
                    cls: "delete-font",
                    height: 30,
                    width: 30,
                    handler: o.removeField
                }]
            };
        }
    });
    BI.shortcut("bi.components.data_list.fields.header", Header);
})();
!(function () {
    var DataListBlankNode = BI.inherit(BI.NodeButton, {

        props: {
            layer: 0,
            open: false,
            height: 25
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.layout"
                    },
                    width: o.layer * 24
                }, {
                    el: {
                        type: "bi.icon_text_item",
                        cls: o.iconCls,
                        text: o.text,
                        value: o.value,
                        keyword: o.keyword,
                        height: o.height,
                        textRgap: 5,
                        ref: function () {
                            self.button = this;
                        }
                    }
                }]
            };
        },

        doRedMark: function () {
            this.button.doRedMark.apply(this.button, arguments);
        },

        unRedMark: function () {
            this.button.unRedMark.apply(this.button, arguments);
        }
    });

    BI.shortcut("bi.components.data_list.blank.node", DataListBlankNode);
})();!(function () {
    var DataListExpanderNode = BI.inherit(BI.NodeButton, {

        props: {
            layer: 0,
            open: false,
            height: 25
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.layout"
                    },
                    width: o.layer * 20
                }, {
                    el: {
                        type: "bi.icon_text_item",
                        cls: o.iconCls,
                        text: o.text,
                        value: o.value,
                        keyword: o.keyword,
                        height: o.height,
                        textLgap: 10,
                        textRgap: 5,
                        ref: function () {
                            self.button = this;
                        }
                    }
                }, {
                    el: {
                        type: "bi.arrow_group_node_checkbox",
                        ref: function () {
                            self.checkbox = this;
                        }
                    },
                    width: 25
                }]
            };
        },

        doRedMark: function () {
            this.button.doRedMark.apply(this.button, arguments);
        },

        unRedMark: function () {
            this.button.unRedMark.apply(this.button, arguments);
        },

        doClick: function () {
            DataListExpanderNode.superclass.doClick.apply(this, arguments);
            this.checkbox.setSelected(this.isOpened());
        },

        setOpened: function (v) {
            DataListExpanderNode.superclass.setOpened.apply(this, arguments);
            this.checkbox.setSelected(v);
        }
    });

    BI.shortcut("bi.components.data_list.expander.node", DataListExpanderNode);
})();/**
 * author: young
 * createdDate: 2018/3/22
 * description: 数据列表的node
 */
!(function () {
    var DataListNode = BI.inherit(BI.NodeButton, {
        props: {
            baseCls: "bi-components-data-list-node",
            text: "",
            title: "",
            value: "",
            iconCls: "",
            children: [],
            keyword: null,
            open: true,
            layer: 0
        },

        render: function () {
            var o = this.options;
            this.labels = [];
            return this._nodeContentCreator({
                text: o.text,
                value: o.value,
                keyword: o.keyword,
                children: o.children,
                iconCls: o.iconCls,
                layer: 0
            });
        },

        _iconCreator: function (iconCls) {
            return {
                type: "bi.center_adapt",
                cls: iconCls,
                items: [{
                    type: "bi.icon"
                }],
                width: 24,
                height: 24
            };
        },

        _itemCreator: function (node, layer) {
            var self = this;
            return {
                type: "bi.htape",
                items: [{
                    type: "bi.default",
                    width: layer * 24
                }, {
                    el: this._iconCreator(node.iconCls),
                    width: 24
                }, {
                    type: "bi.label",
                    text: node.text,
                    keyword: node.keyword,
                    textAlign: "left",
                    height: 24,
                    ref: function (ref) {
                        self.labels.push(ref);
                    }
                }],
                height: 24
            };
        },

        _nodeContentCreator: function (node, layer) {
            var self = this;
            layer = layer || 0;
            if (BI.isNotNull(node.children) && node.children.length > 0) {
                return {
                    type: "bi.expander",
                    el: {
                        type: "bi.components.data_list.blank.node",
                        layer: layer,
                        text: node.text,
                        keyword: node.keyword,
                        value: node.value,
                        open: true,
                        cls: node.iconCls,
                        // stopPropagation: true, // BI-26466
                        height: 24,
                        ref: function (ref) {
                            self.labels.push(ref);
                        }
                    },
                    popup: {
                        type: "bi.button_group",
                        items: BI.map(node.children, function (i, child) {
                            return self._nodeContentCreator(child, layer + 1);
                        }),
                        layouts: [{
                            type: "bi.vertical"
                        }]
                    }
                };
            }
            return this._itemCreator(node, layer);
        },

        doRedMark: function () {
            var self = this;
            BI.each(this.labels, function (i, label) {
                label.doRedMark(self.options.keyword);
            });
        }
    });
    BI.shortcut("bi.components.data_list.node", DataListNode);
})();/**
 * @Author: Young
 * @CreationDate 2017-12-23 15:53
 * @Description
 */
!(function () {
    var Packs = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-component-datalist-packs",
            packsGetter: null
        },
        _store: function () {
            return BI.Models.getModel("bi.model.components.data_list.packs", {
                packsGetter: this.options.packsGetter
            });
        },
        watch: {
            packItems: function (packItems) {
                this.packs.populate(packItems);
            }
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.button_group",
                    items: this.model.packItems,
                    layouts: [{
                        type: "bi.vertical"
                    }],
                    ref: function (ref) {
                        self.packs = ref;
                    },
                    listeners: [{
                        eventName: BI.ButtonGroup.EVENT_CHANGE,
                        action: function (v) {
                            self.store.setSelectedPack(v);
                            self.fireEvent("EVENT_CHANGE", v);
                        }
                    }]
                }],
                vgap: 5
            };
        },

        populate: function () {
            this.store.initData();
        }
    });
    BI.shortcut("bi.components.data_list.packs", Packs);
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-23 15:55
 * @Description
 */
!(function () {
    var Model = BI.inherit(Fix.Model, {
        _init: function () {
            this.packsGetter = this.options.packsGetter || function (callback) {
                BI.Utils.getGroups(function (res) {
                    callback(res.data);
                });
            };
        },

        state: function () {
            return {
                packs: [],
                selectedPack: null
            };
        },
        computed: {
            packItems: function () {
                var items = [];
                var packs = this._sortPacks(this.model.packs);
                BI.each(packs, function (i, group) {
                    var packs = [];
                    if (group.id === BICst.COMMON.NO_GROUPED) {
                        var myAnalysis = [{
                                id: BICst.COMMON.MY_ANALYSIS,
                                name: BI.i18nText("BI-My_Analysis"),
                                tableCount: group.myAnalysisTables.length
                            }], otherPacks = [];
                        BI.each(group.packs, function (j, pack) {
                            otherPacks.push(pack);
                        });
                        packs = myAnalysis.concat(BI.sortBy(otherPacks, "timestamp").reverse());
                    } else {
                        items.push({
                            type: "bi.label",
                            cls: "group-name",
                            text: group.name,
                            title: group.name,
                            height: 30,
                            textAlign: "left"
                        });
                        packs = BI.sortBy(group.packs, "timestamp").reverse();
                    }
                    items = items.concat(BI.createItems(BI.map(packs, function (i, item) {
                        var iconCls = item.id === BICst.COMMON.MY_ANALYSIS ? "hollow-analysis-pack-font " : "pack-folder-font ";
                        return {
                            text: item.name,
                            title: item.name,
                            value: item,
                            cls: iconCls + "bi-list-item-active bi-point-components-pack ",
                            selected: item.selected
                        };
                    }), {
                        type: "bi.icon_text_item",
                        iconWrapperWidth: 16,
                        textHgap: 5,
                        height: 24
                    }));
                });
                return items;
            }
        },

        actions: {
            initData: function (callback) {
                var self = this;
                this.packsGetter(function (packs) {
                    self.model.packs = packs;
                    BI.isFunction(callback) && callback();
                });
            },

            setSelectedPack: function (v) {
                this.model.selectedPack = v;
            }
        },
        _sortPacks: function (groups) {
            var defaultGroup = BI.find(groups, function (index, group) {
                return group.id === BICst.COMMON.NO_GROUPED;
            });
            BI.remove(groups, function (index, group) {
                return group.id === BICst.COMMON.NO_GROUPED;
            });
            return [defaultGroup].concat(BI.sortBy(groups, "initTime").reverse());
        }
    });
    BI.model("bi.model.components.data_list.packs", Model);
})();
/**
 * @Author: Young
 * @CreationDate 2018-01-25 11:27
 * @Description
 */
!(function () {
    var Switcher = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-datalist-switcher",
            packsGetter: null,
            tablesGetter: null,
            selectedPack: null
        },

        _store: function () {
            return BI.Models.getModel("bi.model.components.datalist.switcher", {
                selectedPack: this.options.selectedPack
            });
        },

        watch: {
            packName: function (packName) {
                this.tab.setSelect(packName);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.tab",
                showIndex: this.model.packName,
                single: true,
                cardCreator: BI.bind(this._cardCreator, this),
                ref: function (ref) {
                    self.tab = ref;
                }
            };
        },

        _cardCreator: function (v) {
            var self = this;
            switch (v) {
                case BICst.COMMON.EMPTY_FIELD:
                    return {
                        type: "bi.vtape",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Conf_Data_List"),
                                cls: "title",
                                textAlign: "left",
                                height: 24
                            },
                            height: 24,
                            tgap: 10
                        }, {
                            el: {
                                type: "bi.components.data_list.packs",
                                packsGetter: this.options.packsGetter,
                                ref: function (ref) {
                                    self.packs = ref;
                                },
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function (v) {
                                        self.store.setSelectedPack(v);
                                        self.fireEvent("EVENT_PACK_CHANGE", v);
                                    }
                                }]
                            }
                        }]
                    };
                default:
                    return {
                        type: "bi.vtape",
                        items: [{
                            el: {
                                type: "bi.icon_text_item",
                                cls: "back-font back-button",
                                text: BI.i18nText("BI-Basic_Back"),
                                height: 24,
                                width: 80,
                                handler: BI.bind(this.store.setSelectedPack, this.store)
                            },
                            lgap: -4,
                            tgap: 10,
                            height: 24
                        }, {
                            el: {
                                type: "bi.label",
                                cls: "title",
                                text: this.model.packName,
                                textAlign: "left",
                                height: 24
                            },
                            height: 24
                        }, {
                            type: "bi.components.data_list.tables",
                            packId: this.model.packId,
                            tablesGetter: this.options.tablesGetter,
                            ref: function (ref) {
                                self.tables = ref;
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function (v) {
                                    self.fireEvent("EVENT_CHANGE", v);
                                }
                            }]
                        }]
                    };
            }
        },

        populate: function () {
            if (this.tab.getSelect() === BICst.COMMON.EMPTY_FIELD) {
                this.packs && this.packs.populate();
            } else {
                this.tables && this.tables.populate();
            }
        }
    });
    BI.shortcut("bi.components.data_list.switcher", Switcher);
})();
/**
 * @Author: Young
 * @CreationDate 2018-01-25 11:31
 * @Description
 */
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                selectedPack: this.options.selectedPack
            };
        },
        computed: {
            packName: function () {
                return this.model.selectedPack ? this.model.selectedPack.name : BICst.COMMON.EMPTY_FIELD;
            },
            packId: function () {
                return this.model.selectedPack ? this.model.selectedPack.id : null;
            }
        },
        actions: {
            setSelectedPack: function (pack) {
                this.model.selectedPack = pack;
            }
        }
    });
    BI.model("bi.model.components.datalist.switcher", Model);
})();/**
 * Created by wangrui on 2018/5/3.
 */
!(function () {
    BI.constant("bi.constant.components.data_list.tables.show_type", {
        EMPTY: 0,
        LIST: 1
    });
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-23 16:00
 * @Description
 */
!(function () {
    var showType = BI.Constants.getConstant("bi.constant.components.data_list.tables.show_type");
    var Tables = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-component-datalist-tables",
            packId: "",
            tablesGetter: null
        },
        _store: function () {
            return BI.Models.getModel("bi.model.components.data_list.tables", {
                packId: this.options.packId,
                tablesGetter: this.options.tablesGetter
            });
        },
        watch: {
            tableItems: function (tableItems) {
                this.tables.populate(tableItems);
            },
            showIndex: function (value) {
                this.tab.setSelect(value);
            }
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.search_editor",
                        watermark: BI.i18nText("BI-Conf_Input_Table_Or_Field_Name"),
                        listeners: [{
                            eventName: BI.SearchEditor.EVENT_CLEAR,
                            action: function () {
                                self.store.setKeyword(this.getValue());
                            }
                        }, {
                            eventName: BI.SearchEditor.EVENT_CHANGE,
                            action: function () {
                                self.store.setKeyword(this.getValue());
                            }
                        }]
                    },
                    vgap: 5,
                    height: 22
                }, {
                    el: {
                        type: "bi.button_group",
                        items: this.model.tableItems,
                        layouts: [{
                            type: "bi.vertical"
                        }],
                        behaviors: {
                            redmark: function () {
                                return true;
                            }
                        },
                        ref: function (ref) {
                            self.tables = ref;
                        },
                        listeners: [{
                            eventName: BI.ButtonGroup.EVENT_CHANGE,
                            action: function (v) {
                                self.store.selectTable(v);
                                self.fireEvent("EVENT_CHANGE", v);
                            }
                        }]
                    },
                    tgap: 5
                }]
            };
        },

        getValue: function () {
            return this.tables.getValue();
        },

        populate: function () {
            this.store.initData();
        }
    });
    BI.shortcut("bi.components.data_list.tables", Tables);
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-23 16:01
 * @Description
 */
!(function () {
    var showType = BI.Constants.getConstant("bi.constant.components.data_list.tables.show_type");
    var Model = BI.inherit(Fix.Model, {
        _init: function () {
            this.tablesGetter = this.options.tablesGetter || function (packId, callback) {
                BI.Utils.getPack(packId, function (res) {
                    callback(res.data.tables);
                });
            };
        },

        state: function () {
            return {
                tables: [],
                keyword: "",
                selected: null
            };
        },

        computed: {
            inSearch: function () {
                return this.model.keyword !== "";
            },
            showIndex: function () {
                return BI.isEmptyArray(this.model.tables) ? showType.EMPTY : showType.LIST;
            },
            resultTables: function () {
                var tables = Fix.toJSON(this.model.tables);
                if (this.model.inSearch) {
                    var service = BI.Services.getService("bi.service.components.data_list.tables");
                    return service.getTableSearchResult()(tables, this.model.keyword);
                }
                return tables;
            },
            tableItems: function () {
                var self = this;
                if (BI.isEmptyArray(this.model.resultTables)) {
                    var text = this.model.keyword === "" ? "BI-Conf_Current_Pack_Has_No_Data" : "BI-Conf_Search_Content_Is_Empty";
                    return [{
                        type: "bi.label",
                        text: BI.i18nText(text),
                        disabled: true
                    }];
                }
                // 区分相关表和不相关表，相关表排名靠前
                var relative = [], noRelative = [];
                BI.each(this.model.resultTables, function (i, table) {
                    table.displayName = BI.Utils.getTableDisplayName(table);
                    table.nameFirstPY = BI.makeFirstPY(table.displayName);
                    if (BI.isNotNull(table.isNotRelative) && table.isNotRelative === true) {
                        noRelative.push(table);
                    } else {
                        relative.push(table);
                    }
                });
                relative = BI.sortBy(relative, "nameFirstPY");
                noRelative = BI.sortBy(noRelative, "nameFirstPY");
                return BI.map(relative.concat(noRelative), function (i, table) {
                    return {
                        type: "bi.components.data_list.node",
                        children: BI.map(table.children, function (i, child) {
                            return BI.defaults(child, {
                                keyword: self.model.keyword
                            });
                        }),
                        iconCls: BI.Utils.getIconByTableType(table.type),
                        cls: "bi-list-item-active bi-point-components-table",
                        text: table.displayName,
                        title: table.displayName,
                        keyword: self.model.keyword,
                        disabled: BI.isNotNull(table.isNotRelative) ? table.isNotRelative : false,
                        selected: (BI.isNotNull(table.selected) ? table.selected : false) || table.name === self.model.selected,
                        warningTitle: BI.i18nText("BI-Conf_Not_Relative_To_Selected_Fields"),
                        value: table
                    };
                });
            }
        },
        actions: {
            initData: function (callback) {
                var self = this;
                this.tablesGetter(this.options.packId, function (tables) {
                    self.model.tables = tables;
                    BI.isFunction(callback) && callback();
                });
            },
            setKeyword: function (keyword) {
                this.model.keyword = keyword;
            },
            selectTable: function (table) {
                this.model.selected = table.name;
                /**
                 * BI-18678
                 * 当tablesGetter返回的表数据中存在某一个selected: true, 然后此时我们又点击了某一项的时候，会发现其中两项都会被选中
                 * 这个时候外层组件是没法控制到tables数据的，因此需要手动赋值将其他的selected均赋值false
                 */
                BI.each(this.model.tables, function (index, v) {
                    if (v.name !== this.model.selected && v.selected === true) {
                        v.selected = false;
                    }
                }, this);
            }
        }
    });
    BI.model("bi.model.components.data_list.tables", Model);
})();
/**
 * author: young
 * createdDate: 2018/3/22
 * description:
 */
!(function () {
    var Service = BI.inherit(BI.OB, {
        getNormalTableSearchResult: function () {
            var self = this;
            return function (tables, keyword) {
                var resultTables = tables;
                // 搜索表名
                var result = BI.Func.getSearchResult(tables, keyword, "transferName");
                var match = result.match, find = result.find;
                resultTables = match.concat(find);
                var tableIndexMap = {};
                BI.each(resultTables, function (i, table) {
                    tableIndexMap[table.name] = i;
                    table.tableNameMatch = true;
                });
                var searchFieldItem = self._getMatchedFieldItems(keyword);
                BI.each(tables, function (i, table) {
                    var fields = table.fields;
                    var items = searchFieldItem(fields);
                    if (items.length > 0) {
                        table.children = items;
                        var index = tableIndexMap[table.name];
                        if (BI.isNull(index)) {
                            resultTables.push(table);
                        } else {
                            resultTables.splice(index, 1, table);
                        }
                    }
                });
                return resultTables;
            };
        },
        getTableSearchResult: function () {
            var self = this;
            return function (tables, keyword) {
                var resultTables = tables;
                // 搜索表名
                var result = BI.Func.getSearchResult(tables, keyword, "transferName");
                var match = result.match, find = result.find;
                resultTables = match.concat(find);
                var tableIndexMap = {};
                BI.each(resultTables, function (i, table) {
                    tableIndexMap[table.name] = i;
                    table.tableNameMatch = true;
                });
                var service = BI.Services.getService("bi.service.components.data_list.fields");
                var searchFieldItem = self._getMatchedFieldItems(keyword);
                BI.each(tables, function (i, table) {
                    var fields = table.fields;
                    var relatedFields = service.getAllRelativeFields(fields);
                    var originFieldItem = searchFieldItem(relatedFields.fields);
                    var circleItems = [];
                    if (BI.isNotEmptyObject(relatedFields.circleMap)) {
                        BI.each(relatedFields.circleMap, function (fieldName, circleFields) {
                            var children = searchFieldItem(circleFields);
                            if (children.length > 0) {
                                var parentField = BI.find(fields, function (index, field) {
                                    return field.id === fieldName;
                                });
                                var parentFieldItem = self._getFieldItem(parentField);
                                parentFieldItem.children = children;
                                circleItems.push(parentFieldItem);
                            }
                        });
                    }
                    var items = originFieldItem.concat(circleItems);
                    table.children = originFieldItem.concat(circleItems);
                    if (items.length > 0) {
                        table.children = items;
                        var index = tableIndexMap[table.name];
                        if (BI.isNull(index)) {
                            resultTables.push(table);
                        } else {
                            resultTables.splice(index, 1, table);
                        }
                    }
                });
                return resultTables;
            };
        },

        _getFieldItem: function (field) {
            var fieldName = field.transferName || field.name;
            return {
                id: field.id,
                value: field.id,
                text: fieldName,
                title: fieldName,
                iconCls: BI.Utils.getIconByFieldType(field.type)
            };
        },

        _getMatchedFieldItems: function (keyword) {
            var self = this;
            return function (fields) {
                var result = BI.Func.getSearchResult(fields, keyword, "transferName");
                return BI.map(result.match.concat(result.find), function (index, field) {
                    return self._getFieldItem(field);
                });
            };
        }
    });
    BI.service("bi.service.components.data_list.tables", Service);
})();
/**
 * 带有方向的pathchooser
 *
 * Created by GUY on 2016/4/21.
 * @class BI.DirectionPathChooser
 * @extends BI.Widget
 */
!(function () {
    var constants = {
        lineColor: "#808080",
        selectLineColor: "#009de3"
    };

    var DirectionPathChooser = BI.inherit(BI.Widget, {

        _defaultConfig: function () {
            return BI.extend(BI.DirectionPathChooser.superclass._defaultConfig.apply(this, arguments), {
                baseCls: "bi-excel-table",
                items: []
            });
        },

        _init: function () {
            BI.DirectionPathChooser.superclass._init.apply(this, arguments);
            var self = this, o = this.options;
            this.pathChooser = BI.createWidget({
                type: "bi.path_chooser",
                element: this,
                items: o.items
            });
            this.pathChooser.on(BI.PathChooser.EVENT_CHANGE, function (start, index) {
                // self._unselectAllArrows();
                self._setValue(start, index);
                self.fireEvent("DirectionPathChooser.EVENT_CHANGE");
            });
            this._drawArrows();

        },

        _unselectAllArrows: function () {
            var self = this, lineColor = constants.lineColor;
            BI.each(this.arrows, function (region, rs) {
                BI.each(rs, function (idx, arrows) {
                    BI.each(arrows, function (i, arrow) {
                        arrow.attr({fill: lineColor, stroke: lineColor});
                    });
                });
            });
        },

        _drawOneArrow: function (dot, direction) {
            // 0,1,2,3  上右下左
            var lineColor = constants.lineColor;
            var selectLineColor = constants.selectLineColor;
            var svg = this.pathChooser.svg;
            var path = "";
            switch (direction) {
                case 0:
                    path = "M" + dot.x + "," + dot.y
                        + "L" + (dot.x - 3) + "," + (dot.y + 5)
                        + "L" + (dot.x + 3) + "," + (dot.y + 5)
                        + "L" + dot.x + "," + dot.y;
                    break;
                case 1:
                    path = "M" + dot.x + "," + dot.y
                        + "L" + (dot.x - 5) + "," + (dot.y - 3)
                        + "L" + (dot.x - 5) + "," + (dot.y + 3)
                        + "L" + dot.x + "," + dot.y;
                    break;
                case 2:
                    path = "M" + dot.x + "," + dot.y
                        + "L" + (dot.x - 3) + "," + (dot.y - 5)
                        + "L" + (dot.x + 3) + "," + (dot.y - 5)
                        + "L" + dot.x + "," + dot.y;
                    break;
                case 3:
                    path = "M" + dot.x + "," + dot.y
                        + "L" + (dot.x + 5) + "," + (dot.y - 3)
                        + "L" + (dot.x + 5) + "," + (dot.y + 3)
                        + "L" + dot.x + "," + dot.y;
                    break;
            }
            return svg.path(path).attr({fill: lineColor, stroke: lineColor});
        },

        _drawArrows: function () {
            var self = this, o = this.options;
            var routes = this.pathChooser.routes;
            var pathes = this.pathChooser.pathes;
            var cache = this.pathChooser.cache;
            this.arrows = {};
            BI.each(routes, function (region, ps) {
                self.arrows[region] = [];
                BI.each(ps, function (idx, path) {
                    self.arrows[region][idx] = [];
                    var dots = pathes[region][idx];
                    BI.each(dots, function (i, dot) {
                        if (i > 0 && i < dots.length - 1) {
                            var arrow;
                            if (dot.y === dots[i - 1].y) {
                                if (dots[i + 1].y != dot.y) {
                                    if (cache[path[path.length - 2]].direction === -1) {
                                        if (i - 1 > 0) {
                                            arrow = self._drawOneArrow(dots[i - 1], 3);
                                        }
                                    } else {
                                        arrow = self._drawOneArrow(dots[i], 1);
                                    }
                                }
                            } else if (dot.x === dots[i - 1].x) {
                                if (dot.y > dots[i - 1].y) {
                                    if (cache[BI.first(path)].direction === -1) {
                                        arrow = self._drawOneArrow(dots[i - 1], 0);
                                    } else {
                                        arrow = self._drawOneArrow(dot, 2);
                                    }
                                } else {
                                    if (cache[path[path.length - 2]].direction === -1) {
                                        arrow = self._drawOneArrow(dots[i - 1], 2);
                                    } else {
                                        arrow = self._drawOneArrow(dot, 0);
                                    }
                                }
                            }
                            if (arrow) {
                                self.arrows[region][idx].push(arrow);
                            }
                        }
                    });
                    BI.each(path, function (i, node) {
                        if (i !== 0) {
                            var arrow;
                            var from = path[i - 1];
                            if (cache[from].direction === -1) {
                                var regionIndex = self.pathChooser.getRegionIndexById(from);
                                var x = getXoffsetByRegionIndex(regionIndex, -1);
                                var y = getYByXoffset(dots, x);
                                arrow = self._drawOneArrow({x: x, y: y}, 3);
                            } else {
                                var regionIndex = self.pathChooser.getRegionIndexById(node);
                                var x = getXoffsetByRegionIndex(regionIndex);
                                var y = getYByXoffset(dots, x);
                                arrow = self._drawOneArrow({x: x, y: y}, 1);
                            }
                            if (arrow) {
                                self.arrows[region][idx].push(arrow);
                            }
                        }
                    });
                });
            });

            function getXoffsetByRegionIndex (regionIndex, diregion) {
                if (diregion === -1) {
                    return 100 * (regionIndex + 1) - 20;
                }
                return 100 * regionIndex + 20;
            }

            function getYByXoffset (dots, xoffset) {
                var finded = BI.find(dots, function (i, dot) {
                    if (i > 0) {
                        if (dots[i - 1].x < xoffset && dots[i].x > xoffset) {
                            return true;
                        }
                    }
                });
                return finded.y;
            }
        },

        _setValue: function (start, index) {
            var self = this;
            var lineColor = constants.lineColor;
            var selectLineColor = constants.selectLineColor;
            var routes = this.pathChooser.routes;
            var starts = this.pathChooser.start;
            var each = [start];
            if (starts.contains(start)) {
                each = starts;
            }
            BI.each(each, function (i, s) {
                BI.each(self.arrows[s], function (j, arrows) {
                    BI.each(arrows, function (k, arrow) {
                        arrow.attr({fill: lineColor, stroke: lineColor}).toFront();
                    });
                });
            });
            BI.each(this.arrows[start][index], function (i, arrow) {
                arrow.attr({fill: selectLineColor, stroke: selectLineColor}).toFront();
            });
            var current = BI.last(routes[start][index]);
            while (current && routes[current] && routes[current].length === 1) {
                BI.each(self.arrows[current][0], function (i, arrow) {
                    arrow.attr({fill: selectLineColor, stroke: selectLineColor}).toFront();
                });
                current = BI.last(routes[current][0]);
            }
        },

        setValue: function (v) {
            this.pathChooser.setValue(v);
            this._unselectAllArrows();
            var routes = this.pathChooser.routes;
            var nodes = BI.keys(routes), self = this;
            var result = [], array = [];
            BI.each(v, function (i, val) {
                if (BI.contains(nodes, val)) {
                    if (array.length > 0) {
                        array.push(val);
                        result.push(array);
                        array = [];
                    }
                }
                array.push(val);
            });
            if (array.length > 0) {
                result.push(array);
            }
            // 画这n条路径
            BI.each(result, function (idx, path) {
                var start = path[0];
                var index = BI.findIndex(routes[start], function (idx, p) {
                    if (BI.isEqual(path, p)) {
                        return true;
                    }
                });
                if (index >= 0) {
                    self._setValue(start, index);
                }
            });
        },

        getValue: function () {
            return this.pathChooser.getValue();
        },

        populate: function (items) {
            this.pathChooser.populate(items);
            this._drawArrows();
        }
    });
    // BI.shortcut("bi.direction_path_chooser", DirectionPathChooser);
})();/**
 * Created by wangrui on 2018/5/17.
 * 字段编辑框。
 * 显示字段type图标
 */
var constant = {
    EDITOR: 1,
    TEXT: 2
};
BI.IconTextEditor = BI.inherit(BI.Widget, {
    props: function () {
        return {
            baseCls: "bi-icon-text-editor",
            iconCls: "",
            value: "",
            validationChecker: BI.emptyFn,
            watermark: "",
            errorText: "",
            height: 24
        };
    },

    _store: function () {
        return BI.Models.getModel("bi.model.icon_text.editor",{
            value: this.options.value
        });
    },

    watch: {
        showIndex: function (showIndex) {
            this.previewTab.setSelect(showIndex);
            if (showIndex === constant.EDITOR) {
                this.editor.focus();
                this.editor.selectAll();
            }
        }
    },

    render: function () {
        var self = this;
        return {
            type: "bi.tab",
            ref: function (_ref) {
                self.previewTab = _ref;
            },
            showIndex: this.model.showIndex,
            cardCreator: BI.bind(this._cardCreator, this)
        };
    },

    _cardCreator: function (value) {
        var self = this, o = this.options;
        switch (value) {
            case constant.EDITOR:
                return {
                    type: "bi.editor",
                    height: o.height,
                    hgap: 4,
                    vgap: 2,
                    value: this.model.value,
                    validationChecker: o.validationChecker,
                    allowBlank: false,
                    watermark: o.watermark,
                    errorText: o.errorText,
                    ref: function () {
                        self.editor = this;
                    },
                    listeners: [{
                        eventName: BI.Editor.EVENT_CONFIRM,
                        action: function () {
                            var value = this.getValue();
                            self.store.setShowIndex(constant.TEXT, value);
                            self.text.setText(value);
                            self.fireEvent(BI.IconTextEditor.EVENT_CONFIRM, arguments);
                        }
                    }]
                };
            case constant.Text:
            default:
                return {
                    type: "bi.icon_text_item",
                    cls: "sign-editor-text " + o.iconCls,
                    title: function () {
                        return self.model.value;
                    },
                    warningTitle: o.warningTitle,
                    tipType: o.tipType,
                    textAlign: "left",
                    text: this.model.value,
                    height: o.height,
                    hgap: 4,
                    ref: function () {
                        self.text = this;
                    },
                    handler: function () {
                        self.store.setShowIndex(constant.EDITOR);
                    }
                };
        }
    },

    getValue: function () {
        return this.editor.getValue();
    }
});
BI.IconTextEditor.EVENT_CONFIRM = "EVENT_CONFIRM";


BI.shortcut("bi.icon_text_editor", BI.IconTextEditor);/**
 * Created by wangrui on 2018/5/18.
 */
!(function () {
    var constant = {
        EDITOR: 1,
        TEXT: 2
    };
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                value: this.options.value,
                showIndex: constant.TEXT
            };
        },

        actions: {
            setShowIndex: function (showIndex, value) {
                this.model.showIndex = showIndex;
                if (showIndex === constant.TEXT) {
                    this.model.value = value;
                }
            }
        }
    });
    BI.model("bi.model.icon_text.editor", Model);
})();/**
 * author: young
 * createdDate: 2018/3/21
 * description: 业务表名称
 */
!(function () {
    var TableNameEditor = BI.inherit(BI.Widget, {
        props: {
            editorType: "bi.sign_editor",
            value: "",
            title: "",
            originValue: "",
            keyword: "",
            width: 150,
            height: 24
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: o.editorType,
                value: o.value,
                allowBlank: false,
                keyword: this.options.keyword,
                validationChecker: BI.bind(this._checkName, this),
                title: function () {
                    return self.tableName.getValue();
                },
                errorText: function (v) {
                    return BI.i18nText(v === "" ? "BI-Conf_Table_Name_Cannot_Empty" : "BI-Conf_Table_Name_Cannot_Repeat");
                },
                width: o.width,
                height: o.height,
                ref: function (ref) {
                    self.tableName = ref;
                },
                listeners: [{
                    eventName: BI.SignEditor.EVENT_CONFIRM,
                    action: function () {
                        var name = this.getValue();
                        if (name !== o.value) {
                            self.allNames = null;
                            self.fireEvent("EVENT_CHANGE", o.value, name);
                        }
                    }
                }]
            };
        },

        _checkName: function (name) {
            var o = this.options;
            // 认为首次渲染的是不会有重名的
            if (BI.isNull(this.firstTimeChecked)) {
                this.firstTimeChecked = true;
                return;
            }
            if (BI.isNull(this.allNames)) {
                this._assertNames();
                return;
            }
            return !BI.some(this.allNames, function (i, nameOb) {
                // 不和自己比较，否则可能出现A -> B，但是改不回去A的情况
                if (nameOb.name !== o.originValue) {
                    return nameOb.transferName === name;
                }
                return false;
            });
        },

        _assertNames: function () {
            var self = this;
            // if (BI.isNotNull(this.allNames)) {
            //     return;
            // }
            BI.Utils.getAllTableNames(function (res) {
                self.allNames = res.data;
                self.tableName.focus();
            });
        },

        doRedMark: function () {
            this.tableName.doRedMark.apply(this.tableName, arguments);
        },

        focus: function () {
            this._assertNames();
        },

        getValue: function () {
            return this.tableName.getValue();
        },

        setValue: function (v) {
            this.tableName.setValue(v);
        }
    });
    BI.shortcut("bi.components.editor.table_name", TableNameEditor);
})();
/**
 * @Author: Young
 * @CreationDate 2018-01-12 9:57
 * @Description
 */
!(function () {
    var EmptyTip = BI.inherit(BI.Widget, {
        props: {
            iconCls: "select-table-tip-background",
            text: "",
            textCls: "",
            iconHeight: 96,
            innerWidth: 300
        },
        render: function () {
            var self = this;
            return {
                type: "bi.center_adapt",
                items: [{
                    type: "bi.vertical",
                    width: this.options.innerWidth,
                    cls: this.options.iconCls,
                    items: [{
                        type: "bi.icon",
                        height: this.options.iconHeight
                    }, {
                        type: "bi.label",
                        text: this.options.text,
                        ref: function () {
                            self.text = this;
                        },
                        cls: "bi-tips " + this.options.textCls
                    }],
                    vgap: 20
                }]
            };
        },
        setText: function (text) {
            this.text.setText(text);
        }
    });
    BI.shortcut("bi.components.empty_tip", EmptyTip);
})();/**
 * @author: Teller
 * @createdAt: 2018/4/24 上午11:50
 * @Description: 用于字段列表，为空时会提示无可用字段
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-components-empty-tip-field-list",
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
            items: []
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                items: self._mapItems(o.items),
                chooseType: o.chooseType,
                layouts: [{
                    type: "bi.vertical"
                }],
                ref: function (ref) {
                    self.fields = ref;
                },
                listeners: [{
                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                    action: function (v) {
                        self.fireEvent("EVENT_CHANGE", v);
                    }
                }]
            };
        },

        populate: function (items) {
            this.fields.populate(this._mapItems(items));
        },

        getValue: function () {
            return this.fields.getValue();
        },

        _mapItems: function (items) {
            if (BI.size(items) !== 0) return items;

            // 为空时显示无可用字段
            return [{
                type: "bi.label",
                text: BI.i18nText("BI-Design_No_Usable_Fields"),
                disabled: true
            }];
        }
    });
    BI.shortcut("bi.components.empty_tip_field_list", Widget);
})();
!(function () {
    var Error = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-error-label",
            errorLeft: 0,
            errorHeight: 16,
            errorText: ""
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.absolute",
                height: o.height || 24,
                items: [{
                    el: {
                        type: "bi.vertical",
                        cls: "bi-bubble",
                        invisible: true,
                        items: [{
                            el: {
                                type: "bi.label",
                                cls: "bubble-error",
                                text: o.errorText,
                                height: o.errorHeight,
                                hgap: 5,
                                ref: function (_ref) {
                                    self.errorText = _ref;
                                }
                            }
                        }],
                        ref: function (_ref) {
                            self.error = _ref;
                        }
                    },
                    top: -o.errorHeight,
                    left: o.errorLeft
                }, {
                    el: o.el,
                    top: 0, right: 0, bottom: 0, left: 0
                }]
            };
        },

        showError: function (text) {
            text && this.errorText.setText(text);
            this.error.setVisible(true);
        },

        hideError: function () {
            this.error.setVisible(false);
        }
    });
    BI.shortcut("bi.error_label", Error);
})();/**
 * Created by lei.wang on 2018/7/26.
 */
(function () {
    var Widget = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-conf-pack-db-error-pane",
            errorMsg: ""
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                cls: "bi-card",
                items: [{
                    el: {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.vertical",
                            cls: "preview-fail",
                            items: [{
                                type: "bi.center_adapt",
                                cls: "preview-fail-tip-background",
                                items: [{
                                    type: "bi.icon",
                                    width: 96,
                                    height: 96
                                }]
                            }, {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Preview") + BI.i18nText("BI-Basic_Failed"),
                                cls: "preview-fail-comment bi-tips"
                            }, {
                                type: "bi.center_adapt",
                                items: [{
                                    el: {
                                        type: "bi.horizontal",
                                        items: [{
                                            type: "bi.button",
                                            level: "ignore",
                                            width: 80,
                                            height: 24,
                                            text: BI.i18nText("BI-Basic_Detail_Info"),
                                            ref: function (_ref) {
                                                self.detailButton = _ref;
                                            },
                                            handler: function () {
                                                self._togglePane();
                                            }
                                        }, {
                                            type: "bi.button",
                                            text: BI.i18nText("BI-Conf_Retry_Preview"),
                                            width: 80,
                                            height: 24,
                                            handler: function () {
                                                self.fireEvent("EVENT_CHANGE");
                                            }
                                        }],
                                        hgap: 10,
                                        width: 190
                                    }
                                }]
                            }, {
                                type: "bi.center_adapt",
                                items: [{
                                    el: {
                                        type: "bi.left",
                                        width: 500,
                                        height: 200,
                                        cls: "fail-detail-info error-pane",
                                        ref: function (_ref) {
                                            self.detailInfo = _ref;
                                        },
                                        invisible: true,
                                        scrollable: true,
                                        items: [{
                                            type: "bi.label",
                                            whiteSpace: "normal",
                                            textAlign: "left",
                                            text: o.errorMsg,
                                            ref: function (_ref) {
                                                self.detailText = _ref;
                                            }
                                        }],
                                        hgap: 10,
                                        vgap: 10
                                    },
                                    width: 280
                                }]
                            }],
                            vgap: 10
                        }]
                    },
                    left: 10,
                    top: 10,
                    right: 10,
                    bottom: 10
                }]
            };
        },

        setErrorMsg: function (text) {
            this.detailText.setText(text);
        },

        _togglePane: function () {
            if(!this.detailInfo.isVisible()) {
                this.detailButton.setText(BI.i18nText("BI-Basic_Close_Detail_Info"));
                this.detailInfo.setVisible(true);
            } else {
                this.detailButton.setText(BI.i18nText("BI-Basic_Detail_Info"));
                this.detailInfo.setVisible(false);
            }
        }
    });

    BI.shortcut("bi.components.error_tip", Widget);
}());
/**
 * Created by Urthur on 2017/12/13.
 */
!(function () {
    var Item = BI.inherit(BI.Widget, {
        _constants: {
            HEIGHT: 28,
            WIDTH: 30
        },

        props: {
            baseCls: "bi-filter-date-n"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.label",
                        height: this._constants.HEIGHT,
                        text: "N="
                    },
                    width: this._constants.WIDTH
                }, {
                    type: "bi.text_editor",
                    validationChecker: function (v) {
                        return BI.isPositiveInteger(v);
                    },
                    errorText: BI.i18nText("BI-Please_Input_Positive_Integer"),
                    height: this._constants.HEIGHT,
                    listeners: [{
                        eventName: BI.TextEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent(Item.EVENT_CONFIRM);
                        }
                    }],
                    ref: function (_ref) {
                        self.editor = _ref;
                    }
                }],
                height: this._constants.HEIGHT
            };
        },

        getValue: function () {
            return  this.editor.getValue();
        },

        setValue: function (v) {
            BI.isNotNull(v) && this.editor.setValue(v);
        }
    });
    Item.EVENT_CONFIRM = "EVENT_CONFIRM";
    BI.shortcut("bi.filter.date_n", Item);
}());/**
 * Created by Urthur on 2017/12/13.
 */
!(function () {
    var Item = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-filter-date-range"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.date_interval",
                width: 230,
                listeners: [{
                    eventName: BI.DateInterval.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent(Item.EVENT_CHANGE);
                    }
                }],
                ref: function (_ref) {
                    self.timeInterval = _ref;
                }
            };
        },

        getValue: function () {
            var timeRange = this.timeInterval.getValue();
            var start = timeRange.start, end = timeRange.end;
            return {
                start: start,
                end: end
            };
        },

        setValue: function (v) {
            var sString = v.start, eString = v.end;
            var value = {};
            BI.isNull(sString) ? value["start"] = null : value["start"] = sString;
            BI.isNull(eString) ? value["end"] = null : value["end"] = eString;
            this.timeInterval.setValue(value);
        }
    });
    Item.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.filter.item.date_range", Item);
}());/**
 * Created by Urthur on 2017/12/13.
 */
!(function () {
    var Item = BI.inherit(BI.Widget, {
        _constants: {
            HEIGHT: 28,
            WIDTH: 30
        },

        props: {
            baseCls: "bi-filter-number-n"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.label",
                        height: this._constants.HEIGHT,
                        text: "N="
                    },
                    width: this._constants.WIDTH
                }, {
                    type: "bi.text_editor",
                    cls: "bi-focus-shadow",
                    allowBlank: true,
                    validationChecker: function (v) {
                        return BI.isPositiveInteger(v) || BI.isEmptyString(v);
                    },
                    errorText: BI.i18nText("BI-Please_Input_Positive_Integer"),
                    height: this._constants.HEIGHT,
                    listeners: [{
                        eventName: BI.TextEditor.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }, {
                        eventName: BI.TextEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent(Item.EVENT_CONFIRM);
                        }
                    }],
                    ref: function (_ref) {
                        self.editor = _ref;
                    }
                }],
                height: this._constants.HEIGHT
            };
        },

        getValue: function () {
            return  this.editor.getValue();
        },

        setValue: function (v) {
            BI.isNotNull(v) && this.editor.setValue(v);
        }
    });
    Item.EVENT_CONFIRM = "EVENT_CONFIRM";
    BI.shortcut("bi.filter.item.number_n", Item);
}());
!(function () {
    BI.constant("bi.constant.filter.sub.number", [[{
        text: BI.i18nText("BI-Basic_Settled_Value"),
        value: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Average_Value"),
        value: BICst.ANALYSIS_FILTER_NUMBER_VALUE.AVG,
        cls: "dot-e-font"
    }]]);
})();/**
 * Created by Urthur on 2017/12/13.
 */
!(function () {
    var Item = BI.inherit(BI.Widget, {
        _constants: {
            HEIGHT: 28,
            COMBO_WIDTH: 100,
            GAP: 10
        },

        props: {
            baseCls: "bi-filter-number-one-side"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.htape",
                items: [{
                    type: "bi.text_value_down_list_combo",
                    width: this._constants.COMBO_WIDTH,
                    height: this._constants.HEIGHT,
                    items: BI.Constants.getConstant("bi.constant.filter.sub.number"),
                    listeners: [{
                        eventName: BI.TextValueDownListCombo.EVENT_CHANGE,
                        action: function () {
                            var v = this.getValue()[0];
                            self.editor.setVisible(v === BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED);
                            self.fireEvent("EVENT_CHANGE");
                            self.fireEvent("EVENT_CONFIRM");
                        }
                    }],
                    ref: function (_ref) {
                        self.combo = _ref;
                    }
                }, {
                    type: "bi.text_editor",
                    cls: "bi-focus-shadow",
                    validationChecker: function (v) {
                        return BI.isNumeric(v);
                    },
                    errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                    height: this._constants.HEIGHT,
                    listeners: [{
                        eventName: BI.TextEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent(Item.EVENT_CONFIRM);
                        }
                    }, {
                        eventName: BI.TextEditor.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }],
                    ref: function (_ref) {
                        self.editor = _ref;
                    }
                }],
                rgap: this._constants.GAP,
                height: this._constants.HEIGHT
            };
        },

        getValue: function () {
            return  {
                type: this.combo.getValue()[0],
                value: this.editor.getValue()
            };
        },

        setValue: function (v) {
            if (BI.isNotNull(v)) {
                this.combo.setValue(v.type);
                if (v.type === BICst.ANALYSIS_FILTER_NUMBER_VALUE.AVG) {
                    this.editor.setVisible(false);
                    this.editor.setValue();
                } else {
                    this.editor.setValue(v.value);
                }
            }
        }
    });
    Item.EVENT_CONFIRM = "EVENT_CONFIRM";
    BI.shortcut("bi.filter.item.number_one_side", Item);
}());
/**
 * 拖拽字段的helper
 * Created by roy on 15/10/13.
 */
BI.Helper = BI.inherit(BI.Tip, {
    _defaultConfig: function () {
        return BI.extend(BI.Helper.superclass._defaultConfig.apply(this, arguments), {
            extraCls: "bi-helper cursor-drag",
            text: "",
            value: "",
            textAlign: "center"
        });
    },

    _init: function () {
        BI.Helper.superclass._init.apply(this, arguments);
        this.populate();
    },

    modifyContent: function (widget) {
        this.empty();
        BI.createWidget({
            type: "bi.left",
            element: this,
            hgap: -5,
            cls: "dragging-modify",
            items: [widget]
        });
    },

    populate: function () {
        var o = this.options;
        this.element.data({helperWidget: this});
        this.empty();
        BI.createWidget({
            element: this,
            type: "bi.label",
            textAlign: o.textAlign,
            textHeight: 20,
            hgap: 5,
            text: o.text,
            value: o.value
        });
        this.element.removeClass("dragging-modify");
    }
});
BI.shortcut("bi.helper", BI.Helper);
/**
 * Created by User on 2017/9/28.
 */
!(function () {
    var HistoryFlowButton = BI.inherit(BI.Single, {

        props: {
            baseCls: "bi-history-flow-button",
            width: 110,
            height: 24,
            hideDelete: false
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.text_button",
                        cls: "bi-high-light bi-border bi-high-light-border flow-button bi-list-item-select bi-card",
                        level: (o.isValid ? "common" : "warning"),
                        selected: o.selected,
                        text: o.text,
                        textHeight: o.height - 2,
                        value: o.value,
                        width: o.width - 2,
                        ref: function (_ref) {
                            self.textButton = _ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("EVENT_CHANGE");
                            }
                        }, {
                            eventName: "__EVENT_CHANGE__",
                            action: function () {
                                self.fireEvent("__EVENT_CHANGE__", arguments);
                            }
                        }]
                    }
                }, {
                    el: {
                        type: "bi.bubble_combo",
                        cls: o.hideDelete === false ? "delete-combo" : "",
                        ref: function (_ref) {
                            self.deleteButton = _ref;
                        },
                        el: {
                            type: "bi.icon_button",
                            cls: o.selected ? "widget-close-font icon-selected" : "widget-close-font",
                            width: 16,
                            height: 16
                        },
                        invisible: o.hideDelete === true,
                        popup: {
                            type: "bi.bubble_bar_popup_view",
                            el: {
                                type: "bi.vertical",
                                items: [{
                                    el: {
                                        type: "bi.label",
                                        text: BI.i18nText("BI-Conf_Confirm_Remove_The_Step"),
                                        cls: "title-label",
                                        textAlign: "left"
                                    },
                                    tgap: 15
                                }, {
                                    el: {
                                        type: "bi.label",
                                        text: BI.i18nText("BI-Conf_Effect_After_Remove_Step"),
                                        ref: function (_ref) {
                                            self.detailHintLabel = _ref;
                                        },
                                        cls: "detail-label",
                                        textAlign: "left"
                                    }
                                }],
                                width: 250,
                                height: 100,
                                hgap: 20
                            },
                            buttons: [{
                                value: BI.i18nText("BI-Basic_Cancel"),
                                level: "ignore",
                                width: 80,
                                height: 24,
                                handler: function () {
                                    self.deleteButton.hideView();
                                }
                            }, {
                                value: BI.i18nText(BI.i18nText("BI-Basic_Sure")),
                                width: 80,
                                height: 24,
                                handler: function () {
                                    self.deleteButton.hideView();
                                    self.fireEvent("EVENT_DELETE");
                                }
                            }],
                            maxHeight: 100,
                            minWidth: 250
                        },
                        listeners: [{
                            eventName: "EVENT_BEFORE_POPUPVIEW",
                            action: function () {
                                self.detailHintLabel.setVisible(!o.end);
                            }
                        }]
                    },
                    top: 4,
                    right: 5,
                    width: 16,
                    height: 16
                }]
            };
        },

        doRedMark: function () {
            this.textButton.doRedMark.apply(this.textButton, arguments);
        },

        unRedMark: function () {
            this.textButton.unRedMark.apply(this.textButton, arguments);
        },

        doHighLight: function () {
            this.textButton.doHighLight.apply(this.textButton, arguments);
        },

        unHighLight: function () {
            this.textButton.unHighLight.apply(this.textButton, arguments);
        },

        setSelected: function () {
            this.textButton.setSelected.apply(this.textButton, arguments);
        }
    });
    BI.shortcut("bi.history_flow_button", HistoryFlowButton);
})();
/**
 * Created by User on 2017/9/29.
 */
!(function () {
    var HistoryFlowAddCombo = BI.inherit(BI.Single, {

        props: {
            baseCls: "bi-history-flow-add-combo",
            width: 110,
            height: 24
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.down_list_combo",
                iconCls: "history-add-font icon-size-12",
                cls: "bi-list-item-select bi-border bi-high-light-border",
                chooseType: BI.Selection.Single,
                adjustLength: 8,
                width: o.width - 2,
                height: o.height - 2,
                el: {
                    type: "bi.icon_button",
                    width: o.width - 2,
                    height: o.height - 2,
                    warningTitle: o.warningTitle
                },
                items: o.items,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function (v) {
                        self.fireEvent("EVENT_CHANGE", v);
                    }
                }]
            };
        }
    });
    BI.shortcut("bi.history_flow_add_combo", HistoryFlowAddCombo);
})();
/**
 * Created by User on 2017/10/9.
 */
!(function () {
    var consts = {
        GAP: 20
    };

    var HistoryFlowBlock = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-history-flow-block",
            width: 110,
            height: 24,
            popupItems: [],
            isValid: true
        },


        render: function () {
            var self = this, o = this.options, c = consts;
            var it = [{
                el: {
                    type: "bi.history_flow_button",
                    selected: o.selected,
                    hideDelete: o.hideDelete,
                    hideAdd: o.hideAdd,
                    end: o.end,
                    isValid: o.isValid,
                    ref: function (_ref) {
                        self.button = _ref;
                    },
                    text: o.text,
                    value: o.value,
                    listeners: [{
                        eventName: "__EVENT_CHANGE__",
                        action: function () {
                            self.fireEvent("__EVENT_CHANGE__", arguments);
                        }
                    }, {
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }, {
                        eventName: "EVENT_DELETE",
                        action: function () {
                            self.fireEvent("EVENT_DELETE");
                        }
                    }]
                },
                height: o.height - c.GAP
            }];
            if(o.isValid === true && o.hideAdd === false) {
                it.push({
                    el: {
                        type: "bi.history_flow_link",
                        items: o.popupItems,
                        height: c.GAP,
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (v) {
                                self.fireEvent("EVENT_ADD", v);
                            }
                        }]
                    },
                    height: c.GAP
                });
            }
            return {
                type: "bi.vertical",
                items: it
            };
        },

        setSelected: function (v) {
            this.button.setSelected(!!v);
        },

        getValue: function () {
            return this.options.value;
        }
    });
    BI.shortcut("bi.history_flow_block", HistoryFlowBlock);
})();
/**
 * Created by User on 2017/9/28.
 */
BI.HistoryFlow = BI.inherit(BI.Widget, {

    _const: {
        END_BUTTON: "addEnd",
        END_ARROW: "addArrow",
        LINE_COLOR: "#d4dadd",
        GAP: 20,
        ITEM_Width: 110,
        ITEM_Height: 24
    },

    props: {
        baseCls: " bi-history-flow",
        items: [],
        popupItems: [],
        once: false
    },

    mounted: function () {
        this._drawLines();
    },

    render: function () {
        var self = this;
        return {
            type: "bi.button_group",
            items: this._createMainItems(),
            layouts: [{
                type: "bi.center_adapt",
                scrollable: true
            }],
            ref: function (ref) {
                self.mainContainer = ref;
            }
        };
    },

    _formatItems: function () {
        var self = this, o = this.options, c = this._const;
        var isAllValid = this.isAllValid();
        o.items = BI.map(o.items, function (idx, item) {
            var block = {
                type: "bi.history_flow_block",
                text: item.text,
                value: item.value,
                selected: item.selected,
                disabled: item.disabled,
                popupItems: o.popupItems,
                hideAdd: o.items.length - 1 === idx || isAllValid === false || o.once === true,
                end: o.items.length - 1 === idx,
                hideDelete: idx === 0,
                width: c.ITEM_Width,
                height: c.ITEM_Height + c.GAP,
                listeners: [{
                    eventName: "EVENT_ADD",
                    action: function (v) {
                        self.fireEvent(BI.HistoryFlow.EVENT_ADD, item.value, v);
                    }
                }, {
                    eventName: "EVENT_DELETE",
                    action: function () {
                        self.fireEvent(BI.HistoryFlow.EVENT_DELETE, item.value);
                    }
                }, {
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent(BI.HistoryFlow.EVENT_CHANGE, item.value);
                    }
                }]
            };
            if (BI.isNotNull(item.isValid)) {
                block.isValid = item.isValid;
            }
            return block;
        });
    },

    _createItems: function () {
        var self = this, o = this.options, c = this._const;
        return BI.concat(o.items, (o.once === true && o.items.length > 1) ? [] : [{
            type: "bi.history_flow_add_combo",
            width: c.ITEM_Width,
            height: c.ITEM_Height,
            value: BI.UUID(),
            items: o.popupItems,
            disabled: !self.isAllValid() || o.disableAdd,
            tipType: "success",
            title: function () {
                if(o.disableAdd) {
                    return o.disabledAddTitle;
                }
            },
            warningTitle: function () {
                if(!self.isAllValid()) {
                    return BI.i18nText("BI-Conf_Red_Step_Is_Error_Fix_It");
                }
            },
            listeners: [{
                eventName: "EVENT_CHANGE",
                action: function (v) {
                    self.fireEvent(BI.HistoryFlow.EVENT_ADD, o.items.length, v);
                }
            }]
        }]);
    },

    _drawLines: function () {
        var o = this.options, c = this._const;
        var items = o.items;
        var positions = this._calculateXY();
        var path = "";
        this.svg.clear();
        BI.each(items, function (idx, item) {
            if(idx < items.length - 1) {
                path += "M" + positions[item.value].x + "," + positions[item.value].y + "L"
                    + positions[items[idx + 1].value].x + "," + (positions[items[idx + 1].value].y - c.ITEM_Height);
            }
        });
        this.svg.path(path).attr({stroke: c.LINE_COLOR});
        if(o.once === false || o.items.length <= 1) {
            var lastItem = BI.last(items);
            var linkedPointString = positions[lastItem.value].x + "," + positions[lastItem.value].y;
            var endPath = "M" + linkedPointString + "L" + positions[c.END_BUTTON].x + "," + (positions[c.END_BUTTON].y - c.ITEM_Height);
            this.svg.path(endPath).attr({stroke: c.LINE_COLOR});
        }
    },

    _calculateXY: function () {
        var o = this.options, c = this._const;
        var length = o.items.length;
        var width = c.ITEM_Width;
        var x = width / 2;
        var height = 0;
        BI.each(o.items, function () {
            height = c.ITEM_Height + c.GAP + height;
        }, 0);
        var levelHeight = height / length;
        var xy = {};
        BI.each(o.items, function (idx, item) {
            xy[item.value] = {x: x, y: levelHeight * idx + levelHeight - c.GAP};
        });
        xy[this._const.END_ARROW] = {x: x, y: levelHeight * o.items.length};
        xy[this._const.END_BUTTON] = {x: x, y: levelHeight * o.items.length + levelHeight - c.GAP};
        return xy;
    },

    isAllValid: function () {
        return BI.isNull(BI.find(this.options.items, function (idx, item) {
            return item.isValid === false;
        }));
    },

    _createMainItems: function () {
        var c = this._const, o = this.options, self = this;
        this._formatItems();
        return [{
            type: "bi.absolute",
            width: c.ITEM_Width,
            height: o.items.length * (c.ITEM_Height + c.GAP) + c.ITEM_Height,
            items: [{
                el: {
                    type: "bi.svg",
                    ref: function (ref) {
                        self.svg = ref;
                    }
                },
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            }, {
                el: {
                    type: "bi.button_group",
                    layouts: [{
                        type: "bi.vertical",
                        scrolly: false
                    }],
                    ref: function (_ref) {
                        self.group = _ref;
                    },
                    items: this._createItems()
                },
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
            }]
        }];
    },

    populate: function (items) {
        this.options.items = items;
        this.mainContainer.populate(this._createMainItems());
        this._drawLines();
    }
});
BI.HistoryFlow.EVENT_CHANGE = "EVENT_CHANGE";
BI.HistoryFlow.EVENT_ADD = "EVENT_ADD";
BI.HistoryFlow.EVENT_DELETE = "EVENT_DELETE";
BI.shortcut("bi.history_flow", BI.HistoryFlow);
/**
 * Created by User on 2017/10/8.
 */
!(function () {
    var HistoryFlowLink = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-history-flow-link",
            height: 12
        },


        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.center_adapt",
                items: [{
                    type: "bi.center_adapt",
                    cls: "link-region",
                    ref: function (_ref) {
                        self.layout = _ref;
                    },
                    width: 20,
                    height: o.height,
                    items: [{
                        type: "bi.down_list_combo",
                        adjustLength: 2,
                        iconCls: "history-add-font icon-size-12",
                        cls: "bi-border bi-high-light-border add-combo",
                        width: 12,
                        height: 12,
                        el: {
                            type: "bi.icon_button",
                            width: 12,
                            height: 12
                        },
                        items: o.items,
                        ref: function (_ref) {
                            self.addCombo = _ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (v) {
                                self.fireEvent("EVENT_CHANGE", v);
                            }
                        }]
                    }]
                }]
            };
        }
    });
    BI.shortcut("bi.history_flow_link", HistoryFlowLink);
})();
(function () {
    /**
     * Created by imp on 2016/1/28.
     */
    var ImageButtonHref = BI.inherit(BI.Single, {
        props: {
            baseCls: "bi-image-button-href",
            title: BI.i18nText("BI-Basic_Add_Href"),
            value: ""
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.combo",
                ref: function (_ref) {
                    self.combo = _ref;
                },
                direction: "top,right",
                adjustYOffset: 3,
                el: {
                    ref: function (_ref) {
                        self.trigger = _ref;
                    },
                    type: "bi.icon_button",
                    cls: "href-font",
                    title: o.title,
                    height: 24,
                    width: 24
                },
                popup: {
                    el: {
                        ref: function (_ref) {
                            self.input = _ref;
                        },
                        type: "bi.clear_editor",
                        cls: "editor-text",
                        watermark: BI.i18nText("BI-Basic_Input_Href"),
                        width: 255,
                        height: 30,
                        value: o.value,
                        listeners: [{
                            eventName: BI.ClearEditor.EVENT_CONFIRM,
                            action: function () {
                                self.combo.hideView();
                            }
                        }]
                    },
                    stopPropagation: false,
                    minWidth: 255
                },
                listeners: [{
                    eventName: BI.Combo.EVENT_AFTER_POPUPVIEW,
                    action: function () {
                        self.input.focus();
                    }
                }, {
                    eventName: BI.Combo.EVENT_BEFORE_HIDEVIEW,
                    action: function () {
                        self.fireEvent(ImageButtonHref.EVENT_CHANGE, arguments);
                    }
                }]
            };
        },

        showView: function () {
            this.combo.showView();
        },

        getValue: function () {
            return this.input.getValue();
        },

        setValue: function (url) {
            url && this.input.setValue(url);
        }
    });
    ImageButtonHref.EVENT_CHANGE = "BI.ImageButtonHref.EVENT_CHANGE";
    BI.shortcut("bi.image_button_href", ImageButtonHref);
})();
!(function () {
    var Combo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-conf-pack-analysis-data-mining-label-combo",
            labelWidth: 100,
            items: [],
            comboWidth: 200,
            labelText: "",
            text: BI.i18nText("BI-Basic_Please_Select_Field"),
            value: [],
            valueFormatter: BI.emptyFn,
            fieldsMap: {}
        },

        render: function () {
            var self = this, o = this.options;
            this.items = this._digestItems(o.items);

            return {
                type: "bi.absolute",
                height: 24,
                items: [{
                    el: {
                        type: "bi.vertical",
                        cls: "bi-bubble",
                        invisible: true,
                        items: [{
                            el: {
                                type: "bi.label",
                                cls: "bubble-error",
                                text: BI.i18nText("BI-Basic_Cannot_Be_Null"),
                                hgap: 5
                            }
                        }],
                        ref: function (_ref) {
                            self.error = _ref;
                        }
                    },
                    top: -20,
                    left: o.labelWidth
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        items: [{
                            type: "bi.label",
                            width: o.labelWidth,
                            textAlign: "left",
                            text: o.labelText
                        }, {
                            type: "bi.all_value_multi_text_value_combo",
                            width: o.comboWidth,
                            height: 24,
                            value: this._changeValue(o.value, o.items),
                            items: this.items,
                            valueFormatter: o.valueFormatter,
                            text: o.text,
                            listeners: [{
                                eventName: BI.AllValueMultiTextValueCombo.EVENT_CONFIRM,
                                action: function () {
                                    self.fireEvent(BI.SearchMultiTextValueCombo.EVENT_CONFIRM, self.getValue());
                                    self.hideError();
                                }
                            }],
                            ref: function (_ref) {
                                self.combo = _ref;
                            }
                        }]
                    }, top: 0, right: 0, bottom: 0, left: 0
                }]
            };
        },

        getValue: function () {
            var self = this;
            var value = this.combo.getValue();
            return BI.map(value, function (index, v) {
                return self.map[v];
            });
        },

        setValue: function (v) {
            this.combo.setValue(this._changeValue(v, this.options.items));
        },

        showError: function () {
            this.error.setVisible(true);
        },

        hideError: function () {
            this.error.setVisible(false);
        },

        populate: function (items) {
            this.options.items = items;
            this.items = this._digestItems(items);
            this.combo.populate(this.items);
        },

        _digestItems: function (items) {
            var self = this;
            self.map = {};
            return BI.map(items, function (index, item) {
                self.map[item.text]  = item.value;
                return {
                    value: item.text,
                    text: item.text
                };
            });
        },

        _changeValue: function (val, items) {
            var self = this;
            return BI.map(val, function (i, v) {
                var find = BI.find(items, function (idx, item) {
                    return item.value === v;
                });
                return BI.isNotNull(find) ? find.text : self.options.fieldsMap[v];
            });
        }
    });
    BI.shortcut("bi.data_mining.value_chooser_combo", Combo);
})();
!(function () {
    var Combo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-conf-pack-analysis-data-mining-label-combo",
            labelWidth: 100,
            items: [],
            comboWidth: 200,
            labelText: "",
            text: "",
            value: ""
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vertical_adapt",
                items: [{
                    type: "bi.label",
                    width: o.labelWidth,
                    textAlign: "left",
                    text: o.labelText
                }, {
                    type: "bi.text_value_combo",
                    width: o.comboWidth,
                    height: 24,
                    value: o.value,
                    text: o.text,
                    items: o.items,
                    listeners: [{
                        eventName: BI.TextValueCombo.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(BI.TextValueCombo.EVENT_CHANGE, arguments);
                            self.hideError();
                        }
                    }],
                    ref: function (_ref) {
                        self.combo = _ref;
                    }
                }]
            };

            return {
                type: "bi.absolute",
                height: 24,
                items: [{
                    el: {
                        type: "bi.vertical",
                        cls: "bi-bubble",
                        invisible: false,
                        items: [{
                            el: {
                                type: "bi.label",
                                cls: "bubble-error",
                                text: BI.i18nText("BI-Basic_Cannot_Be_Null"),
                                hgap: 5
                            }
                        }],
                        ref: function (_ref) {
                            self.error = _ref;
                        }
                    },
                    top: -20,
                    left: o.labelWidth
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        items: [{
                            type: "bi.label",
                            width: o.labelWidth,
                            textAlign: "left",
                            text: o.labelText
                        }, {
                            type: "bi.text_value_combo",
                            width: o.comboWidth,
                            height: 24,
                            value: o.value,
                            text: o.text,
                            items: o.items,
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: function () {
                                    self.fireEvent(BI.TextValueCombo.EVENT_CHANGE, arguments);
                                    self.hideError();
                                }
                            }],
                            ref: function (_ref) {
                                self.combo = _ref;
                            }
                        }]
                    }, top: 0, right: 0, bottom: 0, left: 0
                }]
            };
        },

        showError: function () {
            BI.Bubbles.show(this.options.text, BI.i18nText("BI-Basic_Cannot_Be_Null"), this.combo, {
                level: "error"
            });
        },

        hideError: function () {
            BI.Bubbles.hide(this.options.text);
        },

        populate: function (items) {
            this.combo.populate(items);
        }
    });
    BI.shortcut("bi.data_mining.label_text_value_combo", Combo);
})();
!(function () {
    /**
     * 一个button选中的时候下面有条线
     *
     * Created by GUY on 2015/9/30.
     * @class BI.LineSegmentButton
     * @extends BI.BasicButton
     */
    var Widget = BI.inherit(BI.BasicButton, {

        _defaultConfig: function () {
            var conf = Widget.superclass._defaultConfig.apply(this, arguments);
            return BI.extend(conf, {
                baseCls: (conf.baseCls || "") + " bi-line-segment-button bi-list-item-effect",
                once: true,
                readonly: true,
                hgap: 10,
                height: 25
            });
        },

        _init: function () {
            Widget.superclass._init.apply(this, arguments);
            var o = this.options;
            this.text = BI.createWidget({
                type: "bi.label",
                element: this,
                text: o.text,
                height: o.height,
                value: o.value,
                hgap: o.hgap
            });

            this.line = BI.createWidget({
                type: "bi.layout",
                cls: "line-segment-button-line",
                height: 3
            });
            BI.createWidget({
                type: "bi.absolute",
                element: this,
                items: [{
                    el: this.line,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            });
        },

        setSelected: function (v) {
            Widget.superclass.setSelected.apply(this, arguments);
            if (v) {
                this.line.element.addClass("bi-high-light-background");
            } else {
                this.line.element.removeClass("bi-high-light-background");
            }
        },

        setText: function (text) {
            Widget.superclass.setText.apply(this, arguments);
            this.text.setText(text);
        },

        destroy: function () {
            Widget.superclass.destroy.apply(this, arguments);
        }
    });
    BI.shortcut("bi.line_segment_button", Widget);
})();
/**
 * 文本标签
 *
 * Created by fay on 2016/9/11.
 */
!(function () {
    BI.ListLabel = BI.inherit(BI.Single, {

        _constant: {
            MAX_COLUMN_SIZE: 41,
            DEFAULT_LABEL_GAP: 15,
            DEFAULT_RIGHT_GAP: 10
        },

        props: {
            baseCls: "bi-list-label",
            showTitle: true,
            items: [],
            height: 40
        },

        _init: function () {
            BI.ListLabel.superclass._init.apply(this, arguments);
            var self = this, o = this.options;
            this.items = BI.clone(o.items);
            this.items.unshift({
                text: BI.i18nText("BI-Basic_No_limited"),
                value: BICst.LIST_LABEL_TYPE.ALL
            });
            this.title = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Design_String_Label_Widget") + BI.i18nText("BI-Basic_Colon"),
                title: BI.i18nText("BI-Design_String_Label_Widget"),
                height: o.height
            });

            this.container = BI.createWidget({
                type: "bi.list_label_item_group",
                items: BI.createItems(this.items.slice(0, this._constant.MAX_COLUMN_SIZE), {
                    type: "bi.text_button",
                    height: o.height,
                    rgap: this._constant.DEFAULT_RIGHT_GAP
                }),
                layouts: [{
                    type: "bi.vertical_adapt",
                    rgap: this._constant.DEFAULT_LABEL_GAP,
                    height: o.height
                }]
            });
            this.container.on(BI.ButtonGroup.EVENT_CHANGE, function (value) {
                self.fireEvent("EVENT_CHANGE", value);
            });
            this.minTip = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Basic_No_Selected_Value"),
                disabled: true,
                height: o.height
            });
            this.maxTip = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Basic_Max_Show_40_Labels"),
                disabled: true,
                height: o.height
            });

            this.checkTipsState(o.items);
            this.right = BI.createWidget({
                type: "bi.horizontal",
                items: [this.container, this.minTip, this.maxTip]
            });
            var wheelHandler = new BI.WheelHandler(function (deltaX, deltaY) {
                if (deltaY !== 0) {
                    self.right.element.scrollLeft(self.right.element.scrollLeft() + deltaY);
                }
            }
            );
            this.right.element.on("mousewheel", function (e) {
                wheelHandler.onWheel(e.originalEvent);
            });

            o.showTitle ? BI.createWidget({
                type: "bi.absolute",
                ref: function (_ref) {
                    self.hLayout = _ref;
                },
                items: [{
                    el: this.title,
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                    width: 120
                }, {
                    el: this.right,
                    left: 125,
                    right: 0,
                    top: 0
                }],
                element: this
            }) : BI.createWidget({
                type: "bi.horizontal",
                items: [this.right],
                element: this
            });
        },

        addItems: function (v) {
            this.checkTipsState(v);
            this.container.addItems(v.slice(0, this._constant.MAX_COLUMN_SIZE - 1));
        },

        checkTipsState: function (v) {
            if (BI.isEmptyArray(v)) {
                this.minTip.setVisible(true);
                this.container.setVisible(false);
            } else {
                this.minTip.setVisible(false);
                this.container.setVisible(true);
            }
            if (v.length >= this._constant.MAX_COLUMN_SIZE) {
                this.maxTip.setVisible(true);
            } else {
                this.maxTip.setVisible(false);
            }
        },

        removeAllItems: function () {
            this.container.removeAllItems();
        },

        getSelectedButtons: function () {
            return this.container.isVisible() ? this.container.getSelectedButtons() : [];
        },

        getAllButtons: function () {
            return this.container.getAllButtons();
        },

        setTitle: function (title) {
            this.title.setText(title + BI.i18nText("BI-Basic_Colon"));
            this.title.setTitle(title);
        },

        setItems: function (items) {
            this.removeAllItems();
            this.addItems(BI.createItems(items, {
                type: "bi.text_button",
                height: this.options.height,
                rgap: this._constant.DEFAULT_RIGHT_GAP
            }));
        },

        populate: function (v) {
            this.setTitle(v.title || BI.i18nText("BI-Design_String_Label_Widget"));
            this.setItems(v.items || []);
            if(this.options.showTitle) {
                var width = BI.clamp(BI.Func.getGBWidth(v.title || BI.i18nText("BI-Design_String_Label_Widget")) * 12 * 1.2, 40, 140) + 20;
                this.hLayout.attr("items")[0].width = width;
                this.hLayout.attr("items")[1].left = width + 5;
                this.hLayout.resize();
            }
        },

        setValue: function (v) {
            this.container.setValue(v);
        },

        getValue: function () {
            return this.container.getValue();
        }
    });

    BI.shortcut("bi.list_label", BI.ListLabel);
})();
/**
 * 文本标签
 *
 * Created by fay on 2016/9/11.
 */
!(function () {
    BI.ListLabelNoLimit = BI.inherit(BI.Single, {

        _constant: {
            MAX_COLUMN_SIZE: 41,
            DEFAULT_LABEL_GAP: 15,
            DEFAULT_RIGHT_GAP: 10
        },

        props: {
            baseCls: "bi-list-label",
            showTitle: true,
            items: [],
            height: 40
        },

        _init: function () {
            BI.ListLabelNoLimit.superclass._init.apply(this, arguments);
            var self = this, o = this.options;
            this.items = BI.clone(o.items);
            this.title = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Design_String_Label_Widget") + BI.i18nText("BI-Basic_Colon"),
                title: BI.i18nText("BI-Design_String_Label_Widget"),
                height: o.height
            });

            this.container = BI.createWidget({
                type: "bi.list_label_item_group_no_limit",
                items: BI.createItems(this.items.slice(0, this._constant.MAX_COLUMN_SIZE), {
                    type: "bi.text_button",
                    height: o.height,
                    rgap: this._constant.DEFAULT_RIGHT_GAP
                }),
                layouts: [{
                    type: "bi.vertical_adapt",
                    rgap: this._constant.DEFAULT_LABEL_GAP,
                    height: o.height
                }]
            });
            this.container.on(BI.ButtonGroup.EVENT_CHANGE, function (value) {
                self.fireEvent("EVENT_CHANGE", value);
            });
            this.minTip = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Basic_No_Selected_Value"),
                disabled: true,
                height: o.height
            });
            this.maxTip = BI.createWidget({
                type: "bi.label",
                text: BI.i18nText("BI-Basic_Max_Show_40_Labels"),
                disabled: true,
                height: o.height
            });

            this.checkTipsState(o.items);
            this.right = BI.createWidget({
                type: "bi.horizontal",
                items: [this.container, this.minTip, this.maxTip]
            });
            var wheelHandler = new BI.WheelHandler(function (deltaX, deltaY) {
                if (deltaY !== 0) {
                    self.right.element.scrollLeft(self.right.element.scrollLeft() + deltaY);
                }
            });
            this.right.element.on("mousewheel", function (e) {
                wheelHandler.onWheel(e.originalEvent);
            });

            o.showTitle ? BI.createWidget({
                type: "bi.absolute",
                ref: function (_ref) {
                    self.hLayout = _ref;
                },
                items: [{
                    el: this.title,
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0,
                    width: 120
                }, {
                    el: this.right,
                    left: 125,
                    right: 0,
                    top: 0
                }],
                element: this
            }) : BI.createWidget({
                type: "bi.horizontal",
                items: [this.right],
                element: this
            });
        },

        addItems: function (v) {
            this.checkTipsState(v);
            this.container.addItems(v.slice(0, this._constant.MAX_COLUMN_SIZE - 1));
        },

        checkTipsState: function (v) {
            if (BI.isEmptyArray(v)) {
                this.minTip.setVisible(true);
                this.container.setVisible(false);
            } else {
                this.minTip.setVisible(false);
                this.container.setVisible(true);
            }
            if (v.length >= this._constant.MAX_COLUMN_SIZE) {
                this.maxTip.setVisible(true);
            } else {
                this.maxTip.setVisible(false);
            }
        },

        removeAllItems: function () {
            this.container.removeAllItems();
        },

        getSelectedButtons: function () {
            return this.container.isVisible() ? this.container.getSelectedButtons() : [];
        },

        getAllButtons: function () {
            return this.container.getAllButtons();
        },

        setTitle: function (title) {
            this.title.setText(title + BI.i18nText("BI-Basic_Colon"));
            this.title.setTitle(title);
        },

        setItems: function (items) {
            this.removeAllItems();
            this.addItems(BI.createItems(items, {
                type: "bi.text_button",
                height: this.options.height,
                rgap: this._constant.DEFAULT_RIGHT_GAP
            }));
        },

        populate: function (v) {
            this.setTitle(v.title || BI.i18nText("BI-Design_String_Label_Widget"));
            this.setItems(v.items || []);
            if(this.options.showTitle) {
                var width = BI.clamp(BI.Func.getGBWidth(v.title || BI.i18nText("BI-Design_String_Label_Widget")) * 12 * 1.2, 40, 140) + 20;
                this.hLayout.attr("items")[0].width = width;
                this.hLayout.attr("items")[1].left = width + 5;
                this.hLayout.resize();
            }
        },

        setValue: function (v) {
            this.container.setValue(v);
        },

        getValue: function () {
            return this.container.getValue();
        }
    });

    BI.shortcut("bi.list_label_no_limit", BI.ListLabelNoLimit);
})();/**
 * Created by fay on 2016/9/14.
 */
!(function () {
    BI.ListLabelItemGroup = BI.inherit(BI.ButtonGroup, {

        props: {
            chooseType: BI.Selection.Multi
        },

        _init: function () {
            BI.ListLabelItemGroup.superclass._init.apply(this, arguments);
            this.otherValues = [];
            if (BI.isEmptyArray(this.getValue())) {
                BI.each(this.buttons, function (idx, button) {
                    if (button.getValue() === BICst.LIST_LABEL_TYPE.ALL) {
                        button.setSelected(true);
                    }
                });
            }
            this._checkBtnStyle();
        },

        _createBtns: function (items) {
            return BI.createWidgets(BI.createItems(items, {
                type: "bi.text_button",
                cls: "list-label-button"
            }));
        },


        _btnsCreator: function (items) {
            var self = this, args = Array.prototype.slice.call(arguments), o = this.options;
            var buttons = this._createBtns(items);
            args[0] = buttons;

            BI.each(this.behaviors, function (i, behavior) {
                behavior.doBehavior.apply(behavior, args);
            });
            BI.each(buttons, function (i, btn) {
                btn.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
                    if (type === BI.Events.CLICK) {
                        switch (o.chooseType) {
                            case BI.ButtonGroup.CHOOSE_TYPE_MULTI:
                                if (btn.getValue() === BICst.LIST_LABEL_TYPE.ALL) {
                                    self.setValue([BICst.LIST_LABEL_TYPE.ALL]);
                                } else {
                                    self._checkBtnState();
                                }
                                self._checkBtnStyle();
                                break;
                            case BI.ButtonGroup.CHOOSE_TYPE_SINGLE:
                                self.setValue(btn.getValue());
                                break;
                            case BI.ButtonGroup.CHOOSE_TYPE_NONE:
                            default:
                                self.setValue([]);
                                break;
                        }
                        self.fireEvent(BI.ButtonGroup.EVENT_CHANGE, value, obj);
                    }
                    self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                });
                btn.on(BI.Events.DESTROY, function () {
                    BI.remove(self.buttons, btn);
                });
            });

            return buttons;
        },

        _checkBtnState: function () {
            if (BI.isEmptyArray(this.getValue()) && BI.isEmptyArray(this.otherValues)) {
                this.buttons[0].setSelected(true);
                this.fireEvent(BI.ButtonGroup.EVENT_CHANGE, this.buttons[0].getValue(), this.buttons[0]);
            } else if (this.getValue().length === 1 && BI.isEqual(this.getValue()[0], BICst.LIST_LABEL_TYPE.ALL)) {
                this.buttons[0].setSelected(true);
            } else {
                this.buttons[0].setSelected(false);
            }
        },

        _checkBtnStyle: function () {
            BI.each(this.buttons, function (idx, btn) {
                if (btn.isSelected()) {
                    btn.doHighLight();
                } else {
                    btn.unHighLight();
                }
            });
        },

        removeAllItems: function () {
            var indexes = [];
            for (var i = 1; i < this.buttons.length; i++) {
                indexes.push(i);
            }
            this.removeItemAt(indexes);
        },

        setValue: function (v) {
            var self = this;
            v = BI.isArray(v) ? v : [v];
            v = BI.isEmptyArray(v) ? [BICst.LIST_LABEL_TYPE.ALL] : v;
            BI.each(this.buttons, function (i, item) {
                if (BI.contains(v, item.getValue())) {
                    item.setSelected && item.setSelected(true);
                } else {
                    item.setSelected && item.setSelected(false);
                }
            });
            var currentValues = this.getValue();
            this.otherValues = [];
            BI.each(v, function (idx, value) {
                if (currentValues.indexOf(value) === -1) {
                    self.otherValues.push(value);
                }
            });
            this._checkBtnState();
            this._checkBtnStyle();

        },

        getValue: function () {
            var v = [];
            BI.each(this.buttons, function (i, item) {
                if (item.isEnabled() && item.isSelected && item.isSelected()) {
                    v.push(item.getValue());
                }
            });
            // v = v.concat(this.otherValues || []);
            return v;
        }
    });

    BI.shortcut("bi.list_label_item_group", BI.ListLabelItemGroup);
})();
/**
 * Created by fay on 2016/9/14.
 */
!(function () {
    BI.ListLabelItemGroupNoLimit = BI.inherit(BI.ButtonGroup, {

        props: {
            chooseType: BI.Selection.Multi
        },

        _init: function () {
            BI.ListLabelItemGroupNoLimit.superclass._init.apply(this, arguments);
            this.otherValues = [];
            this._checkBtnStyle();
        },

        _createBtns: function (items) {
            return BI.createWidgets(BI.createItems(items, {
                type: "bi.text_button",
                cls: "list-label-button"
            }));
        },


        _btnsCreator: function (items) {
            var self = this, args = Array.prototype.slice.call(arguments), o = this.options;
            var buttons = this._createBtns(items);
            args[0] = buttons;

            BI.each(this.behaviors, function (i, behavior) {
                behavior.doBehavior.apply(behavior, args);
            });
            BI.each(buttons, function (i, btn) {
                btn.on(BI.Controller.EVENT_CHANGE, function (type, value, obj) {
                    if (type === BI.Events.CLICK) {
                        switch (o.chooseType) {
                            case BI.ButtonGroup.CHOOSE_TYPE_MULTI:
                                self._checkBtnStyle();
                                break;
                            case BI.ButtonGroup.CHOOSE_TYPE_SINGLE:
                                self.setValue(btn.getValue());
                                break;
                            case BI.ButtonGroup.CHOOSE_TYPE_NONE:
                            default:
                                self.setValue([]);
                                break;
                        }
                        self.fireEvent(BI.ButtonGroup.EVENT_CHANGE, value, obj);
                    }
                    self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                });
                btn.on(BI.Events.DESTROY, function () {
                    BI.remove(self.buttons, btn);
                });
            });

            return buttons;
        },

        _checkBtnStyle: function () {
            BI.each(this.buttons, function (idx, btn) {
                if (btn.isSelected()) {
                    btn.doHighLight();
                } else {
                    btn.unHighLight();
                }
            });
        },

        removeAllItems: function () {
            var indexes = [];
            for (var i = 1; i < this.buttons.length; i++) {
                indexes.push(i);
            }
            this.removeItemAt(indexes);
        },

        setValue: function (v) {
            var self = this;
            v = BI.isArray(v) ? v : [v];
            v = BI.isEmptyArray(v) ? [BICst.LIST_LABEL_TYPE.ALL] : v;
            BI.each(this.buttons, function (i, item) {
                if (BI.contains(v, item.getValue())) {
                    item.setSelected && item.setSelected(true);
                } else {
                    item.setSelected && item.setSelected(false);
                }
            });
            var currentValues = this.getValue();
            this.otherValues = [];
            BI.each(v, function (idx, value) {
                if (currentValues.indexOf(value) === -1) {
                    self.otherValues.push(value);
                }
            });
            this._checkBtnStyle();

        },

        getValue: function () {
            var v = [];
            BI.each(this.buttons, function (i, item) {
                if (item.isEnabled() && item.isSelected && item.isSelected()) {
                    v.push(item.getValue());
                }
            });
            // v = v.concat(this.otherValues || []);
            return v;
        }
    });

    BI.shortcut("bi.list_label_item_group_no_limit", BI.ListLabelItemGroupNoLimit);
})();
!(function () {
    /**
     * @class BI.LoadingMask
     * @extend BI.Widget
     * 正在加载mask层
     */
    var Widget = BI.inherit(BI.Widget, {
        _defaultConfig: function () {
            return BI.extend(Widget.superclass._defaultConfig.apply(this, arguments), {
                baseCls: ""
            });
        },

        _init: function () {
            Widget.superclass._init.apply(this, arguments);
            var self = this, o = this.options;
            var mask = BI.Maskers.create(this.getName(), o.masker, {offset: o.offset, container: o.container});
            BI.createWidget({
                type: "bi.absolute",
                element: mask,
                items: [{
                    el: {
                        type: "bi.center_adapt",
                        cls: "bi-z-index-mask bi-loading-mask-content",
                        items: [{
                            type: "bi.vertical",
                            items: [{
                                type: "bi.center_adapt",
                                cls: "loading-bar-icon",
                                items: [{
                                    type: "bi.icon",
                                    width: 208,
                                    height: 30
                                }]
                            }, {
                                type: "bi.label",
                                ref: function (ref) {
                                    self.label = ref;
                                },
                                cls: "loading-bar-label",
                                text: o.text,
                                height: 30
                            }]
                        }]
                    },
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 0
                }]
            });
            BI.Maskers.show(this.getName());
            BI.nextTick(function () {
                BI.Maskers.show(self.getName());
            });
        },

        setText: function (text) {
            this.label.setText(text);
        },

        destroy: function () {
            BI.Maskers.remove(this.getName());
        }
    });
    BI.shortcut("bi.loading_mask", Widget);
})();
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */

(function (root, factory) {

    if (typeof define === "function" && define.amd) {
        define(factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
        root.NProgress = factory();
    }

})(this, function () {
    var NProgress = {};

    NProgress.version = "0.2.0";

    var Settings = NProgress.settings = {
        minimum: 0.08,
        easing: "linear",
        positionUsing: "",
        speed: 200,
        trickle: true,
        trickleSpeed: 200,
        showSpinner: false,
        barSelector: "[role=\"bar\"]",
        spinnerSelector: "[role=\"spinner\"]",
        parent: "body",
        template: "<div class=\"bar\" role=\"bar\"><div class=\"peg\"></div></div><div class=\"spinner\" role=\"spinner\"><div class=\"spinner-icon\"></div></div>"
    };

    /**
   * Updates configuration.
   *
   *     NProgress.configure({
   *       minimum: 0.1
   *     });
   */
    NProgress.configure = function (options) {
        var key, value;
        for (key in options) {
            value = options[key];
            if (value !== undefined && options.hasOwnProperty(key)) Settings[key] = value;
        }

        return this;
    };

    /**
   * Last number.
   */

    NProgress.status = null;

    /**
     * Helpers
     */

    function clamp (n, min, max) {
        if (n < min) return min;
        if (n > max) return max;
        return n;
    }

    /**
     * (Internal) converts a percentage (`0..1`) to a bar translateX
     * percentage (`-100%..0%`).
     */

    function toBarPerc (n) {
        return (-1 + n) * 100;
    }


    /**
     * (Internal) returns the correct CSS for changing the bar's
     * position given an n percentage, and speed and ease from Settings
     */

    function barPositionCSS (n, speed, ease) {
        var barCSS;

        if (Settings.positionUsing === "translate3d") {
            barCSS = { transform: "translate3d(" + toBarPerc(n) + "%,0,0)" };
        } else if (Settings.positionUsing === "translate") {
            barCSS = { transform: "translate(" + toBarPerc(n) + "%,0)" };
        } else {
            barCSS = { "margin-left": toBarPerc(n) + "%" };
        }

        barCSS.transition = "all " + speed + "ms " + ease;

        return barCSS;
    }

    /**
     * (Internal) Queues a function to be executed.
     */

    var queue = (function () {
        var pending = [];

        function next () {
            var fn = pending.shift();
            if (fn) {
                fn(next);
            }
        }

        return function (fn) {
            pending.push(fn);
            if (pending.length === 1) next();
        };
    })();

    /**
     * (Internal) Applies css properties to an element, similar to the jQuery
     * css method.
     *
     * While this helper does assist with vendor prefixed property names, it
     * does not perform any manipulation of values prior to setting styles.
     */

    var css = (function () {
        var cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
            cssProps    = {};

        function camelCase (string) {
            return string.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (match, letter) {
                return letter.toUpperCase();
            });
        }

        function getVendorProp (name) {
            var style = document.body.style;
            if (name in style) return name;

            var i = cssPrefixes.length,
                capName = name.charAt(0).toUpperCase() + name.slice(1),
                vendorName;
            while (i--) {
                vendorName = cssPrefixes[i] + capName;
                if (vendorName in style) return vendorName;
            }

            return name;
        }

        function getStyleProp (name) {
            name = camelCase(name);
            return cssProps[name] || (cssProps[name] = getVendorProp(name));
        }

        function applyCss (element, prop, value) {
            prop = getStyleProp(prop);
            element.style[prop] = value;
        }

        return function (element, properties) {
            var args = arguments,
                prop,
                value;

            if (args.length === 2) {
                for (prop in properties) {
                    value = properties[prop];
                    if (value !== undefined && properties.hasOwnProperty(prop)) applyCss(element, prop, value);
                }
            } else {
                applyCss(element, args[1], args[2]);
            }
        };
    })();

    /**
     * (Internal) Gets a space separated list of the class names on the element.
     * The list is wrapped with a single space on each end to facilitate finding
     * matches within the list.
     */

    function classList (element) {
        return (" " + (element && element.className || "") + " ").replace(/\s+/gi, " ");
    }

    /**
     * (Internal) Determines if an element or space separated list of class names contains a class name.
     */

    function hasClass (element, name) {
        var list = typeof element === "string" ? element : classList(element);
        return list.indexOf(" " + name + " ") >= 0;
    }

    /**
     * (Internal) Adds a class to an element.
     */

    function addClass (element, name) {
        var oldList = classList(element),
            newList = oldList + name;

        if (hasClass(oldList, name)) return;

        // Trim the opening space.
        element.className = newList.substring(1);
    }

    /**
     * (Internal) Removes a class from an element.
     */

    function removeClass (element, name) {
        var oldList = classList(element),
            newList;

        if (!hasClass(element, name)) return;

        // Replace the class name.
        newList = oldList.replace(" " + name + " ", " ");

        // Trim the opening and closing spaces.
        element.className = newList.substring(1, newList.length - 1);
    }

    /**
     * (Internal) Removes an element from the DOM.
     */

    function removeElement (element) {
        element && element.parentNode && element.parentNode.removeChild(element);
    }

    /**
   * Sets the progress bar status, where `n` is a number from `0.0` to `1.0`.
   *
   *     NProgress.set(0.4);
   *     NProgress.set(1.0);
   */

    NProgress.set = function (n) {
        var started = NProgress.isStarted();

        n = clamp(n, Settings.minimum, 1);
        NProgress.status = (n === 1 ? null : n);

        var progress = NProgress.render(!started),
            bar      = progress.querySelector(Settings.barSelector),
            speed    = Settings.speed,
            ease     = Settings.easing;

        progress.offsetWidth; /* Repaint */

        queue(function (next) {
            // Set positionUsing if it hasn't already been set
            if (Settings.positionUsing === "") Settings.positionUsing = NProgress.getPositioningCSS();

            // Add transition
            css(bar, barPositionCSS(n, speed, ease));

            if (n === 1) {
                // Fade out
                css(progress, {
                    transition: "none",
                    opacity: 1
                });
                progress.offsetWidth; /* Repaint */

                setTimeout(function () {
                    css(progress, {
                        transition: "all " + speed + "ms linear",
                        opacity: 0
                    });
                    setTimeout(function () {
                        NProgress.remove();
                        next();
                    }, speed);
                }, speed);
            } else {
                setTimeout(next, speed);
            }
        });

        return this;
    };

    NProgress.isStarted = function () {
        return typeof NProgress.status === "number";
    };

    /**
   * Shows the progress bar.
   * This is the same as setting the status to 0%, except that it doesn't go backwards.
   *
   *     NProgress.start();
   *
   */
    NProgress.start = function () {
        if (!NProgress.status) NProgress.set(0);

        var work = function () {
            setTimeout(function () {
                if (!NProgress.status) return;
                NProgress.trickle();
                work();
            }, Settings.trickleSpeed);
        };

        if (Settings.trickle) work();

        return this;
    };

    /**
   * Hides the nprogress bar.
   * This is the *sort of* the same as setting the status to 100%, with the
   * difference being `done()` makes some placebo effect of some realistic motion.
   *
   *     NProgress.done();
   *
   * If `true` is passed, it will show the nprogress bar even if its hidden.
   *
   *     NProgress.done(true);
   */

    NProgress.done = function (force) {
        if (!force && !NProgress.status) return this;

        return NProgress.inc(0.3 + 0.5 * Math.random()).set(1);
    };

    /**
   * Increments by a random amount.
   */

    NProgress.inc = function (amount) {
        var n = NProgress.status;

        if (!n) {
            return NProgress.start();
        } else if(n > 1) {
            return;
        }
        if (typeof amount !== "number") {
            if (n >= 0 && n < 0.2) { amount = 0.1; } else if (n >= 0.2 && n < 0.5) { amount = 0.04; } else if (n >= 0.5 && n < 0.8) { amount = 0.02; } else if (n >= 0.8 && n < 0.99) { amount = 0.005; } else { amount = 0; }
        }

        n = clamp(n + amount, 0, 0.994);
        return NProgress.set(n);
    
    };

    NProgress.trickle = function () {
        return NProgress.inc();
    };

    /**
   * Waits for all supplied jQuery promises and
   * increases the progress as the promises resolve.
   *
   * @param $promise jQUery Promise
   */
    (function () {
        var initial = 0, current = 0;

        NProgress.promise = function ($promise) {
            if (!$promise || $promise.state() === "resolved") {
                return this;
            }

            if (current === 0) {
                NProgress.start();
            }

            initial++;
            current++;

            $promise.always(function () {
                current--;
                if (current === 0) {
                    initial = 0;
                    NProgress.done();
                } else {
                    NProgress.set((initial - current) / initial);
                }
            });

            return this;
        };

    })();

    /**
   * (Internal) renders the progress bar markup based on the `template`
   * setting.
   */

    NProgress.render = function (fromStart) {
        if (NProgress.isRendered()) return document.getElementById("nprogress");

        addClass(document.documentElement, "nprogress-busy");

        var progress = document.createElement("div");
        progress.id = "nprogress";
        progress.innerHTML = Settings.template;

        var bar      = progress.querySelector(Settings.barSelector),
            perc     = fromStart ? "-100" : toBarPerc(NProgress.status || 0),
            parent   = document.querySelector(Settings.parent),
            spinner;

        css(bar, {
            transition: "all 0 linear",
            transform: "translate3d(" + perc + "%,0,0)"
        });

        if (!Settings.showSpinner) {
            spinner = progress.querySelector(Settings.spinnerSelector);
            spinner && removeElement(spinner);
        }

        if (parent !== document.body) {
            addClass(parent, "nprogress-custom-parent");
        }

        parent.appendChild(progress);
        return progress;
    };

    /**
   * Removes the element. Opposite of render().
   */

    NProgress.remove = function () {
        removeClass(document.documentElement, "nprogress-busy");
        removeClass(document.querySelector(Settings.parent), "nprogress-custom-parent");
        var progress = document.getElementById("nprogress");
        progress && removeElement(progress);
    };

    /**
   * Checks if the progress bar is rendered.
   */

    NProgress.isRendered = function () {
        return !!document.getElementById("nprogress");
    };

    /**
   * Determine which positioning CSS rule to use.
   */

    NProgress.getPositioningCSS = function () {
    // Sniff on document.body.style
        var bodyStyle = document.body.style;

        // Sniff prefixes
        var vendorPrefix = ("WebkitTransform" in bodyStyle) ? "Webkit" :
            ("MozTransform" in bodyStyle) ? "Moz" :
                ("msTransform" in bodyStyle) ? "ms" :
                    ("OTransform" in bodyStyle) ? "O" : "";

        if (vendorPrefix + "Perspective" in bodyStyle) {
            // Modern browsers with 3D support, e.g. Webkit, IE10
            return "translate3d";
        } else if (vendorPrefix + "Transform" in bodyStyle) {
            // Browsers without 3D support, e.g. IE9
            return "translate";
        }
        // Browsers without translate() support, e.g. IE7-8
        return "margin";
    
    };

    return NProgress;
});
/**
 *
 * 表格
 *
 * Created by GUY on 2015/9/22.
 * @class BI.PageTableCell
 * @extends BI.Single
 */
BI.PageTableCell = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.PageTableCell.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-page-table-cell",
            text: "",
            title: ""
        });
    },

    _init: function () {
        BI.PageTableCell.superclass._init.apply(this, arguments);
        var label = BI.createWidget({
            type: "bi.label",
            element: this,
            textAlign: "left",
            whiteSpace: "nowrap",
            height: this.options.height,
            text: this.options.text,
            title: this.options.title,
            value: this.options.value,
            lgap: 5,
            rgap: 5
        });

        if (BI.isNotNull(this.options.styles) && BI.isObject(this.options.styles)) {
            this.element.css(this.options.styles);
        }
    }
});

BI.shortcut("bi.page_table_cell", BI.PageTableCell);/**
 * 分页表格
 *
 * Created by GUY on 2016/2/15.
 * @class BI.PageTable
 * @extends BI.Widget
 */
BI.PageTable = BI.inherit(BI.Widget, {

    _const: {
        scrollWidth: 18,
        minScrollWidth: 100
    },

    _defaultConfig: function () {
        return BI.extend(BI.PageTable.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-page-table",
            el: {
                type: "bi.sequence_table"
            },
            pager: {
                horizontal: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用

                    hasPrev: BI.emptyFn,
                    hasNext: BI.emptyFn,
                    firstPage: 1,
                    lastPage: BI.emptyFn
                },
                vertical: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用

                    hasPrev: BI.emptyFn,
                    hasNext: BI.emptyFn,
                    firstPage: 1,
                    lastPage: BI.emptyFn
                }
            },

            itemsCreator: BI.emptyFn,

            isNeedFreeze: false, // 是否需要冻结单元格
            freezeCols: [], // 冻结的列号,从0开始,isNeedFreeze为true时生效

            isNeedMerge: false, // 是否需要合并单元格
            mergeCols: [], // 合并的单元格列号
            mergeRule: BI.emptyFn,

            columnSize: [],
            minColumnSize: [],
            maxColumnSize: [],
            headerRowSize: 25,
            rowSize: 25,

            regionColumnSize: [],

            headerCellStyleGetter: BI.emptyFn,
            summaryCellStyleGetter: BI.emptyFn,
            sequenceCellStyleGetter: BI.emptyFn,

            header: [],
            items: [], // 二维数组

            // 交叉表头
            crossHeader: [],
            crossItems: []
        });
    },

    _init: function () {
        BI.PageTable.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.hCurr = 1;
        this.vCurr = 1;

        this.table = BI.createWidget(o.el, {
            type: "bi.sequence_table",
            width: o.width,
            height: o.height && o.height - 30,

            isNeedResize: true,
            isResizeAdapt: false,

            isNeedFreeze: o.isNeedFreeze,
            freezeCols: o.freezeCols,

            isNeedMerge: o.isNeedMerge,
            mergeCols: o.mergeCols,
            mergeRule: o.mergeRule,

            columnSize: o.columnSize,
            minColumnSize: o.minColumnSize,
            maxColumnSize: o.maxColumnSize,
            headerRowSize: o.headerRowSize,
            rowSize: o.rowSize,

            regionColumnSize: o.regionColumnSize,

            headerCellStyleGetter: o.headerCellStyleGetter,
            summaryCellStyleGetter: o.summaryCellStyleGetter,
            sequenceCellStyleGetter: o.sequenceCellStyleGetter,

            header: o.header,
            items: o.items,
            // 交叉表头
            crossHeader: o.crossHeader,
            crossItems: o.crossItems
        });

        this.table.on(BI.Table.EVENT_TABLE_SCROLL, function () {
            self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
        });
        this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
            o.regionColumnSize = this.getRegionColumnSize();
            o.columnSize = this.getColumnSize();
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
        });
        this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
            o.regionColumnSize = this.getRegionColumnSize();
            o.columnSize = this.getColumnSize();
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
        });

        this.pager = BI.createWidget(o.pager, {
            type: "bi.direction_pager",
            height: 30
        });
        this.pager.on(BI.Pager.EVENT_CHANGE, function () {
            var vpage = this.getVPage && this.getVPage();
            if (BI.isNull(vpage)) {
                vpage = this.getCurrentPage();
            }
            var hpage = this.getHPage && this.getHPage();
            o.itemsCreator({
                vpage: vpage,
                hpage: hpage
            }, function (items, header, crossItems, crossHeader) {
                self.table.setVPage ? self.table.setVPage(vpage) : self.table.setValue(vpage);
                self.table.setHPage && self.table.setHPage(hpage);
                self.populate.apply(self, arguments);
            });
        });

        BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
                el: this.table,
                left: 0,
                top: 0
            }, {
                el: this.pager,
                left: 0,
                right: 0,
                bottom: 0
            }]
        });
    },

    setHPage: function (v) {
        this.hCurr = v;
        this.pager.setHPage && this.pager.setHPage(v);
        this.table.setHPage && this.table.setHPage(v);
    },

    setVPage: function (v) {
        this.vCurr = v;
        this.pager.setVPage && this.pager.setVPage(v);
        this.table.setVPage && this.table.setVPage(v);
    },

    getHPage: function () {
        var hpage = this.pager.getHPage && this.pager.getHPage();
        if (BI.isNotNull(hpage)) {
            return hpage;
        }
        hpage = this.pager.getCurrentPage && this.pager.getCurrentPage();
        if (BI.isNotNull(hpage)) {
            return hpage;
        }
        return this.hpage;
    },

    getVPage: function () {
        var vpage = this.pager.getVPage && this.pager.getVPage();
        if (BI.isNotNull(vpage)) {
            return vpage;
        }
        vpage = this.pager.getCurrentPage && this.pager.getCurrentPage();
        if (BI.isNotNull(vpage)) {
            return vpage;
        }
        return this.vpage;
    },

    setWidth: function (width) {
        BI.PageTable.superclass.setWidth.apply(this, arguments);
        this.table.setWidth(width);
    },

    setHeight: function (height) {
        BI.PageTable.superclass.setHeight.apply(this, arguments);
        var showPager = false;
        if (this.pager.alwaysShowPager) {
            showPager = true;
        } else if (this.pager.hasHNext && this.pager.hasHNext()) {
            showPager = true;
        } else if (this.pager.hasHPrev && this.pager.hasHPrev()) {
            showPager = true;
        } else if (this.pager.hasVNext && this.pager.hasVNext()) {
            showPager = true;
        } else if (this.pager.hasVPrev && this.pager.hasVPrev()) {
            showPager = true;
        } else if (this.pager.hasNext && this.pager.hasNext()) {
            showPager = true;
        } else if (this.pager.hasPrev && this.pager.hasPrev()) {
            showPager = true;
        }
        this.table.setHeight(height - (showPager ? 30 : 0));
    },

    setColumnSize: function (columnSize) {
        this.options.columnSize = columnSize;
        this.table.setColumnSize(columnSize);
    },

    getColumnSize: function () {
        return this.table.getColumnSize();
    },

    setRegionColumnSize: function (columnSize) {
        this.options.columnSize = columnSize;
        this.table.setRegionColumnSize(columnSize);
    },

    getRegionColumnSize: function () {
        return this.table.getRegionColumnSize();
    },

    getVerticalScroll: function () {
        return this.table.getVerticalScroll();
    },

    setLeftHorizontalScroll: function (scrollLeft) {
        this.table.setLeftHorizontalScroll(scrollLeft);
    },

    setRightHorizontalScroll: function (scrollLeft) {
        this.table.setRightHorizontalScroll(scrollLeft);
    },

    setVerticalScroll: function (scrollTop) {
        this.table.setVerticalScroll(scrollTop);
    },

    restore: function () {
        this.table.restore();
    },

    attr: function () {
        BI.PageTable.superclass.attr.apply(this, arguments);
        this.table.attr.apply(this.table, arguments);
    },

    populate: function () {
        this.pager.populate();
        this.table.populate.apply(this.table, arguments);
    },

    destroy: function () {
        this.table.destroy();
        this.pager && this.pager.destroy();
        BI.PageTable.superclass.destroy.apply(this, arguments);
    }
});
BI.shortcut("bi.page_table", BI.PageTable);/**
 * @author: Teller
 * @createdAt: 2018/8/3 上午9:29
 * @Description
*/

!(function () {
    BI.constant("bi.constants.new_path_chooser", {
        LINE_WIDTH: 4,
        VGAP: 2,
        HGAP: 2,
        SPLIT: "__PATH_CHOOSER_SPLIT__",
        TD_WIDTH: 100,
        TD_HEIGHT: 36,
        UNION_TD_HEIGHT: 72,
        REGION_HGAP: 20,
        REGION_VGAP: 50,
        RADIUS: 10
    });
})();
/**
 * @author: Teller
 * @createdAt: 2018/7/26 下午8:54
 * @Description
*/

!(function () {
    var PathChooser = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-new-path-chooser"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.new_path_chooser", {
                routers: this.options.items
            });
        },

        watch: {
            selected: function () {
                this._highlight();
                this._hideRadios();
                this._highlightRadios();
                this._highlightRegions();
            }
        },

        mounted: function () {
            var self = this;
            this.svgPathMap = {};

            BI.createWidget({
                type: "bi.absolute",
                element: this.center,
                items: [{
                    el: {
                        type: "bi.svg",
                        ref: function (_ref) {
                            self.svg = _ref;
                        }
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            });

            BI.each(this.model.pathMap, function (pathId, path) {
                if (BI.has(self.svgPathMap, pathId)) return;

                var svgPath = self.svg.path(path);
                self.svgPathMap[pathId] = svgPath;
                self._deHighlightPath(svgPath, true);
            });

            this._highlight();
            this._drawAllRadios();
            this._hideRadios();
            this._highlightRadios();
            this._highlightRegions();
        },

        render: function () {
            var self = this;
            self.regionsRefMap = {};
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

            return {
                type: "bi.virtual_group",
                ref: function (_ref) {
                    self.center = _ref;
                },
                items: BI.map(this.model.regionsArray, function (floor, regions) {
                    return {
                        type: "bi.virtual_group",
                        cls: "regions-section",
                        items: BI.map(regions, function (index, region) {
                            if (!BI.has(self.model.regionsMap, region)) {
                                return {
                                    type: "bi.default",
                                    width: c.TD_WIDTH,
                                    height: 2 * c.TD_HEIGHT
                                };
                            }

                            var regionText = self.model.regionsMap[region].text;

                            if (floor === BI.size(self.model.regionsArray) - 1) {
                                if (region.indexOf(c.SPLIT) !== -1) {
                                    return {
                                        type: "bi.new_one_to_one_final_path_region",
                                        value: regionText.split(c.SPLIT)
                                    };
                                }

                                return {
                                    type: "bi.new_final_path_region",
                                    value: regionText
                                };
                            }

                            if (region.indexOf(c.SPLIT) !== -1) {
                                return {
                                    type: "bi.new_one_to_one_path_region",
                                    ref: function (_ref) {
                                        self.regionsRefMap[region] = _ref;
                                    },
                                    items: {
                                        header: regionText.split(c.SPLIT),
                                        body: BI.map(self.model.regionValuesMap[region], function (index, value) {
                                            return {
                                                text: self.model.valuesMap[value].text,
                                                value: value
                                            };
                                        })
                                    }
                                };
                            }

                            return {
                                type: "bi.new_path_region",
                                ref: function (_ref) {
                                    self.regionsRefMap[region] = _ref;
                                },
                                items: {
                                    header: regionText,
                                    body: BI.map(self.model.regionValuesMap[region], function (index, value) {
                                        return {
                                            text: self.model.valuesMap[value].text,
                                            value: value
                                        };
                                    })
                                }
                            };
                        }),
                        layouts: [{
                            type: "bi.vertical_adapt",
                            rgap: 20
                        }]
                    };
                }),
                layouts: [{
                    type: "bi.left",
                    scrollable: true,
                    bgap: 50
                }]
            };
        },

        setValue: function (v) {
            this.store.setSelected(v);
        },

        _highlight: function () {
            var self = this;

            BI.each(self.svgPathMap, function (pathId, path) {
                if (BI.contains(self.model.highlightPaths, pathId)) {
                    self._highlightPath(path);
                } else {
                    self._deHighlightPath(path);
                }
            });
        },

        _deHighlightPath: function (path, isMounted) {
            path.attr({
                stroke: "#d4dadd"
            });

            if (isMounted) {
                path.attr({
                    "stroke-dasharray": "--",
                    "stroke-width": 1
                });
            }
        },

        _highlightPath: function (path) {
            path.attr({
                stroke: "#3f8ce8",
                "stroke-width": 2,
                "stroke-dasharray": ""
            }).toFront();
        },

        _highlightRegions: function () {
            var self = this;
            var highlightRegions = [];

            BI.each(this.model.selected, function (index, value) {
                var region = self.model.valueRegionMap[value];
                var regionRef = self.regionsRefMap[region];

                if (BI.isNull(regionRef)) return;

                regionRef.doActive(value);
                highlightRegions.push(region);
            });

            BI.each(self.regionsRefMap, function (region, regionRef) {
                if (BI.contains(highlightRegions, region)) return;

                regionRef.unActive && regionRef.unActive();
            });
        },

        _drawAllRadios: function () {
            var self = this;
            this.radiosMap = {};

            BI.each(this.model.valuesMap, function (value) {
                var position = self.model.positionsMap[value];

                BI.createWidget({
                    type: "bi.absolute",
                    element: self.center,
                    items: [{
                        el: {
                            type: "bi.radio",
                            ref: function (_ref) {
                                self.radiosMap[value] = _ref;
                            },
                            handler: function () {
                                if (!self.radiosMap[value].isSelected()) {
                                    self.radiosMap[value].setSelected(true);

                                    return;
                                }
                                self.store.changeSelected(value);
                            }
                        },
                        left: position.x - 8,
                        top: position.y - 1
                    }]
                });
            });
        },

        _hideRadios: function () {
            var self = this;

            BI.each(this.radiosMap, function (value, radio) {
                radio.setVisible(BI.contains(self.model.changeableValues, value));
            });
        },

        _highlightRadios: function () {
            var self = this;

            BI.each(this.radiosMap, function (value, radio) {
                radio.setSelected(BI.contains(self.model.selected, value));
            });
        },

        getValue: function () {
            return this.model.selected;
        }
    });
    BI.shortcut("bi.new_path_chooser", PathChooser);
})();
/**
 * @author: Teller
 * @createdAt: 2018/7/26 下午8:54
 * @Description
*/

!(function () {
    var avg = function (arr) {
        var sum = 0;
        BI.each(arr, function (index, num) {
            sum += num;
        });

        if (BI.size(arr) === 0) return 0;

        return sum / BI.size(arr);
    };

    var uniquePush = function (arr, item) {
        if (BI.contains(arr, item)) return;

        arr.push(item);
    };

    var Model = BI.inherit(Fix.Model, {
        state: function () {
            var o = this.options;

            return {
                routers: o.routers || [],
                selected: o.value || BI.map(BI.first(o.routers), "value")
            };
        },

        computed: {
            information: function () {
                var routers = this.model.routers;
                var self = this, regionsMap = {}, valuesMap = {}, startRegion, endRegion;

                // 包含两个键，in/out，值为数组，存储所有入度以及出度
                var regionInOutMap = {};
                // region对应所有values的Map
                var regionValuesMap = {};
                // value对应的所有region
                var valueRegionMap = {};
                // value对应的所有nextValue
                var valueNextValueMap = {};
                var valuePrevValueMap = {};

                var availableSelects = [];

                BI.each(routers, function (index, router) {
                    var availableSelect = [];

                    BI.each(router, function (idx, relationship) {
                        var region = relationship.region;
                        var value = relationship.value;

                        availableSelect.push(value);

                        if (BI.isNull(startRegion) && idx === 0) startRegion = region;
                        if (BI.isNull(endRegion) && idx === BI.size(router) - 1) endRegion = region;

                        if (!BI.has(regionValuesMap, region)) {
                            regionValuesMap[region] = [];
                        }

                        if (!BI.has(valueNextValueMap, value)) {
                            valueNextValueMap[value] = [];
                        }

                        if (!BI.has(valuePrevValueMap, value)) {
                            valuePrevValueMap[value] = [];
                        }

                        uniquePush(regionValuesMap[region], value);

                        if (!BI.has(valueRegionMap, value)) {
                            valueRegionMap[value] = region;
                        }

                        if (!BI.has(regionInOutMap, region)) {
                            regionInOutMap[region] = {
                                inRegion: [],
                                outRegion: []
                            };
                        }

                        if (idx !== 0) {
                            uniquePush(regionInOutMap[region].inRegion, router[idx - 1].region);
                            uniquePush(valuePrevValueMap[value], router[idx - 1].value);
                        }

                        if (idx !== BI.size(router) - 1) {
                            uniquePush(regionInOutMap[region].outRegion, router[idx + 1].region);
                            uniquePush(valueNextValueMap[value], router[idx + 1].value);
                        }

                        if (!BI.has(regionsMap, region)) {
                            regionsMap[region] = {
                                text: relationship.regionText
                            };
                        }

                        if (!BI.has(valuesMap, value)) {
                            valuesMap[value] = {
                                text: relationship.text
                            };
                        }
                    });

                    availableSelects.push(availableSelect);
                });

                // 有向无环图动态规划计算出到源点最长路径
                var regionLengthMap = {};
                BI.each(regionInOutMap, function (region) {
                    regionLengthMap[region] = self.getLongestLengthByRegions(startRegion, region, regionInOutMap);
                });

                var adjustedRouters = [];
                BI.each(routers, function (index, router) {
                    var adjustedRouter = [];

                    BI.each(router, function (idx, relationship) {
                        var region = relationship.region;

                        // 查表regionLengthMap查看应有的region位置
                        for (var i = 0; i < regionLengthMap[region] - BI.size(adjustedRouter); i++) {
                            adjustedRouter.push({
                                region: BI.UUID(),
                                value: BI.UUID
                            });
                        }

                        adjustedRouter.push(BI.deepClone(relationship));
                    });

                    adjustedRouters.push(adjustedRouter);
                });

                // 一次贪心算法排序，拿到排好序的各层region顺序
                var regionsArray = this.greedySort(adjustedRouters);

                // 记录各层value以及region的位置
                var positionsMap = {};

                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");
                // 当前层数之前的含有联合主键的层数数量
                var regionUnionCount = 0;

                BI.each(regionsArray, function (floor, regions) {
                    var regionBaseX = 0;
                    var regionBaseY = floor * (2 * c.TD_HEIGHT + c.REGION_VGAP) + regionUnionCount * (c.UNION_TD_HEIGHT - c.TD_HEIGHT);
                    var valueBaseY = regionBaseY + c.TD_HEIGHT * 2;
                    var valueBaseX = 0;

                    var hasUnion = false;

                    BI.each(regions, function (index, region) {
                        var values = regionValuesMap[region];
                        // 最后一行的region
                        if (region === endRegion) {
                            if (region.indexOf(c.SPLIT) !== -1) {
                                var tables = region.split(c.SPLIT);
                                var lineWidth = c.LINE_WIDTH;
                                var hgap = c.HGAP;
                                positionsMap[region] = {
                                    x: regionBaseX + (c.TD_WIDTH * BI.size(tables) + (BI.size(tables) - 1) * lineWidth + 2 * hgap) / 2,
                                    y: regionBaseY
                                };
                            } else {
                                positionsMap[region] = {
                                    x: regionBaseX + c.TD_WIDTH / 2,
                                    y: regionBaseY
                                };
                            }

                            BI.each(values, function (i, value) {
                                positionsMap[value] = {
                                    x: 0,
                                    y: 0
                                };
                            });

                            return;
                        }

                        var regionWidth = Math.max(BI.size(values), 1) * c.TD_WIDTH;
                        positionsMap[region] = {
                            x: regionBaseX + regionWidth / 2,
                            y: regionBaseY
                        };
                        regionBaseX += regionWidth + c.REGION_HGAP;

                        var hasUnionNow = BI.some(values, function (i, value) {
                            var valueText = valuesMap[value].text;

                            return valueText.indexOf(c.SPLIT) !== -1;
                        });

                        BI.each(values, function (i, value) {

                            positionsMap[value] = {
                                x: valueBaseX + (i + 0.5) * c.TD_WIDTH,
                                y: valueBaseY + (hasUnionNow ? c.UNION_TD_HEIGHT - c.TD_HEIGHT : 0)
                            };
                        });

                        valueBaseX = regionBaseX;

                        hasUnion = hasUnion || hasUnionNow;
                    });

                    hasUnion === true && regionUnionCount++;
                });

                return {
                    startRegion: startRegion,
                    regionsArray: regionsArray,
                    positionsMap: positionsMap,
                    regionsMap: regionsMap,
                    valuesMap: valuesMap,
                    regionValuesMap: regionValuesMap,
                    valueRegionMap: valueRegionMap,
                    valueNextValueMap: valueNextValueMap,
                    valuePrevValueMap: valuePrevValueMap,
                    availableSelects: availableSelects
                };
            },

            availableSelects: function () {
                return this.model.information.availableSelects;
            },

            startRegion: function () {
                return this.model.information.startRegion;
            },

            regionsArray: function () {
                return this.model.information.regionsArray;
            },

            regionsMap: function () {
                return this.model.information.regionsMap;
            },

            valuesMap: function () {
                return this.model.information.valuesMap;
            },

            valueNextValueMap: function () {
                return this.model.information.valueNextValueMap;
            },

            valuePrevValueMap: function () {
                return this.model.information.valuePrevValueMap;
            },

            regionValuesMap: function () {
                return this.model.information.regionValuesMap;
            },

            valueRegionMap: function () {
                return this.model.information.valueRegionMap;
            },

            positionsMap: function () {
                return this.model.information.positionsMap;
            },

            pathMap: function () {
                var self = this, map = {}, positionsMap = this.model.positionsMap;
                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

                BI.each(this.model.routers, function (idx, router) {
                    BI.each(router, function (index, relationship) {
                        if (index >= BI.size(router) - 1) return;

                        var value = relationship.value, nextRegion = router[index + 1].region;
                        var key = value + c.SPLIT + nextRegion;

                        if (BI.has(map, key)) return;

                        var start = positionsMap[value];
                        var end = positionsMap[nextRegion];

                        map[key] = self.getPathByPoints(start, end);
                    });
                });

                return map;
            },

            highlightPaths: function () {
                var self = this, highlightPaths = [];

                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

                BI.each(this.model.selected, function (index, value) {
                    if (index === BI.size(self.model.selected) - 1) return;

                    var region = self.model.valueRegionMap[self.model.selected[index + 1]];

                    highlightPaths.push(value + c.SPLIT + region);
                });

                return highlightPaths;
            },

            // 可设radio的点
            changeableValues: function () {
                var self = this, changeableValues = [];

                BI.each(this.model.selected, function (index, value) {
                    var region = self.model.valueRegionMap[value];
                    var availableValues = [];

                    if (index === 0) {
                        // 第一个的话，同级所有点都可以选
                        availableValues = self.model.regionValuesMap[region];
                    } else if (index !== BI.size(self.model.selected) - 1) {
                        var prevValue = self.model.selected[index - 1];

                        availableValues = self.model.valueNextValueMap[prevValue];
                    }

                    if (BI.size(availableValues) <= 1) return;

                    changeableValues = changeableValues.concat(availableValues);
                });

                return BI.uniq(changeableValues);
            }
        },

        actions: {
            // 弱智版动态规划算法，暂不做缓存处理，暂不考虑性能
            // 计算regionA到regionB的最长路径， regionA是起点
            getLongestLengthByRegions: function (regionA, regionB, inOutMap) {
                var self = this;

                if (regionA === regionB) return 0;

                var lengthArr = BI.map(inOutMap[regionA].outRegion, function (index, outRegion) {
                    if (outRegion === regionB) return 1;

                    return self.getLongestLengthByRegions(outRegion, regionB, inOutMap) + 1;
                });

                var max = -Infinity;

                BI.each(lengthArr, function (index, length) {
                    if (max < length) max = length;
                });

                return max;
            },

            // 贪心算法排横向坐标顺序
            greedySort: function (routers) {
                // 此时所有的路径都是等长的
                var regionsArray = BI.makeArray(BI.size(BI.first(routers) || []), []);
                // 节点权重字典
                var regionWeightsMap = {};
                var regionParentSonMap = {};

                BI.each(routers, function (index, router) {
                    var routerSize = BI.size(router);

                    BI.each(router, function (idx, relationship) {
                        var region = relationship.region;

                        if (!BI.has(regionParentSonMap, region)) {
                            regionParentSonMap[region] = {
                                parents: [],
                                sons: []
                            };
                        }

                        if (idx !== 0) {
                            regionParentSonMap[region].parents.push(router[idx - 1].region);
                        }

                        if (idx < routerSize - 1) {
                            regionParentSonMap[region].sons.push(router[idx + 1].region);
                        }

                        if (!BI.contains(regionsArray[idx], region)) {
                            regionsArray[idx].push(region);
                            regionWeightsMap[region] = BI.size(regionsArray[idx]);
                        }
                    });
                });

                // 第二层的表的重心为所有上一层关联的表节点编号的平均值，按照重心由小到大，从左到右重排第二层表的相对顺序。
                // 正向一次迭代（暂不做反向迭代）
                BI.each(regionsArray, function (index, regions) {
                    if (index === 0) return;

                    BI.each(regions, function (idx, region) {
                        var weightsArray = BI.map(regionParentSonMap[region], function (i, parentRegion) {
                            return regionWeightsMap[parentRegion];
                        });

                        regionWeightsMap[region] = avg(weightsArray);
                    });
                });

                BI.each(regionsArray, function (index, regions) {
                    regions.sort(function (a, b) {
                        return regionWeightsMap[a] - regionWeightsMap[b];
                    });
                });

                return regionsArray;
            },

            // 计算两点间的svg路径, 默认end.y < start.y
            getPathByPoints: function (start, end) {
                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

                if (start.x === end.x) return ["M", start.x, start.y, "V", end.y].join(" ");

                // 从起点向下画20px
                var paths = ["M", start.x, start.y, "v", 20];

                var isToLeft = end.x < start.x;
                this.drawQuarterCircle(paths, isToLeft, isToLeft ? 1 : 0);

                paths.push("H", end.x + (isToLeft ? 1 : -1) * c.RADIUS);
                this.drawQuarterCircle(paths, isToLeft, isToLeft ? 0 : 1);

                paths.push("V", end.y);

                return paths.join(" ");
            },

            drawQuarterCircle: function (paths, isToLeft, direction) {
                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

                paths.push("a", c.RADIUS, c.RADIUS, Math.PI / 2, 0, direction, (isToLeft ? -1 : 1) * c.RADIUS, c.RADIUS);
            },

            changeSelected: function (v) {
                // 找到所改的value所在位置
                var index = 0;

                var values = this.model.regionValuesMap[this.model.valueRegionMap[v]];

                BI.some(this.model.selected, function (i, value) {
                    var compare = BI.contains(values, value);

                    if (compare) index = i;

                    return compare;
                });

                var selected = this.model.selected.slice(0, index);
                selected.push(v);

                var router = BI.find(this.model.routers, function (i, router) {
                    var values = BI.map(router, "value");

                    return BI.isEqual(selected, values.slice(0, index + 1));
                });

                if (BI.isNull(router)) return;

                this.model.selected = BI.map(router, "value");
            },

            setSelected: function (v) {
                var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

                var selected = BI.find(this.model.availableSelects, function (index, availableSelect) {
                    var transformedSelect = [];

                    BI.each(availableSelect, function (index, value) {
                        if (value.indexOf(c.SPLIT) === -1) {
                            transformedSelect.push(value);

                            return;
                        }

                        transformedSelect = transformedSelect.concat(value.split(c.SPLIT));
                    });

                    return BI.isEqual(transformedSelect, v);
                });

                if (BI.isNull(selected)) return;

                this.model.selected = selected;
            }
        }
    });
    BI.model("bi.model.new_path_chooser", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/7/31 上午9:19
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-new-path-region"
        },

        render: function () {
            var self = this, o = this.options;
            var body = o.items.body;
            this.bodyMap = {};
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");
            var hasUnion = BI.some(body, function (index, obj) {
                var bodyText = obj.text;

                return bodyText.indexOf(c.SPLIT) !== -1;
            });
            return {
                type: "bi.vertical",
                items: [this._renderHeader(), {
                    type: "bi.virtual_group",
                    items: BI.map(body, function (index, obj) {
                        var bodyText = obj.text;
                        var value = obj.value;

                        var cls = "bi-border-bottom bi-border-right body-item" + (index === 0 ? " bi-border-left" : "");
                        var width = (BI.size(body) * c.TD_WIDTH - 1) / BI.size(body) - 1;
                        var height = hasUnion ? c.UNION_TD_HEIGHT - 1 : c.TD_HEIGHT - 1;

                        if (bodyText.indexOf(c.SPLIT) !== -1) {
                            var unionTexts = bodyText.split(c.SPLIT);
                            bodyText = unionTexts.slice(0, 2);
                            var commaWidth = 20;
                            var title = unionTexts.join("\n");

                            return {
                                type: "bi.vertical",
                                ref: function (_ref) {
                                    self.bodyMap[value] = _ref;
                                },
                                cls: cls,
                                items: [{
                                    type: "bi.label",
                                    text: BI.first(bodyText),
                                    title: title,
                                    width: width,
                                    value: value,
                                    height: height / 2
                                }, {
                                    type: "bi.center_adapt",
                                    items: [{
                                        type: "bi.left",
                                        items: [{
                                            type: "bi.label",
                                            cls: BI.size(unionTexts) === 2 ? "union-second-full" : "union-second-scale",
                                            text: BI.last(bodyText),
                                            title: title,
                                            value: value,
                                            height: height / 2
                                        }, {
                                            type: "bi.label",
                                            invisible: BI.size(unionTexts) === 2,
                                            text: "(...)",
                                            title: title,
                                            width: commaWidth,
                                            value: value,
                                            height: height / 2
                                        }]
                                    }]
                                }]
                            };
                        }

                        return {
                            type: "bi.label",
                            ref: function (_ref) {
                                self.bodyMap[value] = _ref;
                            },
                            cls: cls,
                            text: bodyText,
                            title: bodyText,
                            width: width,
                            value: value,
                            height: height
                        };
                    }),
                    layouts: [{
                        type: "bi.left"
                    }]
                }]
            };
        },

        doActive: function (value) {
            var self = this;
            var bodies = this.options.items.body;

            this.header.element.addClass("active");
            BI.each(bodies, function (index, bodyObj) {
                var v = bodyObj.value;
                var body = self.bodyMap[v];

                if (BI.isNull(body)) return;

                if (index !== BI.size(bodies) - 1) {
                    var nextValue = bodies[index + 1].value;
                    nextValue === value && body.element.removeClass("bi-border-right");
                }

                if (value === v) {
                    body.element.addClass("active").addClass("bi-border-left").addClass("bi-border-right");
                } else {
                    body.element.removeClass("active");

                    index !== 0 && body.element.removeClass("bi-border-left");
                }
            });
        },

        unActive: function () {
            var self = this;

            this.header.element.removeClass("active");

            BI.each(this.options.items.body, function (index, bodyObj) {
                var v = bodyObj.value;
                var body = self.bodyMap[v];

                if (BI.isNull(body)) return;

                body.element.removeClass("active").addClass("bi-border-right");
                index !== 0 && body.element.removeClass("bi-border-left");
            });
        },

        _renderHeader: function () {
            var self = this, o = this.options;
            var header = o.items.header;
            var body = o.items.body;
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

            return {
                type: "bi.label",
                text: header,
                ref: function (_ref) {
                    self.header = _ref;
                },
                cls: "bi-border header",
                width: BI.size(body) * c.TD_WIDTH - 2,
                height: c.TD_HEIGHT - 2
            };
        }
    });
    BI.shortcut("bi.new_path_region", Widget);

    var OneToOne = BI.inherit(Widget, {
        props: {
            baseCls: "bi-new-one-to-one-path-region bi-new-path-region"
        },

        _renderHeader: function () {
            var self = this, o = this.options;
            var headers = o.items.header;
            var body = o.items.body;
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");
            var width = BI.size(body) * c.TD_WIDTH - 2;
            var height = c.TD_HEIGHT - 2;
            var vgap = 2, hgap = 2;
            var lineWidth = 4;

            var tableWidth = ((width - hgap * 2) - (BI.size(headers) - 1) * lineWidth) / BI.size(headers) - 2;
            var tableHeight = height - 2 * vgap - 2;

            return {
                width: width,
                height: height,
                type: "bi.vertical",
                cls: "header-container bi-border",
                ref: function (_ref) {
                    self.header = _ref;
                },
                items: [{
                    el: {
                        type: "bi.left",
                        items: BI.map(headers, function (index, text) {
                            if (index !== BI.size(headers) - 1) {
                                return {
                                    type: "bi.vertical_adapt",
                                    items: [{
                                        type: "bi.label",
                                        cls: "bi-border header",
                                        text: text,
                                        width: tableWidth,
                                        height: tableHeight
                                    }, {
                                        type: "bi.default",
                                        cls: "bi-border-top split",
                                        width: lineWidth,
                                        height: 1
                                    }]
                                };
                            }

                            return {
                                type: "bi.label",
                                text: text,
                                cls: "bi-border header",
                                width: tableWidth,
                                height: tableHeight
                            };
                        })
                    },
                    vgap: vgap,
                    hgap: hgap
                }]
            };
        }
    });
    BI.shortcut("bi.new_one_to_one_path_region", OneToOne);
})();
/**
 * @author: Teller
 * @createdAt: 2018/7/31 下午7:48
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-final-path-region"
        },

        render: function () {
            var o = this.options;
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.label",
                    text: o.value,
                    title: o.value,
                    cls: "header",
                    width: c.TD_WIDTH,
                    height: c.TD_HEIGHT
                }]
            };
        }
    });
    BI.shortcut("bi.new_final_path_region", Widget);

    var OneToOne = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-final-path-region bi-one-to-one-final-path-region"
        },

        render: function () {
            var o = this.options;
            var values = o.value;
            var c = BI.Constants.getConstant("bi.constants.new_path_chooser");
            var lineWidth = c.LINE_WIDTH;
            var vgap = c.VGAP, hgap = c.HGAP;

            var width = BI.size(values) * c.TD_WIDTH + (BI.size(values) - 1) * lineWidth + 2 * hgap;
            var height = c.TD_HEIGHT + vgap * 2;
            return {
                type: "bi.vertical",
                width: width,
                height: height,
                cls: "bi-border header-container",
                items: [{
                    vgap: vgap,
                    hgap: hgap,
                    el: {
                        type: "bi.left",
                        items: BI.map(values, function (index, text) {
                            if (index !== BI.size(values) - 1) {
                                return {
                                    type: "bi.vertical_adapt",
                                    items: [{
                                        type: "bi.label",
                                        cls: "header",
                                        text: text,
                                        title: text,
                                        width: c.TD_WIDTH,
                                        height: c.TD_HEIGHT
                                    }, {
                                        type: "bi.default",
                                        cls: "bi-border-top split",
                                        width: lineWidth,
                                        height: 1
                                    }]
                                };
                            }

                            return {
                                type: "bi.label",
                                text: text,
                                title: text,
                                cls: "header",
                                width: c.TD_WIDTH,
                                height: c.TD_HEIGHT
                            };
                        })
                    }
                }]
            };
        }
    });
    BI.shortcut("bi.new_one_to_one_final_path_region", OneToOne);
})();
/**
 * author: young
 * createdDate: 2018/4/25
 * description:
 */
!(function () {
    var PreviewHeader = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-preview-header",
            text: "",
            name: "",
            iconCls: "",
            extraCls: "",
            keyword: "",
            showRemove: false,
            enableHeaderClick: false,
            enableReName: false,
            nameChecker: BI.emptyFn,
            showSource: false,
            warning: false,
            warningTitle: null
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.htape",
                extraCls: "bi-preview-table-header detail-header " + o.extraCls,
                items: [{
                    type: "bi.center_adapt",
                    cls: o.iconCls,
                    items: [{
                        type: "bi.icon"
                    }],
                    width: 25,
                    height: 30
                }, {
                    type: "bi.shelter_editor",
                    value: o.text,
                    height: 30,
                    ref: function (ref) {
                        self.name = ref;
                    },
                    keyword: o.keyword,
                    allowBlank: false,
                    validationChecker: o.nameChecker,
                    cls: o.warning ? "warning-color" : "",
                    tipType: o.warning ? "warning" : "success",
                    title: function () {
                        var text = self.name.getValue();
                        if(o.showSource && o.text !== o.name) {
                            return text + "\n" + BI.i18nText("BI-Conf_Original_Name") + ": " + o.name;
                        }
                        return text;
                    },
                    warningTitle: function () {
                        return o.warningTitle;
                    },
                    errorText: function (v) {
                        return BI.i18nText(BI.isEmptyString(v) ? "BI-Basic_Field_Can_Not_Be_Empty" : "BI-Basic_Filed_Name_Can_Not_Be_Duplicate");
                    },
                    listeners: [{
                        eventName: BI.ShelterEditor.EVENT_CLICK_LABEL,
                        action: function () {
                            if (o.enableHeaderClick) {
                                self.fireEvent("CLICK_HEADER");
                            }
                        }
                    }, {
                        eventName: BI.ShelterEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_RENAME", this.getValue());
                        }
                    }]
                }, o.showRemove ? {
                    type: "bi.icon_button",
                    cls: "delete-font delete-show",
                    title: BI.i18nText("BI-Basic_Delete"),
                    width: 25,
                    height: 30,
                    handler: function () {
                        self.fireEvent("EVENT_REMOVE");
                    }
                } : {
                    type: "bi.default",
                    width: 0
                }, o.enableReName ? {
                    type: "bi.icon_button",
                    cls: "rename-font rename-show",
                    title: BI.i18nText("BI-Basic_Rename"),
                    width: 25,
                    height: 30,
                    handler: function () {
                        self.name.focus();
                    }
                } : {
                    type: "bi.default",
                    width: 0
                }]
            };
        },

        setValue: function (v) {
            this.name.setValue(v);
        }
    });
    BI.shortcut("bi.components.preview_header", PreviewHeader);
})();
/**
 * Created by Windy on 2018/1/29.
 */
!(function () {
    var PreviewTable = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-no-freeze-preview-table",
            isNeedFreeze: false,
            freezeCols: [],
            columnSize: [],
            headerRowSize: 30,
            rowSize: 30,
            header: [],
            items: []
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.responsive_table",
                isNeedFreeze: o.isNeedFreeze,
                freezeCols: o.freezeCols,
                columnSize: this._defaultColumnSize(),
                rowSize: o.rowSize,
                headerRowSize: o.headerRowSize,
                items: o.items,
                header: BI.map(o.header, function (idx, h) {
                    h.cls = (h.cls || "") + " preview-header";
                    return h;
                }),
                ref: function (ref) {
                    self.table = ref;
                }
            };
        },

        _defaultColumnSize: function () {
            var o = this.options;
            if (o.columnSize.length > 0) {
                return this.options.columnSize;
            }
            if (o.header.length > 0) {
                return BI.makeArray(o.header[0].length, "");
            }
            if (o.items.length > 0) {
                return BI.makeArray(o.items[0].length, "");
            }
            return [];
        },

        setColumnSize: function (columnSize) {
            this.table.attr("columnSize", columnSize);
            this.table.resize();
        },

        populate: function (items, header) {
            this.options.items = items;
            this.options.header = header;
            this.table.attr("columnSize", this._defaultColumnSize());
            this.table.populate(items, header);
        }
    });
    BI.shortcut("bi.components.no_freeze_preview_table", PreviewTable);
})();/**
 * @Author: Young
 * @CreationDate 2018-01-10 10:06
 * @Description
 */
!(function () {
    var PREVIEW = {
        DETAIL: 1,
        STRUCTURE: 2
    };
    var PreviewStructure = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-preview-structure",
            tableType: null,
            fields: [],
            data: [],
            keyword: "",
            fieldsMap: null,
            showPartData: false,
            showRemove: false,
            enableHeaderClick: false,
            enableReName: false,
            enableChangeShowType: true,
            showSource: false
        },
        render: function () {
            var items = [{
                value: PREVIEW.DETAIL,
                title: BI.i18nText("BI-Basic_Detail_View"),
                cls: "detail-view-font toggle-item",
                selected: true
            }, {
                value: PREVIEW.STRUCTURE,
                title: BI.i18nText("BI-Basic_Structure_View"),
                cls: "structure-view-font toggle-item"
            }];
            if (!this.options.enableChangeShowType) {
                items = [];
            }
            return {
                type: "bi.tab",
                showIndex: PREVIEW.DETAIL,
                single: true,
                tab: {
                    type: "bi.button_group",
                    cls: "view-change",
                    items: BI.createItems(items, {
                        type: "bi.icon_button",
                        height: 24, width: 24
                    }),
                    layouts: [{
                        type: "bi.left_vertical_adapt",
                        rgap: 5
                    }],
                    height: 40
                },
                cardCreator: BI.bind(this._createCard, this)
            };
        },

        _createCard: function (v) {
            var self = this;
            switch (v) {
                case PREVIEW.DETAIL:
                    return {
                        type: "bi.components.preview_table",
                        header: this._getDetailHeader(),
                        items: this._getDetailItems(),
                        showPartData: self.options.showPartData,
                        ref: function (ref) {
                            self.detail = ref;
                        }
                    };
                case PREVIEW.STRUCTURE:
                default:
                    return {
                        type: "bi.components.preview_table",
                        header: this._getStructureHeader(),
                        items: this._getStructureItems(),
                        ref: function (ref) {
                            self.structure = ref;
                        }
                    };
            }
        },

        _getDetailHeader: function () {
            var self = this, o = this.options;
            return [BI.map(o.fields, function (i, field) {
                var name = BI.Utils.getFieldDisplayName(field, o.fieldsMap);
                return {
                    type: "bi.components.preview_header",
                    text: name,
                    name: field.name,
                    $point: o.headerPoint,
                    iconCls: BI.Utils.getIconByFieldType(field.type),
                    extraCls: field.cls || " ",
                    keyword: o.keyword,
                    showRemove: o.showRemove,
                    enableHeaderClick: o.enableHeaderClick,
                    enableReName: o.enableReName,
                    showSource: o.showSource,
                    warning: field.warning,
                    warningTitle: field.warningTitle,
                    nameChecker: function (v) {
                        if (BI.isEmptyString(v)) {
                            return false;
                        }
                        return BI.every(o.fields, function (i, item) {
                            if (field.id !== item.id) {
                                return BI.Utils.getFieldDisplayName(item, o.fieldsMap) !== v;
                            }
                            return true;
                        });
                    },
                    listeners: [{
                        eventName: "CLICK_HEADER",
                        action: function () {
                            self.fireEvent("CLICK_HEADER", field.id);
                        }
                    }, {
                        eventName: "EVENT_RENAME",
                        action: function (v) {
                            self.fireEvent("EVENT_RENAME", field.id, v);
                        }
                    }, {
                        eventName: "EVENT_REMOVE",
                        action: function () {
                            self.fireEvent("EVENT_REMOVE", field.id);
                        }
                    }],
                    ref: function () {
                        var find = BI.find(o.fields, function (idx, item) {
                            return item.id === field.id;
                        });
                        if(BI.isNotNull(find)) {
                            this.setValue(BI.Utils.getFieldDisplayName(field, o.fieldsMap));
                        }
                    }
                };
            })];
        },

        _getDetailItems: function () {
            var o = this.options;
            return BI.map(o.data, function (i, row) {
                return BI.map(row, function (j, v) {
                    var type = o.fields[j].type;

                    var value = v;

                    if (type === BICst.COLUMN.DATE) {
                        value = BI.Format.formatValueByGroup(value, o.fields[j].fieldGroupType);
                    }

                    return {
                        text: value,
                        title: value,
                        textAlign: type === BICst.COLUMN.NUMBER ? "right" : "left",
                        hgap: 5
                    };
                });
            });
        },

        _getStructureHeader: function () {
            var header = [{
                type: "bi.label",
                cls: "bi-preview-table-header",
                text: BI.i18nText("BI-Basic_Field_Type"),
                textAlign: "left",
                lgap: 5
            }, {
                type: "bi.label",
                cls: "bi-preview-table-header",
                text: BI.i18nText("BI-Basic_Field_Name"),
                textAlign: "left",
                lgap: 5
            }];
            if(this.options.tableType !== BICst.TABLE.ANALYSIS) {
                header.push({
                    type: "bi.label",
                    cls: "bi-preview-table-header",
                    text: BI.i18nText("BI-Basic_Origin_Field_Name"),
                    textAlign: "left",
                    lgap: 5
                });
            }
            return [header];
        },

        _getStructureItems: function () {
            var self = this;
            return BI.map(this.options.fields, function (i, field) {
                var displayName = BI.Utils.getFieldDisplayName(field, self.options.fieldsMap);
                var item = [{
                    type: "bi.vertical_adapt",
                    items: [{
                        type: "bi.center_adapt",
                        cls: BI.Utils.getIconByFieldType(field.type),
                        items: [{
                            type: "bi.icon"
                        }],
                        width: 30,
                        height: 30
                    }, {
                        type: "bi.label",
                        text: BI.Utils.getTextByFieldType(field.type)
                    }],
                    height: 30,
                    lgap: 5
                }, {
                    type: "bi.label",
                    text: displayName,
                    title: displayName,
                    extraCls: field.warning ? "warning-color" : "",
                    tipType: field.warning ? "warning" : "success",
                    warningTitle: field.warningTitle,
                    keyword: self.options.keyword,
                    textAlign: "left",
                    height: 30,
                    lgap: 5
                }];
                if(self.options.tableType !== BICst.TABLE.ANALYSIS) {
                    item.push({
                        type: "bi.label",
                        text: field.name,
                        title: field.name,
                        textAlign: "left",
                        height: 30,
                        lgap: 5
                    });
                }
                return item;
            });
        },

        setHorizontalScroll: function (v) {
            this.detail.setHorizontalScroll(v);
        },

        populate: function (fields, data, fieldsMap, keyword) {
            this.options.fields = fields;
            this.options.data = data;
            this.options.fieldsMap = fieldsMap;
            this.options.keyword = keyword;
            this.detail && this.detail.populate(this._getDetailItems(), this._getDetailHeader());
            this.structure && this.structure.populate(this._getStructureItems(), this._getStructureHeader());
        },

        /**
         * 该函数仅是用来更新数据，并不会执行populate
         */
        update: function (fields, data, fieldsMap) {
            this.options.fields = BI.isNotNull(fields) ? fields : this.options.fields;
            this.options.data = BI.isNotNull(data) ? data : this.options.data;
            this.options.fieldsMap = BI.isNotNull(fieldsMap) ? fieldsMap : this.options.fieldsMap;
        }
    });
    BI.shortcut("bi.components.preview_structure", PreviewStructure);
})();
!(function () {
    var preview = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-components-pack-table-preview",
            showIndex: BICst.PREVIEW_TABLE_STATUS.TABLE,
            tableType: BICst.TABLE.ANALYSIS,
            showRemove: false,
            showSource: false,
            enableHeaderClick: false,
            enableReName: false,
            enableChangeShowType: true,
            fields: [],
            data: [],
            fieldsMap: {},
            showPartData: true,
            empty: {
                type: "bi.components.empty_tip",
                text: BI.i18nText("BI-Conf_Please_Click_Table_To_Preview")
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.tab",
                showIndex: this.options.showIndex,
                single: true,
                cardCreator: BI.bind(this._cardCreator, this),
                ref: function (_ref) {
                    self.tab = _ref;
                }
            };
        },

        _cardCreator: function (v) {
            var self = this;
            switch (v) {
                case BICst.PREVIEW_TABLE_STATUS.ERROR:
                    return this.options.error;
                case BICst.PREVIEW_TABLE_STATUS.LOADING:
                    return {
                        type: "bi.components.empty_tip",
                        cls: "bi-card",
                        iconCls: "execute-loading-icon",
                        text: BI.i18nText("BI-Conf_Data_Is_Loading_Please_Wait") + "..."
                    };
                case BICst.PREVIEW_TABLE_STATUS.TABLE:
                default:
                    if (this.options.fields.length === 0) {
                        return this.options.empty;
                    }
                    return {
                        type: "bi.absolute",
                        cls: "bi-card",
                        items: [{
                            top: 0, left: 10, bottom: 10, right: 10,
                            el: {
                                type: "bi.components.preview_structure",
                                fields: this.options.fields,
                                data: this.options.data,
                                fieldsMap: this.options.fieldsMap,
                                tableType: this.options.tableType,
                                showRemove: this.options.showRemove,
                                showSource: this.options.showSource,
                                showPartData: this.options.showPartData,
                                enableReName: this.options.enableReName,
                                enableHeaderClick: this.options.enableHeaderClick,
                                enableChangeShowType: this.options.enableChangeShowType,
                                ref: function (ref) {
                                    self.previewTable = ref;
                                },
                                listeners: [{
                                    eventName: "EVENT_RENAME",
                                    action: function () {
                                        self.fireEvent("EVENT_RENAME", arguments);
                                    }
                                }, {
                                    eventName: "CLICK_HEADER",
                                    action: function () {
                                        self.fireEvent("CLICK_HEADER", arguments);
                                    }
                                }, {
                                    eventName: "EVENT_REMOVE",
                                    action: function () {
                                        self.fireEvent("EVENT_REMOVE", arguments);
                                    }
                                }, {
                                    eventName: "EVENT_RENAME",
                                    action: function () {
                                        self.fireEvent("EVENT_RENAME", arguments);
                                    }
                                }, {
                                    eventName: "EVENT_RENAME",
                                    action: function () {
                                        self.fireEvent("EVENT_RENAME", arguments);
                                    }
                                }]
                            }
                        }]
                    };

            }
        },

        _populate: function () {
            if (this.previewTable) {
                this.previewTable.populate(this.options.fields, this.options.data, this.options.fieldsMap);
            }
        },

        setStatus: function (showIndex) {
            this.options.showIndex = showIndex;
            this.tab.setSelect(showIndex);
        },

        populate: function (fields, data, fieldsMap) {
            this.options.fields = fields;
            this.options.data = data;
            this.options.fieldsMap = fieldsMap;
            this.setStatus(BICst.PREVIEW_TABLE_STATUS.TABLE);
        },

        setHorizontalScroll: function (size) {
            this.previewTable.setHorizontalScroll(size);
        }
    });
    BI.shortcut("bi.components.preview.table.container", preview);
})();
/**
 * @Author: Young
 * @CreationDate 2018-01-10 9:50
 * @Description
 */
!(function () {
    var MIN_SIZE = 60;
    var ICON_WIDTH = 25;
    var PreviewTable = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-components-preview-table",
            isNeedFreeze: true,
            showSequence: false,
            showPartData: false,
            freezeCols: [],
            columnSize: [],
            headerRowSize: 30,
            rowSize: 30,
            header: [],
            items: []
        },

        mounted: function () {
            var self = this;
            this._resizeHandler = BI.debounce(function () {
                var width = self._getTableWidth(), height = self._getTableHeight();
                if (self.table.getWidth() !== width || self.table.getHeight() !== height) {
                    self.table.setWidth(width);
                    self.table.setHeight(height);
                    self.table.populate();
                }
            }, 0);
            BI.Resizers.add(this.getName(), function () {
                self._resizeHandler();
            });
            this._populate();
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.page_table",
                        rowSize: o.rowSize,
                        headerRowSize: o.headerRowSize,
                        ref: function (ref) {
                            self.table = ref;
                        },
                        el: {
                            type: "bi.sequence_table",
                            el: {
                                type: "bi.adaptive_table",
                                el: {
                                    type: "bi.resizable_table",
                                    el: {
                                        type: "bi.grid_table"
                                    }
                                }
                            }
                        }
                    },
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }, {
                    el: {
                        type: "bi.label",
                        disabled: true,
                        text: self.options.showPartData ? BI.i18nText("BI-Conf_Current_Preview_Part_Data") : ""
                    },
                    bottom: -2,
                    right: 10
                }]
            };
        },

        _getTableWidth: function () {
            return this.element.width();
        },

        _getTableHeight: function () {
            return this.element.height();
        },

        _populate: function () {
            this.populate(this.options.items, this.options.header);
        },

        // a、一列中最大宽度；b、所有宽度的均值*2；c、80
        _calculateColumnSize: function () {

            if (this.options.columnSize && this.options.columnSize.length > 0) {
                return this.options.columnSize;
            }

            function getColumnSizes (items, columnSizes, mark) {
                BI.each(items, function (i, row) {
                    BI.each(row, function (j, cell) {
                        columnSizes[j] = columnSizes[j] || [];
                        columnSizes[j].push(BI.Func.getGBWidth(cell.text) * 12 * 1.2);
                        if (!mark) return;
                        cell.cls = i % 2 !== 0 ? "even-row " : "odd-row";
                    });
                });
            }

            var sizes = [];
            getColumnSizes(this.options.header, sizes);
            getColumnSizes(this.options.items, sizes, true);
            /**
             * 规则:
             * 默认显示列宽最大值 = 当前字段名和字段值宽度均值*2
             * 默认显示列宽最小值 = 80PX
             * 如果计算出的最大值小于最小值时，显示最小值(交互后加的)
             */
            var columnSize = BI.map(sizes, function (i, column) {
                // 根据要求过滤掉为空，不参与计算平均宽度的过程，否则导致计算方差太大
                var avgSize = Math.ceil(BI.average(BI.filter(column, function (index, value) {
                    return value >= 0;
                })));
                var maxSize = avgSize * 2;
                var minSize = MIN_SIZE;
                var adaptSize = Math.ceil(BI.max(column));
                if(maxSize < minSize) {
                    return minSize;
                }
                return adaptSize < minSize ? minSize : adaptSize > maxSize ? maxSize : adaptSize;
            });

            /**
             * 列宽实际显示的宽度是在原规则基础上加上图标的宽度(交互后加的)
             */
            BI.each(this.options.header, function (i, row) {
                BI.each(row, function (j, cell) {
                    var iconWidth = cell.enableReName === true ? ICON_WIDTH : 0;
                    iconWidth += cell.showRemove === true ? ICON_WIDTH : 0;
                    iconWidth += BI.isNotNull(cell.iconCls) ? BI.isNumber(cell.iconWidth) ? cell.iconWidth : ICON_WIDTH : 0;
                    columnSize[j] += iconWidth;
                });
            });

            /**
             * 当默认字段宽度总和小于组件宽度时，多余宽度按照各字段默认宽度的比例进行再分配
             */
            var tableWidth = this._getTableWidth() - 10;
            var totalColumnSize = columnSize.reduce(function (a, b) {
                return a + b;
            }, 0);
            if(totalColumnSize >= tableWidth) {
                return columnSize;
            }
            var surplus = tableWidth - totalColumnSize;
            return BI.map(columnSize, function (index, column) {
                if(index === columnSize.length - 1) {
                    return column + surplus;
                }
                surplus -= Math.ceil((tableWidth - totalColumnSize) / columnSize.length);
                return column + Math.ceil((tableWidth - totalColumnSize) / columnSize.length);
            });
        },

        populate: function (items, header) {
            this.options.items = items;
            this.options.header = header;
            BI.each(header, function (i, row) {
                BI.each(row, function (j, item) {
                    item.cls = (item.cls || "") + " header-row ";
                });
            });
            var columnSize = this._calculateColumnSize();
            this.table.attr("columnSize", columnSize);
            this.table.setVerticalScroll(0);
            this.table.restore();
            this.table.setWidth(this._getTableWidth());
            this.table.setHeight(this._getTableHeight());
            this.table.attr("regionColumnSize", []);
            this.table.attr("minColumnSize", columnSize);
            this.table.attr("isNeedFreeze", true);
            this.table.attr("freezeCols", []);
            this.table.attr("showSequence", false);
            this.table.populate(items, header);
        },

        setHorizontalScroll: function (v) {
            this.table.setRightHorizontalScroll(v);
        },

        destroyed: function () {
            BI.Resizers.remove(this.getName());
        }
    });
    BI.shortcut("bi.components.preview_table", PreviewTable);
})();
/**
 * 关联视图字段Item
 *
 * Created by GUY on 2015/12/23.
 * @class BI.RelationViewItem
 * @extends BI.Widget
 */

!(function () {
    var RelationViewItem = BI.inherit(BI.BasicButton, {
        
        props: {
            baseCls: "bi-relation-view-item bi-list-item-active",
            hoverIn: BI.emptyFn,
            hoverOut: BI.emptyFn
        },
        
        render: function () {
            var self = this, o = this.options;
            this.element.hover(o.hoverIn, o.hoverOut);
            o.text = BI.isArray(o.text) ? o.text : [o.text];
            var body = [];
            var header = {
                type: "bi.vertical_adapt",
                items: [{
                    type: "bi.center_adapt",
                    cls: o.isPrimary ? "primary-key-region primary-key-font" : "",
                    items: [{
                        type: "bi.icon",
                        title: o.isPrimary ? BI.i18nText("BI-Primary_Key") : ""
                    }],
                    width: 36,
                    height: 16
                }, {
                    type: "bi.label",
                    text: o.text.length > 1 ? BI.i18nText("BI-Basic_Union_Relation") : o.text[0],
                    value: o.value,
                    keyword: o.keyword,
                    height: 24,
                    textAlign: "left"
                }]
            };
            if(o.text.length > 1) {
                body = BI.map(o.text, function (idx, text) {
                    return {
                        el: {
                            type: "bi.label",
                            text: text,
                            keyword: o.keyword,
                            value: o.value,
                            height: 24,
                            textAlign: "left"
                        },
                        lgap: 49
                    };
                });
            }
            return {
                type: "bi.vertical",
                element: this,
                items: BI.concat([header], body)
            };
        },

        enableHover: function (opt) {
            RelationViewItem.superclass.enableHover.apply(this, [{
                container: "body"
            }]);
        },

        setSelected: function (b) {
            this.element[b ? "addClass" : "removeClass"]("active");
        }
    });
    BI.shortcut("bi.relation_view_item", RelationViewItem);
})();/**
 * 关联视图
 *
 * Created by GUY on 2015/12/22.
 * @class BI.RelationView
 * @extends BI.Widget
 */
!(function () {

    var constants = {
        lineColor: "#c4c6c6",
        selectLineColor: "#009de3"
    };
    
    var RelationView = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-relation-view",
            items: []
        },

        _init: function () {
            RelationView.superclass._init.apply(this, arguments);
            this.populate(this.options.items);
        },

        _calculateWidths: function () {
            var widths = [];
            BI.each(this.views, function (i, items) {
                BI.each(items, function (j, obj) {
                    if (!widths[j]) {
                        widths[j] = BI.MIN;
                    }
                    widths[j] = Math.max(widths[j], obj.getWidth());
                });
            });
            return widths;
        },

        _calculateHeights: function () {
            var heights = BI.makeArray(BI.size(this.views), BI.MIN);
            BI.each(this.views, function (i, items) {
                BI.each(items, function (j, obj) {
                    heights[i] = Math.max(heights[i], obj.getHeight());
                });
            });
            return heights;
        },

        _hoverIn: function (target) {
            var self = this, c = constants;
            BI.each(this.relations, function (start, rs) {
                BI.each(rs, function (end, relations) {
                    BI.find(relations, function (idx, relation) {
                        if (relation.primary.value === target || relation.foreign.value === target) {
                            self.lines[start][end].attr("stroke", c.selectLineColor).toFront();
                            self.storeViews[start].setValue(relation.primary.value);
                            self.storeViews[end].setValue(relation.foreign.value);
                            return true;
                        }
                    });
                });
            });
        },

        _hoverOut: function (target) {
            var self = this, c = constants;
            BI.each(this.relations, function (start, rs) {
                BI.each(rs, function (end, relations) {
                    BI.find(relations, function (idx, relation) {
                        if (relation.primary.value === target || relation.foreign.value === target) {
                            self.lines[start][end].attr("stroke", c.lineColor);
                            self.storeViews[start].setValue([]);
                            self.storeViews[end].setValue([]);
                            return true;
                        }
                    });
                });
            });
        },

        populate: function (items) {
            var self = this, o = this.options, c = constants;
            o.items = items || [];
            this.empty();
            this.svg = BI.createWidget({
                type: "bi.svg"
            });

            // 算出所有的区域和关联
            var regions = this.regions = {}, relations = this.relations = {};
            BI.each(items, function (i, item) {
                var pr = item.primary.region, fr = item.foreign && item.foreign.region;
                if (pr && !relations[pr]) {
                    relations[pr] = {};
                }
                if (pr && fr && !relations[pr][fr]) {
                    relations[pr][fr] = [];
                }
                if (pr && !regions[pr]) {
                    regions[pr] = [];
                }
                if (fr && !regions[fr]) {
                    regions[fr] = [];
                }
                if (pr && !BI.deepContains(regions[pr], item.primary)) {
                    regions[pr].push(item.primary);
                }
                if (fr && !BI.deepContains(regions[fr], item.foreign)) {
                    regions[fr].push(item.foreign);
                }
                pr && fr && relations[pr][fr].push(item);
            });
            // 求拓扑
            var topology = [];
            var rs = BI.clone(regions), store = {};
            while (!BI.isEmpty(rs)) {
                var clone = BI.clone(rs);
                BI.each(o.items, function (i, item) {
                    if (!store[item.primary.region]) {
                        delete clone[item.foreign && item.foreign.region];
                    }
                });
                topology.push(BI.keys(clone));
                BI.extend(store, clone);
                BI.each(clone, function (k, v) {
                    delete rs[k];
                });
            }
            // 构建视图
            var views = this.views = {}, storeViews = this.storeViews = {}, indexes = this.indexes = {};
            var verticals = [];
            BI.each(topology, function (i, items) {
                if (!views[i]) {
                    views[i] = {};
                }
                var horizontal = [];
                BI.each(items, function (j, region) {
                    var items = regions[region];
                    views[i][j] = storeViews[region] = BI.createWidget({
                        type: "bi.relation_view_region_container",
                        value: region,
                        header: items[0].regionTitle,
                        text: items.length > 0 ? items[0].regionText : "",
                        handler: items.length > 0 ? items[0].regionHandler : BI.emptyFn,
                        isView: items[0].isView,
                        keyword: items[0].keyword,
                        items: items,
                        disabled: items[0].disabled,
                        listeners: [{
                            eventName: "RelationViewRegion.EVENT_HOVER_IN",
                            action: function (v) {
                                self._hoverIn(v);
                            }
                        }, {
                            eventName: "RelationViewRegion.EVENT_HOVER_OUT",
                            action: function (v) {
                                self._hoverOut(v);
                            }
                        }, {
                            eventName: "RelationViewRegion.EVENT_PREVIEW",
                            action: function (v) {
                                self.fireEvent("EVENT_PREVIEW", region, v);
                            }
                        }]
                    });
                    indexes[region] = {i: i, j: j};
                    horizontal.push(views[i][j]);
                });
                verticals.push({
                    type: "bi.horizontal",
                    items: horizontal
                });
            });

            // 求每一行的高度
            var heights = this._calculateHeights();

            // 求每一列的宽度
            var widths = this._calculateWidths();

            // 求相对宽度和高度
            var offsetWidths = [0], offsetHeights = [0];
            BI.each(heights, function (i, h) {
                if (i === 0) {
                    return;
                }
                offsetHeights[i] = offsetHeights[i - 1] + heights[i - 1];
            });
            BI.each(widths, function (i, w) {
                if (i === 0) {
                    return;
                }
                offsetWidths[i] = offsetWidths[i - 1] + widths[i - 1];
            });

            // 画线
            var lines = this.lines = {};// 缓存所有的线
            BI.each(relations, function (start, rs) {
                BI.each(rs, function (end, relation) {
                    var startIndex = indexes[start], endIndex = indexes[end];
                    var top = 0, right = 1, bottom = 2, left = 3;
                    var startDirection = bottom, endDirection = top;
                    // if (startIndex.j > endIndex.j) {
                    //     startDirection = left;
                    //     endDirection = right;
                    // } else if (startIndex.j < endIndex.j) {
                    //     startDirection = right;
                    //     endDirection = left;
                    // } else if (startIndex.i < endIndex.i) {
                    //     startDirection = bottom;
                    //     endDirection = top;
                    // } else if (startIndex.i > endIndex.i) {
                    //     startDirection = top;
                    //     endDirection = bottom;
                    // }
                    var draw = function (i, j, direction, isForeign) {
                        var x = offsetWidths[j] + (widths[j] - views[i][j].getWidth()) / 2;
                        var y = offsetHeights[i];
                        var path = "", position;
                        switch (direction) {
                            case top:
                                position = isForeign ? views[i][j].getTopRightPosition() : views[i][j].getTopLeftPosition();
                                x += position.x;
                                y += position.y;
                                path = "M" + x + "," + y + "L" + x + "," + (y - 10);
                                y -= 10;
                                break;
                            case right:
                                position = views[i][j].getRightPosition();
                                x += position.x;
                                y += position.y;
                                path = "M" + x + "," + y + "L" + (x + 10) + "," + y;
                                x += 10;
                                break;
                            case bottom:
                                position = views[i][j].getBottomPosition();
                                x += position.x;
                                y += position.y;
                                path = "M" + x + "," + y + "L" + x + "," + (y + 10);
                                y += 10;
                                break;
                            case left:
                                position = views[i][j].getLeftPosition();
                                x += position.x;
                                y += position.y;
                                path = "M" + x + "," + y + "L" + (x - 10) + "," + y;
                                x -= 10;
                                break;
                        }
                        return {x: x, y: y, path: path};
                    };
                    var path = "";
                    var si = draw(startIndex.i, startIndex.j, startDirection);
                    var ei = draw(endIndex.i, endIndex.j, endDirection, true);
                    path += si.path + ei.path;
                    if (!lines[start]) {
                        lines[start] = {};
                    }
                    path += "M" + si.x + "," + si.y + "L" + ei.x + "," + ei.y;
                    var line = lines[start][end] = self.svg.path(path)
                        .attr({stroke: c.lineColor, "stroke-width": "2"})
                        .hover(function () {
                            line.attr("stroke", c.selectLineColor).toFront();
                            storeViews[start].setValue(relation[0].primary.value);
                            storeViews[end].setValue(relation[0].foreign.value);
                        }, function () {
                            line.attr("stroke", c.lineColor);
                            storeViews[start].setValue([]);
                            storeViews[end].setValue([]);
                        });
                });
            });
            var container = BI.createWidget();
            BI.createWidget({
                type: "bi.vertical",
                element: container,
                items: verticals
            });
            BI.createWidget({
                type: "bi.absolute",
                element: container,
                items: [{
                    el: this.svg,
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            });

            BI.createWidget({
                type: "bi.center_adapt",
                scrollable: true,
                element: this,
                items: [container]
            });
        }
    });
    BI.shortcut("bi.relation_view", RelationView);
})();/**
 * Created by Young's on 2017/3/10.
 */
!(function () {
    var RelationViewRegionContainer = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-relation-view-region-container",
            width: 210
        },

        render: function () {
            var self = this, o = this.options;
            this.region = BI.createWidget({
                type: "bi.relation_view_region",
                value: o.value,
                width: o.width,
                header: o.header,
                text: o.text,
                handler: o.handler,
                disabled: o.disabled,
                items: o.items,
                isView: o.isView,
                keyword: o.keyword,
                listeners: [{
                    eventName: "RelationViewRegion.EVENT_PREVIEW",
                    action: function (v) {
                        self.fireEvent("RelationViewRegion.EVENT_PREVIEW", v);
                    }
                }, {
                    eventName: "RelationViewRegion.EVENT_HOVER_IN",
                    action: function (v) {
                        self.fireEvent("RelationViewRegion.EVENT_HOVER_IN", v);
                    }
                }, {
                    eventName: "RelationViewRegion.EVENT_HOVER_OUT",
                    action: function (v) {
                        self.fireEvent("RelationViewRegion.EVENT_HOVER_OUT", v);
                    }
                }]
            });
            return {
                type: "bi.vertical",
                items: [this.region],
                width: this.region.getWidth(),
                height: this.region.getHeight()
            };
        },

        getWidth: function () {
            return this.region.getWidth();
        },

        getHeight: function () {
            return this.region.getHeight();
        },

        // 获取上方开始划线的位置
        getTopLeftPosition: function () {
            return this.region.getTopLeftPosition();
        },

        getTopRightPosition: function () {
            return this.region.getTopRightPosition();
        },

        getBottomPosition: function () {
            return this.region.getBottomPosition();
        },

        getLeftPosition: function () {
            return this.region.getLeftPosition();
        },

        getRightPosition: function () {
            return this.region.getRightPosition();
        },

        setValue: function (v) {
            this.region.setValue(v);
        },

        toggleRegion: function (v) {
            v === true ? this.region.element.fadeIn() : this.region.element.fadeOut();
        },

        setPreviewSelected: function (v) {
            this.region.setPreviewSelected(v);
        }
    });
    BI.shortcut("bi.relation_view_region_container", RelationViewRegionContainer);
})();/**
 * 关联视图
 *
 * Created by GUY on 2015/12/23.
 * @class BI.RelationViewRegion
 * @extends BI.BasicButton
 */

!(function () {
    var RelationViewRegion = BI.inherit(BI.BasicButton, {
        
        props: {
            baseCls: "bi-relation-view-region cursor-pointer",
            width: 150,
            text: "",
            value: "",
            header: "",
            items: []
        },

        render: function () {
            var self = this, o = this.options;

            this.preview = BI.createWidget({
                type: "bi.icon_button",
                cls: "eye relation-table-preview-font",
                width: 36,
                height: 24,
                stopPropagation: true,
                selected: o.isView,
                listeners: [{
                    eventName: "IconButton.EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("RelationViewRegion.EVENT_PREVIEW", this.isSelected());
                    }
                }]
            });

            this.title = BI.createWidget({
                type: "bi.label",
                height: 24,
                width: 70,
                text: o.text,
                value: o.value,
                textAlign: "left",
                disabled: o.disabled,
                keyword: o.keyword
            });
            // title放body上
            if (BI.isKey(o.header)) {
                this.title.setTitle(o.header, {
                    container: "body"
                });
            }

            // BI-24528 去掉没有关联的表的body
            var filterItems = BI.filter(o.items, function (idx, item) {
                return BI.isNotNull(item.value);
            });

            this.button_group = BI.createWidget({
                type: "bi.button_group",
                items: this._createItems(filterItems),
                layouts: [{
                    type: "bi.vertical"
                }]
            });

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.vertical",
                    cls: "relation-view-region-container bi-card bi-border",
                    items: [{
                        type: "bi.vertical_adapt",
                        cls: "relation-view-region-title bi-background" + (filterItems.length === 0 ? "" : " bi-border-bottom"),
                        items: [this.preview, this.title]
                    }, this.button_group]
                }],
                hgap: 25,
                vgap: 20
            };
        },

        _createItems: function (items) {
            var self = this, o = this.options;
            return BI.map(items, function (i, item) {
                var texts = BI.isArray(item.text) ? item.text : [item.text];
                return BI.extend(item, {
                    type: "bi.relation_view_item",
                    keyword: o.keyword,
                    height: texts.length > 1 ? (texts.length + 1) * 24 : 24,
                    cls: i === items.length - 1 ? "" : "split-line",
                    hoverIn: function () {
                        self.setValue(item.value);
                        self.fireEvent("RelationViewRegion.EVENT_HOVER_IN", item.value);
                    },
                    hoverOut: function () {
                        self.setValue([]);
                        self.fireEvent("RelationViewRegion.EVENT_HOVER_OUT", item.value);
                    }
                });
            });
        },

        getWidth: function () {
            return this.options.width;
        },

        getHeight: function () {
            var height = 0;
            var buttons = this.button_group.getAllButtons();
            BI.each(buttons, function (idx, button) {
                // 获取item高度的时候加上边框
                height += button.getHeight() + (idx === buttons.length - 1 ? 0 : 1);
            });
            return height + 24 + 2 * 20 + 3;
        },

        // 获取上方开始划线的位置
        getTopLeftPosition: function () {
            return {
                x: 25 + 10,
                y: 20
            };
        },

        getTopRightPosition: function () {
            return {
                x: this.getWidth() - 25 - 10,
                y: 20
            };
        },

        getBottomPosition: function () {
            return {
                x: 25 + 10,
                y: this.getHeight() - 20
            };
        },

        getLeftPosition: function () {
            return {
                x: 25,
                y: 20 + 10
            };
        },

        getRightPosition: function () {
            return {
                x: this.getWidth() - 25,
                y: 20 + 10
            };
        },

        setValue: function (v) {
            this.button_group.setValue(v);
        },

        setPreviewSelected: function (v) {
            this.preview.setSelected(v);
        }
    });
    BI.shortcut("bi.relation_view_region", RelationViewRegion);
})();/**
 * 用于胶囊重命名的文本框
 * Created by GUY on 2016/1/25.
 * @class RenameEditor
 * @extends BI.Widget
 */

!(function () {
    var RenameEditor = BI.inherit(BI.BasicButton, {
        props: {
            baseCls: "bi-components-rename-editor",
            hgap: 4,
            vgap: 0,
            lgap: 0,
            rgap: 0,
            tgap: 0,
            bgap: 0,
            validationChecker: BI.emptyFn,
            quitChecker: BI.emptyFn,
            allowBlank: false,
            watermark: "",
            errorText: "",
            height: 24,
            textAlign: "left",
            labelCls: "",
            textFormatter: function (v) {
                return v;
            },
            handler: function () {
                this.focus();
            }
        },

        _store: function () {
            var o = this.options;

            return BI.Models.getModel("bi.model.components.rename.editor", {
                value: o.value,
                textFormatter: o.textFormatter
            });
        },

        watch: {
            displayText: function (displayText) {
                this.text.setValue(displayText);
                this.text.setText(displayText);
            },

            value: function (value) {
                this.editor.setValue(value);
            }
        },

        mounted: function () {
            this._showHint();
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.left",
                scrolly: false,
                element: this,
                items: [{
                    type: "bi.editor",
                    ref: function (_ref) {
                        self.editor = _ref;
                    },
                    cls: "rename-editor-editor",
                    height: o.height,
                    hgap: o.hgap,
                    vgap: o.vgap,
                    lgap: o.lgap,
                    rgap: o.rgap,
                    tgap: o.tgap,
                    bgap: o.bgap,
                    value: this.model.value,
                    invisible: true,
                    width: 125,
                    stopPropagation: true,
                    validationChecker: o.validationChecker,
                    quitChecker: o.quitChecker,
                    allowBlank: o.allowBlank,
                    watermark: o.watermark,
                    errorText: o.errorText,
                    listeners: [{
                        eventName: BI.Controller.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_FOCUS,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_FOCUS, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_BLUR,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_BLUR, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_CLICK,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_CLICK, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_CHANGE, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_KEY_DOWN,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_KEY_DOWN, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_VALID,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_VALID, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_CONFIRM,
                        action: function () {
                            self._showHint();
                            self.store.setValue(self.editor.getValue());
                            self.fireEvent(RenameEditor.EVENT_CONFIRM, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_START,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_START, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_PAUSE,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_PAUSE, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_STOP,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_STOP, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_SPACE,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_SPACE, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_ERROR,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_ERROR, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_ENTER,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_ENTER, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_RESTRICT,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_RESTRICT, arguments);
                        }
                    }, {
                        eventName: BI.Editor.EVENT_EMPTY,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_EMPTY, arguments);
                        }
                    }]
                }, {
                    type: "bi.text_button",
                    ref: function (_ref) {
                        self.text = _ref;
                    },
                    cls: "shelter-editor-text " + o.labelCls,
                    title: o.title,
                    warningTitle: o.warningTitle,
                    tipType: o.tipType,
                    textAlign: o.textAlign,
                    height: o.height,
                    text: this.model.displayText,
                    value: this.model.displayText,
                    hgap: o.hgap,
                    listeners: [{
                        eventName: BI.Controller.EVENT_CHANGE,
                        action: function () {
                            arguments[2] = self;
                            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
                        }
                    }, {
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent(RenameEditor.EVENT_CLICK_LABEL);
                        }
                    }]
                }]
            };
        },

        _showInput: function () {
            this.editor.visible();
            this.text.invisible();
        },

        _showHint: function () {
            this.editor.invisible();
            this.text.visible();
        },

        focus: function () {
            this._showInput();
            this.editor.focus();
        },

        blur: function () {
            this.editor.blur();
            this._showHint();
        },

        setValue: function (k) {
            this.store.setValue(k);
        },

        getValue: function () {
            return this.model.value;
        }
    });
    RenameEditor.EVENT_CHANGE = "EVENT_CHANGE";
    RenameEditor.EVENT_FOCUS = "EVENT_FOCUS";
    RenameEditor.EVENT_BLUR = "EVENT_BLUR";
    RenameEditor.EVENT_CLICK = "EVENT_CLICK";
    RenameEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
    RenameEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";

    RenameEditor.EVENT_START = "EVENT_START";
    RenameEditor.EVENT_PAUSE = "EVENT_PAUSE";
    RenameEditor.EVENT_STOP = "EVENT_STOP";
    RenameEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
    RenameEditor.EVENT_VALID = "EVENT_VALID";
    RenameEditor.EVENT_ERROR = "EVENT_ERROR";
    RenameEditor.EVENT_ENTER = "EVENT_ENTER";
    RenameEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
    RenameEditor.EVENT_SPACE = "EVENT_SPACE";
    RenameEditor.EVENT_EMPTY = "EVENT_EMPTY";

    BI.shortcut("bi.components.rename.editor", RenameEditor);
})();
/**
 * @author: Teller
 * @createdAt: 2018/6/28 下午8:23
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            var o = this.options;

            return {
                value: o.value
            };
        },

        computed: {
            displayText: function () {
                var o = this.options;

                return o.textFormatter(this.model.value);
            }
        },

        actions: {
            setValue: function (v) {
                this.model.value = v;
            }
        }
    });
    BI.model("bi.model.components.rename.editor", Model);
})();
!(function () {
    var CONSTANTS = {
        WIDTH: 450,
        HEIGHT: 250
    };
    var preload = document.createElement("div");
    preload.setAttribute("class", "preload-error-image background-network-error");
    document.body.appendChild(preload);
    window.onload = function () {
        document.body.removeChild(preload);
    };
    var Widget = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-disconnect-pane-wrapper"
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.center_adapt",
                items: [{
                    type: "bi.vertical",
                    cls: "bi-disconnect-pane bi-card",
                    items: [{
                        type: "bi.horizontal_adapt",
                        items: [{
                            type: "bi.layout",
                            cls: "background-network-error",
                            width: 100,
                            height: 100,
                            tgap: 30
                        }]
                    }, {
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Offline_And_Retry"),
                        textAlign: "center",
                        tgap: 12
                    }, {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.horizontal",
                            rgap: 10,
                            lgap: 10,
                            items: [{
                                type: "bi.button",
                                text: BI.i18nText("BI-Basic_Cancel"),
                                value: 1,
                                level: "ignore",
                                handler: function (v) {
                                    self.fireEvent("EVENT_CANCEL", v);
                                    BI.Maskers.hide(o.id);
                                }
                            }, {
                                type: "bi.button",
                                text: BI.i18nText("BI-Basic_Retry"),
                                value: 0,
                                level: "ignore",
                                handler: function (v) {
                                    self.fireEvent("EVENT_CONFIRM", v);
                                    BI.Maskers.hide(o.id);
                                }
                            }]
                        }],
                        tgap: 20
                    }],
                    width: CONSTANTS.WIDTH,
                    height: CONSTANTS.HEIGHT
                }]
            };
        }
    });
    BI.shortcut("bi.disconnect_pane", Widget);
})();
!(function () {
    var preload = document.createElement("div");
    preload.setAttribute("class", "preload-error-image detail-error-background");
    document.body.appendChild(preload);
    window.onload = function () {
        document.body.removeChild(preload);
    };
    var Widget = BI.inherit(BI.Widget, {
        render: function () {
            var o = this.options, self = this;
            var errorDetail = o.error.responseText || "";
            this.detailVisiable = false;
            return {
                type: "bi.center_adapt",
                cls: "bi-error-pane-wrapper",
                items: [{
                    type: "bi.vertical",
                    cls: "bi-error-pane",
                    tgap: 20,
                    height: 710,
                    items: [{
                        type: "bi.layout",
                        cls: "detail-error-background",
                        width: 602,
                        height: 166
                    }, {
                        type: "bi.label",
                        cls: "error-title",
                        textAlign: "center",
                        text: BI.i18nText("BI-Basic_Can_Not_Access_Page")
                    }, {
                        type: "bi.label",
                        cls: "error-tip",
                        textAlign: "center",
                        text: BI.i18nText("BI-Basic_Please_Contact_Admin")
                    }, {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.horizontal",
                            rgap: 10,
                            items: [{
                                type: "bi.button",
                                level: "ignore",
                                text: BI.i18nText("BI-Conf_Detail_Info"),
                                width: 80,
                                ref: function (ref) {
                                    self.textButton = ref;
                                },
                                handler: function () {
                                    self.updateShowDetail();
                                }
                            }, {
                                type: "bi.button",
                                text: BI.i18nText("BI-Basic_Cancel"),
                                width: 80,
                                level: "ignore",
                                handler: function () {
                                    BI.Maskers.remove(o.id);
                                }
                            }, {
                                type: "bi.button",
                                text: BI.i18nText("BI-Basic_Retry"),
                                width: 80,
                                handler: function () {
                                    BI.Maskers.remove(o.id);
                                    self.fireEvent("EVENT_CHANGE");
                                }
                            }]
                        }]
                    }, {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.left",
                            width: 600,
                            height: 350,
                            ref: function () {
                                self.detailInfo = this;
                            },
                            invisible: !this.detailVisiable,
                            cls: "bi-border bi-background bi-tips",
                            scrolly: true,
                            items: [{
                                type: "bi.label",
                                text: errorDetail,
                                whiteSpace: "normal",
                                textAlign: "left",
                                textHeight: 20
                            }],
                            hgap: 10
                        }]
                    }]
                }]
            };
        },

        updateShowDetail: function () {
            this.detailVisiable = !this.detailVisiable;
            this.detailInfo.setVisible(this.detailVisiable);
            this.textButton.setText(this.detailVisiable ? BI.i18nText("BI-Conf_Close_Detail_Info") : BI.i18nText("BI-Conf_Detail_Info"));
        }
    });
    BI.shortcut("bi.detail_error_pane", Widget);
})();
!(function () {
    var reqArray = [];
    var detail = BI.UUID(), disconnect = BI.UUID(), timeout = BI.UUID();

    BI.ErrorHandler = BI.ErrorHandler || {};
    BI.extend(BI.ErrorHandler, {
        showDetailError: function (error, callback) {
            BI.Maskers.create(detail, null, {
                type: "bi.detail_error_pane",
                id: detail,
                error: error,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        callback && callback();
                    }
                }]
            });
            BI.Maskers.show(detail);
        },
        showDisconnectError: function (cancel, confirm) {
            BI.Maskers.create(disconnect, null, {
                type: "bi.disconnect_pane",
                id: disconnect,
                listeners: [{
                    eventName: "EVENT_CLOSE",
                    action: function () {
                        cancel && cancel();
                    }
                }, {
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        confirm && confirm();
                    }
                }]
            });
            BI.Maskers.show(disconnect);
        },
        showTimeoutError: function (cancel, confirm) {
            BI.Popovers.create(timeout, {
                size: "small",
                type: "bi.bar_popover",
                header: BI.i18nText("BI-Basic_Request_Timeout"),
                body: {
                    type: "bi.center_adapt",
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Wait_Or_Check")
                    }]
                },
                btns: [BI.i18nText("BI-Basic_Retry"), BI.i18nText("BI-Basic_Cancel")],
                listeners: [{
                    eventName: BI.Popover.EVENT_CLOSE,
                    action: function () {
                        cancel && cancel();
                    }
                }, {
                    eventName: BI.Popover.EVENT_CONFIRM,
                    action: function () {
                        confirm && confirm();
                    }
                }]
            }).open(timeout);
        },
        addReq: function (req) {
            reqArray.push(req);
        },
        retryReqs: function () {
            BI.each(reqArray, function (idx, req) {
                BI.asyncAjax(req);
            });
            reqArray = [];
        },
        commonErrorHandler: function (req, error) {
            BI.ErrorHandler.addReq(req);
            if (error.readyState === 0) {
                return BI.ErrorHandler.showDisconnectError(BI.emptyFn, function () {
                    BI.ErrorHandler.retryReqs();
                });
            }
            BI.ErrorHandler.showDetailError(error, function () {
                BI.ErrorHandler.retryReqs();
            });
        }
    });
})();!(function () {
    var timeout = BI.UUID(), reqMap = {}, timerMap = {};

    BI.TimeoutTimer = BI.TimeoutTimer || {};
    BI.extend(BI.TimeoutTimer, {
        showTimeoutError: function (cancel, confirm) {
            BI.Popovers.create(timeout, {
                size: "small",
                type: "bi.bar_popover",
                header: BI.i18nText("BI-Basic_Request_Timeout"),
                body: {
                    type: "bi.center_adapt",
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Wait_Or_Check")
                    }]
                },
                btns: [BI.i18nText("BI-Basic_Retry"), BI.i18nText("BI-Basic_Cancel")],
                listeners: [{
                    eventName: BI.Popover.EVENT_CLOSE,
                    action: function () {
                        cancel && cancel();
                    }
                }, {
                    eventName: BI.Popover.EVENT_CONFIRM,
                    action: function () {
                        confirm && confirm();
                    }
                }]
            }).open(timeout);
        },

        addReq: function (id, req) {
            timerMap[id] = setTimeout(function () {
                if (BI.isNotNull(reqMap[id])) {
                    var timeoutHandler = reqMap[id].timeoutHandler;
                    timeoutHandler && timeoutHandler(reqMap[id].options);
                }
            }, 5 * 60 * 1000);
            reqMap[id] = req;
        },

        removeReq: function (id) {
            window.clearTimeout(timerMap[id]);
            delete timerMap[id];
            delete reqMap[id];
        },

        retryReqs: function () {
            BI.each(BI.keys(reqMap), function (i, key) {
                var req = reqMap[key];
                if (BI.isNotNull(req) && BI.isNotNull(req.ajax) && BI.isNotNull(req.options)) {
                    req.ajax.abort && req.ajax.abort();
                    BI.asyncAjax(req.options);
                }
            });
        },

        commonTimeoutHandler: function () {
            BI.TimeoutTimer.showTimeoutError(BI.emptyFn, function () {
                BI.TimeoutTimer.retryReqs();
            });
        }
    });
})();!(function () {
    var FAIL = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-request-masker-fail bi-card",
            failIcon: "deep-color-error-tip-background",
            failText: "",
            showCancelButton: true,
            reTryText: BI.i18nText("BI-Conf_Re_Connection"),
            showDetail: false,
            errorDetail: ""
        },

        _store: function () {
            return BI.Models.getModel("bi.model.request.masker.fail", {
                showDetail: this.options.showDetail
            });
        },

        watch: {
            showDetail: function (show) {
                this.detail.setVisible(show);
            },
            buttonText: function (text) {
                this.detailBtn.setText(text);
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.vertical",
                        items: [{
                            type: "bi.vertical",
                            items: [{
                                type: "bi.horizontal_auto",
                                cls: o.failIcon,
                                tgap: 40,
                                bgap: 20,
                                items: [{
                                    type: "bi.icon",
                                    width: 96,
                                    height: 96
                                }]
                            }, {
                                type: "bi.label",
                                cls: "fail-text",
                                height: 12,
                                text: o.failText,
                                ref: function (_ref) {
                                    self.errorText = _ref;
                                }
                            }]
                        }, {
                            type: "bi.horizontal_float",
                            items: [{
                                type: "bi.vertical_adapt",
                                tgap: 10,
                                items: [{
                                    type: "bi.button",
                                    text: BI.i18nText("BI-Conf_Detail_Info"),
                                    level: "ignore",
                                    width: 80,
                                    height: 24,
                                    ref: function (_ref) {
                                        self.detailBtn = _ref;
                                    },
                                    handler: function () {
                                        self.store.updateShowDetail();
                                    }
                                }, o.showCancelButton && {
                                    type: "bi.button",
                                    hgap: 10,
                                    height: 24,
                                    level: "ignore",
                                    text: BI.i18nText("BI-Basic_Cancel"),
                                    handler: function () {
                                        self.fireEvent("EVENT_CANCEL");
                                    }
                                }, {
                                    type: "bi.button",
                                    height: 24,
                                    text: o.reTryText,
                                    handler: function () {
                                        self.fireEvent("EVENT_RELOAD");
                                    }
                                }]
                            }]
                        }]
                    },
                    top: 0, bottom: 0, left: 0, right: 0
                }, {
                    el: {
                        type: "bi.vertical",
                        cls: "bi-card",
                        hgap: 5,
                        items: [{
                            type: "bi.horizontal",
                            height: 73,
                            cls: "error-background",
                            tgap: 5,
                            bgap: 10,
                            hgap: 10,
                            scrolly: true,
                            invisible: true,
                            items: [{
                                type: "bi.label",
                                cls: "message-board",
                                whiteSpace: "normal",
                                width: 400,
                                textAlign: "left",
                                text: o.errorDetail,
                                ref: function () {
                                    self.errorDetail = this;
                                }
                            }],
                            ref: function (_ref) {
                                self.detail = _ref;
                            }
                        }]
                    },
                    top: 232,
                    left: 0,
                    right: 0
                }]
            };
        },

        setText: function (text) {
            this.errorText.setText(text);
        },

        setErrorDetail: function (detail) {
            this.errorDetail.setText(detail);
        }
    });
    BI.shortcut("bi-request-masker-fail", FAIL);
}());

/**
 * Created by wangrui on 2018/5/13.
 */
var Model = BI.inherit(Fix.Model, {

    state: function () {
        return {
            showDetail: this.options.showDetail
        };
    },

    computed: {
        buttonText: function () {
            return this.model.showDetail ? BI.i18nText("BI-Conf_Close_Detail_Info") : BI.i18nText("BI-Conf_Detail_Info");
        }
    },

    actions: {
        updateShowDetail: function () {
            this.model.showDetail = !this.model.showDetail;
        }
    }
});
BI.model("bi.model.request.masker.fail", Model);!(function () {
    var LOADING = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-request-masker-loading bi-card",
            loadingIcon: "execute-loading-icon",
            loadingText: BI.i18nText("BI-Conf_Is_Saving")
        },
        render: function () {
            var o = this.options;
            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.horizontal_auto",
                    cls: o.loadingIcon,
                    tgap: 63,
                    bgap: 20,
                    items: [{
                        type: "bi.icon",
                        width: 96,
                        height: 96
                    }]
                }, o.loadingText && {
                    type: "bi.label",
                    height: 12,
                    text: o.loadingText
                }]
            };
        }
    });
    BI.shortcut("bi-request-masker-loading", LOADING);
}());

/**
 * Created by wangrui on 2018/5/13.
 */
!(function () {
    var Masker = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-request-masker",
            loadingIcon: "execute-loading-icon",
            loadingText: BI.i18nText("BI-Conf_Is_Saving"),
            successText: "",
            failIcon: "deep-color-error-tip-background",
            failText: BI.i18nText("BI-Conf-Save-Fail"),
            showIndex: BICst.REQUEST_STATUS.LOADING,
            showDetail: false,
            reloadText: BI.i18nText("BI-Conf_Re_Connection")
        },

        _store: function () {
            return BI.Models.getModel("bi.model.request.masker", {
                showIndex: this.options.showIndex
            });
        },

        watch: {
            showIndex: function (v) {
                var self = this;
                this.tab.setSelect(v);
                if (v === BICst.REQUEST_STATUS.SUCCESS) {
                    BI.delay(function () {
                        self.fireEvent("EVENT_CLOSE");
                    }, 1500);
                }
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.center_adapt",
                cls: "bi-z-index-mask",
                items: [{
                    type: "bi.center_adapt",
                    items: [{
                        type: "bi.absolute",
                        width: 450,
                        height: 250,
                        cls: "bi-card",
                        items: [{
                            el: {
                                type: "bi.tab",
                                showIndex: this.model.showIndex,
                                cardCreator: BI.bind(this._createCard, this),
                                ref: function (_ref) {
                                    self.tab = _ref;
                                },
                                single: true
                            },
                            top: 0, left: 0, bottom: 0, right: 0
                        }]
                    }]
                }]
            };
        },

        _createCard: function (v) {
            var self = this, o = this.options;
            switch (v) {
                case BICst.REQUEST_STATUS.FAIL:
                    return {
                        type: "bi-request-masker-fail",
                        failIcon: o.failIcon,
                        failText: o.failText,
                        showDetail: o.showDetail,
                        errorDetail: o.errorDetail,
                        ref: function () {
                            self.fail = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CANCEL",
                            action: function () {
                                self.fireEvent("EVENT_CANCEL");
                            }
                        }, {
                            eventName: "EVENT_RELOAD",
                            action: function () {
                                self.fireEvent("EVENT_RELOAD");
                            }
                        }]
                    };
                case BICst.REQUEST_STATUS.LOADING:
                default:
                    return {
                        type: "bi-request-masker-loading",
                        loadingIcon: o.loadingIcon,
                        loadingText: o.loadingText
                    };
            }
        },

        setStatus: function (v) {
            this.store.setStatus(v);
        },

        setErrorDetail: function (text) {
            this.options.errorDetail = text;
            this.fail && this.fail.setErrorDetail(text);
        }
    });
    BI.shortcut("bi-request-masker", Masker);
})();/**
 * Created by wangrui on 2018/5/13.
 */
var Model = BI.inherit(Fix.Model, {

    state: function () {
        return {
            showIndex: this.options.showIndex
        };
    },

    computed: {
    },

    actions: {
        setStatus: function (status) {
            this.model.showIndex = status;
        }
    }
});
BI.model("bi.model.request.masker", Model);/**
 *
 * Created by GUY on 2016/8/10.
 * @class BI.SequenceTableDynamicNumber
 * @extends BI.SequenceTableTreeNumber
 */
BI.SequenceTableDynamicNumber = BI.inherit(BI.SequenceTableTreeNumber, {

    _defaultConfig: function () {
        return BI.extend(BI.SequenceTableDynamicNumber.superclass._defaultConfig.apply(this, arguments), {
            extraCls: "bi-sequence-table-dynamic-number"
        });
    },

    _init: function () {
        BI.SequenceTableDynamicNumber.superclass._init.apply(this, arguments);
    },

    _formatNumber: function (nodes) {
        var self = this, o = this.options;
        var result = [];
        var count = this._getStart(nodes);

        function getLeafCount (node) {
            var cnt = 0;
            if (BI.isNotEmptyArray(node.children)) {
                BI.each(node.children, function (index, child) {
                    cnt += getLeafCount(child);
                });
                if (node.children.length > 1 && BI.isNotEmptyArray(node.values)) {
                    cnt++;
                }
            } else {
                cnt++;
            }
            return cnt;
        }

        var start = 0, top = 0;
        BI.each(nodes, function (i, node) {
            if (BI.isArray(node.children)) {
                BI.each(node.children, function (index, child) {
                    var cnt = getLeafCount(child);
                    result.push({
                        text: count++,
                        start: start,
                        top: top,
                        cnt: cnt,
                        index: index,
                        height: cnt * o.rowSize
                    });
                    start += cnt;
                    top += cnt * o.rowSize;
                });
                if (BI.isNotEmptyArray(node.values)) {
                    result.push({
                        text: BI.i18nText("BI-Summary_Values"),
                        start: start++,
                        top: top,
                        cnt: 1,
                        isSummary: true,
                        height: o.rowSize
                    });
                    top += o.rowSize;
                }
            }
        });
        return result;
    }
});
BI.shortcut("bi.sequence_table_dynamic_number", BI.SequenceTableDynamicNumber);/**
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTableListNumber
 * @extends BI.Widget
 */
BI.SequenceTableListNumber = BI.inherit(BI.Widget, {

    _defaultConfig: function () {
        return BI.extend(BI.SequenceTableListNumber.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-sequence-table-list-number",
            isNeedFreeze: false,
            scrollTop: 0,
            startSequence: 1, // 开始的序号
            headerRowSize: 25,
            rowSize: 25,

            sequenceHeaderCreator: BI.emptyFn,

            header: [],
            items: [], // 二维数组

            // 交叉表头
            crossHeader: [],
            crossItems: [],

            pageSize: 20
        });
    },

    _init: function () {
        BI.SequenceTableListNumber.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.start = o.startSequence;
        this.renderedCells = [];
        this.renderedKeys = [];

        this.container = BI.createWidget({
            type: "bi.absolute",
            width: 60,
            scrollable: false
        });

        this.scrollContainer = BI.createWidget({
            type: "bi.vertical",
            scrollable: false,
            scrolly: false,
            items: [this.container]
        });

        this.headerContainer = BI.createWidget({
            type: "bi.absolute",
            cls: "bi-border",
            width: 58,
            scrollable: false
        });

        this.layout = BI.createWidget({
            type: "bi.vtape",
            element: this,
            items: [{
                el: this.headerContainer,
                height: o.headerRowSize * o.header.length - 2
            }, {
                el: {type: "bi.layout"},
                height: 2
            }, {
                el: this.scrollContainer
            }]
        });
        this._populate();
    },

    _layout: function () {
        var self = this, o = this.options;
        var headerHeight = o.headerRowSize * o.header.length - 2;
        var items = this.layout.attr("items");
        if (o.isNeedFreeze === false) {
            items[0].height = 0;
            items[1].height = 0;
        } else if (o.isNeedFreeze === true) {
            items[0].height = headerHeight;
            items[1].height = 2;
        }
        this.layout.attr("items", items);
        this.layout.resize();
        this.container.setHeight(o.items.length * o.rowSize);
        try {
            this.scrollContainer.element.scrollTop(o.scrollTop);
        } catch (e) {

        }
    },

    _createHeader: function () {
        var o = this.options;
        BI.createWidget({
            type: "bi.absolute",
            element: this.headerContainer,
            items: [{
                el: o.sequenceHeaderCreator() || {
                    type: "bi.table_style_cell",
                    cls: "sequence-table-title-cell",
                    styleGetter: o.headerCellStyleGetter,
                    text: BI.i18nText("BI-Number_Index")
                },
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            }]
        });
    },

    _calculateChildrenToRender: function () {
        var self = this, o = this.options;
        var scrollTop = BI.clamp(o.scrollTop, 0, o.rowSize * o.items.length - (o.height - o.header.length * o.headerRowSize) + BI.DOM.getScrollWidth());
        var start = Math.floor(scrollTop / o.rowSize);
        var end = start + Math.floor((o.height - o.header.length * o.headerRowSize) / o.rowSize);
        var renderedCells = [], renderedKeys = [];
        for (var i = start, cnt = 0; i <= end && i < o.items.length; i++, cnt++) {
            var index = BI.deepIndexOf(this.renderedKeys, this.start + i);
            var top = i * o.rowSize;
            if (index > -1) {
                if (o.rowSize !== this.renderedCells[index]._height) {
                    this.renderedCells[index]._height = o.rowSize;
                    this.renderedCells[index].el.setHeight(o.rowSize);
                }
                if (this.renderedCells[index].top !== top) {
                    this.renderedCells[index].top = top;
                    this.renderedCells[index].el.element.css("top", top + "px");
                }
                renderedCells.push(this.renderedCells[index]);
            } else {
                var child = BI.createWidget(BI.extend({
                    type: "bi.table_style_cell",
                    cls: "sequence-table-number-cell bi-border-left bi-border-right bi-border-bottom",
                    width: 60,
                    height: o.rowSize,
                    text: this.start + i,
                    styleGetter: function (index) {
                        return function () {
                            return o.sequenceCellStyleGetter(self.start + i - 1);
                        };
                    }(cnt)
                }));
                renderedCells.push({
                    el: child,
                    left: 0,
                    top: top,
                    _height: o.rowSize
                });
            }
            renderedKeys.push(this.start + i);
        }

        // 已存在的， 需要添加的和需要删除的
        var existSet = {}, addSet = {}, deleteArray = [];
        BI.each(renderedKeys, function (i, key) {
            if (BI.deepContains(self.renderedKeys, key)) {
                existSet[i] = key;
            } else {
                addSet[i] = key;
            }
        });
        BI.each(this.renderedKeys, function (i, key) {
            if (BI.deepContains(existSet, key)) {
                return;
            }
            if (BI.deepContains(addSet, key)) {
                return;
            }
            deleteArray.push(i);
        });
        BI.each(deleteArray, function (i, index) {
            self.renderedCells[index].el.destroy();
        });
        var addedItems = [];
        BI.each(addSet, function (index) {
            addedItems.push(renderedCells[index]);
        });
        BI.createWidget({
            type: "bi.absolute",
            element: this.container,
            items: addedItems
        });
        this.renderedCells = renderedCells;
        this.renderedKeys = renderedKeys;
    },

    _populate: function () {
        this.headerContainer.empty();
        this._createHeader();
        this._layout();
        this._calculateChildrenToRender();
    },

    setVerticalScroll: function (scrollTop) {
        if (this.options.scrollTop !== scrollTop) {
            this.options.scrollTop = scrollTop;
            try {
                this.scrollContainer.element.scrollTop(scrollTop);
            } catch (e) {

            }
        }
    },

    getVerticalScroll: function () {
        return this.options.scrollTop;
    },

    setVPage: function (v) {
        v = v < 1 ? 1 : v;
        var o = this.options;
        this.start = (v - 1) * o.pageSize + 1;
    },

    _restore: function () {
        var o = this.options;
        BI.each(this.renderedCells, function (i, cell) {
            cell.el.destroy();
        });
        this.renderedCells = [];
        this.renderedKeys = [];
    },

    restore: function () {
        this._restore();
    },

    populate: function (items, header) {
        var o = this.options;
        if (items && items !== this.options.items) {
            o.items = items;
            this._restore();
        }
        if (header && header !== this.options.header) {
            o.header = header;
        }
        this._populate();
    }
});
BI.shortcut("bi.sequence_table_list_number", BI.SequenceTableListNumber);/**
 * 带有序号的表格
 *
 * Created by GUY on 2016/5/26.
 * @class BI.SequenceTable
 * @extends BI.Widget
 */
BI.SequenceTable = BI.inherit(BI.Widget, {

    _defaultConfig: function () {
        return BI.extend(BI.SequenceTable.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-sequence-table",
            el: {
                type: "bi.adaptive_table"
            },

            sequence: {},

            isNeedResize: true,
            isResizeAdapt: false,

            isNeedFreeze: false, // 是否需要冻结单元格
            freezeCols: [], // 冻结的列号,从0开始,isNeedFreeze为true时生效

            isNeedMerge: false, // 是否需要合并单元格
            mergeCols: [], // 合并的单元格列号
            mergeRule: BI.emptyFn,

            columnSize: [],
            minColumnSize: [],
            maxColumnSize: [],
            headerRowSize: 25,
            rowSize: 25,

            regionColumnSize: [],

            headerCellStyleGetter: BI.emptyFn,
            summaryCellStyleGetter: BI.emptyFn,
            sequenceCellStyleGetter: BI.emptyFn,

            header: [],
            items: [], // 二维数组

            // 交叉表头
            crossHeader: [],
            crossItems: [],

            showSequence: false,
            startSequence: 1// 开始的序号
        });
    },

    _init: function () {
        BI.SequenceTable.superclass._init.apply(this, arguments);
        var self = this, o = this.options;

        this.sequence = BI.createWidget(o.sequence, {
            type: "bi.sequence_table_list_number",
            invisible: o.showSequence === false,
            startSequence: o.startSequence,
            isNeedFreeze: o.isNeedFreeze,
            header: o.header,
            items: o.items,
            crossHeader: o.crossHeader,
            crossItems: o.crossItems,
            headerRowSize: o.headerRowSize,
            rowSize: o.rowSize,
            width: 60,
            height: o.height && o.height - BI.GridTableScrollbar.SIZE,

            headerCellStyleGetter: o.headerCellStyleGetter,
            summaryCellStyleGetter: o.summaryCellStyleGetter,
            sequenceCellStyleGetter: o.sequenceCellStyleGetter
        });
        this.table = BI.createWidget(o.el, {
            type: "bi.adaptive_table",
            width: o.showSequence === true ? o.width - 60 : o.width,
            height: o.height,
            isNeedResize: o.isNeedResize,
            isResizeAdapt: o.isResizeAdapt,

            isNeedFreeze: o.isNeedFreeze,
            freezeCols: o.freezeCols,

            isNeedMerge: o.isNeedMerge,
            mergeCols: o.mergeCols,
            mergeRule: o.mergeRule,

            columnSize: o.columnSize,
            minColumnSize: o.minColumnSize,
            maxColumnSize: o.maxColumnSize,
            headerRowSize: o.headerRowSize,
            rowSize: o.rowSize,

            regionColumnSize: o.regionColumnSize,

            headerCellStyleGetter: o.headerCellStyleGetter,
            summaryCellStyleGetter: o.summaryCellStyleGetter,
            sequenceCellStyleGetter: o.sequenceCellStyleGetter,

            header: o.header,
            items: o.items,
            // 交叉表头
            crossHeader: o.crossHeader,
            crossItems: o.crossItems
        });

        this.table.on(BI.Table.EVENT_TABLE_SCROLL, function (scroll) {
            if (self.sequence.getVerticalScroll() !== this.getVerticalScroll()) {
                self.sequence.setVerticalScroll(this.getVerticalScroll());
                self.sequence.populate();
            }
            self.fireEvent(BI.Table.EVENT_TABLE_SCROLL, arguments);
        });
        this.table.on(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, function () {
            o.regionColumnSize = this.getRegionColumnSize();
            o.columnSize = this.getColumnSize();
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE, arguments);
        });
        this.table.on(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, function () {
            o.regionColumnSize = this.getRegionColumnSize();
            o.columnSize = this.getColumnSize();
            self.fireEvent(BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE, arguments);
        });

        this.htape = BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
                el: this.sequence,
                left: 0,
                top: 0
            }, {
                el: this.table,
                top: 0,
                left: o.showSequence === true ? 60 : 0
            }]
        });
        this._populate();
    },

    _populate: function () {
        var o = this.options;
        if (o.showSequence === true) {
            this.sequence.setVisible(true);
            this.table.element.css("left", "60px");
            this.table.setWidth(o.width - 60);
        } else {
            this.sequence.setVisible(false);
            this.table.element.css("left", "0px");
            this.table.setWidth(o.width);
        }
    },

    setWidth: function (width) {
        BI.PageTable.superclass.setWidth.apply(this, arguments);
        this.table.setWidth(this.options.showSequence ? width - 60 : width);
    },

    setHeight: function (height) {
        BI.PageTable.superclass.setHeight.apply(this, arguments);
        this.table.setHeight(height);
        this.sequence.setHeight(height - BI.GridTableScrollbar.SIZE);
    },

    setColumnSize: function (columnSize) {
        this.options.columnSize = columnSize;
        this.table.setColumnSize(columnSize);
    },

    getColumnSize: function () {
        return this.table.getColumnSize();
    },

    setRegionColumnSize: function (columnSize) {
        this.options.columnSize = columnSize;
        this.table.setRegionColumnSize(columnSize);
    },

    getRegionColumnSize: function () {
        return this.table.getRegionColumnSize();
    },

    hasLeftHorizontalScroll: function () {
        return this.table.hasLeftHorizontalScroll();
    },

    hasRightHorizontalScroll: function () {
        return this.table.hasRightHorizontalScroll();
    },

    setLeftHorizontalScroll: function (scrollLeft) {
        this.table.setLeftHorizontalScroll(scrollLeft);
    },

    setRightHorizontalScroll: function (scrollLeft) {
        this.table.setRightHorizontalScroll(scrollLeft);
    },

    setVerticalScroll: function (scrollTop) {
        this.table.setVerticalScroll(scrollTop);
        this.sequence.setVerticalScroll(scrollTop);
    },

    getVerticalScroll: function () {
        return this.table.getVerticalScroll();
    },

    setVPage: function (page) {
        this.sequence.setVPage && this.sequence.setVPage(page);
    },

    setHPage: function (page) {
        this.sequence.setHPage && this.sequence.setHPage(page);
    },

    attr: function () {
        BI.SequenceTable.superclass.attr.apply(this, arguments);
        this.table.attr.apply(this.table, arguments);
        this.sequence.attr.apply(this.sequence, arguments);
    },

    restore: function () {
        this.table.restore();
        this.sequence.restore();
    },

    populate: function (items, header, crossItems, crossHeader) {
        var o = this.options;
        if (items) {
            o.items = items;
        }
        if (header) {
            o.header = header;
        }
        if (crossItems) {
            o.crossItems = crossItems;
        }
        if (crossHeader) {
            o.crossHeader = crossHeader;
        }
        this._populate();
        this.table.populate.apply(this.table, arguments);
        this.sequence.populate.apply(this.sequence, arguments);
        this.sequence.setVerticalScroll(this.table.getVerticalScroll());
    },

    destroy: function () {
        this.table.destroy();
        BI.SequenceTable.superclass.destroy.apply(this, arguments);
    }
});
BI.shortcut("bi.sequence_table", BI.SequenceTable);/**
 * Created by User on 2017/7/28.
 */
BI.SignInitialEditor = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        var conf = BI.SignInitialEditor.superclass._defaultConfig.apply(this, arguments);
        return BI.extend(conf, {
            baseCls: (conf.baseCls || "") + " bi-sign-initial-editor",
            hgap: 4,
            vgap: 2,
            lgap: 0,
            rgap: 0,
            tgap: 0,
            bgap: 0,
            validationChecker: BI.emptyFn,
            quitChecker: BI.emptyFn,
            allowBlank: true,
            watermark: "",
            errorText: "",
            value: "",
            text: "",
            height: 24
        });
    },

    _init: function () {
        BI.SignInitialEditor.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.editor = BI.createWidget({
            type: "bi.editor",
            height: o.height,
            hgap: o.hgap,
            vgap: o.vgap,
            lgap: o.lgap,
            rgap: o.rgap,
            tgap: o.tgap,
            bgap: o.bgap,
            value: o.value,
            validationChecker: o.validationChecker,
            quitChecker: o.quitChecker,
            allowBlank: o.allowBlank,
            watermark: o.watermark,
            errorText: o.errorText
        });
        this.text = BI.createWidget({
            type: "bi.text_button",
            cls: "sign-editor-text",
            title: o.title,
            warningTitle: o.warningTitle,
            tipType: o.tipType,
            textAlign: "left",
            height: o.height,
            hgap: 4,
            handler: function () {
                self._showInput();
                self.editor.focus();
                self.editor.selectAll();
            }
        });
        this.text.on(BI.TextButton.EVENT_CHANGE, function () {
            BI.nextTick(function () {
                self.fireEvent(BI.SignInitialEditor.EVENT_CLICK_LABEL);
            });
        });
        BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
                el: this.text,
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }]
        });
        this.editor.on(BI.Controller.EVENT_CHANGE, function () {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
        this.editor.on(BI.Editor.EVENT_FOCUS, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_FOCUS, arguments);
        });
        this.editor.on(BI.Editor.EVENT_BLUR, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_BLUR, arguments);
        });
        this.editor.on(BI.Editor.EVENT_CLICK, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_CLICK, arguments);
        });
        this.editor.on(BI.Editor.EVENT_CHANGE, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_CHANGE, arguments);
        });
        this.editor.on(BI.Editor.EVENT_KEY_DOWN, function (v) {
            self.fireEvent(BI.SignInitialEditor.EVENT_KEY_DOWN, arguments);
        });

        this.editor.on(BI.Editor.EVENT_VALID, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_VALID, arguments);
        });
        this.editor.on(BI.Editor.EVENT_CONFIRM, function () {
            self._showHint();
            self._checkText();
            self.fireEvent(BI.SignInitialEditor.EVENT_CONFIRM, arguments);
        });
        this.editor.on(BI.Editor.EVENT_START, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_START, arguments);
        });
        this.editor.on(BI.Editor.EVENT_PAUSE, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_PAUSE, arguments);
        });
        this.editor.on(BI.Editor.EVENT_STOP, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_STOP, arguments);
        });
        this.editor.on(BI.Editor.EVENT_SPACE, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_SPACE, arguments);
        });
        this.editor.on(BI.Editor.EVENT_ERROR, function () {
            self._checkText();
            self.fireEvent(BI.SignInitialEditor.EVENT_ERROR, arguments);
        });
        this.editor.on(BI.Editor.EVENT_ENTER, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_ENTER, arguments);
        });
        this.editor.on(BI.Editor.EVENT_RESTRICT, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_RESTRICT, arguments);
        });
        this.editor.on(BI.Editor.EVENT_EMPTY, function () {
            self.fireEvent(BI.SignInitialEditor.EVENT_EMPTY, arguments);
        });
        BI.createWidget({
            type: "bi.vertical",
            scrolly: false,
            element: this,
            items: [this.editor]
        });
        this._showHint();
        self._checkText();
    },

    _checkText: function () {
        var o = this.options;
        BI.nextTick(BI.bind(function () {
            if (this.editor.getValue() === "") {
                this.text.setValue(o.watermark || "");
                this.text.element.addClass("bi-water-mark");
            } else {
                var v = this.editor.getValue();
                v = (BI.isEmpty(v) || v == o.text) ? o.text : v + "(" + o.text + ")";
                this.text.setValue(v);
                this.text.element.removeClass("bi-water-mark");
            }
        }, this));
    },

    _showInput: function () {
        this.editor.visible();
        this.text.invisible();
    },

    _showHint: function () {
        this.editor.invisible();
        this.text.visible();
    },

    setTitle: function (title) {
        this.text.setTitle(title);
    },

    setWarningTitle: function (title) {
        this.text.setWarningTitle(title);
    },

    focus: function () {
        this._showInput();
        this.editor.focus();
    },

    blur: function () {
        this.editor.blur();
        this._showHint();
        this._checkText();
    },

    doRedMark: function () {
        if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
            return;
        }
        this.text.doRedMark.apply(this.text, arguments);
    },

    unRedMark: function () {
        this.text.unRedMark.apply(this.text, arguments);
    },

    doHighLight: function () {
        if (this.editor.getValue() === "" && BI.isKey(this.options.watermark)) {
            return;
        }
        this.text.doHighLight.apply(this.text, arguments);
    },

    unHighLight: function () {
        this.text.unHighLight.apply(this.text, arguments);
    },

    isValid: function () {
        return this.editor.isValid();
    },

    setErrorText: function (text) {
        this.editor.setErrorText(text);
    },

    getErrorText: function () {
        return this.editor.getErrorText();
    },

    isEditing: function () {
        return this.editor.isEditing();
    },

    getLastValidValue: function () {
        return this.editor.getLastValidValue();
    },

    setValue: function (v) {
        var o = this.options;
        this.editor.setValue(v.value);
        o.text = v.text || o.text;
        this._checkText();
    },

    getValue: function () {
        return {
            value: this.editor.getValue(),
            text: this.options.text
        };
    },

    getState: function () {
        return this.text.getValue();
    },

    setState: function (v) {
        var o = this.options;
        this._showHint();
        v = (BI.isEmpty(v) || v == o.text) ? o.text : v + "(" + o.text + ")";
        this.text.setValue(v);
    }
});
BI.SignInitialEditor.EVENT_CHANGE = "EVENT_CHANGE";
BI.SignInitialEditor.EVENT_FOCUS = "EVENT_FOCUS";
BI.SignInitialEditor.EVENT_BLUR = "EVENT_BLUR";
BI.SignInitialEditor.EVENT_CLICK = "EVENT_CLICK";
BI.SignInitialEditor.EVENT_KEY_DOWN = "EVENT_KEY_DOWN";
BI.SignInitialEditor.EVENT_CLICK_LABEL = "EVENT_CLICK_LABEL";

BI.SignInitialEditor.EVENT_START = "EVENT_START";
BI.SignInitialEditor.EVENT_PAUSE = "EVENT_PAUSE";
BI.SignInitialEditor.EVENT_STOP = "EVENT_STOP";
BI.SignInitialEditor.EVENT_CONFIRM = "EVENT_CONFIRM";
BI.SignInitialEditor.EVENT_VALID = "EVENT_VALID";
BI.SignInitialEditor.EVENT_ERROR = "EVENT_ERROR";
BI.SignInitialEditor.EVENT_ENTER = "EVENT_ENTER";
BI.SignInitialEditor.EVENT_RESTRICT = "EVENT_RESTRICT";
BI.SignInitialEditor.EVENT_SPACE = "EVENT_SPACE";
BI.SignInitialEditor.EVENT_EMPTY = "EVENT_EMPTY";

BI.shortcut("bi.sign_initial_editor", BI.SignInitialEditor);!(function () {
    var Bar = BI.inherit(BI.Single, {
        props: {
            extraCls: "bi-progress-bar-bar bi-background",
            height: 24
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.svg",
                        width: 6,
                        height: 6,
                        ref: function (_ref) {
                            self.svg = _ref;
                        }
                    },
                    right: 10,
                    top: 9
                }, {
                    el: {
                        type: "bi.vertical",
                        items: [{
                            type: "bi.progress_bar_processor",
                            width: "0%",
                            height: o.height,
                            ref: function (_ref) {
                                self.processor = _ref;
                            }
                        }]
                    },
                    left: 0,
                    right: 0
                }]
            };
        },

        mounted: function () {
            this.svg.circle(3, 3, 3).attr({fill: "#ffffff", stroke: ""});
        },

        setValue: function (process) {
            this.processor.setValue(process);
        }
    });
    BI.shortcut("bi.progress_bar_bar", Bar);
}());

!!(function () {
    var Processor = BI.inherit(BI.Single, {
        props: {
            extraCls: "bi-progress-bar-processor",
            height: 24
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.svg",
                        width: 12,
                        height: 12,
                        ref: function (_ref) {
                            self.svg = _ref;
                        }
                    },
                    right: 7,
                    top: 6
                }]
            };
        },

        mounted: function () {
            this.svg.circle(6, 6, 6).attr({fill: "#d4dadd", stroke: ""});
            this.dot = this.svg.circle(6, 6, 3).attr({fill: "#ffffff", stroke: ""}).hide();
        },

        setValue: function (process) {
            if (process >= 100) {
                process = 100;
                this.dot.show();
                this.element.addClass("success");
            } else {
                this.dot.hide();
                this.element.removeClass("success");
            }
            this.element.width(process + "%");
        }
    });
    BI.shortcut("bi.progress_bar_processor", Processor);
}());

!(function () {
    var ProgressBar = BI.inherit(BI.Single, {
        props: {
            extraCls: "bi-progress-bar",
            height: 24
        },
        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.progress_bar_bar",
                        height: o.height,
                        ref: function (_ref) {
                            self.bar = _ref;
                        }
                    }
                }, {
                    el: {
                        type: "bi.label",
                        cls: "progress-bar-label",
                        width: 50,
                        height: o.height,
                        value: "0%",
                        ref: function (_ref) {
                            self.label = _ref;
                        }
                    },
                    width: 50
                }]
            };
        },

        setValue: function (process) {
            if (process >= 100) {
                process = 100;
                this.label.element.addClass("success");
            } else {
                this.label.element.removeClass("success");
            }
            this.label.setValue(process + "%");
            this.bar.setValue(process);
        }
    });
    BI.shortcut("bi.progress_bar", ProgressBar);
}());

!(function () {
    var Widget = BI.inherit(BI.Single, {
        _defaultConfig: function () {
            return BI.extend(Widget.superclass._defaultConfig.apply(this, arguments), {
                baseCls: "bi-tree-label",
                itemsCreator: BI.emptyFn,
                titles: [],
                items: []
            });
        },

        _init: function () {
            Widget.superclass._init.apply(this, arguments);
            var self = this, o = this.options;

            this.titles = o.titles;
            this.items = o.items;

            this.view = BI.createWidget({
                type: "bi.tree_label_view",
                element: this,
                titles: o.titles,
                items: o.items
            });
            this.view.on("EVENT_CHANGE", function (floors)  {
                self._itemsCreator({
                    floors: floors,
                    selectedValues: self.getValue()
                });
            });
        },

        _itemsCreator: function (options) {
            var self = this, o = this.options;
            o.itemsCreator(options, function (data) {
                self.populate(data);
                self.fireEvent("EVENT_CHANGE", arguments);
            });
        },

        populate: function (v) {
            this.view.populate(v);
        },

        getValue: function () {
            return this.view.getValue();
        }
    });
    BI.shortcut("bi.tree_label", Widget);
})();
!(function () {
    var Widget = BI.inherit(BI.Widget, {
        _constant: {
            LIST_LABEL_HEIGHT: 24,
            DEFAULT_LEFT_GAP: 5
        },

        _defaultConfig: function () {
            return BI.extend(Widget.superclass._defaultConfig.apply(this, arguments), {
                baseCls: "bi-tree-label-view",
                titleWidth: 140,
                titles: [],
                items: []
            });
        },

        _init: function () {
            Widget.superclass._init.apply(this, arguments);
            this.items = [];
            this._initView();
        },

        _initView: function () {
            var self = this, o = this.options;
            this.title = BI.createWidget({
                type: "bi.button_group",
                layouts: [{
                    type: "bi.vertical"
                }]
            });
            this.right = BI.createWidget({
                type: "bi.button_group",
                cls: "list-label-group",
                layouts: [{
                    type: "bi.horizontal"
                }]
            });
            var wheelHandler = new BI.WheelHandler(function (deltaX, deltaY) {
                if (deltaY !== 0) {
                    self.right.element.scrollLeft(self.right.element.scrollLeft() + deltaY);
                }
            },
            function () {
                return false;
            },
            function (delta) {
                return true;
            }
            );
            this.right.element.on("mousewheel", function (e) {
                wheelHandler.onWheel(e.originalEvent);
            });
            this._setTitles(o.titles);
            this._setItems(o.items);
            BI.createWidget({
                type: "bi.htape",
                ref: function (_ref) {
                    self.hLayout = _ref;
                },
                items: [{
                    el: this.title,
                    width: o.titleWidth
                }, this.right],
                element: this
            });
        },

        _setItems: function (items) {
            var self = this;
            var length = this.right.getAllButtons().length;
            var deletes = [];
            for (var i = 0; i < length; i++) {
                deletes.push(i);
            }
            this.right.removeItemAt(deletes);
            self.items = [];
            BI.each(items, function (idx, values) {
                var labelItems = [];
                BI.each(values, function (idx, value) {
                    labelItems.push({
                        title: value,
                        text: value,
                        value: value
                    });
                });
                var temp = BI.createWidget({
                    type: "bi.list_label",
                    height: self._constant.LIST_LABEL_HEIGHT,
                    items: labelItems,
                    showTitle: false
                });
                temp.on("EVENT_CHANGE", function () {
                    self.fireEvent("EVENT_CHANGE", idx);
                });
                self.items.push(temp);
            });
            var temp = BI.createWidget({
                type: "bi.default",
                items: self.items
            });
            this.right.addItems([temp]);
            this.right.setHeight(self.items.length * this._constant.LIST_LABEL_HEIGHT + 12);
        },

        _setTitles: function (titles) {
            var length = this.title.getAllButtons().length;
            var deletes = [], titleItems = [];
            for (var i = 0; i < length; i++) {
                deletes.push(i);
            }
            BI.each(titles, function (idx, title) {
                titleItems.push({
                    text: title + BI.i18nText("BI-Basic_Colon"),
                    value: title + BI.i18nText("BI-Basic_Colon"),
                    title: title
                });
            });
            this.title.removeItemAt(deletes);
            this.title.addItems(BI.createItems(titleItems, {
                type: "bi.label",
                textAlign: "right",
                rgap: 5,
                height: this._constant.LIST_LABEL_HEIGHT,
                width: this.options.titleWidth
            }));
            this.title.setHeight(titles.length * this._constant.LIST_LABEL_HEIGHT);
        },

        _setValue: function (values) {
            BI.each(this.items, function (idx, item) {
                values[idx] && item.setValue(values[idx]);
            });
        },

        _getWidthsByTitles: function (titles) {
            var widths = [];
            BI.each(titles, function (i, title) {
                widths.push(BI.Func.getGBWidth(title) * 12 * 1.2);
            });
            return widths;
        },

        _getTitleWidthByTitles: function (titles) {
            var self = this;
            var width = 0;
            var fx = BI.Func.fit(self._getWidthsByTitles(titles));
            width = BI.clamp(Math.ceil((fx.a + fx.b * Math.ceil((1 + titles.length) / 2))) + 20, 40, 140);
            return width;
        },

        populate: function (v) {
            var o = this.options;
            v.titles && (o.titleWidth = this._getTitleWidthByTitles(v.titles));
            v.titles && this._setTitles(v.titles);
            v.items && this._setItems(v.items);
            v.values && this._setValue(v.values);
            this.hLayout.attr("items")[0].width = o.titleWidth;
            this.hLayout.resize();
        },

        getValue: function () {
            var result = [];
            BI.each(this.items, function (idx, item) {
                result.push(item.getValue());
            });
            return result;
        }
    });
    BI.shortcut("bi.tree_label_view", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/18 下午5:25
 * @Description
*/

!(function () {
    var Bubble = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-components-bubble-combo",
            iconWidth: 24,
            iconHeight: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.components.update_bubble");
        },

        watch: {
            spaceInfo: function (info) {
                if (BI.isNull(info)) {
                    this.loadingButton.setVisible(true);
                    this.spaceInfo.setText(BI.i18nText("BI-Conf_Calculate_Disk_Space"));
                } else {
                    this.loadingButton.setVisible(false);
                    var usedSpace = BI.Services.getService("bi.service.conf.pack.table.update").formatDataSpace(info.space);
                    var text = BI.i18nText("BI-Conf_Disk_Remaining_Space") + usedSpace;
                    this.spaceInfo.setText(text);
                }
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.bubble_combo",
                offsetStyle: "right",
                stopPropagation: true,
                el: {
                    type: "bi.icon_button",
                    cls: "update-info-font",
                    width: o.iconWidth,
                    height: o.iconHeight
                },
                popup: {
                    type: "bi.bubble_bar_popup_view",
                    buttons: [],
                    el: {
                        type: "bi.absolute",
                        items: [{
                            el: {
                                type: "bi.icon_button",
                                cls: "loading-background",
                                height: 20,
                                width: 20,
                                ref: function (_ref) {
                                    self.loadingButton = _ref;
                                }
                            },
                            top: 20,
                            left: -10
                        }, {
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Conf_Calculate_Disk_Space"),
                                whiteSpace: "normal",
                                textAlign: "left",
                                height: 40,
                                lgap: 20,
                                ref: function (_ref) {
                                    self.spaceInfo = _ref;
                                }

                            },
                            top: 10
                        }],
                        hgap: 20
                    },
                    maxHeight: 120,
                    minWidth: 250
                },
                width: 25,
                height: o.height,
                listeners: [{
                    eventName: BI.BubbleCombo.EVENT_AFTER_POPUPVIEW,
                    action: function () {
                        self.store.getCubeSpace();
                    }
                }]
            };
        }
    });
    BI.shortcut("bi.components.update_bubble", Bubble);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/18 下午5:27
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        context: ["paramData"],
        state: function () {
            return {
                spaceInfo: null
            };
        },

        actions: {
            getCubeSpace: function () {
                var self = this;
                this.model.spaceInfo = null;
                BI.Utils.getCubeSpace(this.model.paramData, function (res) {
                    self.model.spaceInfo = res.data;
                });
            }
        }
    });
    BI.model("bi.model.components.update_bubble", Model);
})();
/**
 * @Author: Young
 * @CreationDate 2017-12-19 17:00
 * @Description
 */
!(function () {
    var UploadButton = BI.inherit(BI.Button, {
        props: {
            progressEL: BICst.BODY_ELEMENT,
            level: "common",
            accept: "*.csv;*.xls;*.xlsx"
        },
        mounted: function () {
            this._populate();
        },
        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                ref: function (ref) {
                    self.container = ref;
                }
            };
        },

        upload: function () {
            this.file.upload();
        },

        setText: function () {
            UploadButton.superclass.setText.apply(this, arguments);
            this._populate();
        },

        _populate: function () {
            var self = this, o = this.options;
            this.container.populate([{
                el: {
                    type: "bi.upload_file_with_progress",
                    progressEL: o.progressEL,
                    accept: o.accept,
                    ref: function (ref) {
                        self.file = ref;
                    },
                    listeners: [{
                        eventName: BI.UploadFileWithProgress.EVENT_CHANGE,
                        action: function () {
                            self.upload();
                        }
                    }, {
                        eventName: BI.UploadFileWithProgress.EVENT_UPLOADED,
                        action: function () {
                            self.fireEvent("uploaded", this.getValue());
                        }
                    }]
                },
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            }]);
        }
    });
    BI.shortcut("bi.common.component.upload_button", UploadButton);
})();/**
 * author: young
 * createdDate: 2018/6/15
 * description:
 */
!(function () {
    var Service = BI.inherit(BI.OB, {
        formatList: function (list, curFolderId) {
            var items = [];
            var self = this;
            var folderFileMap = {}, itemsMap = {};
            var folderSelected = false;
            BI.each(list, function (i, listItem) {
                var pId = listItem.pId;
                if (listItem.folder) {
                    var id = listItem.id, name = listItem.name;
                    var catalog = self.findCatalog(list, listItem);
                    var item = {
                        id: id,
                        pId: pId,
                        text: name,
                        title: name,
                        value: id,
                        catalog: catalog
                    };
                    if (id === curFolderId) {
                        item.selected = true;
                        folderSelected = true;
                    }
                    itemsMap[id] = item;
                    items.push(item);
                    if (BI.isNull(folderFileMap[id])) {
                        folderFileMap[id] = [];
                    }
                } else {
                    if (BI.isNull(folderFileMap[pId])) {
                        folderFileMap[pId] = [];
                    }
                    folderFileMap[pId].push(listItem.name);
                }
            });
            return {
                items: items,
                folderFileMap: folderFileMap,
                itemsMap: itemsMap,
                folderSelected: folderSelected
            };
        },
        findCatalog: function (list, item) {
            if (BI.isArray(item.catalog)) {
                return item.catalog;
            }
            var found = BI.find(list, function (index, listItem) {
                return listItem.id === item.pId;
            });
            // 后台调整以后，根节点PID不一定为空
            if (!found) {
                return [];
            }
            if (BI.isArray(found.catalog)) {
                item.catalog = found.catalog.concat([found.name]);
            } else {
                var parentCatalog = this.findCatalog(list, found);
                item.catalog = parentCatalog.concat([found.name]);
            }
            return item.catalog;
        },
        contains: function (fatherArray, sonArrayList) {
            return BI.some(sonArrayList, function (j, sonArray) {
                return BI.every(sonArray, function (index, son) {
                    return fatherArray[index] === son;
                });
            });
        },
        isRoot: function (list, item) {
            var found = BI.find(list, function (index, listItem) {
                return listItem.id === item.pId;
            });
            if (!found) {
                return true;
            }
            return false;
        },
        getRootId: function (list) {
            var self = this;
            var find = BI.find(list, function (index, l) {
                return self.isRoot(list, l);
            });
            if (find) {
                return find.pId;
            }
            return BICst.ROOT_FOLDER;
        },
        openDashboard: function (id) {
            window.open(Dec.fineServletURL + "/v5/design/report/" + id + "/edit#" + BICst.HISTORY_HASH.OPEN_DETAIL);
        }
    });
    BI.service("bi.service.common.fragment.add_dashboard", Service);
})();
/**
 * author: young
 * createdDate: 2018/5/21
 * description:
 */
!(function () {

    BI.UndoManager = function () {

        var commands = [],
            index = -1,
            limit = 0,
            isExecuting = false,
            callback,

            // functions
            execute;

        execute = function (command, action) {
            if (!command || typeof command[action] !== "function") {
                return this;
            }
            isExecuting = true;

            command[action]();

            isExecuting = false;
            return this;
        };

        removeFromTo = function (array, from, to) {
            array.splice(from,
                !to ||
                1 + to - from + (!(to < 0 ^ from >= 0) && (to < 0 || -1) * array.length));
            return array.length;
        };

        return {

            /*
            Add a command to the queue.
            */
            add: function (command) {
                if (isExecuting) {
                    return this;
                }
                // if we are here after having called undo,
                // invalidate items higher on the stack
                commands.splice(index + 1, commands.length - index);

                commands.push(command);

                // if limit is set, remove items from the start
                if (limit && commands.length > limit) {
                    removeFromTo(commands, 0, -(limit + 1));
                }

                // set the current index to the end
                index = commands.length - 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Pass a function to be called on undo and redo actions.
            */
            setCallback: function (callbackFunc) {
                callback = callbackFunc;
            },

            /*
            Perform undo: call the undo function at the current index and decrease the index by 1.
            */
            undo: function () {
                var command = commands[index];
                if (!command) {
                    return this;
                }
                execute(command, "undo");
                index -= 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Perform redo: call the redo function at the next index and increase the index by 1.
            */
            redo: function () {
                var command = commands[index + 1];
                if (!command) {
                    return this;
                }
                execute(command, "redo");
                index += 1;
                if (callback) {
                    callback();
                }
                return this;
            },

            /*
            Clears the memory, losing all stored states. Reset the index.
            */
            clear: function () {
                var prev_size = commands.length;

                commands = [];
                index = -1;

                if (callback && (prev_size > 0)) {
                    callback();
                }
            },

            hasUndo: function () {
                return index !== -1;
            },

            hasRedo: function () {
                return index < (commands.length - 1);
            },

            getCommands: function () {
                return commands;
            },

            getIndex: function () {
                return index;
            },

            setLimit: function (l) {
                limit = l;
            }
        };
    };
})();/**
 * Created by lei.wang on 2018/8/6.
 */
(function () {

    var license = {};

    var Service = BI.inherit(BI.OB, {

        syncLicense: function (data) {
            BI.each(data, function (idx, item) {
                license[item.functionName] = item.support;
            });
        },

        /**
         * 默认开启
         * @param key
         * @returns {boolean}
         */
        getLicense: function (key) {
            return BI.isNotNull(license[key]) ? license[key] : true;
        },

        getLicenseTip: function (key) {
            switch (key) {
                case BICst.LICENSE.DISTRIBUTED:
                    return BI.i18nText("BI-Basic_License_Is_Not_Support_Distributed");
                case BICst.LICENSE.DATA_MINE:
                    return BI.i18nText("BI-Basic_License_Is_Not_Support_DataMine");
                default:
                    return "";
            }
        },

        getLicenseTipByErrorCode: function (key) {
            switch (key) {
                case BICst.ErrorCode.LICENSE_ERORR.NO_DATA_MINE_LICENSE_EXCEPTION:
                    return BI.i18nText("BI-Design_Rapid_Data_Mining");
                default:
                    return "";
            }
        },

        isLicenseError: function (key) {
            switch (key) {
                case BICst.ErrorCode.LICENSE_ERORR.NO_SPIDER_ENGINE_LICENSE_EXCEPTION:
                case BICst.ErrorCode.LICENSE_ERORR.INCORRENT_SPIDER_ENGINE_ACTIVE_NODES_EXCEPTION:
                case BICst.ErrorCode.LICENSE_ERORR.NO_DATA_MINE_LICENSE_EXCEPTION:
                    return true;
                default:
                    return false;
            }
        }
    });

    BI.service("bi.service.lic", Service);
}());
!(function () {
    var baseConf = {
        wId: "",
        type: BICst.DESIGN.WIDGET.TABLE,
        allowOverlap: false,
        name: "",
        timeStamp: Date.now(),
        bounds: {}
    };
    BI.constant("bi.constant.design.widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        tableName: "",
        fields: [],
        measures: [],
        settings: {
            nameStyleType: BICst.DESIGN.WIDGET_NAME_STYLE.AUTO,
            titleHeight: 25,
            titleBackground: {
                type: BICst.BACKGROUND_TYPE.COLOR,
                color: "",
                imageId: ""
            },
            widgetBackground: {
                type: "color",
                color: "",
                imageId: ""
            },
            gisBackground: {
                show: true,
                layer: BICst.GIS_MAP_TYPE.AUTO,
                zoomIn: BI.i18nText("BI-Design_Map_Zoom_Out_Title"),
                zoomOut: BI.i18nText("BI-Design_Map_Zoom_In_Title")
            },
            chartAttr: {},
            chartStyle: {
                legend: {
                    enabled: true,
                    fontStyle: {
                        auto: true,
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        fontBold: false,
                        italic: false,
                        fontColor: ""
                    },
                    borderColor: "transparent",
                    position: "right"
                },
                axis: {
                    enabled: true,
                    type: "solid",
                    color: "",
                    width: 1
                },
                hGrid: {
                    enabled: true,
                    type: "solid",
                    color: "",
                    width: 1
                },
                vGrid: {
                    enabled: true,
                    type: "solid",
                    color: "",
                    width: 1
                },
                background: {
                    // 组件的值从widgetBG中获取
                    enabled: true
                },
                adaptive: {
                    enabled: true,
                    type: BICst.CHART.STYLE.ADAPTIVE.STANDARD
                }
            },
            tableAttr: {
                color: {
                    all: {
                        color: "",
                        dims: [],
                        conditions: []
                    }
                },
                shape: {
                    all: {
                        shape: BICst.DESIGN.SHAPE_TYPE.NONE,
                        dims: [],
                        value: 0
                    }
                },
                filterValue: {}
            },
            tableStyle: {
                form: BICst.TABLE_TYPE.MULTI_COLUMN,
                style: null,
                themeColor: null,
                metric: {
                    show: true,
                    position: BICst.DESIGN.TABLE_AGG_SHOW.ROW_COL,
                    type: BICst.DESIGN.TABLE_AGG_TYPE.AUTO
                },
                freezeDim: true,
                transmitLinkages: true,
                showSequence: false,
                expandRowHeader: false,
                expandColHeader: false,
                showRowSum: true,
                showColSum: true,
                rowHeight: 25,
                rowCounts: 20,
                colCounts: 7,
                totalRows: 1000,
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: null,
                        fontSize: null,
                        bold: null,
                        italic: null,
                        underline: null,
                        fontAlign: null,
                        fontColor: null
                    },
                    body: {
                        fontFamily: null,
                        fontSize: null,
                        bold: null,
                        italic: null,
                        underline: null,
                        dimFontAlign: null,
                        tarFontAlign: null,
                        fontColor: null
                    }
                }
            }
        },
        view: {
            10000: [],
            20000: [],
            30000: []
        },
        viewAttr: {
            10000: {
                type: BICst.DESIGN.VIEW_ATTR.POLY,
                // 共享轴的设置
                left: {},
                right: {}
            },
            20000: {
                type: BICst.DESIGN.VIEW_ATTR.POLY
            },
            30000: {
                type: BICst.DESIGN.VIEW_ATTR.POLY,
                left: {},
                right: {}
            }
        },
        showTitle: true,
        openJump: true,
        dimensions: {},
        linkage: {},
        jump: [],
        dataMining: {
            algorithmName: BICst.RAPID_DATA_MINING.ALGORITHM.EMPTY
        },
        allData: false,
        // 记录钻取的顺序
        drillOrder: [],
        resultFilter: [],
        dimensionGroups: {},
        legendFilter: null,
        columnSize: [],
        regionColumnSize: [],
        // 保存在图片填充中上传的图片
        uploadedImages: []
    }));

    BI.constant("bi.constant.design.control_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        view: {
            10000: []
        },
        sort: BICst.WIDGET_OPERATOR.ASC,
        dimensions: {},
        useParameter: false,
        parameterValue: [],
        allowPassDefault: false,
        value: null,
        tableName: null,
        showTime: BICst.SHOW_TIME.NOT_SHOW,
        singleSelect: BICst.STRING_CONTROL.MULTI,
        controlRange: {
            type: BICst.DESIGN.CONTROL_RANGE_TYPE.DEFAULT
        }
    }));

    BI.constant("bi.constant.design.img_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        size: BICst.IMAGE_SIZE.ORIGINAL,
        src: "",
        href: ""
    }));

    BI.constant("bi.constant.design.web_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        url: ""
    }));

    BI.constant("bi.constant.design.general_query_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        value: null
    }));

    BI.constant("bi.constant.design.content_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        content: "",
        style: {},
        linkage: {}
    }));
    BI.constant("bi.constant.design.reset_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        dimensions: {}
    }));
    BI.constant("bi.constant.design.query_widget.conf", BI.extend({}, BI.deepClone(baseConf), {
        dimensions: {},
        autoQuery: true
    }));
})();
/*!webui - 1.0.0 - author - 2018-08-22 10:51:04 *//**
 * common format utils for BI
 * Created by astronaut007 on 2018/7/13
 */
(function (root, factory) {
    // 浏览器全局变量(root 即 window)
    // 用到的方法
    // num.div (原型方法)
    // BI.isNotEmptyString()
    // BI.isEmptyString()
    // BI.isNull()
    // BI.isNotNull()
    // BI.parseInt()
    // BI.parseFloat()
    // BI.getDate()
    // BI.i18nText()
    // BI.isNumeric()
    // BI.contentFormat()
    root.BI.Format = factory();
}(this, function () {
    var FULL_WEEK = [BI.i18nText("BI-Basic_Sunday"),
        BI.i18nText("BI-Basic_Monday"),
        BI.i18nText("BI-Basic_Tuesday"),
        BI.i18nText("BI-Basic_Wednesday"),
        BI.i18nText("BI-Basic_Thursday"),
        BI.i18nText("BI-Basic_Friday"),
        BI.i18nText("BI-Basic_Saturday"),
        BI.i18nText("BI-Basic_Sunday")];

    /**
     * url format
     * @param address
     * @returns {String}
     */
    function formatAddress (address) {
        var temp = "";
        var url1 = /[a-zA-z]+:\/\/[^\s]*/;
        var url2 = /\/[^\s]*/;
        if (address.match(url1) || address.match(url2)) {
            temp = address;
        } else if (BI.isNotEmptyString(address)) {
            temp = "http://" + address;
        }
        return temp;
    }

    /**
     * date format by group for conf
     * @param value
     * @param group
     * @returns {date}
     */
    function formatValueByGroup (value, group) {
        if (BI.isNull(value) || BI.isEmptyString(value)) {
            return "";
        }
        var date;
        switch (group) {
            case BICst.GROUP.YS:
                date = BI.getDate(BI.parseInt(value));
                var season = Math.floor(date.getMonth() / 3) + 1;
                return date.print("%Y-" + season);
            case BICst.GROUP.YM:
                date = BI.getDate(BI.parseInt(value));
                return date.print("%Y-%X");
            case BICst.GROUP.YW:
                date = BI.getDate(BI.parseInt(value));
                var week = date.getWeekNumber();
                return date.print("%Y-" + week);
            case BICst.GROUP.YMD:
                date = BI.getDate(BI.parseInt(value));
                return date.print("%Y-%X-%d");
            case BICst.GROUP.YMDH:
                date = BI.getDate(BI.parseInt(value));
                return date.print("%Y-%X-%d %H");
            case BICst.GROUP.YMDHM:
                date = BI.getDate(BI.parseInt(value));
                return date.print("%Y-%X-%d %H:%M");
            case BICst.GROUP.W:
                return FULL_WEEK[value];
            case BICst.GROUP.Y:
                if ((value + "").length > 4) {
                    date = BI.getDate(BI.parseInt(value));
                    return date.print("%Y");
                }
                return value;
            case BICst.GROUP.M:
                return BI.i18nText("BI-Basic_Param_Month", value);
            case BICst.GROUP.D:
                return BI.i18nText("BI-Basic_Param_Day", value);
            case BICst.GROUP.S:
                return BI.i18nText("BI-Basic_Param_Quarter", value);
            case BICst.GROUP.WEEK_COUNT:
                return BI.i18nText("BI-Basic_Param_Week_Count", value);
            case BICst.GROUP.HOUR:
                return BI.i18nText("BI-Basic_Param_Hour", value);
            case BICst.GROUP.MINUTE:
                return BI.i18nText("BI-Basic_Param_Minute", value);
            case BICst.GROUP.SECOND:
                return BI.i18nText("BI-Basic_Param_Second", value);
            case BICst.GROUP.YMDHMS:
            case BICst.GROUP.NO_GROUP:
                date = BI.getDate(BI.parseInt(value));
                return date.print("%Y-%X-%d %H:%M:%S");
            default:
                return value;
        }
    }

    /**
     * format date by group and dataFormatType for target cell
     * @param text
     * @param group
     * @param dateFormatType
     * @returns {*}
     */
    function formatValueByGroupAndFormatter (text, group, dateFormatType) {
        var value = text;
        if (BI.isNotNull(group) && BI.isNumeric(text)) {
            switch (group) {
                case BICst.GROUP.Y:
                    value = _formatYearByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.D:
                    value = _formatDayByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.HOUR:
                    value = _formatHourByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.MINUTE:
                    value = _formatMinuteByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.SECOND:
                    value = _formatSecondByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.S:
                    value = _formatSeasonByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.M:
                    value = _formatMonthByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.WEEK_COUNT:
                    value = _formatWeekCountByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.W:
                    value = _formatWeekByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YMD:
                    value = _formatYMDByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YMDHMS:
                    value = _formatYMDHMSByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YMDH:
                    value = _formatYMDHByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YMDHM:
                    value = _formatYMDHMByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YS:
                    value = _formatYSByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YM:
                    value = _formatYMByDateFormat(text, dateFormatType);
                    break;
                case BICst.GROUP.YW:
                    value = _formatYWByDateFormat(text, dateFormatType);
                    break;
                default:
                    break;
            }
        }
        return value;

        function _formatYearByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Year", text);
                    break;
                default:
            }
            return text;
        }

        function _formatSeasonByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Quarter", text);
                    break;
                default:
            }
            return text;
        }

        function _formatMonthByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Month", text);
                    break;
                default:
            }
            return text;
        }

        function _formatWeekCountByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Week_Count", text);
                    break;
                default:
            }
            return text;
        }

        function _formatDayByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Day", text);
                    break;
                default:
            }
            return text;
        }

        function _formatHourByDateFormat (t, format) {
            var text = (t + "") || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Hour", text);
                    break;
                default:
            }
            return text;
        }

        function _formatMinuteByDateFormat (t, format) {
            var text = (t + "") || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Minute", text);
                    break;
                default:
            }
            return text;
        }

        function _formatSecondByDateFormat (t, format) {
            var text = (t + "") || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = BI.i18nText("BI-Basic_Param_Second", text);
                    break;
                default:
            }
            return text;
        }

        function _formatWeekByDateFormat (t, format) {
            var text = t || "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = FULL_WEEK[text];
                    break;
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                default:
                    break;
            }
            return text;
        }

        function _formatYSByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            var season = Math.floor(date.getMonth() / 3) + 1;
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-" + season);
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + season + BI.i18nText("BI-Basic_Quarter"));
                    break;
                default:
                    text = date.print("%Y-" + season);
                    break;
            }
            return text;
        }

        function _formatYWByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            var week = date.getWeekNumber();
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-" + week);
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + week + BI.i18nText("BI-Basic_Week"));
                    break;
                default:
                    text = date.print("%Y-" + week);
                    break;
            }
            return text;
        }

        function _formatYMByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-%X");
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + "%X" + BI.i18nText("BI-Basic_Month"));
                    break;
                default:
                    text = date.print("%Y-%X");
                    break;
            }
            return text;
        }

        function _formatYMDByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-%X-%d");
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + "%X" + BI.i18nText("BI-Basic_Month") + "%d" + BI.i18nText("BI-Basic_Date_Day"));
                    break;
                default:
                    text = date.print("%Y-%X-%d");
                    break;
            }
            return text;
        }

        function _formatYMDHByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-%X-%d  %H");
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + "%X" + BI.i18nText("BI-Basic_Month") + "%d" + BI.i18nText("BI-Basic_Date_Day")
                        + "  %H" + BI.i18nText("BI-Basic_Hour_Sin"));
                    break;
                default:
                    text = date.print("%Y-%X-%d  %H");
                    break;
            }
            return text;
        }

        function _formatYMDHMByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-%X-%d  %H:%M");
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + "%X" + BI.i18nText("BI-Basic_Month") + "%d" + BI.i18nText("BI-Basic_Date_Day")
                        + "  %H" + BI.i18nText("BI-Basic_Hour_Sin") + "%M" + BI.i18nText("BI-Basic_Minute"));
                    break;
                default:
                    text = date.print("%Y-%X-%d  %H:%M");
                    break;
            }
            return text;
        }

        function _formatYMDHMSByDateFormat (t, format) {
            var date = BI.getDate(BI.parseInt(t));
            var text = "";
            switch (format) {
                case BICst.DESIGN.DATE_FORMAT.SPLIT:
                    text = date.print("%Y-%X-%d  %H:%M:%S");
                    break;
                case BICst.DESIGN.DATE_FORMAT.CHINESE:
                    text = date.print("%Y" + BI.i18nText("BI-Basic_Year") + "%X" + BI.i18nText("BI-Basic_Month") + "%d" + BI.i18nText("BI-Basic_Date_Day")
                        + "  %H" + BI.i18nText("BI-Basic_Hour_Sin") + "%M" + BI.i18nText("BI-Basic_Minute") + "%S" + BI.i18nText("BI-Basic_Seconds"));
                    break;
                default:
                    text = date.print("%Y-%X-%d  %H:%M:%S");
                    break;
            }
            return text;
        }
    }

    /**
     * format numberLevel
     * @param numberLevel
     * @returns {number}
     */
    function calcMagnify (numberLevel) {
        var magnify = 1;
        switch (numberLevel) {
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.TEN_THOUSAND:
                magnify = 10000;
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.MILLION:
                magnify = 1000000;
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.BILLION:
                magnify = 100000000;
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.PERCENT:
                magnify = 0.01;
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.NORMAL:
            default:
                magnify = 1;
                break;
        }
        return magnify;
    }

    /**
     *
     * @param type
     * @param separators
     * @returns {string}
     */
    function formatNumberLevelAndSeparators (type, separators) {
        switch (type) {
            case BICst.DESIGN.TARGET_STYLE.FORMAT.NORMAL:
                return separators ? "#,###.##" : "#.##";
            case BICst.DESIGN.TARGET_STYLE.FORMAT.ZERO2POINT:
                return separators ? "#,###" : "#0";
            default:
                var formatter = separators ? "#,###." : "#0.";
                var res = [];
                for (var i = 0; i < type; i++) {
                    res.push("0");
                }
                return formatter + res.join("");
        }
    }

    /**
     *
     * @param text
     * @param option
     * @returns {*}
     */
    function numberFormat (text, option) {
        var opt = option;
        if (!BI.isNumeric(text)) {
            return text;
        }
        if (BI.isNull(opt.formatStyle)) {
            opt = {
                formatStyle: BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.AUTO,
                formatDecimal: BICst.DESIGN.TARGET_STYLE.FORMAT.NORMAL,
                numLevel: BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.NORMAL,
                numSeparators: true,
                unit: ""
            };
        }
        var num = BI.parseFloat(text);
        var type, numberLevel, separators;
        switch (opt.formatStyle) {
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.AUTO:
                type = BICst.DESIGN.TARGET_STYLE.FORMAT.NORMAL;
                numberLevel = opt.numLevel;
                separators = opt.numSeparators;
                break;
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.PERCENT:
                type = opt.formatDecimal;
                numberLevel = BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.PERCENT;
                separators = opt.numSeparators;
                break;
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.DIGIT:
            default:
                type = opt.formatDecimal;
                numberLevel = opt.numLevel;
                separators = opt.numSeparators;
                break;
        }
        num = num.div(calcMagnify(numberLevel));

        var postfix = "", index = -1, numString = num + "";
        if ((index = numString.indexOf("e")) > -1 || (index = numString.indexOf("E")) > -1) {
            postfix = numString.slice(index);
            var isNegative = numString.startWith("-");
            numString = numString.slice(isNegative ? 1 : 0, index);
            var postfixWithoutE = BI.parseInt(postfix.slice(1));
            if (postfixWithoutE < 0) {
                postfix = "";
                numString = numString.replace("\.", "");
                while (postfixWithoutE++ < 0) {
                    if (postfixWithoutE === 0) {
                        numString = "0." + numString;
                    } else {
                        numString = "0" + numString;
                    }
                }
            }
            isNegative && (numString = "-" + numString);
        }

        var format = formatNumberLevelAndSeparators(type, separators);
        format += ";-" + format;
        return BI.contentFormat(numString, format) + postfix;
    }

    /**
     *
     * @param numberLevelType
     * @param axisUnit
     * @returns {string}
     */
    function getUnit (numberLevelType, axisUnit) {
        var unit = "";
        switch (numberLevelType) {
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.NORMAL:
                unit = "";
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.TEN_THOUSAND:
                unit = BI.i18nText("BI-Basic_Wan");
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.MILLION:
                unit = BI.i18nText("BI-Basic_Million");
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.BILLION:
                unit = BI.i18nText("BI-Basic_Billion");
                break;
            case BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.PERCENT:
                unit += "%";
                break;
            default:
        }
        return (BI.isEmptyString(unit) && BI.isEmptyString(axisUnit)) ? unit : (unit + axisUnit);
    }

    /**
     *
     * @param settings
     * @param text
     * @returns {string}
     */
    function headerFormat (settings, text) {
        var opt = settings;
        if (BI.isNull(opt.formatStyle)) {
            opt = {
                formatStyle: BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.AUTO,
                formatDecimal: BICst.DESIGN.TARGET_STYLE.FORMAT.NORMAL,
                numLevel: BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.NORMAL,
                numSeparators: true,
                unit: ""
            };
        }
        var numberLevel;
        switch (opt.formatStyle) {
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.PERCENT:
                numberLevel = BICst.DESIGN.TARGET_STYLE.NUM_LEVEL.PERCENT;
                break;
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.AUTO:
            case BICst.DESIGN.TARGET_STYLE.AXIS_FORMAT.DIGIT:
            default:
                numberLevel = opt.numLevel;
                break;
        }
        var unit = getUnit(numberLevel, opt.unit);
        return unit === "" ? text : (text + "(" + unit + ")");
    }

    return {
        formatAddress: formatAddress,
        formatValueByGroup: formatValueByGroup,
        formatValueByGroupAndFormatter: formatValueByGroupAndFormatter,
        calcMagnify: calcMagnify,
        formatNumberLevelAndSeparators: formatNumberLevelAndSeparators,
        numberFormat: numberFormat,
        getUnit: getUnit,
        headerFormat: headerFormat
    };
}));/**
 * author: young
 * createdDate: 2018/6/26
 * description: 基础全局变量定义
 */

BI = window.BI || {};
BICst = window.BICst || {};!(function () {
    BI.constant("bi.constant.design.control.dimension.conf", BI.extend({}, {
        id: null,
        fieldId: null,
        name: null,
        type: null,
        sort: {
            type: BICst.DESIGN.SORT.FILTER_ASC,
            targetFieldId: null
        },
        filter: {}
    }));

    BI.constant("bi.constant.design.widget.dimension.conf", BI.extend({}, {
        id: null,
        type: null,
        fieldId: null,
        name: null,
        group: {
            type: null
        },
        settings: {
            annotate: [],
            flash: [],
            imageData: [],
            cordon: [],
            trendLine: [],
            valueAxis: {},
            categoryAxis: {},
            stack: false,
            dateFormat: {}
        },
        calculation: {
            type: BICst.DESIGN.RAPID_CALCULATE_TYPE.NONE
        },
        drillDimensions: {},
        counterDep: BICst.DESIGN.COUNTER_DEP.TOTAL_ROWS,
        metric: BICst.DESIGN.METRIC_TYPE.AUTO
    }));
})();
!(function () {
    BI.constant("bi.constant.design.widget.measure.conf", BI.extend({}, {
        type: null,
        copied: false,
        drillDir: [],
        drillName: "",
        id: null,
        name: null,
        transferName: null,
        source: null,
        calculate: null,
        filter: null,
        detailFilter: null,
        geo: {},
        geoType: BICst.DESIGN.TARGET_FIELD_GEO.NONE,
        group: {},
        drillFields: {}
    }));
})();!(function () {
    BI.constant("bi.constant.design.switch.dimension.conf", BI.extend({}, {
        settings: {
            // 值轴设置比较特殊
            valueAxis: {},
            categoryAxis: {}
        }
    }));
})();!(function () {
    BI.constant("bi.constant.design.template.conf", {
        widgets: {},
        filter: {},
        templateStyle: {
            style: {
                id: null,
                theme: null,
                widgetGap: null,
                templateBackground: {
                    type: "color",
                    color: "",
                    imageId: ""
                },
                widgetBackground: {
                    type: "color",
                    color: "",
                    imageId: ""
                },
                titleBackground: {
                    type: "color",
                    color: "",
                    imageId: ""
                },
                titleFont: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: null,
                    fontSize: null,
                    bold: null,
                    italic: null,
                    underline: null,
                    fontColor: "",
                    fontAlign: null
                },
                chart: {
                    chartStyle: null,
                    chartColor: null,
                    font: {
                        type: BICst.AUTO_CUSTOM.AUTO,
                        fontFamily: null,
                        fontSize: null,
                        bold: null,
                        italic: null,
                        underline: null,
                        fontColor: ""
                    }
                },
                table: {
                    tableStyle: null,
                    themeColor: null,
                    font: {
                        type: BICst.AUTO_CUSTOM.AUTO,
                        header: {
                            fontFamily: null,
                            fontSize: null,
                            bold: null,
                            italic: null,
                            underline: null,
                            fontColor: "",
                            fontAlign: null
                        },
                        body: {
                            fontFamily: null,
                            fontSize: null,
                            bold: null,
                            italic: null,
                            underline: null,
                            fontColor: "",
                            dimFontAlign: null,
                            tarFontAlign: null
                        }
                    }
                },
                controlTheme: ""
            },
            predictionStyles: []
        },
        layoutRatio: {},
        freeLayoutRatio: {},
        linkageGroup: []
    });
})();
BICst.BROADCAST = {
    TEST: "test_broadcast",

    WIDGETS_PREFIX: "widgets_", // 组件增删事件 + wId || ""
    DIMENSIONS_PREFIX: "dimensions_", // 维度增删事件 + wId || ""
    DIMENSIONS_CHANGE_PREFIX: "dimension_change_", // 维度改变事件
    REFRESH_PREFIX: "refresh_", // 刷新事件 + wId
    LINKAGE_PREFIX: "linkage_", // 联动事件 + wId
    LINKAGE_CLEAR_ALL: "linkage_clear_all",
    LINKAGE_CLEAR: "linkage_clear", // 清除wId传递的联动
    RESET_PREFIX: "reset_", // 重置事件 + wId
    GLOBAL_STYLE_PREFIX: "global_style_", // 样式改变事件 + wId

    SRC_PREFIX: "src_", // 数据源(字段)增删事件 + srcId
    FIELD_DROP_PREFIX: "field_drop_",   // 字段的drop事件，只要drop了，所有的字段都取消选中

    PACKAGE_PREFIX: "package_", // 业务包增删事件 + wId || ""

    DETAIL_EDIT_PREFIX: "detail_edit_", // 进入编辑界面 + wId

    FIELD_DRAG_START: "__filed_drag_start__",   // 字段拖动开始，用于通知region状态改变
    FIELD_DRAG_STOP: "__field_drag_stop__",     // 字段拖动结束，用于通知region状态改变

    FILTER_LIST_PREFIX: "filter_list_", // 过滤条件变化 + wId

    IMAGE_LIST_PREFIX: "image_list_", // 图片列表变化 + wId

    DRILL_CLICK_PREFIX: "DRILL_click_", // 图表钻取框事件

    EXCEL_UPDATE_START: "excel_update_start_", // 业务人员导入excel
    EXCEL_UPDATE_END: "excel_update_end_",

    PACKAGE_EDIT_PREFIX: "package_edit_"    // 数据配置业务包修改
};/**
 * author: young
 * createdDate: 2018/8/13
 * description: 动态随组件创建加载文件
 */
!(function () {
    // 图表
    BI.config("bi.components.chart.display", function () {
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/js/van-analysis.js&type=plain&parser=plain");
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/css/van-analysis.css&type=plain&parser=dynamic", "css");
    });
})();
/**
 * Arrangement的block面板
 *
 * Created by GUY on 2016/3/1.
 * @class BI.ArrangementBlock
 * @extends BI.Widget
 */
!(function () {
    var ArrangementBlock = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-arrangement-block bi-mask"
        }
    });
    BI.shortcut("bi.arrangement_block", ArrangementBlock);
})();/**
 * Arrangement的drop面板
 *
 * Created by GUY on 2016/3/1.
 * @class BI.ArrangementDroppable
 * @extends BI.Widget
 */
!(function () {
    var ArrangementDroppable = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-arrangement-droppable bi-resizer"
        }
    });
    BI.shortcut("bi.arrangement_droppable", ArrangementDroppable);
})();/**
 * 布局
 *
 * Created by GUY on 2016/2/23.
 * @class BI.Arrangement
 * @extends BI.Widget
 */
!(function () {
    var constants = {
        PORTION: 36,
        H_PORTION: 18,
        LAYOUT_TYPE: {
            GRID: 0,
            FREE: 1
        }
    };

    var Arrangement = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-arrangement",
            layoutType: constants.LAYOUT_TYPE.GRID,
            items: []
        },

        render: function () {
            var self = this, o = this.options;
            this.arrangement = BI.createWidget({
                type: "bi.arrangement_droppable",
                cls: "arrangement-block",
                invisible: true
            });
            this.block = BI.createWidget({
                type: "bi.arrangement_block",
                invisible: true
            });
            this.container = BI.createWidget({
                type: "bi.absolute",
                element: this,
                cls: "arrangement-container",
                items: o.items.concat([this.block, this.arrangement])
            });

            this.container.element.scroll(function () {
                self.fireEvent("EVENT_SCROLL", {
                    scrollLeft: self.container.element.scrollLeft(),
                    scrollTop: self.container.element.scrollTop(),
                    clientWidth: self.container.element[0].clientWidth,
                    clientHeight: self.container.element[0].clientHeight
                });
            });

            this.regions = {};
            if (o.items.length > 0) {
                BI.nextTick(function () {
                    self.populate(o.items);
                });
            }
        },

        // //初始化操作////
        _calculateRegions: function (items) {
            var self = this, o = this.options;
            this.regions = {};
            BI.each(items, function (i, item) {
                var region = self._createOneRegion(item);
                self.regions[region.id] = region;
            });
        },

        _isEqual: function (num1, num2) {
            return Math.abs(num1 - num2) < 2;
        },

        _isLessThan: function (num1, num2) {
            return num1 < num2 && !this._isEqual(num1, num2);
        },

        _isMoreThan: function (num1, num2) {
            return num1 > num2 && !this._isEqual(num1, num2);
        },

        _isLessThanEqual: function (num1, num2) {
            return num1 <= num2 || this._isEqual(num1, num2);
        },

        _isMoreThanEqual: function (num1, num2) {
            return num1 >= num2 || this._isEqual(num1, num2);
        },

        // 获取占有的最大Region
        _getRegionOccupied: function (regions) {
            var self = this, o = this.options;
            if (BI.size(regions || this.regions) <= 0) {
                return {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                };
            }
            var minLeft = BI.MAX, maxLeft = BI.MIN, minTop = BI.MAX, maxTop = BI.MIN;
            BI.each(regions || this.regions, function (id, region) {
                minLeft = Math.min(minLeft, region.left);
                maxLeft = Math.max(maxLeft, region.left + region.width);
                minTop = Math.min(minTop, region.top);
                maxTop = Math.max(maxTop, region.top + region.height);
            });
            return {
                left: minLeft,
                top: minTop,
                width: maxLeft - minLeft,
                height: maxTop - minTop
            };
        },

        // 两个区域的交叉面积
        _getCrossArea: function (region1, region2) {
            if (region1.left <= region2.left) {
                if (region1.top <= region2.top) {
                    if (region1.top + region1.height > region2.top && region1.left + region1.width > region2.left) {
                        if (this._isEqual(region1.top + region1.height, region2.top) || this._isEqual(region1.left + region1.width, region2.left)) {
                            return 0;
                        }
                        return (region1.top + region1.height - region2.top) * (region1.left + region1.width - region2.left);
                    }
                } else {
                    if (region2.top + region2.height > region1.top && region1.left + region1.width > region2.left) {
                        if (this._isEqual(region2.top + region2.height, region1.top) || this._isEqual(region1.left + region1.width, region2.left)) {
                            return 0;
                        }
                        return (region2.top + region2.height - region1.top) * (region1.left + region1.width - region2.left);
                    }
                }
            } else {
                if (region1.top <= region2.top) {
                    if (region1.top + region1.height > region2.top && region2.left + region2.width > region1.left) {
                        if (this._isEqual(region1.top + region1.height, region2.top) || this._isEqual(region2.left + region2.width, region1.left)) {
                            return 0;
                        }
                        return (region1.top + region1.height - region2.top) * (region2.left + region2.width - region1.left);
                    }
                } else {
                    if (region2.top + region2.height > region1.top && region2.left + region2.width > region1.left) {
                        if (this._isEqual(region2.top + region2.height, region1.top) || this._isEqual(region2.left + region2.width, region1.left)) {
                            return 0;
                        }
                        return (region2.top + region2.height - region1.top) * (region2.left + region2.width - region1.left);
                    }
                }
            }
            return 0;
        },

        // 是否有覆盖的组件
        _isRegionOverlay: function (regions) {
            var reg = [];
            BI.each(regions || this.regions, function (id, region) {
                reg.push(new BI.Region(region.left, region.top, region.width, region.height));
            });
            for (var i = 0, len = reg.length; i < len; i++) {
                for (var j = i + 1; j < len; j++) {
                    var area1 = {
                        left: reg[i].x,
                        top: reg[i].y,
                        width: reg[i].w,
                        height: reg[i].h
                    };
                    var area2 = {
                        left: reg[j].x,
                        top: reg[j].y,
                        width: reg[j].w,
                        height: reg[j].h
                    };
                    if (reg[i].isIntersects(reg[j]) && this._getCrossArea(area1, area2) > 1) {
                        return true;
                    }
                }
            }
            return false;
        },

        // 布局是否是优良的
        _isArrangeFine: function (regions) {
            switch (this.options.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    return true;
                case constants.LAYOUT_TYPE.GRID:
                // if (this._isRegionOverlay()) {
                //     return false;
                // }
            }
            return true;
        },

        _getRegionNames: function (regions) {
            var names = [];
            BI.each(regions || this.regions, function (i, region) {
                names.push(region.id || region.attr("id"));
            });
            return names;
        },

        _getRegionsByNames: function (names, regions) {
            names = BI.isArray(names) ? names : [names];
            regions = regions || this.regions;
            if (BI.isArray(regions)) {
                var result = [];
                BI.each(regions, function (i, region) {
                    if (names.contains(region.id || region.attr("id"))) {
                        result.push(region);
                    }
                });
            } else {
                var result = {};
                BI.each(names, function (i, name) {
                    result[name] = regions[name];
                });
            }
            return result;
        },

        _cloneRegion: function (regions) {
            var clone = {};
            BI.each(regions || this.regions, function (id, region) {
                clone[id] = {};
                clone[id].el = region.el;
                clone[id].id = region.id;
                clone[id].left = region.left;
                clone[id].top = region.top;
                clone[id].width = region.width;
                clone[id].height = region.height;
                BI.isNotNull(region.autoPosition) && (clone[id].autoPosition = region.autoPosition);
            });
            return clone;
        },

        // 测试合法性
        _test: function (regions) {
            var self = this;
            return !BI.any(regions || this.regions, function (i, region) {
                if (BI.isNaN(region.width) || BI.isNaN(region.height) || region.width <= 21 || region.height <= 21) {
                    return true;
                }
            });
        },

        _getScrollOffset: function () {
            return {
                left: this.container.element[0].scrollLeft,
                top: this.container.element[0].scrollTop
            };
        },

        // //操作////
        _createOneRegion: function (item) {
            var el = BI.createWidget(item.el);
            el.setVisible(true);
            return {
                id: el.attr("id"),
                left: item.left,
                top: item.top,
                width: item.width,
                height: item.height,
                autoPosition: item.autoPosition,
                el: el
            };
        },

        _applyRegion: function (regions) {
            var self = this, o = this.options;
            BI.each(regions || this.regions, function (i, region) {
                region.el.element.css({
                    left: region.left,
                    top: region.top,
                    width: region.width,
                    height: region.height
                });
            });
            this.ratio = this.getLayoutRatio();
        },

        _renderRegion: function () {
            var items = BI.toArray(this.regions);
            BI.each(items, function (i, item) {
                if (BI.isNotNull(item.el)) {
                    item.el.options.key = item.id;
                } else {
                    item.key = item.id;
                }
            });
            if (BI.isNull(this.wrapper)) {
                this.wrapper = BI.createWidget({
                    type: "bi.absolute",
                    element: this.container
                });
            }
            this.wrapper.addItems(items);
        },

        getClientWidth: function () {
            return this.container.element[0].clientWidth;
        },

        getClientHeight: function () {
            return this.container.element[0].clientHeight;
        },

        getScrollOffset: function () {
            return this._getScrollOffset();
        },

        _applyContainer: function () {
            return this._getRegionOccupied();
        },

        _modifyRegion: function (regions) {
            BI.each(this.regions, function (id, region) {
                if (regions[id]) {
                    region.left = regions[id].left;
                    region.top = regions[id].top;
                    region.width = regions[id].width;
                    region.height = regions[id].height;
                }
            });
        },

        _addRegion: function (item) {
            var region = this._createOneRegion(item);
            this.regions[region.id] = region;
            BI.createWidget({
                type: "bi.absolute",
                element: this.container,
                items: [region]
            });
        },

        _deleteRegionByName: function (name) {
            this.regions[name].el.setVisible(false);
            delete this.regions[name];
        },

        _setArrangeSize: function (size) {
            this.arrangement.element.css({
                left: size.left,
                top: size.top,
                width: size.width,
                height: size.height
            });
        },

        // Grid
        _getOneWidthPortion: function () {
            return this.getClientWidth() / constants.PORTION;
        },
        _getOneHeightPortion: function () {
            return this.getClientHeight() / constants.H_PORTION;
        },

        _getGridPositionAndSize: function (position) {
            var perWidth = this._getOneWidthPortion();
            var perHeight = this._getOneHeightPortion();
            var widthPortion = Math.round(position.width / perWidth);
            var leftPortion = Math.round(position.left / perWidth);
            var topPortion = Math.round(position.top / perHeight);
            var heightPortion = Math.round(position.height / perHeight);
            // if (leftPortion > BI.Arrangement.PORTION) {
            //     leftPortion = BI.Arrangement.PORTION;
            // }
            // if (widthPortion > BI.Arrangement.PORTION) {
            //     widthPortion = BI.Arrangement.PORTION;
            // }
            // if (leftPortion + widthPortion > BI.Arrangement.PORTION) {
            //     leftPortion = BI.Arrangement.PORTION - widthPortion;
            // }
            if (widthPortion === 0) {
                widthPortion = 1;
            }
            if (heightPortion === 0) {
                heightPortion = 1;
            }
            return {
                x: leftPortion,
                y: topPortion,
                w: widthPortion,
                h: heightPortion,
                autoPosition: position.autoPosition
            };
        },

        _getBlockPositionAndSize: function (position) {
            var perWidth = this._getOneWidthPortion();
            var perHeight = this._getOneHeightPortion();
            return {
                left: position.x * perWidth,
                top: position.y * perHeight,
                width: position.w * perWidth,
                height: position.h * perHeight
            };
        },

        _getLayoutsByRegions: function (regions) {
            var self = this;
            var result = [];
            BI.each(regions || this.regions, function (id, region) {
                result.push(BI.extend(self._getGridPositionAndSize(region), {
                    i: region.id
                }));
            });
            return result;
        },

        _getLayoutIndexByName: function (layout, name) {
            return BI.findIndex(layout, function (i, l) {
                return l.i === name;
            });
        },

        _setBlockPositionAndSize: function (size) {
            this.block.element.css({
                left: size.left,
                top: size.top,
                width: size.width,
                height: size.height
            });
        },

        _getRegionsByLayout: function (layout) {
            var self = this;
            var regions = {};
            BI.each(layout, function (i, ly) {
                regions[ly.i] = BI.extend(self._getBlockPositionAndSize(ly), {
                    id: ly.i
                });
            });
            return regions;
        },

        _setRegionsByLayout: function (regions, layout) {
            var self = this;
            regions || (regions = this.regions);
            BI.each(layout, function (i, ly) {
                if (regions[ly.i]) {
                    BI.extend(regions[ly.i], self._getBlockPositionAndSize(ly));
                }
            });
            return regions;
        },

        _moveElement: function (layout, l, x, y, isUserAction) {
            var self = this;
            if (l._static) {
                return layout;
            }

            if (l.y === y && l.x === x) {
                return layout;
            }

            var movingUp = y && l.y > y;
            if (typeof x === "number") {
                l.x = x;
            }
            if (typeof y === "number") {
                l.y = y;
            }
            l.moved = true;

            var sorted = this._sortLayoutItemsByRowCol(layout);
            if (movingUp) {
                sorted = sorted.reverse();
            }
            var collisions = getAllCollisions(sorted, l);

            for (var i = 0, len = collisions.length; i < len; i++) {
                var collision = collisions[i];
                if (collision.moved) {
                    continue;
                }

                if (l.y > collision.y && l.y - collision.y > collision.h / 4) {
                    continue;
                }

                if (collision._static) {
                    layout = this._moveElementAwayFromCollision(layout, collision, l, isUserAction);
                } else {
                    layout = this._moveElementAwayFromCollision(layout, l, collision, isUserAction);
                }
            }

            return layout;

            function getAllCollisions (layout, layoutItem) {
                return BI.filter(layout, function (i, l) {
                    return self._collides(l, layoutItem);
                });
            }
        },

        _sortLayoutItemsByRowCol: function (layout) {
            return [].concat(layout).sort(function (a, b) {
                if (a.y > b.y || (a.y === b.y && a.x > b.x)) {
                    return 1;
                }
                return -1;
            });
        },

        _collides: function (l1, l2) {
            if (l1 === l2) {
                return false;
            } // same element
            if (l1.x + l1.w <= l2.x) {
                return false;
            } // l1 is left of l2
            if (l1.x >= l2.x + l2.w) {
                return false;
            } // l1 is right of l2
            if (l1.y + l1.h <= l2.y) {
                return false;
            } // l1 is above l2
            if (l1.y >= l2.y + l2.h) {
                return false;
            } // l1 is below l2
            return true; // boxes overlap
        },

        _getFirstCollision: function (layout, layoutItem) {
            for (var i = 0, len = layout.length; i < len; i++) {
                if (this._collides(layout[i], layoutItem)) {
                    return layout[i];
                }
            }
        },

        _moveElementAwayFromCollision: function (layout, collidesWith,
            itemToMove, isUserAction) {
            if (isUserAction) {
                var fakeItem = {
                    x: itemToMove.x,
                    y: itemToMove.y,
                    w: itemToMove.w,
                    h: itemToMove.h,
                    i: "-1"
                };
                fakeItem.y = Math.max(collidesWith.y - itemToMove.h, 0);
                if (!this._getFirstCollision(layout, fakeItem)) {
                    return this._moveElement(layout, itemToMove, undefined, fakeItem.y);
                }
            }

            return this._moveElement(layout, itemToMove, undefined, itemToMove.y + 1);
        },

        _compactItem: function (compareWith, l, verticalCompact) {
            if (verticalCompact) {
                while (l.y > 0 && !this._getFirstCollision(compareWith, l)) {
                    l.y--;
                }
            }

            var collides;
            while ((collides = this._getFirstCollision(compareWith, l))) {
                l.y = collides.y + collides.h;
            }

            if (l.autoPosition) {
                var layouts = this._getLayoutsByRegions(this.getAllRegions());
                layouts = BI.filter(layouts.slice(), function (i, item) {
                    return item.i !== l.i;
                });
                for (var i = 0; ; ++i) {
                    var x = i % constants.PORTION;
                    var y = Math.floor(i / constants.PORTION);
                    if (x + l.w > constants.PORTION) {
                        continue;
                    }
                    if (!BI.find(layouts, BI.bind(this._isAddNodeIntercepted, {x: x, y: y, node: l}))) {
                        l.x = x;
                        l.y = y;
                        break;
                    }
                }
                delete l.autoPosition;
            }

            return l;
        },

        _isAddNodeIntercepted: function (i, n) {
            var a = {x: this.x, y: this.y, w: this.node.w, h: this.node.h}, b = n;
            return !(a.x + a.w <= b.x || b.x + b.w <= a.x || a.y + a.h <= b.y || b.y + b.h <= a.y);
        },

        compact: function (layout, verticalCompact) {
            var compareWith = getStatics(layout);
            var sorted = this._sortLayoutItemsByRowCol(layout);
            var out = [];

            for (var i = 0, len = sorted.length; i < len; i++) {
                var l = sorted[i];

                if (!l._static) {
                    l = this._compactItem(compareWith, l, verticalCompact);

                    compareWith.push(l);
                }

                out[layout.indexOf(l)] = l;

                l.moved = false;
            }

            return out;

            function getStatics (layout) {
                return BI.filter(layout, function (i, l) {
                    return l._static;
                });
            }
        },

        // //公有方法////
        getRegionByName: function (name) {
            var obj = {};
            obj[name] = this.regions[name];
            return this._cloneRegion(obj)[name];
        },

        getAllRegions: function () {
            return BI.toArray(this._cloneRegion());
        },

        getHelper: function () {
            var helper = BI.createWidget({
                type: "bi.layout",
                width: 18,
                height: 18,
                cls: "arrangement-helper bi-border"
            });
            BI.createWidget({
                type: "bi.absolute",
                element: this,
                items: [helper]
            });
            return helper;
        },

        _start: function () {
            if (this.options.layoutType === constants.LAYOUT_TYPE.GRID) {
                this.block.setVisible(true);
            } else {
                this.arrangement.setVisible(true);
            }
        },

        _stop: function () {
            this.arrangement.setVisible(false);
            this.block.setVisible(false);
        },

        // //公有操作////
        setLayoutType: function (type) {
            var self = this, o = this.options;
            if (type !== o.layoutType) {
                o.layoutType = type;
                switch (o.layoutType) {
                    case constants.LAYOUT_TYPE.FREE:
                        break;
                    case constants.LAYOUT_TYPE.GRID:
                        this.relayout();
                        break;
                }
            }
        },

        getLayoutType: function () {
            return this.options.layoutType;
        },

        getLayoutRatio: function () {
            var occupied = this._getRegionOccupied();
            var width = this.getClientWidth(), height = this.getClientHeight();
            return {
                x: BI.parseFloat(BI.contentFormat((occupied.left + occupied.width) / width, "#.##;-#.##")),
                y: BI.parseFloat(BI.contentFormat((occupied.top + occupied.height) / height, "#.##;-#.##"))
            };
        },

        addRegion: function (region, position) {
            if (position) {
                this.setPosition(position, region);
            }
            var self = this, o = this.options;
            if (!this.position) {
                return false;
            }
            var test = this._cloneRegion();
            BI.each(this.position.regions, function (i, region) {
                test[region.id].left = region.left;
                test[region.id].top = region.top;
                test[region.id].width = region.width;
                test[region.id].height = region.height;

            });
            var item = BI.extend({}, region, {
                left: this.position.insert.left,
                top: this.position.insert.top,
                width: this.position.insert.width,
                height: this.position.insert.height
            });
            var added = this._createOneRegion(item);
            test[added.id] = added;
            if (this._test(test)) {
                delete test[added.id];
                this._modifyRegion(test);
                this._addRegion(item);
                this._populate(this.getAllRegions());
                return true;
            }
            return false;
        },

        deleteRegion: function (name) {
            if (!this.regions[name]) {
                return false;
            }
            var self = this, o = this.options;
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    this._deleteRegionByName(name);
                    this._populate(this.getAllRegions());
                    return true;
                case constants.LAYOUT_TYPE.GRID:
                    this._deleteRegionByName(name);
                    this._populate(this.getAllRegions());
                    this.resize();
                    return true;
            }
            return false;
        },

        setRegionSize: function (name, size) {
            var self = this, o = this.options;
            var flag = false;
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    var clone = this._cloneRegion();
                    BI.extend(clone[name], {
                        width: size.width,
                        height: size.height
                    });
                    if (this._test(clone)) {
                        this._modifyRegion(clone);
                        flag = true;
                    }
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    var clone = this._cloneRegion();
                    BI.extend(clone[name], {
                        width: size.width,
                        height: size.height
                    });
                    if (this._test(clone)) {
                        var layout = this._getLayoutsByRegions(clone);
                        layout = this.compact(layout, true);
                        var regions = this._getRegionsByLayout(layout);
                        this._modifyRegion(regions);
                        flag = true;
                    }
                    break;
            }
            this._applyRegion();
            return flag;
        },

        setPosition: function (position, size) {
            var self = this, o = this.options;
            var insert, regions = [], cur;
            if (position.left < 0 || position.top < 0) {
                switch (o.layoutType) {
                    case constants.LAYOUT_TYPE.FREE:
                        break;
                    case constants.LAYOUT_TYPE.GRID:
                        this.resize();
                        break;
                }
                this._stop();
                this.position = null;
                return null;
            }
            var offset = this._getScrollOffset();
            position = {
                left: position.left + offset.left,
                top: position.top + offset.top
            };
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    var insert = {
                        top: position.top < 0 ? 0 : position.top,
                        left: position.left < 0 ? 0 : position.left,
                        width: size.width,
                        height: size.height
                    };
                    this.position = {
                        insert: insert
                    };
                    this._setArrangeSize(insert);
                    this._start();
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    var p = {
                        top: position.top < 0 ? 0 : position.top,
                        left: position.left < 0 ? 0 : position.left,
                        width: size.width,
                        height: size.height
                    };
                    this._setArrangeSize(p);
                    var cur = this._getGridPositionAndSize(p);
                    var layout = [{
                        x: 0, y: BI.MAX, w: cur.w, h: cur.h, i: cur.i
                    }].concat(this._getLayoutsByRegions());
                    layout = this._moveElement(layout, layout[0], cur.x, cur.y, true);
                    layout = this.compact(layout, true);
                    var regions = this._setRegionsByLayout(this._cloneRegion(), layout);
                    var insert = this._getBlockPositionAndSize(layout[0]);
                    this.position = {
                        insert: insert,
                        regions: regions
                    };
                    this._applyRegion(regions);
                    this._setBlockPositionAndSize(insert);
                    this._start();
                    break;
            }
            return this.position;
        },

        setRegionPosition: function (name, position) {
            var self = this, o = this.options;
            var offset = this._getScrollOffset();
            position = BI.extend(position, {
                left: position.left + offset.left,
                top: position.top + offset.top
            });
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    BI.extend(this.regions[name], {
                        left: position.left < 0 ? 0 : position.left,
                        top: position.top < 0 ? 0 : position.top
                    });
                    this._applyRegion();
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    if (!position.stop) {
                        BI.extend(this.regions[name], {
                            left: position.left < 0 ? 0 : position.left,
                            top: position.top < 0 ? 0 : position.top
                        });
                        var cloned = this._cloneRegion();
                        var cur = this._getGridPositionAndSize(BI.extend(cloned[name], {
                            left: position.left < 0 ? 0 : position.left,
                            top: position.top < 0 ? 0 : position.top
                        }));
                        var x = cur.x, y = cur.y;
                        cur = BI.extend(cur, {
                            x: 0, y: BI.MAX, i: -1
                        });
                        delete cloned[name];
                        var layout = this._getLayoutsByRegions(cloned);
                        layout = this._moveElement([cur].concat(layout), cur, x, y, true);
                        layout = this.compact(layout, true);
                        var regions = this._getRegionsByLayout(layout);
                        this._modifyRegion(regions);
                        this._applyRegion();

                        this._setBlockPositionAndSize(this._getBlockPositionAndSize(cur));
                        this.block.setVisible(true);
                    } else {
                        BI.extend(this.regions[name], {
                            left: position.left < 0 ? 0 : position.left,
                            top: position.top < 0 ? 0 : position.top
                        });
                        var cloned = this._cloneRegion();
                        var layout = this._getLayoutsByRegions(cloned);
                        layout = this.compact(layout, true);
                        var regions = this._getRegionsByLayout(layout);
                        this._modifyRegion(regions);
                        this._applyRegion();
                        this.block.setVisible(false);
                    }
                    break;
            }
        },

        setDropPosition: function (position, size) {
            var self = this;
            this.arrangement.setVisible(true);
            var offset = this._getScrollOffset();
            this._setArrangeSize(BI.extend({}, size, {
                left: position.left + offset.left,
                top: position.top + offset.top
            }));
            return function () {
                self.arrangement.setVisible(false);
            };
        },

        scrollTo: function (scroll) {
            this.container.element.scrollTop(scroll.top);
            this.container.element.scrollLeft(scroll.left);
        },

        zoom: function (ratio) {
            var self = this, o = this.options;
            if (!ratio) {
                return;
            }
            var occupied = this._applyContainer();
            switch (this.getLayoutType()) {
                case constants.LAYOUT_TYPE.FREE:
                    if (this._isArrangeFine()) {
                        var width = this.getClientWidth(), height = this.getClientHeight();
                        var xRatio = (ratio.x || 1) * width / (occupied.left + occupied.width);
                        var yRatio = (ratio.y || 1) * height / (occupied.top + occupied.height);
                        var regions = this._cloneRegion();
                        BI.each(regions, function (i, region) {
                            region.left = region.left * xRatio;
                            region.top = region.top * yRatio;
                            region.width = region.width * xRatio;
                            region.height = region.height * yRatio;
                        });
                        if (this._test(regions)) {
                            this._modifyRegion(regions);
                            this._applyRegion();
                        }
                    }
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    if (this._isArrangeFine()) {
                        var width = this.getClientWidth(), height = this.getClientHeight();
                        var xRatio = (ratio.x || 1) * width / (occupied.left + occupied.width);
                        var yRatio = (ratio.y || 1) * height / (occupied.top + occupied.height);
                        var regions = this._cloneRegion();
                        BI.each(regions, function (i, region) {
                            region.left = region.left * xRatio;
                            region.width = region.width * xRatio;
                            region.top = region.top * yRatio;
                            region.height = region.height * yRatio;
                            // 做一下自适应布局到网格布局的兼容
                            var perWidth = self._getOneWidthPortion();
                            var widthPortion = Math.round(region.width / perWidth);
                            var leftPortion = Math.round(region.left / perWidth);
                            var comparePortion = Math.round((region.width + region.left) / perWidth);
                            if (leftPortion + widthPortion !== comparePortion) {
                                region.left = leftPortion * perWidth;
                                region.width = comparePortion * perWidth - region.left;
                            }
                        });
                        if (this._test(regions)) {
                            var layout = this._getLayoutsByRegions(regions);
                            layout = this.compact(layout, true);
                            regions = this._getRegionsByLayout(layout);
                            this._modifyRegion(regions);
                            this._applyRegion();
                        }
                    } else {
                        this.relayout();
                    }
                    break;
            }
        },

        resize: function () {
            var self = this, o = this.options;
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    this.zoom(this.ratio);
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    this.zoom(this.ratio);
                    var regions = this._cloneRegion();
                    var layout = this._getLayoutsByRegions(regions);
                    layout = this.compact(layout, true);
                    regions = this._getRegionsByLayout(layout);
                    this._modifyRegion(regions);
                    this._applyRegion();
                    break;
            }
        },

        relayout: function () {
            var self = this, o = this.options;
            switch (o.layoutType) {
                case constants.LAYOUT_TYPE.FREE:
                    break;
                case constants.LAYOUT_TYPE.GRID:
                    if (!this._isArrangeFine()) {
                        var perHeight = this._getOneHeightPortion();
                        var width = this.getClientWidth(), height = this.getClientHeight();
                        var regions = this._cloneRegion();
                        var clone = BI.toArray(regions);
                        clone.sort(function (r1, r2) {
                            if (self._isEqual(r1.top, r2.top)) {
                                return r1.left - r2.left;
                            }
                            return r1.top - r2.top;
                        });
                        var count = clone.length;
                        var cols = 4, rows = Math.floor((count - 1) / 4 + 1);
                        var w = width / cols, h = height / rows;
                        var store = {};
                        BI.each(clone, function (i, region) {
                            var row = Math.floor(i / 4), col = i % 4;
                            BI.extend(region, {
                                top: row * perHeight * 6,
                                left: col * w,
                                width: w,
                                height: perHeight * 6
                            });
                            if (!store[row]) {
                                store[row] = {};
                            }
                            store[row][col] = region;
                        });
                        // 非4的倍数
                        // if (count % 4 !== 0) {
                        //     var lasts = store[rows - 1];
                        //     var perWidth = width / (count % 4);
                        //     BI.each(lasts, function (i, region) {
                        //         BI.extend(region, {
                        //             left: BI.parseInt(i) * perWidth,
                        //             width: perWidth
                        //         });
                        //     });
                        // }
                        if (this._test(clone)) {
                            var layout = this._getLayoutsByRegions(regions);
                            layout = this.compact(layout, true);
                            regions = this._getRegionsByLayout(layout);
                            this._modifyRegion(regions);
                            this._populate(clone);
                        }
                    } else {
                        this.resize();
                    }
                    break;
            }
        },

        _populate: function (items) {
            this._stop();
            this._calculateRegions(items);
            this._applyRegion();
        },

        populate: function (items) {
            // this.regions = {};
            var self = this;
            BI.each(this.regions, function (name, region) {
                var exist = BI.some(items, function (i, item) {
                    return item.el.attr("id") === name;
                });
                if (!exist) {
                    self.regions[name].el.setVisible(false);
                }
                delete self.regions[name];
            });
            this._populate(items);
            this._renderRegion();
        }
    });
    BI.shortcut("bi.arrangement", Arrangement);
})();!(function () {
    var LineSegment = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-line-segment bi-border-bottom",
            items: [],
            height: 29
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.button_group",
                ref: function (_ref) {
                    self.buttonGroup = _ref;
                },
                items: BI.createItems(o.items, {
                    type: "bi.line_segment_button",
                    height: o.height - 1
                }),
                layout: [
                    {
                        type: "bi.center"
                    }
                ],
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }, {
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE");
                    }
                }]
            };
        },

        setValue: function (v) {
            this.buttonGroup.setValue(v);
        },

        setEnabledValue: function (v) {
            this.buttonGroup.setEnabledValue(v);
        },


        getValue: function () {
            return this.buttonGroup.getValue();
        }
    });
    BI.shortcut("bi.line_segment", LineSegment);
})();/**
 * 搜索结果面板
 *
 * Created by GUY on 2015/9/16.
 * @class BI.SelectDataSearchResultPane
 * @extends BI.Widget
 */
!(function () {
    var Pane = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-select-data-search-result-pane bi-searcher-view bi-card",
            itemsCreator: BI.emptyFn
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.absolute",
                    items: [{
                        el: {
                            type: "bi.searcher_view",
                            matcher: {
                                type: "bi.select_data_tree",
                                itemsCreator: o.itemsCreator
                            },
                            searcher: {
                                type: "bi.select_data_tree",
                                itemsCreator: o.itemsCreator
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function () {
                                    self.fireEvent("EVENT_CHANGE", arguments);
                                }
                            }],
                            ref: function () {
                                self.resultPane = this;
                            }
                        },
                        left: 0,
                        right: 0,
                        top: 0,
                        bottom: 0
                    }]
                }]
            };
        },

        startSearch: function () {

        },

        stopSearch: function () {

        },

        empty: function () {
            this.resultPane.empty();
        },

        populate: function (searchResult, matchResult, keyword) {
            this.resultPane.populate.apply(this.resultPane, arguments);
        },

        setValue: function (v) {
            this.resultPane.setValue(v);
        },

        getValue: function () {
            return this.resultPane.getValue();
        }
    });
    BI.shortcut("bi.select_data_search_result_pane", Pane);
})();!(function () {
    var SelectDataSearcher = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-select-data-searcher",
            packages: [],
            itemsCreator: BI.emptyFn
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.absolute",
                        items: [{
                            el: {
                                type: "bi.searcher",
                                ref: function () {
                                    self.searcher = this;
                                },
                                el: {
                                    type: "bi.small_search_editor"
                                },
                                isAutoSearch: false, // 是否自动搜索
                                isAutoSync: false,
                                onSearch: function (op, populate) {
                                    o.itemsCreator(BI.extend(op, {
                                        packageId: self.getPackageId()
                                    }), function (searchResult, matchResult) {
                                        populate(searchResult, matchResult, op.keyword);
                                    });
                                },
                                chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                                popup: {
                                    type: "bi.select_data_search_result_pane",
                                    itemsCreator: function (op) {
                                        op.packageId = self.getPackageId();
                                        if (!op.packageId) {
                                            return;
                                        }
                                        o.itemsCreator.apply(self, arguments);
                                    },
                                    ref: function () {
                                        self.searcherPane = this;
                                    },
                                    listeners: [{
                                        eventName: "EVENT_CHANGE",
                                        action: function () {
                                            self.fireEvent("EVENT_CLICK_ITEM", arguments);
                                        }
                                    }, {
                                        eventName: "EVENT_SEARCH_TYPE_CHANGE",
                                        action: function () {
                                            self.searcher.doSearch();
                                        }
                                    }]
                                }
                            },
                            left: 10,
                            right: 10,
                            top: 10
                        }]
                    },
                    height: 45
                }, {
                    type: "bi.select_data_switcher",
                    packages: o.packages,
                    itemsCreator: function (op) {
                        op.packageId = self.getPackageId();
                        if (!op.packageId) {
                            return;
                        }
                        o.itemsCreator.apply(self, arguments);
                    },
                    ref: function () {
                        self.packagePane = this;
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.fireEvent("EVENT_CLICK_PACKAGE", arguments);
                        }
                    }, {
                        eventName: "EVENT_CLICK_ITEM",
                        action: function () {
                            self.fireEvent("EVENT_CLICK_ITEM", arguments);
                        }
                    }]
                }]
            };
        },

        mounted: function () {
            this.searcher.setAdapter(this.packagePane);
        },

        setPackage: function (pId) {
            this.packagePane.setPackage(pId);
        },

        getPackageId: function () {
            return this.packagePane.getPackageId();
        },

        setValue: function (v) {
            this.packagePane.setValue(v);
            this.searcher.setValue(v);
        },

        getValue: function () {
            return this.searcher.getValue();
        },

        populatePackages: function (packages) {
            this.options.packages = packages;
            this.packagePane.populatePackages(packages);
            this.searcher.stopSearch();
            this.populate();
        },

        populate: function () {
            this.packagePane.populate.apply(this.packagePane, arguments);
            this.packagePane.setPackage.apply(this.packagePane, arguments);
        }
    });
    BI.shortcut("bi.select_data_searcher", SelectDataSearcher);
})();/**
 * search面板选项栏
 *
 * Created by GUY on 2015/9/16.
 * @class BI.SelectDataSearchSegment
 * @extends BI.Widget
 */
!(function () {
    var Segment = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-select-data-search-segment",
            height: 60
        },

        // 创建所有数据和业务包选项
        _createSectionTab: function () {
            var self = this;
            return {
                type: "bi.line_segment",
                ref: function () {
                    self.buttonGroup = this;
                },
                height: 24,
                items: [{
                    type: "bi.line_segment_button",
                    height: 24,
                    text: BI.i18nText("BI-Basic_All_Data"),
                    value: BICst.SELECT_DATA_SEGMENT.SECTION_ALL
                }, {
                    type: "bi.line_segment_button",
                    height: 24,
                    selected: true,
                    text: BI.i18nText("BI-Basic_Current_Package"),
                    value: BICst.SELECT_DATA_SEGMENT.SECTION_PACKAGE
                }],
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE");
                    }
                }]
            };
        },

        render: function () {
            return {
                type: "bi.vertical",
                items: [this._createSectionTab()]
            };
        },

        setValue: function (v) {
            var self = this;
            BI.each([BICst.SELECT_DATA_SEGMENT.SECTION_ALL,
                BICst.SELECT_DATA_SEGMENT.SECTION_PACKAGE], function (i, key) {
                if (key & v) {
                    self.buttonGroup.setValue(key & v);
                }
            });
            BI.each([BICst.SELECT_DATA_SEGMENT.SECTION_FIELD,
                BICst.SELECT_DATA_SEGMENT.SECTION_TABLE], function (i, key) {
                if (key & v) {
                    self.segment.setValue(key & v);
                }
            });
        },

        getValue: function () {
            return this.buttonGroup.getValue()[0];
        }
    });
    BI.shortcut("bi.select_data_search_segment", Segment);
})();!(function () {

    var constants = {
        FIELD_GAP: 25,
        DATE_GROUP: [BICst.GROUP.YMD, BICst.GROUP.Y, BICst.GROUP.S, BICst.GROUP.M, BICst.GROUP.W, BICst.GROUP.D],
        COMBINE_DATE_GROUP: [BICst.GROUP.WEEK_COUNT, BICst.GROUP.HOUR, BICst.GROUP.MINUTE, BICst.GROUP.SECOND,
            BICst.GROUP.YS, BICst.GROUP.YM, BICst.GROUP.YW,
            BICst.GROUP.YMDH, BICst.GROUP.YMDHM, BICst.GROUP.YMDHMS]
    };

    var PackageSelectDataService = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-package-select-data-service",
            wId: "",
            isDefaultInit: true,
            chooseType: BI.Selection.Multi
        },

        _store: function () {
            return BI.Models.getModel("bi.model.package_select_data_service");
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.select_data_searcher",
                ref: function () {
                    self.searcher = this;
                },
                packages: this.model.packageStructure,
                itemsCreator: function (op, populate) {
                    if (BI.isKey(op.keyword)) {
                        self._getSearchResult(op.keyword, op.packageId, populate);
                        return;
                    }
                    if (!op.node) {// 根节点， 根据业务包找所有的表
                        self._getTablesStructureByPackId(op.packageId, populate);
                        return;
                    }
                    if (BI.isKey(op.node._keyword)) {
                        self._getFieldsStructureByTableIdAndKeyword(op.node.id, op.node._keyword, populate);
                        return;
                    }
                    if (BI.isNotNull(op.node.isParent)) {
                        self._getFieldStructureOfOneTable(op.node.id, populate);
                    }
                },
                listeners: [{
                    eventName: "EVENT_CLICK_PACKAGE",
                    action: function () {
                        var pId = this.getPackageId();
                        BI.Utils.setCurrentSelectPackageID(pId);
                    }
                }, {
                    eventName: "EVENT_CLICK_ITEM",
                    action: function (value, ob) {
                        // 如果是单选
                        if (o.chooseType === BI.Selection.Single) {
                            if (ob.isSelected() === true) {
                                self.searcher.setValue(ob.getValue());
                            } else {
                                self.searcher.setValue([]);
                            }
                        }
                        self.fireEvent("EVENT_CLICK_ITEM", arguments);
                    }
                }]
            };
        },

        mounted: function () {
            this.populate(this.model.defaultPackageId);
        },

        /**
         * 搜索结果
         * @param type
         * @param keyword
         * @param packageId
         * @param callback
         * @returns {{finded: Array, matched: Array}}
         * @private
         */
        _getSearchResult: function (keyword, packageId, callback) {
            var self = this, o = this.options;
            var searchResult = [], matchResult = [];
            // 选择了所有数据
            var packages = this._getAllPackageIds();

            BI.Utils.getAllTableFieldsInfoByKeyword({
                keyword: keyword,
                packs: packages
            }, function (tables) {
                var items = [];
                var map = {}, field2TableMap = {};
                items = [];
                var tableStructure = self.getTableStructure(tables);
                BI.each(tables, function (i, table) {
                    var fields = self._getFieldStructure(table.name, table.fields, {});
                    BI.each(fields, function (index, field) {
                        field2TableMap[field.id || field.value] = tableStructure[i];
                    });
                    items = items.concat(fields);
                });
                BI.each(items, function (j, find) {
                    if (!map[find.pId]) {
                        searchResult.push(BI.extend({
                            id: find.pId,
                            wId: o.wId,
                            text: field2TableMap[find.id].name,
                            title: field2TableMap[find.id].title,
                            value: find.pId,
                            layer: 0
                        }, {
                            isParent: true,
                            open: true,
                            type: "bi.select_data_level_node",
                            _keyword: keyword
                        }));
                        map[find.pId] = true;
                    }
                });
                callback(searchResult, matchResult);
            });
        },

        _getAllPackageIds: function () {
            var pIds = [];
            BI.map(this.model.groups, function (index, group) {
                pIds = pIds.concat(BI.map(group.packs, function (i, pack) {
                    return pack.id;
                }));
            });
            return pIds;
        },


        getTableStructure: function (tables) {
            var self = this;
            var tablesStructure = [];
            BI.each(tables, function (i, table) {
                var tableId = table.name || table.id;
                var tableName = BI.Utils.getTableTransferName(tableId) || table.name;
                var showText = (tableName || "");
                var title = self.store.getPackageNameByTableName(tableId) + "." + tableName;
                var t = BI.extend({
                    id: tableName,
                    layer: 0,
                    value: tableId,
                    isParent: true,
                    open: false
                }, table, {
                    type: "bi.select_data_level_node",
                    name: showText,
                    text: showText,
                    title: title
                });
                tablesStructure.push(t);
            });
            return tablesStructure;
        },

        /**
         * 业务包中，所有表
         * @param packageId
         * @param callback
         * @param opt
         * @returns {Array}
         * @private
         */
        _getTablesStructureByPackId: function (packageId, callback) {
            var self = this;
            this.store.getTables(packageId, function (currentTables) {
                callback(self.getTableStructure(currentTables));
            });
        },

        _getFieldsStructureByTableIdAndKeyword: function (tableId, keyword, callback) {
            var fieldStructure = [];
            var self = this, o = this.options;
            this.store.getFields(tableId, function (fields) {
                var fieldMap = {}, map = {};
                var measures = PackageSelectDataService.getAllRelativeFields(tableId, fields, map);

                BI.each(measures, function (i, field) {
                    var fid = field.id;
                    var fieldName = field.name || "";
                    fieldStructure.push(fieldMap[fid] = BI.extend({
                        id: fid,
                        pId: tableId,
                        wId: o.wId,
                        type: "bi.detail_select_data_level_item",
                        layer: 1,
                        fieldType: field.fieldType || field.type,
                        text: fieldName,
                        value: fid
                    }, field));
                });

                if (BI.isNotEmptyObject(map)) {
                    BI.each(fields, function (i, field) {
                        var id = field.id;
                        if (BI.isNotEmptyArray(map[id])) {
                            var fieldName = field.name || "";
                            fieldStructure.push({
                                id: id,
                                pId: tableId,
                                type: "bi.expander",
                                text: fieldName,
                                el: BI.extend({
                                    wId: o.wId,
                                    text: fieldName,
                                    keyword: keyword,
                                    fieldType: field.fieldType || field.type,
                                    value: id
                                }, field, {
                                    type: "bi.select_data_level_node",
                                    layer: 1,
                                    isParent: true,
                                    open: false
                                }),
                                popup: {
                                    type: "bi.select_data_loader",
                                    items: self._getSelfCircleFieldsByFieldId(id, map[id] || [], {
                                        tableName: tableId
                                    })
                                }
                            });
                        }
                    });
                }
                var result = BI.Func.getSearchResult(fieldStructure, keyword);
                fields = result.match.concat(result.find);
                fieldStructure = [];
                BI.each(fields, function (i, f) {
                    if (fieldMap[f.pId]) {
                        fieldStructure.push(fieldMap[f.pId]);
                    }
                    fieldStructure.push(f);
                });
                callback(fieldStructure, keyword);
            });
        },

        _getSelfCircleFieldsByFieldId: function (fieldId, foreign, opt) {
            opt = opt || {};
            var self = this, o = this.options;
            foreign || (foreign = []);
            var tableName = opt.tableName;
            var fieldStructure = [];
            BI.each(foreign, function (i, f) {
                var fid = f.id;
                var fieldName = f.alias || f.name || "";

                fieldStructure.push(BI.extend({
                    id: fid,
                    pId: tableName,
                    wId: o.wId,
                    type: "bi.detail_select_data_level_item",
                    layer: opt.isRelation ? 3 : 2,
                    fieldType: f.type,
                    text: fieldName,
                    value: fid
                }, f));
            });
            return fieldStructure;
        },


        _getFieldStructure: function (tableId, fields, opt) {

            var fieldStructure = [];
            var self = this, o = this.options, c = constants;

            var viewFields = [];

            if (fields.length === 0) {
                fieldStructure.push({
                    type: "bi.label",
                    value: BI.UUID(),
                    text: BI.i18nText("BI-Design_No_Usable_Fields"),
                    pId: tableId,
                    id: BI.UUID(),
                    wId: o.wId,
                    textAlign: "left",
                    lgap: opt.isRelation ? c.FIELD_GAP * 2 : c.FIELD_GAP,
                    disabled: true
                });
                return fieldStructure;
            }
            var map = {};
            var measures = PackageSelectDataService.getAllRelativeFields(tableId, fields, map);

            BI.each(measures, function (i, field) {
                var fid = field.id;
                if (viewFields.contains(fid)) {
                    return;
                }
                var fieldName = field.name || "";
                fieldStructure.push(BI.extend({
                    id: fid,
                    pId: tableId,
                    wId: o.wId,
                    type: "bi.detail_select_data_level_item",
                    layer: opt.isRelation ? 2 : 1,
                    fieldType: field.fieldType || field.type,
                    text: fieldName,
                    value: fid
                }, field));
            });

            if (BI.isNotEmptyObject(map)) {
                BI.each(fields, function (i, field) {
                    var id = field.id;
                    if (BI.isNotEmptyArray(map[id])) {
                        var fieldName = field.name || "";
                        fieldStructure.push({
                            id: id,
                            pId: tableId,
                            type: "bi.expander",
                            text: fieldName,
                            el: BI.extend({
                                wId: o.wId,
                                text: fieldName,
                                fieldType: field.fieldType || field.type,
                                value: id
                            }, field, {
                                type: "bi.select_data_level_node",
                                layer: opt.isRelation ? 2 : 1,
                                isParent: true,
                                open: false
                            }),
                            popup: {
                                type: "bi.select_data_loader",
                                items: self._getSelfCircleFieldsByFieldId(id, map[id] || [], BI.extend(opt, {
                                    tableName: tableId
                                }))
                            }
                        });
                    }
                });
            }
            return fieldStructure;
        },

        /**
         * 区别上面的无相关表
         * @param tableId
         * @param callback
         * @param opt
         * @returns {Array}
         * @private
         */
        _getFieldStructureOfOneTable: function (tableId, callback, opt) {
            opt = opt || {};
            var self = this;
            this.store.getFields(tableId, function (fields) {
                callback(self._getFieldStructure(tableId, fields, opt));
            });
        },

        setPackage: function (id) {
            this.searcher.setPackage(id);
        },

        setEnabledValue: function (v) {
            this.searcher.setEnabledValue(v);
        },

        stopSearch: function () {
            this.searcher.stopSearch();
        },

        populate: function () {
            this.searcher.populate.apply(this.searcher, arguments);
        },

        destroyed: function () {

        }
    });

    BI.extend(PackageSelectDataService, {
        RELATION_TABLE: "__relation_table__",

        getAllRelativeFields: function (tableId, fields, map) {
            map = map || {};
            var measures = [];
            var sset = new Set(), store = [], map2Id = {}, res = {};
            BI.each(fields, function (i, field) {
                var fieldName = field.name;
                if (fieldName) {
                    var name = fieldName.split("-")[0];
                    map2Id[fieldName] = field.id;
                    if (sset.has(name)) {
                        store.push(name);
                    } else {
                        sset.add(name);
                    }
                }
            });
            if (store.length > 0 &&
                BI.every(store, function (i, name) {
                    return map2Id[name] != null;
                })) {
                BI.each(fields, function (i, field) {
                    var fieldName = field.name;
                    var name = fieldName.split("-")[0];
                    var contains = store.contains(name);
                    if (name !== fieldName && contains) {
                        if (!res[name]) {
                            res[name] = [];
                        }
                        res[name].push(field);
                    } else if (!contains) {
                        measures.push(field);
                    }
                });
                BI.each(res, function (name, fs) {
                    map[map2Id[name]] = fs;
                });
            } else {
                measures = fields;
            }
            return measures;
        }
    });
    BI.shortcut("bi.package_select_data_service", PackageSelectDataService);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                groups: [],
                packages: {}
            };
        },

        computed: {
            packageStructure: function () {
                return this._digestGroups(this.model.groups);
            },
            defaultPackageId: function () {
                var id = "";
                for (var i = 0; i < this.model.packageStructure.length; i++ ) {
                    if(!this.model.packageStructure[i].isParent) {
                        id = this.model.packageStructure[i].id;
                        break;
                    }
                }
                return id;
            }
        },

        actions: {
            initData: function (callback) {
                var self = this;
                BI.Utils.getGroups4Design(function (res) {
                    self.model.groups = self._digestData(res);
                    callback();
                });
            },
            getTables: function (packageId, callback) {
                var self = this;
                var tables = this.model.packages[packageId];
                function _getTables (ts) {
                    return BI.map(ts, function (i, table) {
                        return {
                            id: table.name,
                            transferName: BI.Utils.getTableTransferName(table.name),
                            open: ts.length === 1
                        };
                    });
                }
                if (BI.isNotNull(tables)) {
                    callback(_getTables(tables));
                    return;
                }
                BI.Utils.getPack4Design(packageId, function (res) {
                    var tables = BI.sortBy(res.data.tables, "transferName");
                    Fix.set(self.model.packages, packageId, tables);
                    callback(_getTables(tables));
                });
            },
            getFields: function (tableName, callback) {
                var self = this;
                BI.Utils.getTable4Design(tableName, function (res) {
                    var result = [];
                    var packageName = self.getPackageNameByTableName(tableName);
                    var transferTableName = BI.Utils.getTableTransferName(tableName) || tableName;
                    BI.each(res.data.table.fields, function (i, field) {
                        var fieldName = BI.Utils.getFieldTransferName(field.id) || field.name;
                        result.push({
                            id: field.id,
                            type: "bi.general_query_select_data_item",
                            fieldType: field.type,
                            name: BI.Utils.getFieldTransferName(field.id) || field.name,
                            title: packageName + "." + transferTableName + "." + fieldName
                        });
                    });
                    callback(BI.sortBy(result, "name"));
                });
            }
        },

        getPackageNameByTableName: function (tableName) {
            var packageName = "";
            BI.each(this.model.packages, function (packageId, pack) {
                BI.each(pack.tables, function (i, table) {
                    if (table.name === tableName) {
                        packageName = pack.name;
                        return true;
                    }
                });
            });
            return packageName;
        },

        _digestData: function (res) {
            var noGroup = BI.filter(res.data, function (i, group) {
                return group.id === BICst.COMMON.NO_GROUPED;
            });
            var otherGroup = BI.filter(res.data, function (i, group) {
                return group.id !== BICst.COMMON.NO_GROUPED;
            });
            otherGroup = BI.sortBy(otherGroup, "initTime").reverse();
            var groups = noGroup.concat(otherGroup);
            BI.each(groups, function (idx, group) {
                group.packs = BI.sortBy(group.packs, "timestamp");
                if (group.id === BICst.COMMON.NO_GROUPED) {
                    var myAnalysis = [{
                        id: BICst.COMMON.MY_ANALYSIS,
                        name: BI.i18nText("BI-My_Analysis"),
                        tableCount: group.myAnalysisTables.length
                    }];
                    group.packs = myAnalysis.concat(group.packs);
                    group.name = BI.i18nText("BI-Basic_None_Group");
                }
            });
            return groups;
        },

        _digestGroups: function (groups) {
            var packStructure = [];
            BI.each(groups, function (i, group) {
                packStructure.push({
                    id: group.id,
                    text: group.name,
                    isParent: true
                });
                BI.each(group.packs, function (i, item) {
                    packStructure.push({
                        id: item.id,
                        text: item.name,
                        value: item.id,
                        pId: group.id
                    });
                });
            });
            return packStructure;
        }
    });

    BI.model("bi.model.package_select_data_service", Model);
})();
/**
 * 切换业务包
 *
 * Created by GUY on 2015/9/16.
 * @class BI.SelectDataSwitcher
 * @extends BI.Widget
 */
!(function () {
    var SelectDataSwitcher = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-select-data-switcher",
            packages: [],
            itemsCreator: BI.emptyFn
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.absolute",
                        hgap: 10,
                        items: [{
                            el: {
                                type: "bi.single_tree_combo",
                                height: 25,
                                items: o.packages,
                                ref: function () {
                                    self.combo = this;
                                },
                                listeners: [{
                                    eventName: "SingleTreeCombo.EVENT_CHANGE",
                                    action: function () {
                                        self.tree.populate();
                                        self.fireEvent("EVENT_CHANGE", arguments);
                                    }
                                }]
                            }
                        }]
                    },
                    height: 30
                }, {
                    el: {
                        type: "bi.select_data_tree",
                        itemsCreator: function () {
                            var args = Array.prototype.slice.call(arguments, 0);
                            args[0].packageId = self.getPackageId();
                            o.itemsCreator.apply(self, args);
                        },
                        ref: function () {
                            self.tree = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("EVENT_CLICK_ITEM", arguments);
                            }
                        }]
                    }
                }]
            };
        },


        setPackage: function (pId) {
            this.combo.setValue([pId]);
            this.tree.populate();
        },

        getPackageId: function () {
            return this.combo.getValue()[0];
        },

        setValue: function (v) {
            this.tree.setValue(v);
        },

        getValue: function () {
            return this.tree.getValue();
        },

        populate: function () {
            this.tree.populate.apply(this.tree, arguments);
        },

        populatePackages: function (pacakges) {
            this.options.packages = pacakges;
            var pId = this.getPackageId();
            this.combo.populate(pacakges);
            if (BI.isKey(pId)) {
                this.combo.setValue(pId);
            }
        }
    });
    BI.shortcut("bi.select_data_switcher", SelectDataSwitcher);
})();BI.SelectDataExpander = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.SelectDataExpander.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-select-data-expander",
            el: {},
            popup: {
                items: [],
                itemsCreator: BI.emptyFn
            }
        });
    },

    _init: function () {
        BI.SelectDataExpander.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.trigger = BI.createWidget(o.el);
        this.expander = BI.createWidget({
            type: "bi.expander",
            element: this,
            isDefaultInit: false,
            el: this.trigger,
            popup: BI.extend({
                type: "bi.select_data_loader"
            }, o.popup)
        });
        this.expander.on(BI.Controller.EVENT_CHANGE, function (type) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });
        this.expander.on(BI.Expander.EVENT_EXPAND, function () {

        });
        this.expander.on(BI.Expander.EVENT_COLLAPSE, function () {
            this.getView().hideView();
        });
        this.expander.on(BI.Expander.EVENT_AFTER_INIT, function () {
            this.getView().populate();
        });
        this.expander.on(BI.Expander.EVENT_CHANGE, function () {
            self.trigger.setValue(this.getValue());
        });
    },

    doBehavior: function () {
        this.trigger.doRedMark.apply(this.trigger, arguments);
        this.expander.doBehavior.apply(this.expander, arguments);
    },

    setValue: function (v) {
        this.expander.setValue(v);
    },

    getValue: function () {
        return this.expander.getValue();
    },

    showView: function (b) {
        this.expander.showView();
    },

    hideView: function () {
        this.expander.hideView();
    },

    isExpanded: function () {
        return this.expander.isExpanded();
    },

    getAllLeaves: function () {
        return this.expander.getAllLeaves();
    },

    getNodeById: function (id) {
        return this.expander.getNodeById(id);
    },

    getNodeByValue: function (value) {
        return this.expander.getNodeByValue(value);
    }
});
BI.shortcut("bi.select_data_expander", BI.SelectDataExpander);BI.SelectDataLoader = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.SelectDataLoader.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-select-data-loader",
            items: [],
            el: {},
            itemsCreator: BI.emptyFn,
            chooseType: BI.Selection.Multi
        });
    },

    _init: function () {
        BI.SelectDataLoader.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.loader = BI.createWidget({
            type: "bi.loader",
            isDefaultInit: false,
            element: this,
            items: o.items,
            itemsCreator: o.itemsCreator,
            el: BI.extend({
                type: "bi.button_tree",
                behaviors: {
                    redmark: function () {
                        return true;
                    }
                },
                chooseType: o.chooseType,
                layouts: [{
                    type: "bi.vertical",
                    scrolly: false,
                    hgap: 0,
                    vgap: 0
                }]
            }, o.el)
        });
        this.loader.on(BI.Controller.EVENT_CHANGE, function (type, val, ob) {
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
            if (type === BI.Events.CLICK) {
                self.fireEvent(BI.SelectDataLoader.EVENT_CHANGE);
            }
        });
    },

    doBehavior: function () {
        this.loader.doBehavior.apply(this.loader, arguments);
    },

    populate: function () {
        this.loader.populate.apply(this.loader, arguments);
    },

    getAllButtons: function () {
        return this.loader.getAllButtons();
    },

    showView: function (b) {
        BI.each(this.loader.getAllButtons(), function (i, button) {
            button.showView && button.showView(b);
        });
    },

    hideView: function (b) {
        BI.each(this.loader.getAllButtons(), function (i, button) {
            button.hideView && button.hideView(b);
        });
    },

    setValue: function (v) {
        this.loader.setValue(v);
    },

    getValue: function () {
        return this.loader.getValue();
    },

    empty: function () {
        this.loader.empty();
    }
});
BI.SelectDataLoader.EVENT_CHANGE = "EVENT_CHANGE";
BI.shortcut("bi.select_data_loader", BI.SelectDataLoader);!(function () {
    var SelectDataTree = BI.inherit(BI.Pane, {

        props: {
            baseCls: "bi-select-data-tree",
            el: {},
            expander: {},
            items: [],
            itemsCreator: BI.emptyFn
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.custom_tree",
                expander: BI.extend({
                    type: "bi.select_data_expander",
                    el: {},
                    popup: {
                        type: "bi.select_data_tree"
                    }
                }, o.expander),
                items: o.items,
                itemsCreator: o.itemsCreator,

                el: BI.extend({
                    type: "bi.select_data_loader"
                }, o.el),
                ref: function () {
                    self.tree = this;
                },
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }, {
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", arguments);
                    }
                }]
            };
        },

        showView: function (b) {
            BI.each(this.tree.getAllButtons(), function (i, button) {
                button.showView && button.showView(b);
            });
        },

        hideView: function (b) {
            BI.each(this.tree.getAllButtons(), function (i, button) {
                button.hideView && button.hideView(b);
            });
        },

        getAllButtons: function () {
            return this.tree.getAllButtons();
        },

        doBehavior: function () {
            this.tree.doBehavior.apply(this.tree, arguments);
        },

        empty: function () {

        },

        populate: function (items) {
            this.options.items = items;
            this.tree.populate.apply(this.tree, arguments);
        },

        setValue: function (v) {
            this.tree.setValue(v);
        },

        getValue: function () {
            // 这里需要去重，因为很有可能expander中保存了之前的value值
            return BI.uniq(this.tree.getValue());
        }
    });
    BI.shortcut("bi.select_data_tree", SelectDataTree);
})();BI.SimpleSelectDataSearchResultPane = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.SimpleSelectDataSearchResultPane.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-single-select-data-search-result-pane bi-select-data-search-result-pane bi-searcher-view bi-card",
            itemsCreator: BI.emptyFn,
            expander: {}
        });
    },

    _init: function () {
        BI.SimpleSelectDataSearchResultPane.superclass._init.apply(this, arguments);
        var self = this, o = this.options;

        this.resultPane = BI.createWidget({
            type: "bi.searcher_view",
            matcher: {
                type: "bi.select_data_tree",
                el: {
                    el: {
                        chooseType: BI.Selection.Single
                    }
                },
                expander: o.expander,
                itemsCreator: o.itemsCreator
            },
            searcher: {
                type: "bi.select_data_tree",
                el: {
                    el: {
                        chooseType: BI.Selection.Single
                    }
                },
                expander: o.expander,
                itemsCreator: o.itemsCreator
            }
        });

        this.resultPane.on(BI.SearcherView.EVENT_CHANGE, function () {
            self.fireEvent("EVENT_CHANGE", arguments);
        });

        var items = [{
            type: "bi.border",
            cls: "search-result-line bi-border-top",
            height: 2
        }, {
            type: "bi.border",
            cls: "search-result-line bi-border-top",
            height: 1
        }, {
            type: "bi.absolute",
            items: [{
                el: this.resultPane,
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
            }]
        }];
        BI.createWidget({
            type: "bi.vtape",
            element: this,
            items: items
        });
    },

    empty: function () {
        this.resultPane.empty();
    },

    populate: function (searchResult, matchResult, keyword) {
        this.resultPane.populate.apply(this.resultPane, arguments);
    },

    setValue: function (v) {

    },

    getValue: function () {
        return this.resultPane.getValue();
    }
});
BI.shortcut("bi.simple_select_data_search_result_pane", BI.SimpleSelectDataSearchResultPane);BI.SimpleSelectDataSearcher = BI.inherit(BI.Widget, {

    _defaultConfig: function () {
        return BI.extend(BI.SimpleSelectDataSearcher.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-simple-select-data-searcher",
            items: [],
            itemsCreator: BI.emptyFn,
            popup: {},
            adapter: {}
        });
    },

    _init: function () {
        BI.SimpleSelectDataSearcher.superclass._init.apply(this, arguments);
        var self = this, o = this.options, c = this._const;

        this.tree = BI.createWidget(o.adapter, {
            type: "bi.select_data_tree",
            items: o.items,
            el: {
                el: {
                    chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
                }
            },
            itemsCreator: o.itemsCreator
        });
        this.tree.on("EVENT_CHANGE", function () {
            self.fireEvent("EVENT_CLICK_ITEM", arguments);
        });

        this.searcherPane = BI.createWidget(o.popup, {
            type: "bi.simple_select_data_search_result_pane",
            itemsCreator: o.itemsCreator
        });
        this.searcherPane.on("EVENT_CHANGE", function () {
            self.fireEvent("EVENT_CLICK_ITEM", arguments);
        });
        this.searcherPane.on("EVENT_SEARCH_TYPE_CHANGE", function () {
            self.searcher.doSearch();
        });

        this.searcher = BI.createWidget({
            type: "bi.searcher",
            el: {
                type: "bi.small_search_editor"
            },
            isAutoSearch: false, // 是否自动搜索
            isAutoSync: false,
            onSearch: function (op, populate) {
                o.itemsCreator(op, function (searchResult, matchResult) {
                    populate(searchResult, matchResult, op.keyword);
                });
            },
            chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE,
            popup: this.searcherPane,
            adapter: this.tree
        });

        BI.createWidget({
            type: "bi.vtape",
            element: this,
            items: [{
                el: {
                    type: "bi.absolute",
                    items: [{
                        el: this.searcher,
                        left: 10,
                        right: 10,
                        top: 10
                    }]
                },
                height: 45
            }, this.tree]
        });
    },

    stopSearch: function () {
        this.searcher.stopSearch();
    },

    setValue: function (v) {

    },

    getValue: function () {
        return this.searcher.getValue();
    },

    populate: function () {
        this.tree.populate.apply(this.tree, arguments);
    }
});
BI.shortcut("bi.simple_select_data_searcher", BI.SimpleSelectDataSearcher);
/**
 * 简单字段选择服务
 *
 * Created by GUY on 2016/5/30.
 *
 * @class BI.SimpleSelectDataService
 * @extend BI.Widget
 */
BI.SimpleSelectDataService = BI.inherit(BI.Widget, {
    _defaultConfig: function () {
        return BI.extend(BI.SimpleSelectDataService.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-simple-select-data-service",
            isDefaultInit: false,
            tablesCreator: function () {
                return [];
            },
            fieldsCreator: function () {
                return [];
            }
        });
    },

    _init: function () {
        BI.SimpleSelectDataService.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.searcher = BI.createWidget({
            type: "bi.simple_select_data_searcher",
            wId: o.wId,
            element: this,
            itemsCreator: function (op, populate) {
                if (BI.isKey(op.keyword)) {
                    var result = self._getSearchResult(op.keyword);
                    populate(result.finded, result.matched);
                    return;
                }
                if (!op.node) {// 根节点， 根据业务包找所有的表
                    populate(self._getTablesStructure());
                    return;
                }
                if (BI.isKey(op.node._keyword)) {
                    populate(self._getFieldsStructureByTableIdAndKeyword(op.node.id, op.node._keyword), op.node._keyword);
                    return;
                }
                if (BI.isNotNull(op.node.isParent)) {
                    populate(self._getFieldsStructureByTableId(op.node.id));
                }
            }
        });
        this.searcher.on("EVENT_CLICK_ITEM", function (value, ob) {
            self.fireEvent("EVENT_CLICK_ITEM", arguments);
        });
        if (o.isDefaultInit === true) {
            this.populate();
        }
    },

    _getTitleByFieldId: function (fieldId) {
        var fieldName = BI.Utils.getFieldNameByIdOfWidget(this.options.wId, fieldId);
        var tableName = BI.Utils.getTableNameWidgetId(this.options.wId);
        return tableName + "." + fieldName || "";
    },

    /**
     * 搜索结果
     * @param type
     * @param keyword
     * @param packageName
     * @returns {{finded: Array, matched: Array}}
     * @private
     */
    _getSearchResult: function (type, keyword) {
        var self = this, o = this.options;
        var searchResult = [], matchResult = [];

        var map = {}, field2TableMap = {};
        var tables = o.tablesCreator();
        var items = [];
        BI.each(tables, function (i, table) {
            var fields = self._getFieldsStructureByTableId(table.id || table.value);
            BI.each(fields, function (i, filed) {
                field2TableMap[filed.id || filed.value] = table;
            });
            items = items.concat(fields);
        });
        var result = BI.Func.getSearchResult(items, keyword);
        BI.each(result.matched.concat(result.finded), function (j, finded) {
            if (!map[finded.pId]) {
                searchResult.push(BI.extend({
                    id: finded.pId,
                    wId: o.wId,
                    text: BI.Utils.getTableNameWidgetId(o.wId) || BI.Utils.getFieldNameByIdOfWidget(o.wId, finded.pId) || "",
                    title: BI.Utils.getTableNameWidgetId(o.wId) || BI.Utils.getFieldNameByIdOfWidget(o.wId, finded.pId) || "",
                    value: finded.pId,
                    type: "bi.simple_select_data_level0_node",
                    layer: 0
                }, field2TableMap[finded.id || finded.value], {
                    isParent: true,
                    open: true,
                    _keyword: keyword
                }));
                map[finded.pId] = true;
            }
        });
        // searchResult = searchResult.concat(result.matched).concat(result.finded);
        matchResult = matchResult.concat(result.matched);
        return {
            finded: searchResult,
            matched: matchResult
        };
    },

    /**
     * 业务包中，所有表
     * @param packageId
     * @returns {Array}
     * @private
     */
    _getTablesStructure: function () {
        var self = this, o = this.options;
        var tablesStructure = [];
        var currentTables = o.tablesCreator();
        var tableName = BI.Utils.getTableNameWidgetId(o.wId) || "";
        BI.each(currentTables, function (i, table) {
            tablesStructure.push(BI.extend({
                id: table.id,
                type: "bi.simple_select_data_level0_node",
                layer: 0,
                text: tableName,
                title: tableName,
                value: table.id,
                isParent: true,
                open: false
            }, table));
        });
        return tablesStructure;
    },

    _getFieldsStructureByTableIdAndKeyword: function (tableId, keyword) {
        var fieldStructure = [];
        var self = this, o = this.options;
        var fields = o.fieldsCreator(tableId);
        var fieldMap = {}, map = {};
        // var measures = BI.PackageSelectDataService.getAllRelativeFields(tableId, fields, map);

        BI.each(fields, function (i, field) {
            var fid = field.id;
            var fieldName = BI.Utils.getFieldNameByIdOfWidget(o.wId, fid) || "";
            fieldStructure.push(fieldMap[fid] = BI.extend({
                id: fid,
                pId: tableId,
                wId: o.wId,
                type: "bi.detail_select_data_level_item",
                layer: 1,
                fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, fid),
                text: fieldName,
                title: self._getTitleByFieldId(fid),
                value: fid
            }, field));
        });

        if (BI.isNotEmptyObject(map)) {
            BI.each(fields, function (i, field) {
                var id = field.id;
                if (BI.isNotEmptyArray(map[id])) {
                    var fieldName = BI.Utils.getFieldNameByIdOfWidget(o.wId, id) || "";
                    fieldStructure.push({
                        id: id,
                        pId: tableId,
                        type: "bi.expander",
                        text: fieldName,
                        el: BI.extend({
                            wId: o.wId,
                            text: fieldName,
                            keyword: keyword,
                            title: self._getTitleByFieldId(id),
                            fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, id),
                            value: id
                        }, field, {
                            type: "bi.select_data_level1_date_node",
                            layer: 1,
                            isParent: true,
                            open: false
                        }),
                        popup: {
                            type: "bi.select_data_loader",
                            items: self._getSelfCircleFieldsByFieldId(id, map[id] || [])
                        }
                    });
                }
            });
        }
        var result = BI.Func.getSearchResult(fieldStructure, keyword);
        fields = result.matched.concat(result.finded);
        fieldStructure = [];
        BI.each(fields, function (i, f) {
            if (fieldMap[f.pId]) {
                fieldStructure.push(fieldMap[f.pId]);
            }
            fieldStructure.push(f);
        });
        return fieldStructure;
    },

    _getSelfCircleFieldsByFieldId: function (fieldId, foregion) {
        var self = this, o = this.options;
        foregion || (foregion = []);
        var tableId = BI.Utils.getTableNameWidgetId(o.wId);
        var fieldStructure = [];
        BI.each(foregion, function (i, f) {
            var fid = f.id;
            var fieldName = BI.Utils.getFieldNameByIdOfWidget(o.wId, fid) || "";
            fieldStructure.push(BI.extend({
                id: fid,
                pId: tableId,
                wId: o.wId,
                type: "bi.detail_select_data_level_item",
                layer: 2,
                fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, fid),
                text: fieldName,
                title: self._getTitleByFieldId(fid),
                value: fid
            }, f));
        });
        return fieldStructure;
    },

    _getFieldsStructureByTableId: function (tableId) {
        var fieldStructure = [];
        var self = this, o = this.options;

        var viewFields = [];
        var fields = o.fieldsCreator(tableId);
        var map = {};
        // var measures = BI.PackageSelectDataService.getAllRelativeFields(tableId, fields, map);

        BI.each(fields, function (i, field) {
            var fid = field.id;
            if (viewFields.contains(fid)) {
                return;
            }
            var fieldName = BI.Utils.getFieldNameByIdOfWidget(o.wId, fid) || "";
            fieldStructure.push(BI.extend({
                id: fid,
                pId: tableId,
                wId: o.wId,
                type: "bi.detail_select_data_level_item",
                layer: 1,
                fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, fid),
                text: fieldName,
                title: self._getTitleByFieldId(fid),
                value: fid
            }, field));
        });

        if (BI.isNotEmptyObject(map)) {
            BI.each(fields, function (i, field) {
                var id = field.id;
                if (BI.isNotEmptyArray(map[id])) {
                    var fieldName = BI.Utils.getFieldNameByIdOfWidget(o.wId, id) || "";
                    fieldStructure.push({
                        id: id,
                        pId: tableId,
                        type: "bi.expander",
                        text: fieldName,
                        el: BI.extend({
                            wId: o.wId,
                            text: fieldName,
                            title: self._getTitleByFieldId(id),
                            fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, id),
                            value: id
                        }, field, {
                            type: "bi.select_data_level1_date_node",
                            layer: 1,
                            isParent: true,
                            open: false
                        }),
                        popup: {
                            type: "bi.select_data_loader",
                            items: self._getSelfCircleFieldsByFieldId(id, map[id] || [])
                        }
                    });
                }
            });
        }
        return fieldStructure;
    },

    setEnabledValue: function (v) {
        this.searcher.setEnabledValue(v);
    },

    stopSearch: function () {
        this.searcher.stopSearch();
    },

    populate: function () {
        this.searcher.populate.apply(this.searcher, arguments);
    }
});
BI.SimpleSelectDataService.EVENT_CLICK_ITEM = "EVENT_CLICK_ITEM";
BI.shortcut("bi.simple_select_data_service", BI.SimpleSelectDataService);
BI.DetailSelectDataLevelItem = BI.inherit(BI.Single, {
    _defaultConfig: function () {
        return BI.extend(BI.DetailSelectDataLevelItem.superclass._defaultConfig.apply(this, arguments), {
            extraCls: "bi-detail-select-data-level0-item bi-select-data-level0-item",
            height: 25,
            layer: 1,
            hgap: 0,
            fieldType: BICst.COLUMN.STRING,
            lgap: 0,
            rgap: 35
        });
    },

    _getFieldClass: function (type) {
        switch (type) {
            case BICst.COLUMN.STRING:
                return "string-field-font";
            case BICst.COLUMN.NUMBER:
                return "number-field-font";
            case BICst.COLUMN.DATE:
                return "date-field-font";
            case BICst.COLUMN.COUNTER:
                return "number-field-font";
            default:
                return "number-field-font";
        }
    },

    _init: function () {
        BI.DetailSelectDataLevelItem.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        var cType = o.isPrimaryKey ? {
            cls: "select-data-level0-item-button bi-list-item-select",
            iconCls1: this._getFieldClass(o.fieldType),
            iconCls2: "select-data-primary-key-font",
            type: "bi.blank_icon_icon_text_item"
        } : {
            cls: "select-data-level0-item-button bi-list-item-select " + this._getFieldClass(o.fieldType),
            type: "bi.blank_icon_text_item"
        };
        this.button = BI.createWidget(BI.extend({
            trigger: "mousedown",
            blankWidth: o.layer * 20,
            text: o.text,
            value: o.value,
            height: 25,
            textLgap: 10,
            textRgap: 5
        }, cType));
        this.button.on(BI.Controller.EVENT_CHANGE, function (type) {
            if (type === BI.Events.CLICK) {
                self.setSelected(self.isSelected());
            }
            self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, self.getValue(), self);
        });
        this.button.element.draggable(o.drag);


        this.previewBtn = BI.createWidget({
            type: "bi.text_button",
            text: BI.i18nText("BI-Basic_Preview"),
            title: BI.i18nText("BI-Basic_Preview")
        });
        this.previewBtn.doHighLight();
        this.previewBtn.on(BI.TextButton.EVENT_CHANGE, function () {
            BI.Popovers.create(self.getName(), BI.createWidget({
                type: "bi.detail_select_data_preview_section",
                text: o.text,
                value: o.value
            })).open(self.getName());
        });

        this.topLine = BI.createWidget({
            type: "bi.layout",
            height: 0,
            cls: "select-data-top-line"
        });
        this.bottomLine = BI.createWidget({
            type: "bi.layout",
            height: 0,
            cls: "select-data-bottom-line"
        });
        BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
                el: this.topLine,
                top: 0,
                left: o.lgap,
                right: o.rgap
            }, {
                el: this.bottomLine,
                bottom: 0,
                left: o.lgap,
                right: o.rgap
            }, {
                el: this.button,
                top: 0,
                left: o.lgap,
                right: o.rgap
            }, {
                el: {
                    type: "bi.center_adapt",
                    items: [this.previewBtn]
                },
                top: 0,
                right: 0,
                bottom: 0,
                width: o.rgap
            }]
        });
        this.topLine.invisible();
        this.bottomLine.invisible();
        this.previewBtn.invisible();
        this.element.hover(function () {
            if (BI.Utils.getFieldTypeByIdOfWidget(o.value) === BICst.COLUMN.COUNTER) {
                return;
            }
            self.previewBtn.visible();
        }, function () {
            self.previewBtn.invisible();
        });
        // 标蓝
        BI.Utils.isSrcUsedBySrcID(o.id) === true && this.doHighLight();
        this.srcBroadcast = BI.Broadcasts.on(BICst.BROADCAST.SRC_PREFIX + o.id, function (v) {
            if (v === true) {
                self.doHighLight();
            } else {
                if (BI.Utils.isSrcUsedBySrcID(o.id) === false) {
                    self.unHighLight();
                }
            }
        });
        this.fieldDropBroadcast = BI.Broadcasts.on(BICst.BROADCAST.FIELD_DROP_PREFIX, function (v) {
            BI.defer(function () {
                self.setSelected(false);
            });
        });
    },

    isSelected: function () {
        return this.button.isSelected();
    },

    setSelected: function (b) {
        this.button.setSelected(b);
        if (!b) {
            this.topLine.invisible();
            this.bottomLine.invisible();
            this.element.removeClass("select-data-item-top");
            this.element.removeClass("select-data-item-bottom");
        }
    },

    setTopLineVisible: function () {
        this.topLine.visible();
        this.element.addClass("select-data-item-top");
    },

    setTopLineInVisible: function () {
        this.topLine.invisible();
        this.element.removeClass("select-data-item-top");
    },

    setBottomLineVisible: function () {
        this.bottomLine.visible();
        this.element.addClass("select-data-item-bottom");
    },

    setBottomLineInVisible: function () {
        this.bottomLine.invisible();
        this.element.removeClass("select-data-item-bottom");
    },

    doRedMark: function () {
        this.button.doRedMark.apply(this.button, arguments);
    },

    unRedMark: function () {
        this.button.unRedMark.apply(this.button, arguments);
    },

    doHighLight: function () {
        this.button.doHighLight.apply(this.button, arguments);
    },

    unHighLight: function () {
        this.button.unHighLight.apply(this.button, arguments);
    },

    destroyed: function () {
        this.srcBroadcast();
        this.fieldDropBroadcast();
    }
});

BI.shortcut("bi.detail_select_data_level_item", BI.DetailSelectDataLevelItem);BI.SelectDataLevelItem = BI.inherit(BI.Single, {
    _defaultConfig: function () {
        return BI.extend(BI.SelectDataLevelItem.superclass._defaultConfig.apply(this, arguments), {
            extraCls: "bi-select-data-level0-item",
            height: 25,
            hgap: 0,
            layer: 1,
            fieldType: BICst.COLUMN.STRING,
            lgap: 0,
            rgap: 0
        });
    },

    _getFieldClass: function (type) {
        switch (type) {
            case BICst.COLUMN.STRING:
                return "string-field-font";
            case BICst.COLUMN.NUMBER:
                return "number-field-font";
            case BICst.COLUMN.DATE:
                return "date-field-font";
            case BICst.COLUMN.COUNTER:
                return "number-field-font";
            default:
                return "number-field-font";
        }
    },

    render: function () {
        var self = this, o = this.options;
        this.button = BI.createWidget({
            type: "bi.blank_icon_text_item",
            trigger: "mousedown",
            cls: "bi-list-item-select " + this._getFieldClass(o.fieldType),
            blankWidth: o.layer * 20,
            text: o.text,
            value: o.value,
            keyword: o.keyword,
            height: 25,
            textRgap: 5
        });
        this.button.on(BI.Controller.EVENT_CHANGE, function (type) {
            if (type === BI.Events.CLICK) {
                self.setSelected(self.isSelected());
            }
            self.fireEvent(BI.Controller.EVENT_CHANGE, BI.Events.CLICK, self.getValue(), self);
        });

        BI.createWidget({
            type: "bi.absolute",
            element: this,
            items: [{
                el: this.button,
                top: 0,
                left: o.lgap,
                right: o.rgap
            }]
        });
    },

    isSelected: function () {
        return this.button.isSelected();
    },

    setSelected: function (b) {
        this.button.setSelected(b);
    },

    doRedMark: function () {
        this.button.doRedMark.apply(this.button, arguments);
    },

    unRedMark: function () {
        this.button.unRedMark.apply(this.button, arguments);
    },

    doHighLight: function () {
        this.button.doHighLight.apply(this.button, arguments);
    },

    unHighLight: function () {
        this.button.unHighLight.apply(this.button, arguments);
    }
});

BI.shortcut("bi.select_data_level_item", BI.SelectDataLevelItem);/**
 * author: young
 * createdDate: 2018/8/13
 * description: 动态随组件创建加载文件
 */
!(function () {
    // 详细设置
    BI.config("bi.design.widget.expand", function () {
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/js/expander.min.js&type=plain&parser=plain");
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/css/expander.min.css&type=plain&parser=dynamic", "css");
    });

    // 表格
    var loadTable = function () {
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/js/table.min.js&type=plain&parser=plain");
        BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/css/table.min.css&type=plain&parser=dynamic", "css");
    };
    BI.config("bi.group_table", loadTable);
    BI.config("bi.cross_table", loadTable);
    BI.config("bi.detail_table", loadTable);
    BI.config("bi.detail_view", loadTable);
})();
!(function () {
    var constants = {
        BUTTON_HEIGHT: 24
    };

    var ChartDrillCell = BI.inherit(BI.Widget, {

        props: {
            cls: "bi-chart-drill-cell",
            width: 180,
            height: 34
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart_drill_cell", {
                dId: this.options.dId,
                drillValue: this.options.drillValue
            });
        },

        watch: {
            drillValue: function (value) {
                this.text.setText(value);
            }
        },

        render: function () {
            var self = this, o = this.options;

            var items = [{
                el: {
                    type: "bi.label",
                    // width: 95,
                    height: 25,
                    textAlign: "left",
                    // 防止tooltip被下方的盖住
                    container: "body",
                    text: this.model.drillName,
                    title: this.model.drillName,
                    ref: function (ref) {
                        self.text = ref;
                    }
                },
                lgap: 5
            }, {
                el: {
                    type: "bi.combo",
                    disabled: !this.model.showDrillDown,
                    ref: function (ref) {
                        self.downDrill = ref;
                    },
                    el: {
                        type: "bi.absolute",
                        height: constants.BUTTON_HEIGHT,
                        cls: "down-drill-button bi-high-light-background",
                        items: [{
                            el: {
                                type: "bi.button",
                                cls: "bi-chart-drill-cell-button",
                                text: BI.i18nText("BI-Design_Drill_down"),
                                textAlign: "left",
                                hgap: 10,
                                height: constants.BUTTON_HEIGHT,
                                warningTitle: BI.i18nText("BI-Design_Has_No_Drill_Down")
                            },
                            left: 0,
                            top: 0,
                            right: 0,
                            bottom: 0
                        }, {
                            el: {
                                type: "bi.icon_button",
                                width: 28,
                                height: 26,
                                cls: "widget-drill-down-font drill-down-icon  icon-size-12"
                            },
                            right: 0,
                            top: 0,
                            bottom: 0
                        }]
                    },
                    popup: {
                        el: {
                            type: "bi.text_value_combo_popup",
                            items: this.model.downListItems,
                            listeners: [{
                                eventName: BI.TextValueComboPopup.EVENT_CHANGE,
                                action: function (v) {
                                    self.store.drillDown(v);
                                }
                            }]
                        }
                    }
                },
                hgap: 5,
                width: 80
            }];


            if (BI.Utils.getMeasureDrillOrderById(this.options.dId) === BICst.DRILL_ORDER.FIXED) {
                items.splice(items.length - 1, 1, {
                    el: {
                        type: "bi.button",
                        disabled: !this.model.showFixDrillDown,
                        cls: "bi-chart-drill-cell-button",
                        text: BI.i18nText("BI-Design_Drill_down"),
                        hgap: 3,
                        height: constants.BUTTON_HEIGHT,
                        warningTitle: BI.i18nText("BI-Design_Has_No_Drill_Down"),
                        listeners: [{
                            eventName: BI.Button.EVENT_CHANGE,
                            action: BI.bind(this.store.fixDrillDown, this.store)
                        }]
                    },
                    hgap: 5,
                    width: 80
                });
            }

            return {
                type: "bi.vertical_adapt",
                items: [{
                    type: "bi.htape",
                    width: o.width,
                    height: constants.BUTTON_HEIGHT,
                    items: items
                }]
            };
        }
    });
    BI.shortcut("bi.chart_drill_cell", ChartDrillCell);
})();
!(function () {
    var CellChartDrillModel = BI.inherit(Fix.Model, {

        context: ["widget", "drillControl", "hideDrillDown", "refreshTableChart"],

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            drillName: function () {
                var fieldId = BI.Utils.getMeasureSwitchFieldById(this.options.dId);
                var last = this.model.drillSequence[this.model.drillSequence.length - 1];
                last && (fieldId = last.to);
                var drillText = this.options.drillValue;
                var dimType = BI.Utils.getResultDimensionTypeById(this.options.dId);
                if (dimType === BICst.DESIGN.DIMENSION_TYPE.DATE) {
                    var groupType = BI.Utils.getResultDimensionGroupTypeById(this.options.dId);
                    var setting = BI.Utils.getResMeasureSettingsById(this.options.dId);
                    var formatType = setting.dateFormat ? setting.dateFormat.type : BICst.DESIGN.DATE_FORMAT.SPLIT;
                    drillText = BI.Format.formatValueByGroupAndFormatter(this.options.drillValue, groupType || BICst.GROUP.YMD, formatType);
                }
                return BI.Utils.getFieldNameByIdOfWidget(this.model.wId, fieldId) + ":" + drillText;
            },
            measures: function () {
                return this.model.widget.measures;
            },
            drillTrigger: function () {
                return this.model.drillControl.trigger;
            },
            drillSequence: function () {
                return BI.Utils.getMeasureDrillSequenceById(this.options.dId);
            },
            showDrillDown: function () {
                return this.model.downListItems.length !== 0;
            },
            downListItems: function () {
                var self = this, items = [], wId = this.model.widget.wId,
                    fId = BI.Utils.getFieldIdBydId(this.options.dId);
                if (!fId) {
                    return [];
                }
                var drilledFIds = BI.map(this.model.drillSequence, "to");
                var dir = BI.map(BI.Utils.getFieldByIdOfWidget(wId, fId).drillDir, "id");
                var service = BI.Services.getService("bi.service.design.detail.dimension.name");
                BI.each(dir, function (i, fId) {
                    var showDrilledField = fId !== BI.Utils.getMeasureSwitchFieldById(self.options.dId);
                    if (showDrilledField && !drilledFIds.contains(fId)) {
                        items.push({
                            text: service.getFieldGroupFullName(self.options.dId, fId),
                            value: fId
                        });
                    }
                });
                return items;
            },
            showFixDrillDown: function () {
                var self = this, items = [], wId = this.model.widget.wId,
                    fId = BI.Utils.getFieldIdBydId(this.options.dId);
                if (!fId) {
                    return [];
                }
                var drilledFIds = BI.map(this.model.drillSequence, "to");
                var dir = BI.map(BI.Utils.getFieldDirByIdOfWidget(wId, fId), "id");
                var currIdx = dir.indexOf(BI.Utils.getMeasureSwitchFieldById(self.options.dId));
                BI.each(dir, function (i, fId) {
                    // 只显示切换字段之后的字段
                    if (i > currIdx && !drilledFIds.contains(fId)) {
                        items.push({
                            text: BI.Utils.getFieldNameByIdOfWidget(wId, fId),
                            value: fId
                        });
                    }
                });
                return items.length !== 0;
            }
        },

        actions: {
            drillDown: function (v) {
                this._drillDown(v);
            },
            fixDrillDown: function () {
                var dir = BI.map(BI.Utils.getFieldDirByIdOfWidget(this.model.wId, BI.Utils.getFieldIdBydId(this.options.dId)), "id");
                var to = dir[dir.indexOf(this._getFrom()) + 1];
                if (!to) {
                    return;
                }
                this._drillDown(to);
            }
        },

        _getFrom: function () {
            var lastDrill = BI.last(this.model.drillSequence);
            var from = BI.Utils.getMeasureSwitchFieldById(this.options.dId);
            if (lastDrill) {
                from = lastDrill.to;
            }
            return from;
        },

        _drillDown: function (to) {
            var drillSeq = BI.deepClone(this.model.drillSequence || []);
            if (drillSeq) {
                var drillInfo = {
                    from: this._getFrom(),
                    to: to,
                    value: this.options.drillValue
                };
                this._setDrillFilter(drillInfo);
                drillSeq.push(drillInfo);
                this.model.widget.drillOrder.push({
                    dId: this.options.dId
                });
            }
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
            service.mountAttribute(this.options.dId, "drillSequence", drillSeq);
            var drillService = BI.Services.getService("bi.service.design.widget.table_chart.chart_drill");
            drillService.setGeoDrill(this.options.dId, drillSeq);

            this.model.refreshTableChart = !this.model.refreshTableChart;
            this.model.hideDrillDown = !this.model.hideDrillDown;
        },

        _setDrillFilter: function (drillInfo) {
            var service = BI.Services.getService("bi.service.design.chart.attr");
            if (service.isRegionSuit4Map(this.model.widget.wId)) {
                return;
            }
            var self = this, filters = [];
            BI.each(this.model.drillControl.value, function (i, it) {
                !BI.Utils.isTargetById(it.dId) && (it.dId !== self.options.dId) && filters.push({
                    targetId: it.dId,
                    value: it.value,
                    fieldId: it.fieldId
                });
            });
            drillInfo.attachedFilters = filters;
        }
    });
    BI.model("bi.model.design.widget.table_chart_drill_cell", CellChartDrillModel);
})();
!(function () {
    var ChartDrillChain = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-chart-drill-chain bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart_drill_chain");
        },

        watch: {
            items: function (items) {
                this.drills.element.width("");
                this.drills.populate(items);
                this._getDrillWidth && this._getDrillWidth();
            },
            boundWidth: function () {
                this._setWidth();
            }
        },

        mounted: function () {
            this._getDrillWidth = BI.debounce(BI.bind(this._cacheDrillWidth, this), 100);
            this._getDrillWidth();
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                items: this.model.items,
                layouts: [{
                    type: "bi.left",
                    vgap: 5,
                    hgap: 5
                }],
                ref: function (ref) {
                    self.drills = ref;
                },
                listeners: [{
                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                    action: BI.bind(this.store.drillUp, this.store)
                }]
            };
        },

        _cacheDrillWidth: function () {
            this.singleLineWidth = this.drills.element.width();
            this._setWidth();
        },

        _setWidth: function () {
            var width = "";
            if (this.model.boundWidth < this.singleLineWidth) {
                width = this.model.boundWidth - 10;
            }
            this.drills.element.width(width);
        }
    });
    BI.shortcut("bi.chart_drill_chain", ChartDrillChain);
})();
!(function () {
    var CONSTANT = {
        ALL: "all"
    };
    var ChartDrillChainModel = BI.inherit(Fix.Model, {

        context: ["widget", "drillControl", "hideDrill", "refreshTableChart"],

        computed: {
            boundWidth: function () {
                return this.model.widget.bounds.width;
            },
            items: function () {
                var self = this;
                var items = [{
                    type: "bi.text_button",
                    cls: "underline-button bi-high-light",
                    text: BI.i18nText("BI-Design_Label_All"),
                    value: CONSTANT.ALL,
                    height: 20
                }];
                var drills = [], drillSeqMap = {};
                BI.each(this.model.widget.view, function (i, region) {
                    BI.each(region, function (idx, id) {
                        if (BI.Utils.isDrillDimensionById(id)) {
                            drills.push({
                                dId: id,
                                name: BI.Utils.getDimensionNameById(id)
                            });
                            drillSeqMap[self._getKey(id)] = BI.deepClone(BI.Utils.getMeasureDrillSequenceById(id));
                        }
                    });
                });
                BI.each(this.model.widget.dimensions, function (id) {
                    if (!BI.Utils.isDimInView(id) && BI.Utils.isDrillDimensionById(id)) {
                        drills.push({
                            dId: id,
                            name: BI.Utils.getDimensionNameById(id)
                        });
                        drillSeqMap[self._getKey(id)] = BI.deepClone(BI.Utils.getMeasureDrillSequenceById(id));
                    }
                });
                BI.each(this.model.widget.drillOrder, function (i, item) {
                    var name = [];
                    BI.each(drills, function (j, drill) {
                        if (drill.dId === item.dId) {
                            if (drillSeqMap[self._getKey(drill.dId)].length > 0) {
                                var drillConf = drillSeqMap[self._getKey(drill.dId)][0];
                                BI.each(drillConf.attachedFilters, function (k, filter) {
                                    name.push(BI.Format.formatValueByGroup(filter.value, BI.Utils.getDimensionGroupTypeBydIdAndFieldId(filter.targetId, filter.fieldId)));
                                });
                                name.push(BI.Format.formatValueByGroup(drillConf.value, BI.Utils.getDimensionGroupTypeBydIdAndFieldId(item.dId, drillConf.from)));
                                drillSeqMap[self._getKey(drill.dId)].splice(0, 1);
                            }
                        }
                    });
                    BI.each(name, function (i, item) {
                        BI.isEmptyString(item) && (name[i] = BI.i18nText("BI-Basic_Empty"));
                    });
                    name = name.join("-");
                    name = BI.isEmptyString(name) ? BI.i18nText("BI-Basic_Empty") : name;
                    var isLast = self.model.widget.drillOrder.length - 1 === i;
                    items = items.concat([self._arrowItem(), {
                        type: isLast ? "bi.label" : "bi.text_button",
                        cls: (isLast ? "" : "underline-button bi-high-light") + " drill-label",
                        text: name,
                        title: name,
                        value: i,
                        height: 20
                    }]);
                });
                return items;
            }
        },

        _arrowItem: function () {
            return {
                type: "bi.label",
                text: ">",
                height: 20
            };
        },

        actions: {
            drillUp: function (v) {
                var self = this, start = 0;
                if (v !== CONSTANT.ALL) {
                    start = v + 1;
                }
                this.model.widget.drillOrder.splice(start, this.model.widget.drillOrder.length - start);
                // 清空钻取 key值为fieldId+group
                var drillSeqMap = {};
                BI.each(this.model.widget.drillOrder, function (i, item) {
                    var name = self._getKey(item.dId);
                    if (!drillSeqMap[name]) {
                        drillSeqMap[name] = 0;
                    }
                    drillSeqMap[name]++;
                });
                BI.each(this.model.widget.dimensions, function (dId) {
                    if (!BI.Utils.isDrillDimensionById(dId)) {
                        return;
                    }
                    var seq = BI.Utils.getMeasureDrillSequenceById(dId);
                    seq = seq.splice(0, drillSeqMap[self._getKey(dId)]);
                    var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                    if (!drillSeqMap[self._getKey(dId)]) {
                        seq = [];
                    }
                    service.mountAttribute(dId, "drillSequence", seq);
                    var drillService = BI.Services.getService("bi.service.design.widget.table_chart.chart_drill");
                    drillService.setGeoDrill(dId, seq);
                });
                this.model.refreshTableChart = !this.model.refreshTableChart;
            }
        },

        _getKey: function (dId) {
            return BI.Utils.getFieldIdBydId(dId) + "_" + BI.Utils.getDimensionGroupTypeById(dId);
        }
    });
    BI.model("bi.model.design.widget.table_chart_drill_chain", ChartDrillChainModel);
})();
!(function () {
    var DrillPushButton = BI.inherit(BI.BasicButton, {
        props: {
            extraCls: "bi-drill-push-button",
            width: 90,
            height: 25
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.layout",
                        cls: "bi-drill-push-button-background",
                        width: 90,
                        height: 25,
                        ref: function (ref) {
                            self.background = ref;
                        }
                    },
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 0
                }, {
                    el: {
                        type: "bi.icon_change_button",
                        iconCls: "widget-drill-down-font icon-size-12",
                        iconWidth: 12,
                        iconHeight: 13,
                        height: 18,
                        ref: function (ref) {
                            self.pushButton = ref;
                        }
                    },
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }]
            };
        },

        setPushDown: function () {
            this.pushButton.setIcon("widget-drill-down-font icon-size-12");
        },

        setPushUp: function () {
            this.pushButton.setIcon("widget-drill-up-font icon-size-12");
        },

        doClick: function () {
            DrillPushButton.superclass.doClick.apply(this, arguments);
            if (this.isValid()) {
                this.fireEvent(DrillPushButton.EVENT_CHANGE);
            }
        }
    });
    DrillPushButton.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.drill_push_button", DrillPushButton);
})();
!(function () {
    var WidgetDrill = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-chart-drill"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart_drill");
        },

        watch: {
            drillTrigger: function () {
                this._showDrill();
            },
            drillItems: function (drillItems) {
                this.drillDown.populate(this._createItems(drillItems));
            },
            hideDrillDown: function () {
                this._showDrillUpChain(true);
            },
            drillVisible: function (v) {
                this.drill.setVisible(v);
            },
            drillUpChainVisible: function (v) {
                this.drill.setVisible(v);
                this.drillUpChain.setVisible(v);
                this.pushButton.setVisible(v);
            }
        },

        mounted: function () {
            var self = this;
            this.drill.element.hover(function () {
                self._doHide = false;
            }, function () {
                self._doHide = true;
                self._debounce2HideDrillCellPane();
            });

            this._doHide = true;
            this._debounce2HideDrillCellPane = BI.debounce(BI.bind(this._hideDrillCellPane, this), 3000);
        },

        render: function () {
            var self = this;

            return {
                type: "bi.horizontal_auto",
                invisible: !this.model.drillVisible,
                ref: function (ref) {
                    self.drill = ref;
                },
                items: [{
                    el: {
                        type: "bi.left",
                        invisible: true,
                        width: 190,
                        cls: "drill-wrapper bi-card",
                        ref: function (ref) {
                            self.drillDownWrapper = ref;
                        },
                        items: [{
                            type: "bi.button_group",
                            width: 190,
                            ref: function (ref) {
                                self.drillDown = ref;
                            },
                            items: this.model.items,
                            layouts: [{
                                type: "bi.left",
                                lgap: 5,
                                bgap: 5
                            }]
                        }],
                        tgap: 5
                    }
                }, {
                    el: {
                        type: "bi.center_adapt",
                        invisible: true,
                        items: [{
                            type: "bi.chart_drill_chain",
                            cls: "drill-wrapper"
                        }],
                        ref: function (ref) {
                            self.drillUpChain = ref;
                        }
                    }
                }, {
                    el: {
                        type: "bi.drill_push_button",
                        invisible: !this.model.drillUpChainVisible,
                        cls: "bi-drill-push-button",
                        ref: function (ref) {
                            self.pushButton = ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                var downVisible = self.drillDownWrapper.isVisible();
                                var upChainVisible = self.drillUpChain.isVisible();
                                if (downVisible) {
                                    self._showDrillDown(false);
                                }
                                if (upChainVisible) {
                                    self._showDrillUpChain(false);
                                }
                                if (!downVisible && !upChainVisible && self.model.drillUpChainVisible) {
                                    self._showDrillUpChain(true);
                                }
                            }
                        }]
                    },
                    tgap: -0.5
                }]
            };
        },

        _showDrillDown: function (v) {
            this.drillDownWrapper.setVisible(v);
            this.drillUpChain.setVisible(false);
            this.pushButton.setVisible(false);
        },

        _showDrillUpChain: function (v) {
            this.drillDownWrapper.setVisible(false);
            this.drillUpChain.setVisible(v);
            v ? this.pushButton.setPushUp() : this.pushButton.setPushDown();
        },

        _hideDrillCellPane: function () {
            if (this._doHide && BI.Utils.isWidgetExistById(this.options.wId)) {
                if (this.model.drillUpChainVisible) {
                    this._onClickPush(true);
                } else {
                    this._onClickPush(false);
                }
            }
        },

        _onClickPush: function (isVisible) {
            this.drillDownWrapper.setVisible(false);
            this.drillUpChain.setVisible(false);
            this.pushButton.setVisible(isVisible);
            isVisible && this.pushButton.setPushDown();
        },

        _showDrill: function () {
            this.setVisible(true);
            this._showDrillDown(true);
            this._doHide = true;
            this._debounce2HideDrillCellPane();
        },

        _createItems: function (drillItems) {
            var self = this, items = [];
            BI.each(drillItems, function (i, item) {
                if (BI.Utils.isDrillDimensionById(item.dId)) {
                    items.push({
                        type: "bi.chart_drill_cell",
                        dId: item.dId,
                        drillValue: item.drillValue
                    });
                }
            });

            return items;
        },

        destroyed: function () {
            this._broadcast && this._broadcast();
            this._broadcast = null;
            this._debounce2HideDrillCellPane = null;
        }
    });

    WidgetDrill.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.design.widget.table_chart_drill", WidgetDrill);
})();
!(function () {
    var WidgetDrill = BI.inherit(Fix.Model, {

        state: function () {
            return {
                hideDrillDown: true
            };
        },

        context: ["widget", "drillControl"],
        childContext: ["hideDrillDown"],

        computed: {
            drillTrigger: function () {
                return this.model.drillControl.trigger;
            },
            wId: function () {
                return this.model.widget.wId;
            },
            dimensions: function () {
                return this.model.widget.dimensions;
            },
            drillItems: function () {
                var value = this.model.drillControl.value;

                if (BI.size(value) === 0) {
                    return [];
                }
                var items = [];
                var resItems = [];
                BI.each(value, function (idx, it) {
                    if (!BI.Utils.isGeometricDimension(it.dId) && BI.Utils.isDrillDimensionById(it.dId) && !it.hide) {
                        var hasSame = BI.some(resItems, function (i, item) {
                            var isSameField = BI.Utils.getFieldIdBydId(item.dId) === BI.Utils.getFieldIdBydId(it.dId);
                            var hasSameGroupType = BI.Utils.getDimensionGroupTypeById(item.dId) === BI.Utils.getDimensionGroupTypeById(it.dId);
                            if (isSameField && hasSameGroupType) {
                                return true;
                            }
                        });
                        !hasSame && resItems.push(it);
                    }

                });
                BI.each(resItems, function (i, item) {
                    var value = item.value, dId = item.dId;
                    if (dId && BI.Utils.isDrillDimensionById(dId)) {
                        items.push({
                            dId: dId,
                            // 使用原始的index
                            drillValue: value
                        });
                    }
                });
                return items;
            },
            type: function () {
                return this.model.widget.type;
            },
            drillDownVisible: function () {
                return this.model.drillItems.length > 0;
            },
            drillUpChainVisible: function () {
                return this.model.widget.drillOrder.length > 0;
            },
            drillVisible: function () {
                return this.model.drillDownVisible || this.model.drillUpChainVisible;
            }
        }

    });
    BI.model("bi.model.design.widget.table_chart_drill", WidgetDrill);
})();!(function () {
    var Service = BI.inherit(BI.OB, {
        setGeoDrill: function (drillDId, drillSequence) {
            BI.each(BI.Utils.getAllDimensionIDs(BI.Utils.getWidgetIdBydId(drillDId)), function (i, id) {
                var fromSameField = !BI.Utils.isTargetById(id) && (BI.isEqual(BI.Utils.getFieldIdBydId(drillDId), BI.Utils.getFieldIdBydId(id)));
                if (fromSameField && (BI.Utils.isLongitudeDimension(id) || BI.Utils.isLatitudeDimension(id))) {
                    // 地理维度的分组下所有字段的分组都是经纬度分组
                    var drillDir = BI.Utils.getDrillDirByIdOfWidget(BI.Utils.getWidgetIdBydId(id), BI.Utils.getFieldIdBydId(id));
                    var drillFields = {};
                    BI.each(drillDir, function (i, field) {
                        drillFields[field.id] = {
                            group: {
                                type: BI.Utils.getDimensionGroupTypeById(id)
                            }
                        };
                    });
                    var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                    service.mountAttribute(id, "drillSequence", drillSequence);
                    service.mountAttribute(id, "drillFields", drillFields);
                }
            });
        }
    });
    BI.service("bi.service.design.widget.table_chart.chart_drill", Service);
})();
!(function () {
    var ControlTitle = BI.inherit(BI.Widget, {

        _store: function () {
            return BI.Models.getModel("bi.model.control_title", {
                wId: this.options.wId
            });
        },

        beforeInit: function (callback) {
            this.store.getWidgetName(callback);
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.shelter_editor",
                value: this.model.title,
                title: function () {
                    return self.model.title;
                },
                textAlign: "left",
                height: 25,
                allowBlank: false,
                ref: function (_ref) {
                    self.title = _ref;
                },
                errorText: function (v) {
                    return BI.isEmptyString(v) ? BI.i18nText("BI-Design_Filter_Control_Name_Can_Not_Empty")
                        : BI.i18nText("BI-Design_Control_Widget_Name_Can_Not_Repeat");
                },
                validationChecker: function (v) {
                    return BI.Utils.checkWidgetNameByID(v, o.wId);
                },
                listeners: [{
                    eventName: BI.ShelterEditor.EVENT_CONFIRM,
                    action: function () {
                        self.fireEvent(ControlTitle.EVENT_CONFIRM);
                    }
                }]
            };
        },

        setValue: function (v) {
            this.title.setValue(v);
        },

        getValue: function () {
            return this.title.getValue();
        },

        focus: function () {
            this.title.focus();
        }
    });

    ControlTitle.EVENT_CONFIRM = "EVENT_CONFIRM";
    BI.shortcut("bi.component.control.title", ControlTitle);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                title: ""
            };
        },

        context: ["name"],

        watch: {
            name: function () {
                this.getWidgetName();
            }
        },

        actions: {
            getWidgetName: function (callback) {
                var self = this;
                BI.Utils.getWidgetNameById(this.options.wId, function (names) {
                    self.model.title = names[self.options.wId];
                    callback && callback();
                });
            }
        }
    });
    BI.model("bi.model.control_title", Model);
})();/**
 * @author: Teller
 * @createdAt: 2018/2/27 上午10:19
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;
            var yearMap = {}, monthMap = {};

            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.dynamic_date_combo",
                        ref: function (_ref) {
                            self.combo = _ref;
                        },
                        behaviors: {
                            highlight: function (val) {
                                return yearMap[val] === true || monthMap[val] === true;
                            }
                        },
                        value: self.model.value,
                        listeners: [{
                            eventName: BI.DynamicDateCombo.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }, {
                            eventName: BI.DynamicDateCombo.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                BI.Utils.getWidgetDataByWidgetInfo(BI.extend(self.model.widgetConfig, {
                                    type: BICst.DESIGN.WIDGET.MONTH
                                }), function (data) {
                                    if (BI.isNotEmptyArray(data.year)) {
                                        yearMap = BI.makeObject(data.year, true);
                                    }
                                    if (BI.isNotEmptyArray(data.month)) {
                                        monthMap = BI.makeObject(data.month, true);
                                    }
                                    if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                                        self.combo.doBehavior();
                                    }
                                });
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {

        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.date_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 下午5:20
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-time-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;
            var yearMap = {}, monthMap = {};

            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.dynamic_date_time_combo",
                        ref: function (_ref) {
                            self.combo = _ref;
                        },
                        behaviors: {
                            highlight: function (val) {
                                return yearMap[val] === true || monthMap[val] === true;
                            }
                        },
                        value: self.model.value,
                        listeners: [{
                            eventName: BI.DynamicDateTimeCombo.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }, {
                            eventName: BI.DynamicDateTimeCombo.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                BI.Utils.getWidgetDataByWidgetInfo(BI.extend(self.model.widgetConfig, {
                                    type: BICst.DESIGN.WIDGET.MONTH
                                }), function (data) {
                                    if (BI.isNotEmptyArray(data.year)) {
                                        yearMap = BI.makeObject(data.year, true);
                                    }
                                    if (BI.isNotEmptyArray(data.month)) {
                                        monthMap = BI.makeObject(data.month, true);
                                    }
                                    if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                                        self.combo.doBehavior();
                                    }
                                });
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.date_time_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/26 下午5:23
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-interval-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            dimensions: function () {
                this._setYearMonthMap();
            }
        },

        mounted: function () {
            this._setYearMonthMap();
        },

        render: function () {
            var self = this;

            this.yearMap = {};
            this.monthMap = {};

            return {
                type: "bi.date_interval",
                ref: function (_ref) {
                    self.combo = _ref;
                },
                behaviors: {
                    highlight: function (val) {
                        return self.yearMap[val] === true || self.monthMap[val] === true;
                    }
                },
                value: self.model.value,
                listeners: [{
                    eventName: BI.DateInterval.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        },

        _setYearMonthMap: function () {
            var self = this;

            if (BI.size(this.model.dimensions) <= 0) return;

            BI.Utils.getWidgetDataByWidgetInfo(BI.extend(this.model.widgetConfig, {
                type: BICst.DESIGN.WIDGET.MONTH
            }), function (data) {
                if (BI.isNotEmptyArray(data.year)) {
                    self.yearMap = BI.makeObject(data.year, true);
                }
                if (BI.isNotEmptyArray(data.month)) {
                    self.monthMap = BI.makeObject(data.month, true);
                }
                if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                    self.combo.doBehavior();
                }
            });
        }
    });
    BI.shortcut("bi.date_interval_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 下午6:59
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-interval-time-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            dimensions: function () {
                this._setYearMonthMap();
            }
        },

        mounted: function () {
            this._setYearMonthMap();
        },

        render: function () {
            var self = this;

            this.yearMap = {};
            this.monthMap = {};

            return {
                type: "bi.time_interval",
                value: self.model.value,
                ref: function (_ref) {
                    self.combo = _ref;
                },
                behaviors: {
                    highlight: function (val) {
                        return self.yearMap[val] === true || self.monthMap[val] === true;
                    }
                },
                listeners: [{
                    eventName: BI.TimeInterval.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        },

        _setYearMonthMap: function () {
            var self = this;

            if (BI.size(this.model.dimensions) <= 0) return;

            BI.Utils.getWidgetDataByWidgetInfo(BI.extend(this.model.widgetConfig, {
                type: BICst.DESIGN.WIDGET.MONTH
            }), function (data) {
                if (BI.isNotEmptyArray(data.year)) {
                    self.yearMap = BI.makeObject(data.year, true);
                }
                if (BI.isNotEmptyArray(data.month)) {
                    self.monthMap = BI.makeObject(data.month, true);
                }
                if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                    self.combo.doBehavior();
                }
            });
        }
    });
    BI.shortcut("bi.date_interval_time_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/27 上午9:36
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-pane-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            dimensions: function () {
                this._setYearMonthMap();
            }
        },

        mounted: function () {
            this.setValue(this.model.value);

            this._setYearMonthMap();
        },

        render: function () {
            var self = this;

            this.yearMap = {};
            this.monthMap = {};

            return {
                type: "bi.absolute",
                scrollable: true,
                items: [{
                    el: {
                        type: "bi.vtape",
                        cls: "pane-wrapper bi-border",
                        items: [{
                            type: "bi.dynamic_date_pane",
                            ref: function (_ref) {
                                self.combo = _ref;
                            },
                            behaviors: {
                                highlight: function (val) {
                                    return self.yearMap[val] === true || self.monthMap[val] === true;
                                }
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function () {
                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                }
                            }]
                        }]
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        },

        _setYearMonthMap: function () {
            var self = this;

            if (BI.size(this.model.dimensions) <= 0) return;

            BI.Utils.getWidgetDataByWidgetInfo(BI.extend(this.model.widgetConfig, {
                type: BICst.DESIGN.WIDGET.MONTH
            }), function (data) {
                if (BI.isNotEmptyArray(data.year)) {
                    self.yearMap = BI.makeObject(data.year, true);
                }
                if (BI.isNotEmptyArray(data.month)) {
                    self.monthMap = BI.makeObject(data.month, true);
                }
                if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                    self.combo.doBehavior();
                }
            });
        }
    });
    BI.shortcut("bi.date_pane_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 下午7:03
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-pane-time-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        mounted: function () {
            this.setValue(this.model.value);

            this._setYearMonthMap();
        },

        watch: {
            dimensions: function () {
                this._setYearMonthMap();
            }
        },

        render: function () {
            var self = this;

            this.yearMap = {};
            this.monthMap = {};

            return {
                type: "bi.absolute",
                scrolly: true,
                items: [{
                    el: {
                        type: "bi.vtape",
                        cls: "pane-wrapper bi-border",
                        items: [{
                            type: "bi.dynamic_date_time_pane",
                            ref: function (_ref) {
                                self.combo = _ref;
                            },
                            behaviors: {
                                highlight: function (val) {
                                    return self.yearMap[val] === true || self.monthMap[val] === true;
                                }
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function () {
                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                }
                            }]
                        }]
                    },
                    top: 10,
                    left: 10,
                    right: 10,
                    bottom: 10
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        },

        _setYearMonthMap: function () {
            var self = this;

            if (BI.size(this.model.dimensions) <= 0) return;

            BI.Utils.getWidgetDataByWidgetInfo(BI.extend(this.model.widgetConfig, {
                type: BICst.DESIGN.WIDGET.MONTH
            }), function (data) {
                if (BI.isNotEmptyArray(data.year)) {
                    self.yearMap = BI.makeObject(data.year, true);
                }
                if (BI.isNotEmptyArray(data.month)) {
                    self.monthMap = BI.makeObject(data.month, true);
                }
                if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                    self.combo.doBehavior();
                }
            });
        }
    });
    BI.shortcut("bi.date_pane_time_control", Widget);
})();
!(function () {
    var Filter = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-detail-target-filter-popover-center"
        },

        _store: function () {
            var o = this.options;
            return BI.Models.getModel("bi.model.detail.target.filter.popover.center", {
                fieldId: o.fieldId,
                wId: o.wId
            });
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.filter",
                        items: this.model.conditions,
                        itemCreator: function (item) {
                            item.type = BI.Services.getService("bi.service.design.detail.target.filter").createFilterItemByFilterType(item.value).type;
                            item.wId = o.wId;
                            item.afterValueChange = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                            item.onDelete = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                        },
                        expander: {
                            type: "bi.and.or.filter.expander"
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.store.setFilter(this.getValue()[0]);
                            }
                        }],
                        ref: function (_ref) {
                            self.filter = _ref;
                        }
                    },
                    top: -10,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        },

        getValue: function () {
            return this.store.getFilterValue();
        }
    });
    BI.shortcut("bi.design.detail.target.filter.popover.center", Filter);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            var o = this.options;
            return {
                value: BI.Utils.getFieldFilterByIdOfWidget(o.wId, o.fieldId)
            };
        },

        computed: {
            conditions: function () {
                var filter = Fix.toJSON(this.model.value);
                return this._transformConditions2Tree(BI.isNotEmptyObject(filter) ? [filter] : []);
            }
        },

        actions: {
            setFilter: function (v) {
                this.model.value = v;
            },

            getFilterValue: function () {
                return this.model.value;
            }
        },

        _transformConditions2Tree: function (conditions) {
            var self = this;
            BI.each(conditions, function (i, condition) {
                condition.id || (condition.id = BI.UUID());
                condition.value = condition.filterType;
                if (condition.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || condition.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
                    condition.children = condition.filterValue;
                    self._transformConditions2Tree(condition.children);
                }
            });
            return conditions;
        }
    });
    BI.model("bi.model.detail.target.filter.popover.center", Model);
}());!(function () {
    var Service = BI.inherit(BI.OB, {

        createFilterItemByFieldType: function (fieldType) {
            var filterType, type;
            switch (fieldType) {
                case BICst.COLUMN.STRING:
                    filterType = BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE;
                    type = "bi.design.detail.target.filter.string";
                    break;
                case BICst.COLUMN.NUMBER:
                    filterType = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                    type = "bi.design.detail.target.filter.number";
                    break;
                case BICst.COLUMN.DATE:
                    filterType = BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE;
                    type = "bi.design.detail.target.filter.date";
                    break;
                default :
                    type = "bi.design.detail.target.filter.no.type";
                    break;
            }
            return {
                type: type,
                filterType: filterType
            };
        },

        createFilterItemByFilterType: function (filterType) {
            var type = "";
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                    type = "bi.design.detail.target.filter.string";
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                    type = "bi.design.detail.target.filter.number";
                    break;
                case BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN:
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                    type = "bi.design.detail.target.filter.date";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.AND:
                case BICst.ANALYSIS_FILTER_TYPE.OR:
                    type = "bi.and.or.filter.expander";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.FORMULA:
                    type = "bi.design.detail.target.filter.formula";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA:
                    type = "bi.design.detail.target.filter.empty.formula";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION:
                    type = "bi.design.detail.target.filter.no.type";
                    break;
                default :
                    type = "bi.design.detail.target.filter.no.type";
                    break;
            }
            return {
                type: type
            };
        }

    });
    BI.service("bi.service.design.detail.target.filter", Service);
})();BI.constant("bi.constant.design.detail_target_date_item", [[{
    el: {
        text: BI.i18nText("BI-Basic_Date_In"),
        value: BI.i18nText("BI-Basic_Date_In"),
        iconCls1: "dot-e-font"
    },
    children: [{
        text: BI.i18nText("BI-Design_Period_Time"),
        value: BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Design_Filter_Control_Value"),
        value: BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE,
        cls: "dot-e-font"
    }]
}, {
    el: {
        text: BI.i18nText("BI-Basic_Not_Date_In"),
        value: BI.i18nText("BI-Basic_Not_Date_In"),
        iconCls1: "dot-e-font"
    },
    children: [{
        text: BI.i18nText("BI-Design_Period_Time"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Design_Filter_Control_Value"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE,
        cls: "dot-e-font"
    }]
}], [{
    el: {
        text: BI.i18nText("BI-Basic_Someone") + BI.i18nText("BI-Basic_Date") + BI.i18nText("BI-Basic_Sooner_Than"),
        value: BICst.ANALYSIS_FILTER_DATE.LESS_THAN,
        iconCls1: "dot-e-font"
    },
    children: [{
        text: BI.i18nText("BI-Basic_Time"),
        value: BICst.ANALYSIS_FILTER_DATE.LESS_THAN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Design_Filter_Control_Value"),
        value: BICst.ANALYSIS_FILTER_DATE.LESS_THAN_DATE_WIDGET_VALUE,
        cls: "dot-e-font"
    }]
}, {
    el: {
        text: BI.i18nText("BI-Basic_Someone") + BI.i18nText("BI-Basic_Date") + BI.i18nText("BI-Basic_Later_Than"),
        value: BICst.ANALYSIS_FILTER_DATE.MORE_THAN,
        iconCls1: "dot-e-font"
    },
    children: [{
        text: BI.i18nText("BI-Basic_Time"),
        value: BICst.ANALYSIS_FILTER_DATE.MORE_THAN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Design_Filter_Control_Value"),
        value: BICst.ANALYSIS_FILTER_DATE.MORE_THAN_DATE_WIDGET_VALUE,
        cls: "dot-e-font"
    }]
}], [{
    text: BI.i18nText("BI-Basic_Equal"),
    value: BICst.ANALYSIS_FILTER_DATE.EQUAL_TO,
    cls: "dot-e-font"
}, {
    text: BI.i18nText("BI-Basic_Not_Equal_To"),
    value: BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO,
    cls: "dot-e-font"
}], [{
    text: BI.i18nText("BI-Basic_Is_Null"),
    value: BICst.ANALYSIS_FILTER_DATE.IS_NULL,
    cls: "dot-e-font"
}, {
    text: BI.i18nText("BI-Basic_Not_Null"),
    value: BICst.ANALYSIS_FILTER_DATE.NOT_NULL,
    cls: "dot-e-font"
}]]);!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 230,
            TIME_INTERVAL_HEIGHT: 24
        },

        props: {
            baseCls: "bi-detail-target-date-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.date.filter", {
                fieldId: this.options.fieldId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.showFilterValue);
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                disabled: !this.model.filterValid,
                                tipType: this.model.filterValid ? "success" : "warning",
                                warningTitle: function () {
                                    return self.model.warningTitle;
                                },
                                text: this.model.filterName,
                                title: this.model.filterName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                disabled: !this.model.filterValid,
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.detail_target_date_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: this.model.filterName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                disabled: !this.model.filterValid,
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, filterValue) {
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_VALUE:
                    this._createTimeRange(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE:
                    this._createWidgetTab([BICst.DESIGN.WIDGET.DATE, BICst.DESIGN.WIDGET.YEAR, BICst.DESIGN.WIDGET.QUARTER, BICst.DESIGN.WIDGET.MONTH, BICst.DESIGN.WIDGET.DATE_INTERVAL, BICst.DESIGN.WIDGET.DATE_PANE, BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL], filterValue, false);
                    break;
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO_DATE_WIDGET_VALUE:
                    this._createWidgetTab([BICst.DESIGN.WIDGET.DATE, BICst.DESIGN.WIDGET.YEAR, BICst.DESIGN.WIDGET.QUARTER, BICst.DESIGN.WIDGET.MONTH, BICst.DESIGN.WIDGET.DATE_INTERVAL, BICst.DESIGN.WIDGET.DATE_PANE, BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL], filterValue, true);
                    break;
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN:
                    this._createDate(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO:
                    this._createDate(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                default:
                    this.filterWidget = BI.createWidget();
            }
        },

        _createDateN: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createTimeRange: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.date_range",
                width: this._constant.INPUT_WIDTH,
                height: this._constant.TIME_INTERVAL_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });

            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createDate: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.dynamic_date_combo",
                width: this._constant.INPUT_WIDTH,
                height: this._constant.TIME_INTERVAL_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createWidgetTab: function (opt, value, pointOrInterval) {
            var self = this, o = this.options;
            this.filterWidget = BI.createWidget({
                type: "bi.target_date_tab",
                dateWidgetType: opt,
                showPosition: pointOrInterval,
                value: value
            });
            this.filterWidget.on(BI.Tab.EVENT_CHANGE, function () {
                self.store.setFilterValue(this.getValue());
            });
            this.filterWidget.on("EVENT_SHOW_CARD_VALUE_CHANGE", function () {
                self.store.setFilterValue(this.getValue());
            });
        },


        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.filterType.setValue(context.filterType);
            this._refreshFilterWidget(context.filterType, context.filterValue);
        },

        getValue: function () {
            return {
                fieldId: this.options.fieldId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });

    BI.shortcut("bi.design.detail.target.filter.date", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {
            filterState: function () {
                if (BI.Utils.isNoAuthField(this.options.fieldId)) {
                    return BICst.FIELD_STATE.NO_AUTH;
                }
                return BI.isEmpty(BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId)) ? BICst.FIELD_STATE.FIELD_MISS : BICst.FIELD_STATE.NORMAL;
            },
            filterValid: function () {
                return this.model.filterState === BICst.FIELD_STATE.NORMAL;
            },
            filterName: function () {
                return BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId) || BI.Utils.getOriginFieldNameById(this.options.fieldId);
            },
            showFilterValue: function () {
                return this.model.filterValid ? this.model.filterValue : BI.Utils.getDefaultFilterValue(this.options.filterType);
            },
            warningTitle: function () {
                var text = "";
                switch (this.model.filterState) {
                    case BICst.FIELD_STATE.FIELD_MISS:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                        break;
                    case BICst.FIELD_STATE.NO_AUTH:
                        text = BI.i18nText("BI-Basic_Field_No_Auth");
                        break;
                    default:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                }
                return text;
            }
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.detail.target.date.filter", Model);
})();!(function () {
    var DateParamCombo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-param-combo",
            width: 130,
            height: 30
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                adjustLength: 2,
                el: {
                    type: "bi.text_trigger",
                    cls: "param-trigger bi-border",
                    height: o.height - 2,
                    ref: function () {
                        self.trigger = this;
                    }
                },
                container: null,
                isDefaultInit: true,
                popup: {
                    type: "bi.date_param_popup_view",
                    showPosition: o.showPosition,
                    widgetType: o.widgetType,
                    maxHeight: 300,
                    ref: function () {
                        self.popup = this;
                    },
                    listeners: [{
                        eventName: "EVENT_CONFIRM",
                        action: function () {
                            self.combo.hideView();
                        }
                    }]
                },
                ref: function () {
                    self.combo = this;
                },
                listeners: [{
                    eventName: "EVENT_AFTER_HIDEVIEW",
                    action: function () {
                        self.setValue(self.getValue());
                        self.fireEvent("EVENT_CONFIRM");
                    }
                }]
            };
        },

        _getShowTextByValue: function (obj) {
            var o = this.options;
            var value = "";
            var endText = "";
            if(BI.isNotNull(obj.year)) {
                if(obj.year != 0) {
                    value += Math.abs(obj.year) + BI.i18nText("BI-Basic_Year") + (obj.year < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
                }
                endText = BI.i18nText("BI-Basic_Year");
            }
            if(BI.isNotNull(obj.quarter)) {
                if(obj.quarter != 0) {
                    value += Math.abs(obj.quarter) + BI.i18nText("BI-Basic_Quarter") + (obj.quarter < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
                }
                endText = BI.i18nText("BI-Basic_Quarter");
            }
            if(BI.isNotNull(obj.month)) {
                if(obj.month != 0) {
                    value += Math.abs(obj.month) + BI.i18nText("BI-Basic_Month") + (obj.month < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
                }
                endText = BI.i18nText("BI-Basic_Month");
            }
            if(BI.isNotNull(obj.week)) {
                if(obj.week != 0) {
                    value += Math.abs(obj.week) + BI.i18nText("BI-Basic_Week") + (obj.week < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
                }
                endText = BI.i18nText("BI-Basic_Week");
            }
            if(BI.isNotNull(obj.day)) {
                if(obj.day != 0) {
                    value += Math.abs(obj.day) + BI.i18nText("BI-Basic_Day") + (obj.day < 0 ? BI.i18nText("BI-Basic_Front") : BI.i18nText("BI-Basic_Behind"));
                }
                endText = BI.i18nText("BI-Basic_Day");
            }
            value += o.showPosition ? getPositionText(endText, obj.position) : _getItemEndText(obj.dateType);
            return value;

            function getPositionText (baseText, position) {
                switch (position) {
                    case BI.DynamicDateCard.OFFSET.BEGIN:
                        return baseText + BI.i18nText("BI-Basic_Begin_Start");
                    case BI.DynamicDateCard.OFFSET.END:
                        return baseText + BI.i18nText("BI-Basic_End_Stop");
                    case BI.DynamicDateCard.OFFSET.CURRENT:
                    default:
                        return BI.i18nText("BI-Basic_Current_Day");
                }
            }

            function _getItemEndText (value) {
                var text = BI.i18nText("BI-Basic_Full_Day");
                if(o.widgetType === BICst.DESIGN.WIDGET.DATE_INTERVAL || o.widgetType === BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL) {
                    return BI.i18nText("BI-Basic_Same_Period");
                }
                if(BI.isNotNull(obj.year)) {
                    text = BI.i18nText("BI-Basic_Full_Year");
                }
                if(BI.isNotNull(obj.quarter)) {
                    text = BI.i18nText("BI-Basic_Full_Quarter");
                }
                if(BI.isNotNull(obj.month)) {
                    text = BI.i18nText("BI-Basic_Full_Month");
                }
                if(BI.isNotNull(obj.week)) {
                    text = BI.i18nText("BI-Basic_Full_Week");
                }
                if(BI.isNotNull(obj.day)) {
                    text = BI.i18nText("BI-Basic_Full_Day");
                }
                return text;
            }
        },

        setValue: function (v) {
            this.combo.setValue(v);
            this.trigger.setText(this._getShowTextByValue(v));
        },

        getValue: function () {
            return this.combo.getValue();
        }
    });
    BI.shortcut("bi.date_param_combo", DateParamCombo);
})();
!(function () {
    var YearParamCombo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-year-param-combo",
            width: 130,
            height: 30
        },

        render: function () {
            var self = this, o = this.options;

            var items = [{
                type: "bi.year_param_item",
                showPosition: o.showPosition,
                ref: function () {
                    self.paramItem = this;
                }
            }];

            o.showPosition && items.push({
                el: {
                    type: "bi.text_value_combo",
                    ref: function () {
                        self.positionCombo = this;
                    },
                    height: 24,
                    container: null,
                    items: [{
                        text: BI.i18nText("BI-Basic_Year_Begin"),
                        value: BI.ParamDateCard.OFFSET.BEGIN
                    }, {
                        text: BI.i18nText("BI-Basic_Year_End"),
                        value: BI.ParamDateCard.OFFSET.END
                    }],
                    value: BI.ParamDateCard.OFFSET.BEGIN,
                    width: 168
                },
                lgap: 5
            });

            return {
                type: "bi.combo",
                adjustLength: 2,
                el: {
                    type: "bi.text_trigger",
                    cls: "param-trigger bi-border",
                    height: o.height - 2,
                    ref: function () {
                        self.trigger = this;
                    }
                },
                container: null,
                isDefaultInit: true,
                popup: {
                    type: "bi.multi_popup_view",
                    el: {
                        type: "bi.vertical",
                        items: items,
                        vgap: 10
                    },
                    minWidth: 310,
                    maxHeight: 300,
                    stopPropagation: false,
                    listeners: [{
                        eventName: "EVENT_CLICK_TOOLBAR_BUTTON",
                        action: function () {
                            self.combo.hideView();
                        }
                    }]
                },
                ref: function () {
                    self.combo = this;
                },
                listeners: [{
                    eventName: "EVENT_AFTER_HIDEVIEW",
                    action: function () {
                        self.setValue(self.getValue());
                        self.fireEvent("EVENT_CONFIRM");
                    }
                }, {
                    eventName: "EVENT_BEFORE_POPUPVIEW",
                    action: function () {
                        var value = self.getValue();
                        self.paramItem.setValue(value);
                        self.positionCombo && self.positionCombo.setValue(value.position);
                    }
                }]
            };
        },

        _getShowTextByValue: function (v) {
            v = v || {};
            var prefix = "";
            var endText = BI.i18nText("BI-Basic_Full_Year");
            if(this.options.showPosition) {
                endText = (v.position === BI.ParamDateCard.OFFSET.END ? BI.i18nText("BI-Basic_Year_End") : BI.i18nText("BI-Basic_Year_Begin"));
            }
            if(BI.isNotNull(v.year) && v.year != 0) {
                prefix = Math.abs(v.year) + BI.i18nText("BI-Basic_Year") +
                    (v.year < 0 ? BI.i18nText("BI-Design_Front") : BI.i18nText("BI-Design_Behind")) +
                    BI.i18nText("BI-Design_Help_Word");
            }
            return prefix + endText;
        },

        setValue: function (v) {
            v = v || {};
            v.year = v.year || 0;
            v.position = v.position || BI.ParamDateCard.OFFSET.BEGIN;
            this.paramItem.setValue(v);
            this.positionCombo && this.positionCombo.setValue(v.position);
            this.trigger.setText(this._getShowTextByValue(v));
        },

        getValue: function () {
            var obj = this.paramItem.getValue();
            if(this.options.showPosition) {
                obj.position = this.positionCombo.getValue()[0];
            }
            return obj;
        }

    });
    BI.shortcut("bi.year_param_combo", YearParamCombo);
})();
!(function () {

    var constants = {
        LABEL_WIDTH: 20
    };

    var DateParamItem = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-param-item",
            dateType: 0,
            value: 0,
            offset: 0,
            height: 24,
            endText: ""
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.left",
                items: [{
                    type: "bi.sign_editor",
                    cls: "bi-border",
                    height: 22,
                    validationChecker: function (v) {
                        return BI.isNaturalNumber(v);
                    },
                    errorText: BI.i18nText("BI-Conf_Please_Input_Natural_Number"),
                    value: o.value,
                    ref: function () {
                        self.editor = this;
                    },
                    listeners: [{
                        eventName: BI.SignEditor.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }],
                    width: 60
                }, {
                    type: "bi.label",
                    height: 24,
                    text: this._getText(),
                    width: constants.LABEL_WIDTH
                }, {
                    type: "bi.text_value_combo",
                    container: null,
                    height: 24,
                    items: [{
                        text: BI.i18nText("BI-Basic_Front"),
                        value: 0
                    }, {
                        text: BI.i18nText("BI-Basic_Behind"),
                        value: 1
                    }],
                    ref: function () {
                        self.offsetCombo = this;
                    },
                    value: o.offset,
                    listeners: [{
                        eventName: BI.TextValueCombo.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }],
                    width: 60
                }, {
                    el: {
                        type: "bi.label",
                        text: o.endText,
                        height: 24
                    },
                    lgap: 5
                }]
            };
        },

        _getText: function () {
            var text = "";
            switch (this.options.dateType) {
                case BI.DynamicDateCard.TYPE.YEAR:
                    text = BI.i18nText("BI-Basic_Year");
                    break;
                case BI.DynamicDateCard.TYPE.QUARTER:
                    text = BI.i18nText("BI-Basic_Single_Quarter");
                    break;
                case BI.DynamicDateCard.TYPE.MONTH:
                    text = BI.i18nText("BI-Basic_Month");
                    break;
                case BI.DynamicDateCard.TYPE.WEEK:
                    text = BI.i18nText("BI-Basic_Week");
                    break;
                case BI.DynamicDateCard.TYPE.DAY:
                default:
                    text = BI.i18nText("BI-Basic_Day");
                    break;
            }
            return text;
        },

        setValue: function (v) {
            v = v || {};
            v.value = v.value || 0;
            v.offset = v.offset || 0;
            this.editor.setValue(v.value);
            this.offsetCombo.setValue(v.offset);
        },

        getValue: function () {
            return {
                dateType: this.options.dateType,
                value: this.editor.getValue(),
                offset: this.offsetCombo.getValue()[0]
            };
        }

    });
    BI.shortcut("bi.date_param_item", DateParamItem);
})();
!(function () {

    var constants = {
        itemHeight: 24,
        itemWidth: 20,
        textWidth: 40,
        comboWidth: 45
    };

    var YearParamItem = BI.inherit(BI.Single, {

        props: {
            baseCls: "bi-year-param-item",
            width: 310,
            height: 24,
            defaultEditorValue: "0",
            showPosition: false
        },

        render: function () {
            var self = this, opts = this.options;
            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.left",
                    items: [{
                        type: "bi.small_text_editor",
                        value: opts.defaultEditorValue,
                        validationChecker: function (v) {
                            return BI.isNaturalNumber(v);
                        },
                        ref: function () {
                            self.firstEditor = this;
                        },
                        errorText: BI.i18nText("BI-Please_Input_Positive_Integer"),
                        width: constants.textWidth,
                        height: constants.itemHeight,
                        listeners: [{
                            eventName: "__EVENT_CHANGE__",
                            action: function () {
                                self.fireEvent("__EVENT_CHANGE__", arguments);
                            }
                        }]
                    }, {
                        type: "bi.label",
                        textAlign: "center",
                        cls: "param-label",
                        text: BI.i18nText("BI-Basic_Year"),
                        width: constants.itemWidth,
                        height: constants.itemHeight
                    }, {
                        type: "bi.small_text_value_combo",
                        container: null,
                        width: constants.comboWidth,
                        height: constants.itemHeight,
                        items: BI.Constants.getConstant("bi.constant.design.date_param_item"),
                        ref: function () {
                            self.firstCombo = this;
                        },
                        value: 0
                    }, {
                        el: {
                            type: "bi.label",
                            textAlign: "center",
                            cls: "param-label",
                            text: BI.i18nText("BI-Design_Help_Word"),
                            height: constants.itemHeight
                        },
                        lgap: 5
                    }, {
                        type: "bi.label",
                        textAlign: "left",
                        cls: "param-label",
                        text: opts.showPosition ? "" : BI.i18nText("BI-Basic_Full_Year"),
                        height: constants.itemHeight
                    }]
                }],
                hgap: 10
            };
        },

        _assertValue: function (v) {
            var o = this.options;
            if(BI.isArray(v)) {
                v = v[0];
            }
            v = v || {};
            v.year = v.year || 0;
            return v;
        },

        setValue: function (v) {
            v = this._assertValue(v);
            this.firstEditor.setValue(Math.abs(v.year));
            this.firstCombo.setValue(v.year > 0 ? 1 : 0);
        },

        getValue: function () {
            var value = this.firstEditor.getValue() || 0;
            return {
                year: this.firstCombo.getValue()[0] === 0 ? -value : value
            };
        }
    });
    BI.shortcut("bi.year_param_item", YearParamItem);
})();BI.ParamDateCard = BI.inherit(BI.Widget, {

    props: {
        baseCls: "bi-param-date-card",
        showPosition: false,
        checkValues: [],
        widgetType: BICst.DESIGN.WIDGET.YEAR
    },

    render: function () {
        var self = this;
        this.position = BI.ParamDateCard.OFFSET.BEGIN;
        return {
            type: "bi.vertical",
            items: [{
                type: "bi.button_group",
                ref: function () {
                    self.checkgroup = this;
                },
                chooseType: BI.ButtonGroup.CHOOSE_TYPE_MULTI,
                value: [BI.ParamDateCard.TYPE.YEAR],
                items: this._getCheckValueItems(),
                layouts: [{
                    type: "bi.left"
                }],
                listeners: [{
                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                    action: function () {
                        var plainValue = {};
                        BI.each(self.resultPane.getAllButtons(), function (idx, button) {
                            var value = button.getValue();
                            if(BI.isNotNull(value.dateType)) {
                                plainValue[value.dateType] = {
                                    value: value.value,
                                    offset: value.offset
                                };
                            }
                        });

                        self.resultPane.populate(self._getParamJson(BI.map(self.checkgroup.getValue(), function (idx, v) {
                            var obj = {
                                dateType: v
                            };
                            if(BI.has(plainValue, v)) {
                                obj.value = plainValue[v].value;
                                obj.offset = plainValue[v].offset;
                            }
                            return obj;
                        })));
                        self.position = BI.ParamDateCard.OFFSET.BEGIN;
                        self.fireEvent("EVENT_CHANGE");
                    }
                }]
            }, {
                type: "bi.button_group",
                items: this._getParamJson([{
                    dateType: BI.ParamDateCard.TYPE.YEAR
                }]),
                ref: function () {
                    self.resultPane = this;
                },
                layouts: [{
                    type: "bi.vertical",
                    bgap: 10,
                    hgap: 10
                }]
            }]
        };
    },

    _getCheckValueGroup: function () {
        var checkValues = [];
        switch (this.options.widgetType) {
            case BICst.DESIGN.WIDGET.QUARTER:
                checkValues = [BI.ParamDateCard.TYPE.YEAR, BI.ParamDateCard.TYPE.QUARTER];
                break;
            case BICst.DESIGN.WIDGET.MONTH:
            case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                checkValues = [BI.ParamDateCard.TYPE.YEAR, BI.ParamDateCard.TYPE.MONTH];
                break;
            case BICst.DESIGN.WIDGET.DATE_INTERVAL:
            case BICst.DESIGN.WIDGET.DATE:
            case BICst.DESIGN.WIDGET.DATE_PANE:
            default:
                checkValues = [BI.ParamDateCard.TYPE.YEAR, BI.ParamDateCard.TYPE.QUARTER,
                    BI.ParamDateCard.TYPE.MONTH, BI.ParamDateCard.TYPE.WEEK, BI.ParamDateCard.TYPE.DAY];
                break;
        }
        return checkValues;
    },

    _getCheckValueItems: function () {
        return BI.map(this._getCheckValueGroup(), function (idx, value) {
            var text;
            switch (value) {
                case BI.ParamDateCard.TYPE.YEAR:
                    text = BI.i18nText("BI-Basic_Year");
                    break;
                case BI.ParamDateCard.TYPE.QUARTER:
                    text = BI.i18nText("BI-Basic_Single_Quarter");
                    break;
                case BI.ParamDateCard.TYPE.MONTH:
                    text = BI.i18nText("BI-Basic_Month");
                    break;
                case BI.ParamDateCard.TYPE.WEEK:
                    text = BI.i18nText("BI-Basic_Week");
                    break;
                case BI.ParamDateCard.TYPE.DAY:
                default:
                    text = BI.i18nText("BI-Basic_Day");
                    break;
            }
            return {
                type: "bi.multi_select_item",
                logic: {
                    dynamic: true
                },
                text: text,
                value: value
            };
        });
    },

    _getParamJson: function (values, positionValue) {
        var self = this, o = this.options;
        var items = BI.map(values, function (idx, value) {
            var item = {
                type: "bi.date_param_item",
                dateType: value.dateType,
                value: value.value,
                offset: value.offset,
                endText: BI.i18nText("BI-Design_Help_Word") + ((o.showPosition === false && idx === values.length - 1) ? self._getItemEndText(value.dateType) : ""),
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE");
                    }
                }]
            };
            if(o.showPosition && value.dateType === BI.ParamDateCard.TYPE.DAY) {
                item.endText = BI.i18nText("BI-Design_Help_Word") + BI.i18nText("BI-Basic_Date");
            }
            return item;
        });

        if(o.showPosition) {
            if(values.length !== 0 && BI.last(values).dateType !== BI.ParamDateCard.TYPE.DAY) {
                items.push({
                    type: "bi.text_value_combo",
                    height: 24,
                    width: 168,
                    items: this._getText(BI.last(values).dateType),
                    value: positionValue || BI.ParamDateCard.OFFSET.BEGIN,
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.position = this.getValue()[0];
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                });

            }
        }

        return items;
    },

    _getItemEndText: function (value) {
        var o = this.options;
        if(o.widgetType === BICst.DESIGN.WIDGET.DATE_INTERVAL || o.widgetType === BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL) {
            return BI.i18nText("BI-Basic_Same_Period");
        }
        switch (value) {
            case BI.ParamDateCard.TYPE.YEAR:
                return BI.i18nText("BI-Basic_Full_Year");
            case BI.ParamDateCard.TYPE.QUARTER:
                return BI.i18nText("BI-Basic_Full_Quarter");
            case BI.ParamDateCard.TYPE.MONTH:
                return BI.i18nText("BI-Basic_Full_Month");
            case BI.ParamDateCard.TYPE.WEEK:
                return BI.i18nText("BI-Basic_Full_Week");
            case BI.ParamDateCard.TYPE.DAY:
            default:
                return BI.i18nText("BI-Basic_Full_Day");
        }
        
    },

    _getText: function (lastValue) {
        switch (lastValue) {
            case BI.ParamDateCard.TYPE.YEAR:
                return [{
                    text: BI.i18nText("BI-Basic_Year_Begin"),
                    value: BI.ParamDateCard.OFFSET.BEGIN
                }, {
                    text: BI.i18nText("BI-Basic_Year_End"),
                    value: BI.ParamDateCard.OFFSET.END
                }];
            case BI.ParamDateCard.TYPE.QUARTER:
                return [{
                    text: BI.i18nText("BI-Basic_Quarter_Begin"),
                    value: BI.ParamDateCard.OFFSET.BEGIN
                }, {
                    text: BI.i18nText("BI-Basic_Quarter_End"),
                    value: BI.ParamDateCard.OFFSET.END
                }];
            case BI.ParamDateCard.TYPE.MONTH:
                return [{
                    text: BI.i18nText("BI-Basic_Month_Begin"),
                    value: BI.ParamDateCard.OFFSET.BEGIN
                }, {
                    text: BI.i18nText("BI-Basic_Month_End"),
                    value: BI.ParamDateCard.OFFSET.END
                }];
            case BI.ParamDateCard.TYPE.WEEK:
            default:
                return [{
                    text: BI.i18nText("BI-Basic_Week_Begin"),
                    value: BI.ParamDateCard.OFFSET.BEGIN
                }, {
                    text: BI.i18nText("BI-Basic_Week_End"),
                    value: BI.ParamDateCard.OFFSET.END
                }];
        }
    },

    _createValue: function (type, v) {
        return {
            dateType: type,
            value: Math.abs(v),
            offset: v > 0 ? 1 : 0
        };
    },

    setValue: function (v) {
        v = v || {};
        var values = [];
        var valuesItems = [];
        this.position = v.position || BI.ParamDateCard.OFFSET.BEGIN;
        if(BI.isNotNull(v.year)) {
            values.push(BI.ParamDateCard.TYPE.YEAR);
            valuesItems.push(this._createValue(BI.ParamDateCard.TYPE.YEAR, v.year));
        }
        if(BI.isNotNull(v.quarter)) {
            values.push(BI.ParamDateCard.TYPE.QUARTER);
            valuesItems.push(this._createValue(BI.ParamDateCard.TYPE.QUARTER, v.quarter));
        }
        if(BI.isNotNull(v.month)) {
            values.push(BI.ParamDateCard.TYPE.MONTH);
            valuesItems.push(this._createValue(BI.ParamDateCard.TYPE.MONTH, v.month));
        }
        if(BI.isNotNull(v.week)) {
            values.push(BI.ParamDateCard.TYPE.WEEK);
            valuesItems.push(this._createValue(BI.ParamDateCard.TYPE.WEEK, v.week));
        }
        if(BI.isNotNull(v.day)) {
            values.push(BI.ParamDateCard.TYPE.DAY);
            valuesItems.push(this._createValue(BI.ParamDateCard.TYPE.DAY, v.day));
        }
        this.checkgroup.setValue(values);
        this.resultPane.populate(this._getParamJson(valuesItems, v.position));
    },

    getValue: function () {
        var self = this;
        var valueMap = {};
        var selectValues = this.checkgroup.getValue();
        var buttons = this.resultPane.getAllButtons();
        if(selectValues.length !== 0) {
            BI.each(buttons, function (idx, button) {
                var value = button.getValue();
                switch (value.dateType) {
                    case BI.ParamDateCard.TYPE.YEAR:
                        valueMap.year = (value.offset === 0 ? -value.value : value.value);
                        break;
                    case BI.ParamDateCard.TYPE.QUARTER:
                        valueMap.quarter = (value.offset === 0 ? -value.value : value.value);
                        break;
                    case BI.ParamDateCard.TYPE.MONTH:
                        valueMap.month = (value.offset === 0 ? -value.value : value.value);
                        break;
                    case BI.ParamDateCard.TYPE.WEEK:
                        valueMap.week = (value.offset === 0 ? -value.value : value.value);
                        break;
                    case BI.ParamDateCard.TYPE.DAY:
                        valueMap.day = (value.offset === 0 ? -value.value : value.value);
                        break;
                    default:
                        break;
                }
                if(BI.isNull(value.dateType)) {
                    valueMap.position = self.position || BI.ParamDateCard.OFFSET.BEGIN;
                }
            });
        }
        return valueMap;
    }

});
BI.shortcut("bi.param_date_card", BI.ParamDateCard);

BI.extend(BI.ParamDateCard, {
    TYPE: {
        YEAR: 1,
        QUARTER: 2,
        MONTH: 3,
        WEEK: 4,
        DAY: 5,
        WORK_DAY: 6
    },
    OFFSET: {
        CURRENT: 1,
        BEGIN: 2,
        END: 3
    }

});!(function () {
    var DateParamPopupView = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-date-param-popup"
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.multi_popup_view",
                el: {
                    type: "bi.param_date_card",
                    widgetType: o.widgetType,
                    showPosition: o.showPosition,
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                },
                minWidth: 310,
                stopPropagation: false,
                listeners: [{
                    eventName: "EVENT_CLICK_TOOLBAR_BUTTON",
                    action: function () {
                        self.fireEvent("EVENT_CONFIRM");
                    }
                }],
                ref: function () {
                    self.popup = this;
                }
            };
        },

        setValue: function (v) {
            this.popup.setValue(v);
        },

        getValue: function () {
            return this.popup.getValue();
        },

        getCalculationValue: function () {
            return this.popup.getCalculationValue();
        },

        resetWidth: function (w) {
            this.popup.resetWidth(w);
        },

        resetHeight: function (h) {
            this.popup.resetHeight(h);
        }
    });
    BI.shortcut("bi.date_param_popup_view", DateParamPopupView);
})();/**
 * @class BI.TargetDateTab
 * @extend BI.Widget
 * combo : text + icon, popup : text
 * 参见场景dashboard布局方式选择
 */
!(function () {
    var constants = {
        defaultShowWidget: 0,
        comboHeight: 30,
        comboWidth: 100,
        start: 1,
        end: 2
    };

    var TargetDateTab = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-target-date-tab",
            dateWidgetType: [],
            showPosition: false
        },

        _store: function () {
            return BI.Models.getModel("bi.model.target_date_tab", {
                dateWidgetType: this.options.dateWidgetType,
                showPosition: this.options.showPosition
            });
        },

        watch: {
            widgetItems: function () {
                this.combo.populate(this.model.widgetItems);
            },
            widgetIds: function () {
                this.store.getWidgetNames();
            }
        },

        beforeInit: function (callback) {
            this.store.getWidgetNames(callback);
        },

        render: function () {
            var self = this, o = this.options;

            var widgetItems = this.model.widgetItems;
            return {
                type: "bi.left",
                items: [{
                    type: "bi.text_value_combo",
                    width: constants.comboWidth,
                    height: constants.comboHeight,
                    container: null,
                    items: widgetItems,
                    value: this.model.defaultValue,
                    ref: function () {
                        self.combo = this;
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.tab.setSelect(this.getValue()[0]);
                        }
                    }]
                }, {
                    type: "bi.label",
                    text: BI.i18nText("BI-Design_Help_Word"),
                    textAlign: "center",
                    height: 30,
                    lgap: 5,
                    rgap: 5
                }, {
                    type: "bi.tab",
                    width: constants.comboWidth,
                    height: constants.comboHeight,
                    direction: "custom",
                    cardCreator: BI.bind(this._cardCreator, this),
                    ref: function () {
                        self.tab = this;
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                }]
            };
        },

        mounted: function () {
            var o = this.options;
            if(BI.isNull(o.value) || BI.isEmptyObject(o.value)) {
                if(BI.isNotNull(this.model.defaultValue)) {
                    this.tab.setSelect(this.model.defaultValue);
                }
            } else {
                this.setValue(o.value);
            }
        },

        _getStartOrEnd: function (v) {
            var arr = v.split("-");
            if(arr.length === 1) {
                return {
                    wId: arr[0],
                    startOrEnd: 0
                };
            }
            return {
                wId: arr[0],
                startOrEnd: arr[1] === "start" ? constants.start : constants.end
            };
        },

        _formatStartOrEnd: function (v) {
            v = v || {};
            var wId = v.wId;
            switch (v.startOrEnd) {
                case constants.start:
                    return wId + "-start";
                case constants.end:
                    return wId + "-end";
                default:
                    return wId;
            }
        },

        _cardCreator: function (v) {
            var self = this, o = this.options;
            v = v.split("-")[0];
            var ids = BI.Utils.getAllWidgetIds();
            if (!BI.contains(ids, v)) {
                return {
                    type: "bi.text_value_combo",
                    height: constants.comboHeight,
                    items: []
                };
            }
            var type = BI.Utils.getWidgetTypeById(v);
            switch (type) {
                case BICst.DESIGN.WIDGET.YEAR:
                    return {
                        type: "bi.year_param_combo",
                        showPosition: o.showPosition,
                        ref: function () {
                            self.yearCombo = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CONFIRM",
                            action: function () {
                                self.fireEvent("EVENT_SHOW_CARD_VALUE_CHANGE");
                            }
                        }]
                    };
                case BICst.DESIGN.WIDGET.MONTH:
                case BICst.DESIGN.WIDGET.QUARTER:
                case BICst.DESIGN.WIDGET.DATE:
                case BICst.DESIGN.WIDGET.DATE_PANE:
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                default:
                    return {
                        type: "bi.date_param_combo",
                        widgetType: type,
                        showPosition: o.showPosition,
                        ref: function () {
                            self.monthCombo = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CONFIRM",
                            action: function () {
                                self.fireEvent("EVENT_SHOW_CARD_VALUE_CHANGE");
                            }
                        }]
                    };
            }
        },

        setValue: function (v) {
            v = v || {};
            var id = this._formatStartOrEnd(v);
            this.combo.setValue(id);
            this.tab.setSelect(id);
            this.tab.setValue(v.offset);
        },

        getValue: function () {
            var wId = this.tab.getSelect();
            var widgetInfo = this._getStartOrEnd(wId);
            return {
                wId: widgetInfo.wId,
                startOrEnd: widgetInfo.startOrEnd,
                offset: this.tab.getValue()
            };
        }
    });
    BI.shortcut("bi.target_date_tab", TargetDateTab);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                widgetNames: {},
                filterDateWidgetTypes: this.options.dateWidgetType
            };
        },

        computed: {
            widgetIds: function () {
                var self = this;
                return BI.filter(BI.Utils.getAllWidgetIds(), function (id, wid) {
                    return BI.contains(self.model.filterDateWidgetTypes, BI.Utils.getWidgetTypeById(wid));
                });
            },
            widgetItems: function () {
                var self = this;
                var dateWidgetIds = this.model.widgetIds;

                var widgetItems = [];

                BI.each(dateWidgetIds, function (id, w) {
                    var type = BI.Utils.getWidgetTypeById(w);
                    var name = self.model.widgetNames[w];
                    if((type === BICst.DESIGN.WIDGET.DATE_INTERVAL || type === BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL) && self.options.showPosition === true) {
                        widgetItems = BI.concat(widgetItems, [{
                            text: name + BI.i18nText("BI-Conf_Start_Time"),
                            value: w + "-start",
                            sortText: name
                        }, {
                            text: name + BI.i18nText("BI-Conf_End_Time"),
                            value: w + "-end",
                            sortText: name
                        }]);
                    }else{
                        widgetItems.push({
                            text: name,
                            value: w,
                            sortText: name
                        });
                    }
                });

                widgetItems = BI.Func.getSortedResult(widgetItems, "sortText");
                return widgetItems;
            },

            defaultValue: function () {
                return BI.isNotEmptyArray(this.model.widgetItems) ? BI.first(this.model.widgetItems).value : null;
            }
        },

        actions: {
            getWidgetNames: function (callback) {
                var self = this;
                BI.Utils.getWidgetNameById(this.model.widgetIds, function (names) {
                    self.model.widgetNames = names;
                    callback && callback();
                });
            }
        }
    });
    BI.model("bi.model.target_date_tab", Model);
})();!(function () {

    var constants = {
        NUMBER: 0,
        STRING: 1,
        DATE: 2,
        LEFT_ITEMS_H_GAP: 10,
        CONTAINER_HEIGHT: 40,
        CONDITION_TYPE_COMBO_ADJUST: 2,
        BUTTON_HEIGHT: 24,
        FORMULA_V_GAP: 10,
        ADD_FORMULA_POPUP_WIDTH: 600,
        FORMULA_H_GAP: 20,
        HEIGHT_MAX: 10000,
        MAX_HEIGHT: 500,
        MAX_WIDTH: 600
    };

    var Item = BI.inherit(BI.AbstractFilterItem, {
        props: {
            baseCls: "bi-detail-target-empty-formula-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.filter.empty_formula");
        },

        watch: {
            formulaValue: function (formulaValue) {
                this._onEditFormula(formulaValue);
                this._setNodeData({
                    value: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                    id: this.options.id,
                    filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                    filterValue: this.getValue().filterValue,
                    formulaIds: this.popup.getFormulaTargetIds()
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                ref: function () {
                    self.group = this;
                },
                items: [{
                    type: "bi.left_right_vertical_adapt",
                    cls: "item-no-type",
                    height: constants.CONTAINER_HEIGHT,
                    items: {
                        left: [this._buildFormulaEmpty()],
                        right: [{
                            type: "bi.icon_button",
                            cls: "close-h-font delete-button",
                            listeners: [{
                                eventName: "__EVENT_CHANGE__",
                                action: function () {
                                    self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                    o.onDelete(o.id);
                                }
                            }]
                        }]
                    },
                    lhgap: constants.LEFT_ITEMS_H_GAP,
                    rhgap: constants.LEFT_ITEMS_H_GAP
                }],
                layouts: [{
                    type: "bi.vertical"
                }]
            };
        },

        _buildFormulaEmpty: function () {
            var self = this, o = this.options;

            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                isNeedAdjustWidth: false,
                adjustLength: constants.CONDITION_TYPE_COMBO_ADJUST,
                el: {
                    type: "bi.button",
                    level: "common",
                    height: constants.BUTTON_HEIGHT,
                    text: BI.i18nText("BI-Basic_Edit_Formula")
                },
                popup: {
                    el: {
                        type: "bi.absolute",
                        height: constants.HEIGHT_MAX,
                        width: constants.ADD_FORMULA_POPUP_WIDTH,
                        items: [{
                            el: {
                                type: "bi.formula_combo_popup",
                                fieldItems: this._getTargetItems(),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFormulaValue(self.editFormula.getValue()[0]);
                                    }
                                }, {
                                    eventName: "EVENT_VALUE_CANCEL",
                                    action: function () {
                                        self.editFormula.hideView();
                                    }
                                }],
                                ref: function () {
                                    self.popup = this;
                                }
                            },
                            top: constants.FORMULA_V_GAP,
                            left: constants.FORMULA_H_GAP,
                            right: constants.FORMULA_H_GAP,
                            bottom: 0
                        }]
                    },
                    stopPropagation: false,
                    maxHeight: constants.MAX_HEIGHT,
                    width: constants.MAX_WIDTH
                },
                ref: function (_ref) {
                    self.editFormula = _ref;
                }
            };
        },

        _onEditFormula: function (value) {
            var o = this.options, self = this;
            this.group.populate([{
                type: "bi.design.detail.target.filter.formula",
                cls: "no-type-container",
                id: this.options.id,
                wId: this.options.wId,
                fieldId: this.options.fieldId,
                filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                filterValue: value,
                node: o.node,
                afterValueChange: o.afterValueChange,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }],
                ref: function () {
                    self.formulaItem = this;
                }
            }]);
        },

        _getTargetItems: function () {
            var o = this.options;
            var fieldItems = [[], [], []];
            var fields = BI.Utils.getOriginFieldsOfWidget(o.wId);
            BI.each(fields, function (i, field) {
                var index = 0;
                var type = field.type;
                switch (type) {
                    case BICst.COLUMN.STRING:
                        index = 1;
                        break;
                    case BICst.COLUMN.NUMBER:
                    case BICst.COLUMN.COUNTER:
                        index = 0;
                        break;
                    case BICst.COLUMN.DATE:
                    default:
                        index = 2;
                        break;
                }
                fieldItems[index].push({
                    text: field.name,
                    value: field.id,
                    fieldType: type
                });
            });
            return fieldItems;
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        getValue: function () {
            if(BI.isNotNull(this.formulaItem)) {
                return this.formulaItem.getValue();
            }
            return {
                id: this.options.id,
                filterType: BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA
            };
        }
    });
    BI.shortcut("bi.design.detail.target.filter.empty.formula", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                formulaValue: null
            };
        },

        actions: {
            setFormulaValue: function (v) {
                this.model.formulaValue = v;
            }
        }
    });
    BI.model("bi.model.detail.target.filter.empty_formula", Model);
})();!(function () {

    var constants = {
        NUMBER: 0,
        STRING: 1,
        DATE: 2
    };
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 5,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 30,
            FIELD_NAME_BUTTON_WIDTH: 120,
            ICON_BUTTON_WIDTH: 22,
            TEXT_BUTTON_H_GAP: 10
        },

        props: {
            baseCls: "bi-detail-target-filter-formula-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.filter.formula", {
                id: this.options.id,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            formulaValue: function () {
                this._setNodeData({
                    filterValue: this.getValue(),
                    formulaIds: this.formula.getFormulaTargetIds()
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this.id = o.id;
            var left = this._buildFormula();

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.td",
                    columnSize: [this._constant.FIELD_NAME_BUTTON_WIDTH, "", this._constant.ICON_BUTTON_WIDTH],
                    height: this._constant.CONTAINER_HEIGHT,
                    items: [[left[0], left[1], {
                        type: "bi.icon_button",
                        cls: "close-h-font delete-button",
                        width: this._constant.ICON_BUTTON_WIDTH,
                        listeners: [{
                            eventName: "IconButton.EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                o.onDelete(o.id);
                            }
                        }]
                    }]]
                }]
            };

        },

        _buildFormula: function () {
            var self = this;
            return [{
                type: "bi.text_button",
                text: BI.i18nText("BI-Basic_Fulfil"),
                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                height: this._constant.CONTAINER_HEIGHT,
                textAlign: "left",
                hgap: this._constant.TEXT_BUTTON_H_GAP,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                    }
                }]
            }, {
                type: "bi.formula_combo",
                items: this._getTargetItems(),
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFormulaValue(this.getValue());
                    }
                }],
                value: this.options.filterValue,
                ref: function (_ref) {
                    self.formula = _ref;
                },
                warningTitle: this.model.warningTitle
            }];
        },

        _getTargetItems: function () {
            var o = this.options;
            var fieldItems = [[], [], []];
            var fields = BI.Utils.getOriginFieldsOfWidget(o.wId);
            BI.each(fields, function (i, field) {
                var index = 0;
                var type = field.type;
                switch (type) {
                    case BICst.COLUMN.STRING:
                        index = 1;
                        break;
                    case BICst.COLUMN.NUMBER:
                    case BICst.COLUMN.COUNTER:
                        index = 0;
                        break;
                    case BICst.COLUMN.DATE:
                    default:
                        index = 2;
                        break;
                }
                fieldItems[index].push({
                    text: field.name,
                    value: field.id,
                    fieldType: type
                });
            });
            return fieldItems;
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.formula.setValue(context.filterValue);
        },

        getValue: function () {
            return {
                id: this.id,
                filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                filterValue: this.model.formulaValue
            };
        }

    });
    BI.shortcut("bi.design.detail.target.filter.formula", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                formulaValue: this.options.filterValue
            };
        },

        actions: {
            setFormulaValue: function (v) {
                this.model.formulaValue = v;
            }
        }
    });
    BI.model("bi.model.detail.target.filter.formula", Model);
})();!(function () {

    var constants = {
        LEFT_ITEMS_H_GAP: 10,
        CONTAINER_HEIGHT: 40,
        CONDITION_TYPE_COMBO_ADJUST: 2,
        BUTTON_HEIGHT: 24,
        MAX_HEIGHT: 500
    };

    var Item = BI.inherit(BI.AbstractFilterItem, {
        props: {
            baseCls: "bi-detail-target-no-type-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.filter.no_type", {
                wId: this.options.wId
            });
        },

        watch: {
            fieldItems: function (fieldItems) {
                this.list.populate(fieldItems);
            }
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                ref: function () {
                    self.group = this;
                },
                items: [{
                    type: "bi.left_right_vertical_adapt",
                    cls: "item-no-type",
                    height: constants.CONTAINER_HEIGHT,
                    items: {
                        left: [this._buildConditionsNoType()],
                        right: [{
                            type: "bi.icon_button",
                            cls: "close-h-font delete-button",
                            listeners: [{
                                eventName: "__EVENT_CHANGE__",
                                action: function () {
                                    self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                    o.onDelete(o.id);
                                }
                            }]
                        }]
                    },
                    lhgap: constants.LEFT_ITEMS_H_GAP,
                    rhgap: constants.LEFT_ITEMS_H_GAP
                }],
                layouts: [{
                    type: "bi.vertical",
                    scrolly: false
                }]
            };
        },

        _buildConditionsNoType: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                adjustLength: constants.CONDITION_TYPE_COMBO_ADJUST,
                el: {
                    type: "bi.button",
                    level: "common",
                    height: constants.BUTTON_HEIGHT,
                    text: BI.i18nText("BI-Basic_Please_Select_Field")
                },
                popup: {
                    el: {
                        type: "bi.vertical",
                        items: [{
                            el: {
                                type: "bi.search_editor",
                                listeners: [{
                                    eventName: BI.SearchEditor.EVENT_CHANGE,
                                    action: function () {
                                        self.store.setKeyword(this.getValue());
                                    }
                                }, {
                                    eventName: BI.SearchEditor.EVENT_CLEAR,
                                    action: function () {
                                        self.store.setKeyword(this.getValue());
                                    }
                                }]
                            },
                            vgap: 10,
                            hgap: 10
                        }, {
                            type: "bi.button_group",
                            items: this.model.fieldItems,
                            layouts: [{
                                type: "bi.vertical"
                            }],
                            ref: function () {
                                self.list = this;
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function (v) {
                                    self._onTypeSelected(v);
                                }
                            }]
                        }]
                    },
                    minHeight: 200,
                    minWidth: 150,
                    maxHeight: constants.MAX_HEIGHT
                }
            };
        },

        _onTypeSelected: function (v) {
            var self = this, o = this.options;
            var field = BI.find(this.model.fields, function (idx, field) {
                return field.id === v;
            });
            var fieldType = field.type;
            var filterItem = BI.Services.getService("bi.service.design.detail.target.filter").createFilterItemByFieldType(fieldType);
            this.group.populate([BI.extend(filterItem, {
                id: o.id,
                fieldId: v,
                wId: o.wId,
                node: o.node,
                cls: "no-type-container",
                afterValueChange: o.afterValueChange,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }],
                ref: function () {
                    self.typeSelectedItem = this;
                }
            })]);
            o.node.set("data", BI.extend(o.node.get("data"), {
                value: filterItem.filterType,
                filterType: filterItem.filterType,
                fieldId: v
            }));
            o.afterValueChange();
        },

        getValue: function () {
            if(BI.isNotNull(this.typeSelectedItem)) {
                return this.typeSelectedItem.getValue();
            }
            return {
                filterType: BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION
            };
        }
    });
    BI.shortcut("bi.design.detail.target.filter.no.type", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: this.options.filterValue,
                keyword: "",
                fields: []
            };
        },

        computed: {
            fieldItems: function () {
                var self = this;
                var items = BI.map(this.model.fields, function (i, field) {
                    return {
                        type: "bi.blank_icon_text_item",
                        value: field.id,
                        height: 25,
                        textHgap: 5,
                        text: BI.Utils.getFieldTransferName(field.id) || field.name,
                        keyword: self.model.keyword,
                        cls: "bi-list-item " + BI.Utils.getIconByFieldType(field.type)
                    };
                });
                var searchResult = BI.Func.getSearchResult(items, this.model.keyword, "text");
                var result = BI.concat(searchResult.match, searchResult.find);
                if (result.length === 0) {
                    result.push({
                        type: "bi.label",
                        textAlign: "center",
                        text: BI.i18nText("BI-Conf_Search_Content_Is_Empty"),
                        disabled: true
                    });
                }
                return result;
            }
        },

        actions: {
            initData: function (callback) {
                var self = this;
                BI.Utils.getFieldsOfTable(BI.Utils.getTableNameWidgetId(this.options.wId), function (fields) {
                    self.model.fields = BI.filter(fields, function (idx, field) {
                        return field.type !== BICst.COLUMN.COUNTER && field.type !== BICst.COLUMN.TARGET_NAME;
                    });
                    callback();
                });
            },

            setFilterType: function (v) {
                this.model.filterType = v;
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            },

            setKeyword: function (v) {
                this.model.keyword = v;
            }
        }
    });
    BI.model("bi.model.detail.target.filter.no_type", Model);
})();!(function () {
    BI.constant("bi.constant.design.detail_target_number_item", [[{
        text: BI.i18nText("BI-Basic_Number_IN"),
        value: BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Number_In"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Equal_To"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_More_Than"),
        value: BICst.ANALYSIS_FILTER_NUMBER.LARGE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Less_Than"),
        value: BICst.ANALYSIS_FILTER_NUMBER.SMALL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_More_Than") + BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Less_Than") + BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_NUMBER.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL,
        cls: "dot-e-font"
    }]]);

}());!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 200
        },

        props: {
            baseCls: "bi-detail-target-number-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.number.filter", {
                fieldId: this.options.fieldId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.showFilterValue);
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                disabled: !this.model.filterValid,
                                tipType: this.model.filterValid ? "success" : "warning",
                                warningTitle: function () {
                                    return self.model.warningTitle;
                                },
                                text: this.model.filterName,
                                title: this.model.filterName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                disabled: !this.model.filterValid,
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.detail_target_number_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: this.model.filterName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                disabled: !this.model.filterValid,
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, initData) {

            switch (filterType) {
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                    this._createNumberIntervalFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                    this._createNumberInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                    this._createNumberSetInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                default:
                    this.filterWidget = BI.createWidget();
                    break;

            }
        },

        _createNumberOneSideFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_one_side",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: 250,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            initData = initData || {
                type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                value: null
            };
            this.filterWidget.setValue(initData);
        },

        _createNumberIntervalFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.number_interval",
                width: this._constant.INPUT_WIDTH,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNumberInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "bi-border",
                validationChecker: function (v) {
                    return BI.isNumeric(v);
                },
                errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);

        },

        _createNumberSetInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "bi-border",
                validationChecker: function (v) {
                    return BI.isNumeric(v);
                },
                errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                value: BI.isNotNull(initData) ? initData.value : "",
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue({
                            type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                            value: this.getValue()
                        });
                    }
                }]
            });
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.filterType.setValue(context.filterType);
            this._refreshFilterWidget(context.filterType, context.filterValue);
        },

        getValue: function () {
            return {
                fieldId: this.options.fieldId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });
    BI.shortcut("bi.design.detail.target.filter.number", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {
            filterState: function () {
                if (BI.Utils.isNoAuthField(this.options.fieldId)) {
                    return BICst.FIELD_STATE.NO_AUTH;
                }
                return BI.isEmpty(BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId)) ? BICst.FIELD_STATE.FIELD_MISS : BICst.FIELD_STATE.NORMAL;
            },
            filterValid: function () {
                return this.model.filterState === BICst.FIELD_STATE.NORMAL;
            },
            filterName: function () {
                return BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId) || BI.Utils.getOriginFieldNameById(this.options.fieldId);
            },
            showFilterValue: function () {
                return this.model.filterValid ? this.model.filterValue : BI.Utils.getDefaultFilterValue(this.options.filterType);
            },
            warningTitle: function () {
                var text = "";
                switch (this.model.filterState) {
                    case BICst.FIELD_STATE.FIELD_MISS:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                        break;
                    case BICst.FIELD_STATE.NO_AUTH:
                        text = BI.i18nText("BI-Basic_Field_No_Auth");
                        break;
                    default:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                }
                return text;
            }
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.detail.target.number.filter", Model);
})();!(function () {
    BI.constant("bi.constant.design.detail_target_string_item", [[{
        text: BI.i18nText("BI-Basic_In"),
        value: BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_In"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.CONTAIN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.END_WITH,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Not_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_NULL,
        cls: "dot-e-font"
    }]]);
}());/**
 * @class BI.ConfTargetStringFieldFilterItem
 * @extend BI.AbstractFilterItem
 * 指标过滤——文本字段类型过滤条件
 */
!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 200
        },

        props: {
            extraCls: "bi-detail-target-string-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.detail.target.string.filter", {
                fieldId: this.options.fieldId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.showFilterValue);
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                disabled: !this.model.filterValid,
                                tipType: this.model.filterValid ? "success" : "warning",
                                warningTitle: function () {
                                    return self.model.warningTitle;
                                },
                                text: this.model.filterName,
                                title: this.model.filterName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                disabled: !this.model.filterValid,
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.detail_dimension_string_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: this.model.filterName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                disabled: !this.model.filterValid,
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, initData) {
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                    this._createStringBelongCombo(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                    this._createStringInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                    this.filterWidget = BI.createWidget();
                    break;
                default:
                    this.filterWidget = BI.createWidget();
            }
        },

        _createStringBelongCombo: function (initData) {
            var o = this.options, self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.select_detail_target_data_combo",
                fieldId: o.fieldId,
                width: this._constant.INPUT_WIDTH,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }],
                value: initData
            });
        },

        _createStringInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "condition-operator-input bi-border",
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        getValue: function () {
            return {
                fieldId: this.options.fieldId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });

    BI.shortcut("bi.design.detail.target.filter.string", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {
            filterState: function () {
                if (BI.Utils.isNoAuthField(this.options.fieldId)) {
                    return BICst.FIELD_STATE.NO_AUTH;
                }
                return BI.isEmpty(BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId)) ? BICst.FIELD_STATE.FIELD_MISS : BICst.FIELD_STATE.NORMAL;
            },
            filterValid: function () {
                return this.model.filterState === BICst.FIELD_STATE.NORMAL;
            },
            filterName: function () {
                return BI.Utils.getFieldNameByIdInDataPool(this.options.fieldId) || BI.Utils.getOriginFieldNameById(this.options.fieldId);
            },
            showFilterValue: function () {
                return this.model.filterValid ? this.model.filterValue : BI.Utils.getDefaultFilterValue(this.options.filterType);
            },
            warningTitle: function () {
                var text = "";
                switch (this.model.filterState) {
                    case BICst.FIELD_STATE.FIELD_MISS:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                        break;
                    case BICst.FIELD_STATE.NO_AUTH:
                        text = BI.i18nText("BI-Basic_Field_No_Auth");
                        break;
                    default:
                        text = BI.i18nText("BI-Design_Current_Field_Lost");
                }
                return text;
            }
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.detail.target.string.filter", Model);
})();BI.SelectFieldDataCombo = BI.inherit(BI.Widget, {

    _const: {
        perPage: 10
    },

    _defaultConfig: function () {
        return BI.extend(BI.SelectFieldDataCombo.superclass._defaultConfig.apply(this, arguments), {
            baseCls: "bi-select-field-data-combo",
            height: 28,
            fieldId: ""
        });
    },

    _init: function () {
        BI.SelectFieldDataCombo.superclass._init.apply(this, arguments);
        var self = this, o = this.options;

        this.dimension = {
            type: BICst.DESIGN.DIMENSION_TYPE.STRING,
            name: "StringDimension",
            fieldId: o.fieldId,
            group: {
                type: BICst.DESIGN.GROUP.ID_GROUP
            }
        };

        this.combo = BI.createWidget({
            type: "bi.multi_select_insert_combo",
            text: BI.i18nText("BI-Basic_Unrestricted"),
            element: this,
            itemsCreator: BI.bind(this._itemsCreator, this),
            width: o.width,
            height: o.height
        });

        this.combo.on(BI.MultiSelectCombo.EVENT_CONFIRM, function () {
            self.fireEvent("EVENT_CONFIRM");
        });
    },

    _getItemsByTimes: function (items, times) {
        var res = [];
        BI.each(BI.makeArray(100, null), function (idx, item) {
            var i = (times - 1) * 100 + idx;
            if(BI.isNotNull(items[i])) {
                res.push(items[i]);
            }
        });
        return res;
    },

    mounted: function () {
        this.combo.setValue(this.options.value);
    },

    _hasNextByTimes: function (items, times) {
        return times * 100 < items.length;
    },

    _itemsCreator: function (options, callback) {
        var o = this.options, self = this;
        var id = BI.UUID();
        var dimensionObj = {};
        dimensionObj[id] = this.dimension;

        var tableName = BI.Utils.getTableNameByFieldIdInDataPool(o.fieldId);
        BI.Utils.getWidgetDataByWidgetInfoWithParam({
            dimensions: dimensionObj,
            view: {
                10000: [id]
            },
            tableName: tableName,
            type: BICst.DESIGN.WIDGET.STRING
        }, function (data) {
            if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
                callback({
                    items: self._createItemsByData(data.value)
                });
                return;
            }

            if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
                callback({count: data.value});
                return;
            }

            callback({
                items: self._createItemsByData(data.value),
                hasNext: data.hasNext
            });
        }, {textOptions: options});
    },

    _createItemsByData: function (values) {
        var result = [];
        BI.each(values, function (idx, value) {
            result.push({
                text: value,
                value: value,
                title: value
            });
        });
        return result;
    },

    _assertValue: function (v) {
        v = v || {};
        v.type = v.type || BI.Selection.Multi;
        v.value = v.value || [];
        return v;
    },

    setValue: function (v) {
        v = this._assertValue(v);
        this.combo.setValue(v);
    },

    getValue: function () {
        var val = this.combo.getValue() || {};
        return {
            type: val.type,
            value: val.value,
            assist: val.assist
        };
    },

    populate: function () {
        this.combo.populate();
    }
});
BI.shortcut("bi.select_detail_target_data_combo", BI.SelectFieldDataCombo);
/**
 * @author: Teller
 * @createdAt: 2018/3/29 下午3:11
 * @Description
*/

!(function () {
    var clearDateDetailTime = function (value, isShowTime) {
        if (BI.isNull(value)) return;

        if (BI.isObject(value)) {
            if (value.type === BI.DynamicDateCombo.Static) {
                if (BI.isNotNull(value.value)) {
                    BI.each(["hour", "minute", "second"], function (index, key) {
                        value.value[key] = isShowTime ? 0 : null;
                    });
                }

                return;
            }

            BI.each(value, function (key, val) {
                if (BI.isObject(val)) clearDateDetailTime(val, isShowTime);
            });
        }
    };


    var DetailDate = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-detail-time-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        _control: {
            time: "bi.date_time_control",
            nonTime: "bi.date_control"
        },

        mounted: function () {
            this.checkbox.setSelected(this.model.computedIsShowTime === BICst.SHOW_TIME.SHOW);
        },

        watch: {
            computedIsShowTime: function (computedIsShowTime) {
                this.tab.setSelect(computedIsShowTime);
                clearDateDetailTime(this.model.value, computedIsShowTime === BICst.SHOW_TIME.SHOW);
                this.setValue(this.model.value);
            }
        },

        render: function () {
            var self = this;

            var settings = {
                type: "bi.left_right_vertical_adapt",
                items: {
                    left: [{
                        el: {
                            type: "bi.multi_select_item",
                            ref: function (_ref) {
                                self.checkbox = _ref;
                            },
                            width: 120,
                            text: BI.i18nText("BI-Design_Show_Time"),
                            listeners: [{
                                eventName: BI.MultiSelectItem.EVENT_CHANGE,
                                action: function () {
                                    self.store.setShowTime(self.checkbox.isSelected() ? BICst.SHOW_TIME.SHOW : BICst.SHOW_TIME.NOT_SHOW);
                                }
                            }]
                        },
                        lgap: -5
                    }]
                }
            };

            if (this.model.showParameterOption) {
                settings.items.right = [{
                    type: "bi.filter_control.param_setting",
                    ref: function (_ref) {
                        self.param = _ref;
                    }
                }];
            }

            return {
                type: "bi.vtape",
                items: [{
                    el: settings,
                    height: 44
                }, {
                    type: "bi.vtape",
                    cls: "bi-control-widget-wrapper",
                    items: [{
                        el: {
                            type: "bi.label",
                            text: self.model.name,
                            title: self.model.name,
                            textAlign: "left"
                        },
                        vgap: 10,
                        hgap: 10,
                        height: 16
                    }, {
                        hgap: 10,
                        el: {
                            type: "bi.tab",
                            ref: function (_ref) {
                                self.tab = _ref;
                            },
                            direction: "custom",
                            showIndex: this.model.computedIsShowTime,
                            cardCreator: function (v) {
                                switch (v) {
                                    case BICst.SHOW_TIME.SHOW:
                                        return {
                                            type: self._control.time,
                                            value: self.model.value,
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function (v) {
                                                    self.fireEvent("EVENT_CHANGE", v);
                                                }
                                            }]
                                        };
                                    default:
                                        return {
                                            type: self._control.nonTime,
                                            value: self.model.value,
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function (v) {
                                                    self.fireEvent("EVENT_CHANGE", v);
                                                }
                                            }]
                                        };
                                }
                            }
                        }
                    }]
                }]
            };
        },

        getParamSettings: function () {
            if (this.model.showParameterOption) {
                return this.param.getValue();
            }

            return {
                useParameter: false,
                parameterValue: []
            };
        },

        getValue: function () {
            return this.tab.getSelectedTab().getValue();
        },

        getShowTime: function () {
            return this.model.computedIsShowTime;
        },

        setValue: function (v) {
            this.tab.getSelectedTab().setValue(v);
        },

        populate: function () {
            this.tab.getSelectedTab().populate();
        },

        reset: function () {
            this.tab.getSelectedTab().reset();
        }
    });
    BI.shortcut("bi.detail_date_control", DetailDate);

    var DateInterval = BI.inherit(DetailDate, {
        _control: {
            time: "bi.date_interval_time_control",
            nonTime: "bi.date_interval_control"
        }
    });
    BI.shortcut("bi.detail_date_interval_control", DateInterval);

    var DatePane = BI.inherit(DetailDate, {
        _control: {
            time: "bi.date_pane_time_control",
            nonTime: "bi.date_pane_control"
        }
    });
    BI.shortcut("bi.detail_date_pane_control", DatePane);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 上午11:16
 * @Description: 仅含参数设置的控件
 */

!(function () {
    var StringLabel = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-extra-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            computedChooseType: function (computedChooseType) {
                this.tab.setSelect(computedChooseType);

                if (computedChooseType === BICst.STRING_CONTROL.NO_BAR) {
                    this.fireEvent("EVENT_CHANGE");
                }
            }
        },

        _control: "bi.string_label_control",
        _parameterControl: "bi.string_label_control_no_limit",

        render: function () {
            var self = this;
            var settings = {
                type: "bi.left_right_vertical_adapt",
                items: {}
            };

            if (this.model.showParameterOption) {
                settings.items.right = [{
                    type: "bi.filter_control.param_setting",
                    ref: function (_ref) {
                        self.param = _ref;
                    }
                }];
            }

            return {
                type: "bi.vtape",
                tgap: 10,
                items: [{
                    el: settings,
                    height: this.model.showParameterOption ? 25 : 0
                }, {
                    type: "bi.tab",
                    cls: "bi-control-widget-wrapper",
                    ref: function (_ref) {
                        self.tab = _ref;
                    },
                    showIndex: this.model.computedChooseType,
                    direction: "custom",
                    single: true,
                    logic: {
                        dynamic: true
                    },
                    cardCreator: function (v) {
                        return {
                            type: "bi.vertical",
                            tgap: 10,
                            hgap: 10,
                            items: [{
                                type: "bi.label",
                                text: self.model.name,
                                title: self.model.name,
                                textAlign: "left"
                            }, {
                                type: v === BICst.STRING_CONTROL.NO_BAR ? self._parameterControl : self._control,
                                ref: function (_ref) {
                                    self.control = _ref;
                                },
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function (v) {
                                        self.fireEvent("EVENT_CHANGE", v);
                                    }
                                }]
                            }]
                        };
                    }
                }]
            };
        },

        getParamSettings: function () {
            if (this.model.showParameterOption) {
                return this.param.getValue();
            }

            return {
                useParameter: false,
                parameterValue: []
            };
        },

        populate: function () {
            this.control.populate();
        },

        setValue: function (v) {
            this.control.setValue(v);
        },

        getValue: function () {
            return this.control.getValue();
        },

        reset: function () {
            this.control.reset();
        }
    });
    BI.shortcut("bi.extra_string_label_control", StringLabel);

    var Year = BI.inherit(StringLabel, {
        _control: "bi.year_control"
    });
    BI.shortcut("bi.extra_year_control", Year);

    var Month = BI.inherit(StringLabel, {
        _control: "bi.month_control"
    });
    BI.shortcut("bi.extra_month_control", Month);

    var Quarter = BI.inherit(StringLabel, {
        _control: "bi.quarter_control"
    });
    BI.shortcut("bi.extra_quarter_control", Quarter);

    var YearMonthInterval = BI.inherit(StringLabel, {
        _control: "bi.year_month_interval_control"
    });
    BI.shortcut("bi.extra_year_month_interval_control", YearMonthInterval);
})();
/**
 * @author: Teller
 * @createdAt: 2018/3/8 上午9:42
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                tab: undefined,
                isShowTime: undefined,
                useParameter: undefined
            };
        },

        context: ["wId", "dimensions", "view", "value", "type", "showTime", "singleSelect", "name", "selectedTable"],

        childContext: ["useParameter", "computedUseParameter"],

        computed: {
            parameters: function () {
                return BI.pool.parameterPool.allParameter;
            },

            showParameterOption: function () {
                return BI.size(this.model.parameters);
            },

            titles: function () {
                var self = this;

                return BI.map(this.model.view[BICst.REGION.DIMENSION1], function (index, dId) {
                    var fieldId = self.model.dimensions[dId].fieldId;
                    return BI.Utils.getFieldTransferName(fieldId) || BI.Utils.getOriginFieldNameById(fieldId);
                });
            },

            widgetConfig: function () {
                return {
                    wId: this.model.wId,
                    dimensions: this.model.dimensions,
                    view: this.model.view,
                    value: this.model.value,
                    type: this.model.type,
                    tableName: this.model.selectedTable
                };
            },

            filteredWidgetConfig: function () {
                var filterValues = BI.Utils.getControlCalculations(this.model.wId);

                var config = BI.extend(Fix.toJSON(this.model.widgetConfig), {
                    filter: {
                        filterType: BICst.ANALYSIS_FILTER_TYPE.AND,
                        filterValue: filterValues
                    }
                });

                config.widgetIdValueMap = {};
                BI.each(BI.Utils.getAllWidgetIds(), function (idx, wId) {
                    var type = BI.Utils.getWidgetTypeById(wId);
                    if (BI.Utils.isControlWidgetByWidgetId(wId) && type !== BICst.DESIGN.WIDGET.GENERAL_QUERY) {
                        config.widgetIdValueMap[wId] = Fix.toJSON(BI.designModel.widgets[wId]);
                    }
                });
                return config;
            },

            chooseType: function () {
                if (BI.isNull(this.model.tab)) {
                    if (BI.isNotNull(this.model.singleSelect)) {
                        return this.model.singleSelect;
                    }

                    return BICst.STRING_CONTROL.MULTI;
                }

                return this.model.tab;
            },

            computedIsShowTime: function () {
                if (BI.isNull(this.model.isShowTime)) {
                    if (BI.isNull(this.model.showTime)) {
                        return BICst.SHOW_TIME.NOT_SHOW;
                    }

                    return this.model.showTime;
                }

                return this.model.isShowTime;
            },

            computedUseParameter: function () {
                if (BI.isNull(this.model.useParameter)) {
                    var widget = BI.designData.widgets[this.model.wId] || {};
                    return widget.useParameter || false;
                }

                return this.model.useParameter;
            },

            computedChooseType: function () {
                var dimensions = BI.keys(this.model.dimensions);

                // 有参数无维度的文本控件变文本输入框
                if (this.model.computedUseParameter && this.model.type === BICst.DESIGN.WIDGET.STRING && BI.size(dimensions) === 0) {
                    return BICst.STRING_CONTROL.TEXT;
                }

                // 有参数有维度的文本控件多选变无全选框
                if (this.model.computedUseParameter && this.model.type === BICst.DESIGN.WIDGET.STRING && BI.size(dimensions) !== 0 && this.model.chooseType === BICst.STRING_CONTROL.MULTI) {
                    return BICst.STRING_CONTROL.NO_BAR;
                }

                if (this.model.computedUseParameter && this.model.type === BICst.DESIGN.WIDGET.STRING_LIST && this.model.chooseType === BICst.STRING_CONTROL.MULTI) {
                    return BICst.STRING_CONTROL.NO_BAR;
                }

                if (this.model.computedUseParameter && this.model.type === BICst.DESIGN.WIDGET.STRING_LABEL) {
                    return BICst.STRING_CONTROL.NO_BAR;
                }

                return this.model.chooseType;
            },

            disabled: function () {
                return BI.keys(this.model.dimensions).length <= 0;
            }
        },

        actions: {
            setTab: function (v) {
                this.model.tab = v;
            },

            setShowTime: function (v) {
                this.model.isShowTime = v;
            },

            /**
             * 小数点最多保留3位
             * @param value 数值
             * @param isMax, 判断是否是最大值
             */
            fixNumber: function (value, isMax) {
                if (!BI.isNumeric(value)) return value;

                var num = parseFloat(value);
                var decimalPlaces = BI.size(BI.last(num.toString().split(".")));

                // 小数位数小于等于三位不做处理
                if (decimalPlaces < 4) return num;

                // 保留4位
                var fixed = num * Math.pow(10, 3);

                return (isMax ? Math.ceil(fixed) : Math.floor(fixed)) / Math.pow(10, 3);
            }
        }
    });
    BI.model("bi.model.filter_control", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/6/28 上午10:42
 * @Description
*/

!(function () {
    var TreeCombo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-normal-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        _control: "bi.tree_control",

        render: function () {
            var self = this;

            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.default"
                    },
                    height: 10
                }, {
                    type: "bi.vtape",
                    cls: "bi-control-widget-wrapper",
                    items: [{
                        el: {
                            type: "bi.label",
                            text: self.model.name,
                            title: self.model.name,
                            textAlign: "left"
                        },
                        vgap: 10,
                        hgap: 10,
                        height: 16
                    }, {
                        hgap: 10,
                        el: {
                            type: "bi.tab",
                            ref: function (_ref) {
                                self.tab = _ref;
                            },
                            showIndex: this.model.computedChooseType,
                            direction: "custom",
                            cardCreator: function () {
                                return {
                                    type: self._control,
                                    ref: function (_ref) {
                                        self.control = _ref;
                                    },
                                    listeners: [{
                                        eventName: "EVENT_CHANGE",
                                        action: function (v) {
                                            self.fireEvent("EVENT_CHANGE", v);
                                        }
                                    }]
                                };
                            }
                        }
                    }]
                }]
            };
        },

        populate: function () {
            this.control.populate();
        },

        setValue: function (v) {
            this.control.setValue(v);
        },

        getValue: function () {
            return this.control.getValue();
        },

        reset: function () {
            this.control.reset();
        }
    });
    BI.shortcut("bi.normal_tree_control", TreeCombo);

    var TreeLabel = BI.inherit(TreeCombo, {
        _control: "bi.tree_label_control"
    });
    BI.shortcut("bi.normal_tree_label", TreeLabel);

    var TreeList = BI.inherit(TreeCombo, {
        _control: "bi.tree_list_control"
    });
    BI.shortcut("bi.normal_tree_list", TreeList);

    var NumberInterval = BI.inherit(TreeCombo, {
        _control: "bi.number_control"
    });
    BI.shortcut("bi.normal_number", NumberInterval);

    var IntervalSlider = BI.inherit(TreeCombo, {
        _control: "bi.interval_slider_control"
    });
    BI.shortcut("bi.normal_interval_slider", IntervalSlider);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 下午3:32
 * @Description: 单复选功能
*/

!(function () {
    var constants = {
        TABS: [{
            text: BI.i18nText("BI-Design_Multi_Select"),
            value: BICst.STRING_CONTROL.MULTI
        }, {
            text: BI.i18nText("BI-Design_Single_Select"),
            value: BICst.STRING_CONTROL.SINGLE
        }],
        TAB_WIDTH: 42
    };

    var StringControl = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-single-multi-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        _forceUpdate: false,

        _control: {
            single: "bi.string_control.single",
            multi: "bi.string_control.multi",
            noBar: "bi.string_control.multi_no_bar"
        },

        watch: {
            "dimensions || view": function () {
                if (!this._forceUpdate) return;
                this.populate();
            },

            computedChooseType: function (computedChooseType) {
                var currTab = this.tab.getSelect();

                if (computedChooseType === BICst.STRING_CONTROL.SINGLE || currTab === BICst.STRING_CONTROL.TEXT || computedChooseType === BICst.STRING_CONTROL.TEXT || computedChooseType === BICst.STRING_CONTROL.NO_BAR) {
                    // 切换到单选清空所有值，切换到文本清空值，切换到无全选栏控件清空值，文本切换到任意清空值
                    this.fireEvent("EVENT_CHANGE");
                }

                this.tab.setSelect(computedChooseType);
            }
        },

        render: function () {
            var self = this, o = this.options;

            var topLayout = {
                type: "bi.left_right_vertical_adapt",
                items: {
                    left: [{
                        type: "bi.segment",
                        width: constants.TAB_WIDTH * 2 + 3,
                        value: this.model.chooseType,
                        items: BI.map(constants.TABS, function (index, tab) {
                            return BI.extend({
                                width: constants.TAB_WIDTH,
                                height: 22
                            }, tab);
                        }),
                        listeners: [{
                            eventName: BI.Segment.EVENT_CHANGE,
                            action: function (v) {
                                self.store.setTab(v);
                            }
                        }]
                    }]
                }
            };

            if (this.model.showParameterOption) {
                topLayout.items.right = [{
                    type: "bi.filter_control.param_setting",
                    ref: function (_ref) {
                        self.param = _ref;
                    }
                }];
            }

            return {
                type: "bi.vtape",
                vgap: 10,
                items: [{
                    el: topLayout,
                    height: 25
                }, {
                    type: "bi.vtape",
                    cls: "bi-control-widget-wrapper",
                    items: [{
                        el: {
                            type: "bi.label",
                            text: self.model.name,
                            title: self.model.name,
                            textAlign: "left"
                        },
                        hgap: 10,
                        vgap: 10,
                        height: 16
                    }, {
                        hgap: 10,
                        el: {
                            type: "bi.tab",
                            showIndex: this.model.computedChooseType,
                            direction: "custom",
                            single: true,
                            ref: function (_ref) {
                                self.tab = _ref;
                            },
                            cardCreator: function (v) {
                                switch (v) {
                                    case BICst.STRING_CONTROL.SINGLE:
                                        return {
                                            type: self._control.single,
                                            width: o.width,
                                            height: o.height,
                                            ref: function (_ref) {
                                                self.single = _ref;
                                            },
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function () {
                                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                                }
                                            }]
                                        };
                                    case BICst.STRING_CONTROL.TEXT:
                                        return {
                                            type: "bi.string_control.text",
                                            width: o.width,
                                            height: o.height,
                                            ref: function (_ref) {
                                                self.text = _ref;
                                            },
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function () {
                                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                                }
                                            }]
                                        };
                                    case BICst.STRING_CONTROL.NO_BAR:
                                        return {
                                            type: self._control.noBar,
                                            width: o.width,
                                            height: o.height,
                                            ref: function (_ref) {
                                                self.multi = _ref;
                                            },
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function () {
                                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                                }
                                            }]
                                        };
                                    case BICst.STRING_CONTROL.MULTI:
                                    default:
                                        return {
                                            type: self._control.multi,
                                            width: o.width,
                                            height: o.height,
                                            ref: function (_ref) {
                                                self.multi = _ref;
                                            },
                                            listeners: [{
                                                eventName: "EVENT_CHANGE",
                                                action: function () {
                                                    self.fireEvent("EVENT_CHANGE", self.getValue());
                                                }
                                            }]
                                        };
                                }
                            }
                        }
                    }]
                }]
            };
        },

        getParamSettings: function () {
            if (this.model.showParameterOption) {
                return this.param.getValue();
            }

            return {
                useParameter: false,
                parameterValue: []
            };
        },

        getSingleSelect: function () {
            return this.model.chooseType;
        },

        setValue: function (v) {
            this.tab.getSelectedTab().setValue(v);
        },

        getValue: function () {
            return this.tab.getSelectedTab().getValue();
        },

        reset: function () {
            this.tab.getSelectedTab().setValue();
        },

        populate: function () {
            this.tab.getSelectedTab().populate();
        }
    });
    BI.shortcut("bi.single_multi_string_control", StringControl);

    var StringList = BI.inherit(StringControl, {
        _forceUpdate: true,

        _control: {
            single: "bi.string_list_control.single",
            multi: "bi.string_list_control.multi",
            noBar: "bi.string_list_control.multi_no_bar"
        }
    });
    BI.shortcut("bi.single_multi_string_list_control", StringList);
})();
/**
 * @author: Teller
 * @createdAt: 2018/6/15 下午4:37
 * @Description
*/

!(function () {
    var SingleCombo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-filter-control-param-setting-combo-single"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control.param_setting.combo");
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        watch: {
            comboValues: function (comboValues) {
                this.setValue(comboValues);
            }
        },

        render: function () {
            var self = this;

            this.combos = [];

            var service = BI.Services.getService("bi.service.filter_control.param_setting.combo");

            return {
                type: "bi.vertical",
                items: BI.map(BI.makeArray(1), function (index) {
                    return service.renderComboItems.apply(self, [index]);
                }),
                hgap: 10,
                tgap: 25,
                bgap: 10
            };
        },

        checkValidation: function () {
            return true;
        },

        setValue: function (v) {
            v = v || [];

            BI.each(this.combos, function (index, combo) {
                combo.setValue(v[index]);
            });
        },

        getValue: function () {
            var self = this;

            return BI.map(this.combos, function (index) {
                return self.model.comboValues[index];
            });
        }
    });
    BI.shortcut("bi.filter_control.param_setting.combo.single", SingleCombo);

    var doubleCombo = BI.inherit(SingleCombo, {
        props: {
            baseCls: "bi-filter-control-param-setting-combo-double"
        },

        render: function () {
            var self = this;

            this.combos = [];
            var service = BI.Services.getService("bi.service.filter_control.param_setting.combo");

            return {
                type: "bi.vertical_adapt",
                items: BI.map(BI.makeArray(2), function (index) {
                    return service.renderComboItems.apply(self, [index]);
                }),
                hgap: 10,
                tgap: 25,
                bgap: 10
            };
        }
    });
    BI.shortcut("bi.filter_control.param_setting.combo.double", doubleCombo);

    var doubleVerticalCombo = BI.inherit(SingleCombo, {
        props: {
            baseCls: "bi-filter-control-param-setting-combo-double-vertical"
        },

        render: function () {
            var self = this;

            this.combos = [];
            var service = BI.Services.getService("bi.service.filter_control.param_setting.combo");

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.vertical_adapt",
                    rgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Conf_Start_Time")
                    }, service.renderComboItems.apply(self, [0])]
                }, {
                    type: "bi.vertical_adapt",
                    rgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Conf_End_Time")
                    }, service.renderComboItems.apply(self, [1])]
                }],
                hgap: 10,
                tgap: 25,
                bgap: 10
            };
        }
    });
    BI.shortcut("bi.filter_control.param_setting.combo.double.vertical", doubleVerticalCombo);

    var quadrupleCombo = BI.inherit(SingleCombo, {
        props: {
            baseCls: "bi-filter-control-param-setting-combo-quadruple"
        },

        render: function () {
            var self = this;

            this.combos = [];
            var service = BI.Services.getService("bi.service.filter_control.param_setting.combo");

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.vertical_adapt",
                    rgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Conf_Start_Time")
                    }, service.renderComboItems.apply(self, [0]), service.renderComboItems.apply(self, [1])]
                }, {
                    type: "bi.vertical_adapt",
                    rgap: 10,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Conf_End_Time")
                    }, service.renderComboItems.apply(self, [2]), service.renderComboItems.apply(self, [3])]
                }],
                hgap: 10,
                tgap: 25,
                bgap: 10
            };
        }
    });
    BI.shortcut("bi.filter_control.param_setting.combo.quadruple", quadrupleCombo);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/10 上午10:17
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                comboValues: [null, null, null, null]
            };
        },

        context: ["type", "widget", "computedParameterValue"],

        computed: {
            items: function () {
                var wId = BI.get(this.model.widget, "wId");

                var params = BI.map(BI.pool.parameterPool.allParameter, "value");
                var usedParams = [];

                // 过滤掉所有被用的param
                BI.each(BI.designModel.widgets, function (widgetID, widget) {
                    if (widgetID === wId || !widget.useParameter) return;

                    var value = widget.parameterValue;

                    BI.each(value, function (index, param) {
                        if (BI.isNull(param)) return;
                        BI.remove(params, param);
                        usedParams.push(param);
                    });
                });

                var items = BI.map(params, function (index, param) {
                    return {
                        text: param,
                        value: param
                    };
                });

                var used = BI.map(usedParams, function (index, param) {
                    return {
                        text: param,
                        value: param,
                        disabled: true,
                        warningTitle: BI.i18nText("BI-Design_Cannot_Choose_Same_Param")
                    };
                });

                return items.concat(used);
            },

            value: function () {
                return this.model.computedParameterValue || [];
            }
        },

        actions: {
            initData: function (callback) {
                var self = this;

                BI.each(this.model.comboValues, function (index) {
                    self.model.comboValues[index] = self.model.value[index];
                });

                BI.isFunction(callback) && callback();
            },

            setComboValue: function (v, i) {
                var self = this;

                BI.each(this.model.comboValues, function (index, val) {
                    if (i === index) {
                        self.model.comboValues.splice(index, 1, v);
                    } else if (val === v) {
                        self.model.comboValues.splice(index, 1, null);
                    }
                });

            }
        }
    });
    BI.model("bi.model.filter_control.param_setting.combo", Model);
})();
/**
 * @author: Teller
 * @createdAt: 2018/6/15 下午2:35
 * @Description
*/

!(function () {
    var constants = {
        COMBO_WIDTH: 150
    };

    var Service = BI.inherit(BI.OB, {
        renderComboItems: function (index) {
            var self = this;

            return {
                type: "bi.text_value_combo",
                width: constants.COMBO_WIDTH,
                ref: function (_ref) {
                    self.combos[index] = _ref;
                },
                container: null,
                items: this.model.items,
                value: this.model.comboValues[index],
                listeners: [{
                    eventName: BI.TextValueComboPopup.EVENT_CHANGE,
                    action: function (value) {
                        self.store.setComboValue(value, index);
                    }
                }]
            };
        }
    });

    BI.service("bi.service.filter_control.param_setting.combo", Service);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/9 下午2:28
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-model-filter-control-param-setting"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control.param_setting");
        },

        watch: {
            computedUseParameter: function (useParameter) {
                this.settings.setEnable(useParameter);
            }
        },

        mounted: function () {
            this.checkbox.setSelected(this.model.computedUseParameter);
        },

        render: function () {
            var self = this;

            return {
                type: "bi.left",
                items: [{
                    type: "bi.multi_select_item",
                    ref: function (_ref) {
                        self.checkbox = _ref;
                    },
                    width: 80,
                    text: BI.i18nText("BI-Design_Bind_Param"),
                    listeners: [{
                        eventName: BI.MultiSelectItem.EVENT_CHANGE,
                        action: function () {
                            self.store.setUseParameter(self.checkbox.isSelected());
                        }
                    }]
                }, {
                    type: "bi.bubble_combo",
                    ref: function (_ref) {
                        self.bubble = _ref;
                    },
                    destroyWhenHide: true,
                    cls: "tool-item",
                    listeners: [{
                        eventName: BI.BubbleCombo.EVENT_AFTER_HIDEVIEW,
                        action: function () {
                            self.combo.setValue(self.model.computedParameterValue);
                        }
                    }],
                    el: {
                        type: "bi.icon_button",
                        ref: function (_ref) {
                            self.settings = _ref;
                        },
                        cls: "dashboard-param-setting-font",
                        warningTitle: BI.i18nText("BI-Design_Current_Unbind_Param"),
                        width: 16,
                        height: 25,
                        disabled: !this.model.computedUseParameter
                    },
                    popup: {
                        type: "bi.bubble_bar_popup_view",
                        minWidth: this.model.minWidth,
                        maxHeight: this.model.maxHeight,
                        ref: function () {
                            self.popup = this;
                        },
                        el: {
                            type: this.model.comboType,
                            ref: function (_ref) {
                                self.combo = _ref;
                            }
                        },
                        buttons: [{
                            type: "bi.button",
                            value: BI.i18nText("BI-Basic_Cancel"),
                            level: "ignore",
                            height: 24,
                            handler: function () {
                                self.bubble.hideView();
                            }
                        }, {
                            type: "bi.button",
                            value: BI.i18nText("BI-Basic_Sure"),
                            height: 24,
                            handler: function () {
                                if (!self.combo.checkValidation()) {
                                    BI.Msg.toast(BI.i18nText("BI-Design_Select_Parameter_Warning"));
                                    return;
                                }
                                self.store.setParameterValue(self.combo.getValue());
                                self.bubble.hideView();
                            }
                        }]
                    },
                    stopPropagation: true
                }]
            };
        },

        getValue: function () {
            return {
                useParameter: this.model.computedUseParameter,
                parameterValue: this.model.computedUseParameter ? this.model.computedParameterValue : []
            };
        }
    });
    BI.shortcut("bi.filter_control.param_setting", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/9 下午2:52
 * @Description
*/

!(function () {
    var Model = BI.inherit(Fix.Model, {
        context: ["widgets", "widget", "type", "useParameter", "computedUseParameter"],

        state: function () {
            return {
                parameterValue: undefined
            };
        },

        childContext: ["computedParameterValue"],
        computed: {
            comboType: function () {
                switch (this.model.type) {
                    case BICst.DESIGN.WIDGET.MONTH:
                    case BICst.DESIGN.WIDGET.QUARTER:
                        return "bi.filter_control.param_setting.combo.double";
                    case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                        return "bi.filter_control.param_setting.combo.double.vertical";
                    case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                        return "bi.filter_control.param_setting.combo.quadruple";
                    case BICst.DESIGN.WIDGET.STRING:
                    case BICst.DESIGN.WIDGET.STRING_LABEL:
                    case BICst.DESIGN.WIDGET.STRING_LIST:
                    case BICst.DESIGN.WIDGET.YEAR:
                    case BICst.DESIGN.WIDGET.DATE:
                    case BICst.DESIGN.WIDGET.DATE_PANE:
                    default:
                        return "bi.filter_control.param_setting.combo.single";
                }
            },

            minWidth: function () {
                switch (this.model.type) {
                    case BICst.DESIGN.WIDGET.MONTH:
                    case BICst.DESIGN.WIDGET.QUARTER:
                        return 330;
                    case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                        return 390;
                    case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    case BICst.DESIGN.WIDGET.STRING:
                    case BICst.DESIGN.WIDGET.STRING_LABEL:
                    case BICst.DESIGN.WIDGET.STRING_LIST:
                    case BICst.DESIGN.WIDGET.YEAR:
                    case BICst.DESIGN.WIDGET.DATE:
                    case BICst.DESIGN.WIDGET.DATE_PANE:
                    default:
                        return 250;
                }
            },

            maxHeight: function () {
                switch (this.model.type) {
                    case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                        return 200;
                    case BICst.DESIGN.WIDGET.MONTH:
                    case BICst.DESIGN.WIDGET.QUARTER:
                    case BICst.DESIGN.WIDGET.STRING:
                    case BICst.DESIGN.WIDGET.STRING_LABEL:
                    case BICst.DESIGN.WIDGET.STRING_LIST:
                    case BICst.DESIGN.WIDGET.YEAR:
                    case BICst.DESIGN.WIDGET.DATE:
                    case BICst.DESIGN.WIDGET.DATE_PANE:
                    default:
                        return 140;
                }
            },

            computedParameterValue: function () {
                if (BI.isNull(this.model.parameterValue)) {
                    var widget = this.model.widget || {};
                    return widget.parameterValue || [];
                }

                return this.model.parameterValue;
            }
        },

        actions: {
            setUseParameter: function (v) {
                this.model.useParameter = v;
            },

            setParameterValue: function (v) {
                this.model.parameterValue = v;
            }
        }
    });
    BI.model("bi.model.filter_control.param_setting", Model);
})();
/**
 * Created by Urthur on 2017/11/9.
 */
!(function () {
    var Filter = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-dimension-filter-popover-center"
        },

        _store: function () {
            var o = this.options;
            return BI.Models.getModel("bi.model.dimension.filter.popover.center", {
                dId: o.dId,
                wId: o.wId
            });
        },

        render: function () {
            var self = this, o = this.options;
            var service = BI.Services.getService("bi.service.design.dimension.filter");
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.filter",
                        items: this.model.conditions,
                        itemCreator: function (item) {
                            var t = service.createFilterItemByFilterType(item.value);
                            item.type = t.type;
                            if(BI.has(item, "targetId")) {
                                item.dimensionGroupId = item.targetId;
                            }
                            item.wId = item.wId || o.wId;
                            service.checkFilterValid(o.wId, item);
                            item.dimensionGroupId = BI.Utils.isDimensionGroupIdExist(o.wId, item.dimensionGroupId) ? item.dimensionGroupId : BI.Utils.getDimensionsGroupIdBydId(o.dId);
                            item.afterValueChange = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                            item.onDelete = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                        },
                        expander: {
                            type: "bi.and.or.filter.expander"
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.store.setFilter(this.getValue()[0]);
                            }
                        }],
                        ref: function (_ref) {
                            self.filter = _ref;
                        }
                    },
                    top: -10,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        },

        getValue: function () {
            return this.store.getFilterValue();
        }
    });
    BI.shortcut("bi.design.dimension.filter.popover.center", Filter);
}());
/**
 * Created by Urthur on 2017/11/9.
 */
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                dId: this.options.dId,
                wId: this.options.wId,
                value: BI.Utils.getSwitchMeasureFilterById(this.options.dId)
            };
        },

        computed: {
            conditions: function () {
                var filter = Fix.toJSON(this.model.value);
                return this._transformConditions2Tree(BI.isNotEmptyObject(filter) ? [filter] : []);
            }
        },

        actions: {
            setFilter: function (v) {
                this.model.value = v;
            },

            getFilterValue: function () {
                return this.model.value;
            }
        },

        _transformConditions2Tree: function (conditions) {
            var self = this;
            BI.each(conditions, function (i, condition) {
                condition.id || (condition.id = BI.UUID());
                condition.value = condition.filterType;
                if (condition.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || condition.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
                    condition.children = condition.filterValue;
                    self._transformConditions2Tree(condition.children);
                }
            });
            return conditions;
        }
    });
    BI.model("bi.model.dimension.filter.popover.center", Model);
}());
!(function () {
    var Service = BI.inherit(BI.OB, {

        createFilterItemByDimensionType: function (dimensionType) {
            var filterType, type;
            switch (dimensionType) {
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    filterType = BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE;
                    type = "bi.design.dimension.filter.string";
                    break;
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    filterType = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                    type = "bi.design.dimension.filter.number";
                    break;
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    filterType = BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE;
                    type = "bi.design.dimension.filter.date";
                    break;
                default :
                    type = "bi.design.dimension.filter.no.type";
                    break;
            }
            return {
                type: type,
                filterType: filterType
            };
        },

        createFilterItemByFilterType: function (filterType) {
            var type = "";
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                case BICst.ANALYSIS_FILTER_STRING.TOP_N:
                case BICst.ANALYSIS_FILTER_STRING.BOTTOM_N:
                    type = "bi.design.dimension.filter.string";
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.TOP_N:
                case BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                    type = "bi.design.dimension.filter.number";
                    break;
                case BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN:
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO:
                case BICst.ANALYSIS_FILTER_DATE.CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.END_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_END_WITH:
                case BICst.ANALYSIS_FILTER_DATE.TOP_N:
                case BICst.ANALYSIS_FILTER_DATE.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                    type = "bi.design.dimension.filter.date";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.AND:
                case BICst.ANALYSIS_FILTER_TYPE.OR:
                    type = "bi.and.or.filter.expander";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.FORMULA:
                    type = "bi.design.dimension.filter.formula";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA:
                    type = "bi.design.dimension.filter.empty.formula";
                    break;
                case BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION:
                    type = "bi.design.dimension.filter.no.type";
                    break;
                default :
                    type = "bi.design.dimension.filter.no.type";
                    break;
            }
            return {
                type: type
            };
        },

        checkFilterValid: function (wId, filter) {
            var o = this.options;
            if (!BI.contains([BICst.ANALYSIS_FILTER_TYPE.FORMULA, BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA], filter.value) && !BI.Utils.isDimensionGroupIdExist(wId, filter.dimensionGroupId)) {
                filter.filterType = BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION;
                filter.type = "bi.design.dimension.filter.no.type";
                delete filter.targetId;
                delete filter.filterValue;
            }
            if (BI.has(filter, "formulaIds")) {
                var ids = filter.formulaIds || [];
                var result = BI.find(ids, function (idx, id) {
                    return !BI.Utils.isDimensionGroupIdExist(o.wId, id);
                });
                if (BI.isNotNull(result)) {
                    filter.filterType = BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA;
                    filter.type = "bi.design.dimension.filter.empty.formula";
                    delete filter.filterValue;
                    delete filter.formulaIds;
                }
            }
        }

    });
    BI.service("bi.service.design.dimension.filter", Service);
})();!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 230,
            TIME_INTERVAL_HEIGHT: 24
        },

        props: {
            baseCls: "bi-dimension-date-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.date.filter", {
                dimensionGroupId: this.options.dimensionGroupId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            var info = this.model.typeItemsInfo;
            this._refreshFilterWidget(info.filterType, this.model.filterValue);
            var fieldName = BI.Utils.getDimensionNameById(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, o.dimensionGroupId));
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                warningTitle: BI.i18nText("BI-Basic_Field_Cannot_Find"),
                                text: fieldName,
                                title: fieldName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: info.items,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: info.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: fieldName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, filterValue) {
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_STRING_VALUE:
                    this._createStringBelongCombo(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.NOT_CONTAIN:
                    this._createStringInput(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.TOP_N:
                case BICst.ANALYSIS_FILTER_STRING.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_DATE.TOP_N:
                case BICst.ANALYSIS_FILTER_DATE.BOTTOM_N:
                    this._createNInput(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                case BICst.ANALYSIS_FILTER_DATE.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.END_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_END_WITH:
                    this._createStringInput(filterValue);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                    this.filterWidget = BI.createWidget();
                    break;
                default:
                    this.filterWidget = BI.createWidget();
            }
        },

        _createStringBelongCombo: function (initData) {
            var o = this.options, self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.select_dimension_data_combo",
                width: 200,
                dimensionGroupId: o.dimensionGroupId,
                wId: o.wId,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createStringInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "condition-operator-input bi-border",
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.filterType.setValue(context.filterType);
            this._refreshFilterWidget(context.filterType, context.filterValue);
        },

        getValue: function () {
            return {
                targetId: this.options.dimensionGroupId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });

    BI.shortcut("bi.design.dimension.filter.date", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {
            typeItemsInfo: function () {
                var items = [], values = [];
                var filterType = this.model.filterType;
                switch (BI.Utils.getDimensionGroupTypeById(BI.Utils.getDimensionIdByDimensionGroupId(null, this.options.dimensionGroupId))) {
                    case BICst.GROUP.Y:
                    case BICst.GROUP.M:
                    case BICst.GROUP.W:
                    case BICst.GROUP.S:
                    case BICst.GROUP.D:
                    case BICst.GROUP.WEEK_COUNT:
                    case BICst.GROUP.HOUR:
                    case BICst.GROUP.MINUTE:
                    case BICst.GROUP.SECOND:
                        items = BI.Constants.getConstant("bi.constant.design.dimension_string_item");
                        values = this.getComboItemsValues(items);
                        filterType = BI.contains(values, filterType) ? filterType : BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE;
                        break;
                    case BICst.GROUP.YM:
                    case BICst.GROUP.YS:
                    case BICst.GROUP.YW:
                    case BICst.GROUP.YMD:
                    case BICst.GROUP.YMDH:
                    case BICst.GROUP.YMDHM:
                    case BICst.GROUP.YMDHMS:
                    default:
                        items = BI.Constants.getConstant("bi.constant.design.dimension_date_item");
                        values = this.getComboItemsValues(items);
                        filterType = BI.contains(values, filterType) ? filterType : BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE;
                        break;
                }
                return {
                    items: items,
                    filterType: filterType
                };
            }
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        },

        getComboItemsValues: function (items) {
            return BI.flatten(BI.map(items, function (idx, item) {
                return BI.map(item, function (id, it) {
                    return it.value;
                });
            }));
        }
    });
    BI.model("bi.model.dimension.date.filter", Model);
})();!(function () {

    var constants = {
        NUMBER: 0,
        STRING: 1,
        DATE: 2,
        LEFT_ITEMS_H_GAP: 10,
        CONTAINER_HEIGHT: 40,
        CONDITION_TYPE_COMBO_ADJUST: 2,
        BUTTON_HEIGHT: 30,
        FORMULA_V_GAP: 10,
        ADD_FORMULA_POPUP_WIDTH: 600,
        FORMULA_H_GAP: 20,
        HEIGHT_MAX: 10000,
        MAX_HEIGHT: 500,
        MAX_WIDTH: 600
    };

    var Item = BI.inherit(BI.AbstractFilterItem, {
        props: {
            baseCls: "bi-dimension-empty-formula-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.filter.empty_formula");
        },

        watch: {
            formulaValue: function (formulaValue) {
                this._onEditFormula(formulaValue);
                this._setNodeData({
                    value: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                    id: this.options.id,
                    filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                    filterValue: this.getValue().filterValue,
                    formulaIds: this.model.formulaIds
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                ref: function () {
                    self.group = this;
                },
                items: [{
                    type: "bi.left_right_vertical_adapt",
                    cls: "item-no-type",
                    height: constants.CONTAINER_HEIGHT,
                    items: {
                        left: [this._buildFormulaEmpty()],
                        right: [{
                            type: "bi.icon_button",
                            cls: "close-h-font delete-button",
                            listeners: [{
                                eventName: "__EVENT_CHANGE__",
                                action: function () {
                                    self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                    o.onDelete(o.id);
                                }
                            }]
                        }]
                    },
                    lhgap: constants.LEFT_ITEMS_H_GAP,
                    rhgap: constants.LEFT_ITEMS_H_GAP
                }],
                layouts: [{
                    type: "bi.vertical"
                }]
            };
        },

        _buildFormulaEmpty: function () {
            var self = this, o = this.options;

            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                isNeedAdjustWidth: false,
                adjustLength: constants.CONDITION_TYPE_COMBO_ADJUST,
                el: {
                    type: "bi.button",
                    level: "common",
                    text: BI.i18nText("BI-Basic_Edit_Formula")
                },
                popup: {
                    el: {
                        type: "bi.absolute",
                        height: constants.HEIGHT_MAX,
                        width: constants.ADD_FORMULA_POPUP_WIDTH,
                        items: [{
                            el: {
                                type: "bi.formula_combo_popup",
                                fieldItems: this._getTargetItems(),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setValue(self.editFormula.getValue()[0], self.popup.getFormulaTargetIds());
                                    }
                                }, {
                                    eventName: "EVENT_VALUE_CANCEL",
                                    action: function () {
                                        self.editFormula.hideView();
                                    }
                                }],
                                ref: function () {
                                    self.popup = this;
                                }
                            },
                            top: constants.FORMULA_V_GAP,
                            left: constants.FORMULA_H_GAP,
                            right: constants.FORMULA_H_GAP,
                            bottom: 0
                        }]
                    },
                    stopPropagation: false,
                    maxHeight: constants.MAX_HEIGHT,
                    width: constants.MAX_WIDTH
                },
                ref: function (_ref) {
                    self.editFormula = _ref;
                }
            };
        },

        _onEditFormula: function (value) {
            var o = this.options, self = this;
            this.group.populate([{
                type: "bi.design.dimension.filter.formula",
                cls: "no-type-container",
                id: this.options.id,
                wId: this.options.wId,
                dId: this.options.dId,
                fieldId: this.options.fieldId,
                filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                filterValue: value,
                formulaIds: this.model.formulaIds,
                node: o.node,
                afterValueChange: o.afterValueChange,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }],
                ref: function () {
                    self.formulaItem = this;
                }
            }]);
        },

        _getTargetItems: function () {
            var o = this.options;
            var fieldItems = [[]];
            var tIds = BI.Utils.getAllTargetDimensionIds(o.wId);
            var targetObjs = [];
            var uniqueMap = {};
            BI.each(tIds, function (idx, tid) {
                var dimensionGroupId = BI.Utils.getDimensionsGroupIdBydId(tid);
                var fieldName = BI.Utils.getDimensionNameById(tid);
                var type = BI.Utils.getDimensionTypeById(tid);
                if (!uniqueMap[dimensionGroupId]) {
                    targetObjs.push({id: dimensionGroupId, text: fieldName, type: type});
                    uniqueMap[dimensionGroupId] = true;
                }
            });
            BI.each(targetObjs, function (i, obj) {
                var fieldType = BICst.COLUMN.STRING;
                switch (obj.type) {
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                        fieldType = BICst.COLUMN.STRING;
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                        fieldType = BICst.COLUMN.DATE;
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                        fieldType = BICst.COLUMN.NUMBER;
                        break;
                }
                fieldItems[0].push({
                    text: obj.text,
                    value: obj.id,
                    fieldType: fieldType
                });
            });
            return fieldItems;
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        getValue: function () {
            if(BI.isNotNull(this.formulaItem)) {
                return this.formulaItem.getValue();
            }
            return {
                id: this.options.id,
                filterType: BICst.ANALYSIS_FILTER_TYPE.EMPTY_FORMULA
            };
        }
    });
    BI.shortcut("bi.design.dimension.filter.empty.formula", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                formulaValue: null,
                formulaIds: []
            };
        },

        actions: {
            setValue: function (formulaValue, formulaIds) {
                this.setFormulaValue(formulaValue);
                this.setFormulaIds(formulaIds);
            },

            setFormulaValue: function (v) {
                this.model.formulaValue = v;
            },

            setFormulaIds: function (v) {
                this.model.formulaIds = v;
            }
        }
    });
    BI.model("bi.model.dimension.filter.empty_formula", Model);
})();
!(function () {

    var constants = {
        NUMBER: 0,
        STRING: 1,
        DATE: 2
    };
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 5,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 30,
            FIELD_NAME_BUTTON_WIDTH: 120,
            ICON_BUTTON_WIDTH: 22,
            TEXT_BUTTON_H_GAP: 10
        },

        props: {
            baseCls: "bi-dimension-filter-formula-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.filter.formula", {
                id: this.options.id,
                filterValue: this.options.filterValue,
                targetIds: this.options.formulaIds
            });
        },

        watch: {
            formulaValue: function () {
                this._setNodeData({
                    filterValue: this.getValue(),
                    formulaIds: this.formula.getFormulaTargetIds()
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this.id = o.id;
            var left = this._buildFormula();

            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.td",
                    columnSize: [this._constant.FIELD_NAME_BUTTON_WIDTH, "", this._constant.ICON_BUTTON_WIDTH],
                    height: this._constant.CONTAINER_HEIGHT,
                    items: [[left[0], left[1], {
                        type: "bi.icon_button",
                        cls: "close-h-font delete-button",
                        width: this._constant.ICON_BUTTON_WIDTH,
                        listeners: [{
                            eventName: "IconButton.EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                o.onDelete(o.id);
                            }
                        }]
                    }]]
                }]
            };

        },

        _buildFormula: function () {
            var self = this;
            return [{
                type: "bi.text_button",
                text: BI.i18nText("BI-Basic_Fulfil"),
                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                height: this._constant.CONTAINER_HEIGHT,
                textAlign: "left",
                hgap: this._constant.TEXT_BUTTON_H_GAP,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                    }
                }]
            }, {
                type: "bi.formula_combo",
                items: this._getTargetItems(),
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFormula(this.getValue(), this.getFormulaTargetIds());
                    }
                }],
                value: this.options.filterValue,
                ref: function (_ref) {
                    self.formula = _ref;
                },
                warningTitle: this.model.warningTitle
            }];
        },

        _getTargetItems: function () {
            var o = this.options;
            var fieldItems = [[]];
            var tIds = BI.Utils.getAllTargetDimensionIds(o.wId);
            var targetObjs = [];
            var uniqueMap = {};
            BI.each(tIds, function (idx, tid) {
                var dimensionGroupId = BI.Utils.getDimensionsGroupIdBydId(tid);
                var fieldName = BI.Utils.getDimensionNameById(tid);
                var type = BI.Utils.getDimensionTypeById(tid);
                if (!uniqueMap[dimensionGroupId]) {
                    targetObjs.push({id: dimensionGroupId, text: fieldName, type: type});
                    uniqueMap[dimensionGroupId] = true;
                }
            });
            BI.each(targetObjs, function (i, obj) {
                var fieldType = BICst.COLUMN.STRING;
                switch (obj.type) {
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                        fieldType = BICst.COLUMN.STRING;
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                        fieldType = BICst.COLUMN.DATE;
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    default:
                        fieldType = BICst.COLUMN.NUMBER;
                        break;
                }
                fieldItems[0].push({
                    text: obj.text,
                    value: obj.id,
                    fieldType: fieldType
                });
            });
            return fieldItems;
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.formula.setValue(context.filterValue);
        },

        getValue: function () {
            return {
                id: this.id,
                filterType: BICst.ANALYSIS_FILTER_TYPE.FORMULA,
                filterValue: this.model.formulaValue,
                formulaIds: this.model.targetIds
            };
        }

    });
    BI.shortcut("bi.design.dimension.filter.formula", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                formulaValue: this.options.filterValue,
                targetIds: this.options.targetIds || []
            };
        },

        actions: {
            setFormulaValue: function (v) {
                this.model.formulaValue = v;
            },

            setFormula: function (value, ids) {
                this.setFormulaValue(value);

                this.model.targetIds = ids;
            }
        }
    });
    BI.model("bi.model.dimension.filter.formula", Model);
})();
!(function () {

    var constants = {
        LEFT_ITEMS_H_GAP: 10,
        CONTAINER_HEIGHT: 40,
        CONDITION_TYPE_COMBO_ADJUST: 2,
        BUTTON_HEIGHT: 30,
        MAX_HEIGHT: 400
    };

    var Item = BI.inherit(BI.AbstractFilterItem, {
        props: {
            baseCls: "bi-dimension-no-type-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.filter.no_type");
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                ref: function () {
                    self.group = this;
                },
                items: [{
                    type: "bi.left_right_vertical_adapt",
                    cls: "item-no-type",
                    height: constants.CONTAINER_HEIGHT,
                    items: {
                        left: [this._buildConditionsNoType()],
                        right: [{
                            type: "bi.icon_button",
                            cls: "close-h-font delete-button",
                            listeners: [{
                                eventName: "__EVENT_CHANGE__",
                                action: function () {
                                    self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                    o.onDelete(o.id);
                                }
                            }]
                        }]
                    },
                    lhgap: constants.LEFT_ITEMS_H_GAP,
                    rhgap: constants.LEFT_ITEMS_H_GAP
                }],
                layouts: [{
                    type: "bi.vertical",
                    scrolly: false
                }]
            };
        },

        _buildConditionsNoType: function () {
            var self = this, o = this.options;
            if(BI.isNull(o.dimensionGroupId)) {
                return [];
            }
            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                adjustLength: constants.CONDITION_TYPE_COMBO_ADJUST,
                el: {
                    type: "bi.button",
                    level: "common",
                    text: BI.i18nText("BI-Basic_Please_Select_Field")
                },
                popup: {
                    el: {
                        type: "bi.dimension_filter_select_field",
                        height: constants.MAX_HEIGHT,
                        wId: o.wId,
                        dimensionGroupId: o.dimensionGroupId,
                        listeners: [{
                            eventName: "EVENT_CLICK_ITEM",
                            action: function (v) {
                                self._onTypeSelected(v);
                            }
                        }]
                    },
                    minHeight: 200,
                    minWidth: 150,
                    maxHeight: constants.MAX_HEIGHT
                }
            };
        },

        _onTypeSelected: function (v) {
            var self = this, o = this.options;
            var dimensionType = BI.Utils.getDimensionTypeById(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, v));
            var filterItem = BI.Services.getService("bi.service.design.dimension.filter").createFilterItemByDimensionType(dimensionType);
            this.group.populate([BI.extend(filterItem, {
                id: o.id,
                dimensionGroupId: v,
                wId: o.wId,
                node: o.node,
                cls: "no-type-container",
                afterValueChange: o.afterValueChange,
                listeners: [{
                    eventName: "__EVENT_CHANGE__",
                    action: function () {
                        self.fireEvent("__EVENT_CHANGE__", arguments);
                    }
                }],
                ref: function () {
                    self.typeSelectedItem = this;
                }
            })]);
            o.node.set("data", BI.extend(o.node.get("data"), {
                value: filterItem.filterType,
                filterType: filterItem.filterType,
                dimensionGroupId: v
            }));
            o.afterValueChange();
        },

        getValue: function () {
            if(BI.isNotNull(this.typeSelectedItem)) {
                return this.typeSelectedItem.getValue();
            }
            return {
                filterType: BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION
            };
        }
    });
    BI.shortcut("bi.design.dimension.filter.no.type", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            };
        },

        computed: {

        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.dimension.filter.no_type", Model);
})();/**
 * 维度过滤——数值字段类型过滤条件
 */
!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 200
        },

        props: {
            baseCls: "bi-dimension-number-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.number.filter", {
                dimensionGroupId: this.options.dimensionGroupId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.filterValue);
            var fieldName = BI.Utils.getDimensionNameById(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, o.dimensionGroupId));
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                warningTitle: BI.i18nText("BI-Basic_Field_Cannot_Find"),
                                text: fieldName,
                                title: fieldName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.target_number_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: fieldName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, initData) {

            switch (filterType) {
                case BICst.ANALYSIS_FILTER_NUMBER.TOP_N:
                case BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N:
                    this._createNFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                    this._createNumberIntervalFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                    this._createNumberInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                    this._createNumberOneSideFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                default:
                    this.filterWidget = BI.createWidget();
                    break;

            }
        },

        _createNFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNumberOneSideFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_one_side",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: 250,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            initData = initData || {
                type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                value: null
            };
            this.filterWidget.setValue(initData);
        },

        _createNumberIntervalFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.number_interval",
                width: this._constant.INPUT_WIDTH,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNumberInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "bi-border",
                validationChecker: function (v) {
                    return BI.isNumeric(v);
                },
                errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);

        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.filterType.setValue(context.filterType);
            this._refreshFilterWidget(context.filterType, context.filterValue);
        },

        getValue: function () {
            return {
                id: this.options.id,
                targetId: this.options.dimensionGroupId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });
    BI.shortcut("bi.design.dimension.filter.number", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {
            // actualFilterType: function () {
            //     var stringValues = BI.map(BI.flatten(BI.Constants.getConstant("bi.constant.design.dimension_number_item")), "value");
            //     if(this.model.isDimension === false) {
            //         return this.model.filterType;
            //     }
            //     return BI.contains(stringValues, this.model.filterType) ? this.model.filterType : BICst.ANALYSIS_FILTER_NUMBER.BELONG_STRING_VALUE;
            // }
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.dimension.number.filter", Model);
})();/**
 * @class BI.ConfTargetStringFieldFilterItem
 * @extend BI.AbstractFilterItem
 * 指标过滤——文本字段类型过滤条件
 */
!(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 200
        },

        props: {
            extraCls: "bi-dimension-string-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension.string.filter", {
                dimensionGroupId: this.options.dimensionGroupId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.filterValue);
            var fieldName = BI.Utils.getDimensionNameById(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, o.dimensionGroupId));

            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                warningTitle: BI.i18nText("BI-Basic_Field_Cannot_Find"),
                                text: fieldName,
                                title: fieldName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.dimension_string_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: fieldName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, initData) {
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                    this._createStringBelongCombo(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                    this._createStringInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.TOP_N:
                case BICst.ANALYSIS_FILTER_STRING.BOTTOM_N:
                    this._createNInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                    this.filterWidget = BI.createWidget();
                    break;
                default:
                    this.filterWidget = BI.createWidget();
            }
        },

        _createStringBelongCombo: function (initData) {
            var o = this.options, self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.select_dimension_data_combo",
                dimensionGroupId: o.dimensionGroupId,
                wId: o.wId,
                width: this._constant.INPUT_WIDTH,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }],
                value: initData
            });
        },

        _createStringInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "condition-operator-input bi-border",
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        getValue: function () {
            return {
                targetId: this.options.dimensionGroupId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });

    BI.shortcut("bi.design.dimension.filter.string", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.dimension.string.filter", Model);
})();BI.SelectDataLevelNode = BI.inherit(BI.NodeButton, {
    _defaultConfig: function () {
        return BI.extend(BI.SelectDataLevelNode.superclass._defaultConfig.apply(this, arguments), {
            extraCls: "bi-select-data-level0-node bi-list-item",
            id: "",
            pId: "",
            layer: 0,
            open: false,
            height: 25
        });
    },
    _init: function () {
        var title = this.options.title;
        var warningTitle = this.options.warningTitle;
        this.options.title = "";
        this.options.warningTitle = "";
        BI.SelectDataLevelNode.superclass._init.apply(this, arguments);
        var self = this, o = this.options;
        this.checkbox = BI.createWidget({
            type: "bi.arrow_group_node_checkbox"
        });
        this.text = BI.createWidget({
            type: "bi.label",
            textAlign: "left",
            whiteSpace: "nowrap",
            textHeight: o.height,
            height: o.height,
            hgap: o.hgap,
            text: o.text,
            value: o.value,
            keyword: o.keyword,
            title: title,
            warningTitle: warningTitle,
            disabled: o.disabled,
            py: o.py
        });
        this.tip = BI.createWidget({
            type: "bi.label",
            cls: "select-data-selected-count-label",
            whiteSpace: "nowrap",
            width: 25,
            height: o.height
        });
        this.checkbox.on(BI.Controller.EVENT_CHANGE, function (type) {
            if (type === BI.Events.CLICK) {
                self.setSelected(self.isSelected());
            }
            self.fireEvent(BI.Controller.EVENT_CHANGE, arguments);
        });

        BI.createWidget({
            type: "bi.htape",
            element: this,
            items: [{
                el: {
                    type: "bi.layout"
                },
                width: o.layer * 20
            }, {
                width: 23,
                el: this.checkbox
            }, {
                el: this.text
            }, {
                width: 25,
                el: this.tip
            }]
        });
    },

    doRedMark: function () {
        this.text.doRedMark.apply(this.text, arguments);
    },

    unRedMark: function () {
        this.text.unRedMark.apply(this.text, arguments);
    },

    doClick: function () {
        BI.SelectDataLevelNode.superclass.doClick.apply(this, arguments);
        this.checkbox.setSelected(this.isOpened());
    },

    setOpened: function (v) {
        BI.SelectDataLevelNode.superclass.setOpened.apply(this, arguments);
        this.checkbox.setSelected(v);
    },

    setValue: function (items) {
        BI.SelectDataLevelNode.superclass.setValue.apply(this, arguments);
        if (BI.isEmpty(items)) {
            this.tip.setText("");
        } else {
            this.tip.setText("(" + items.length + ")");
        }
        this.tip.setTitle(items.toString());
    }
});

BI.shortcut("bi.select_data_level_node", BI.SelectDataLevelNode);!(function () {
    var constants = {
        ICON_WIDTH: 25,
        ICON_HEIGHT: 25,
        CLASSIFY: 0,
        SERIES: 1
    };

    var DimensionSelectDataLevel0Node = BI.inherit(BI.NodeButton, {

        props: {
            extraCls: "bi-dimension-select-data-level0-node bi-list-item",
            id: "",
            pId: "",
            open: false,
            fontType: 0,
            height: 25
        },

        render: function () {
            var self = this, o = this.options;

            var cssInfo = this._getFontColor(o.fontType);

            return {
                type: "bi.htape",
                items: [{
                    width: 23,
                    el: {
                        type: "bi.arrow_group_node_checkbox",
                        ref: function () {
                            self.checkbox = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {

                            }
                        }]
                    }
                }, {
                    el: {
                        type: "bi.label",
                        textAlign: "left",
                        cls: cssInfo.textColor,
                        whiteSpace: "nowrap",
                        textHeight: o.height,
                        height: o.height,
                        hgap: o.hgap,
                        text: o.text,
                        value: o.value,
                        py: o.py,
                        ref: function () {
                            self.text = this;
                        }
                    }
                }]
            };
        },

        _getFontColor: function (type) {
            switch (type) {
                case constants.CLASSIFY:
                    return {
                        font: "classify-font",
                        textColor: "dimension-classify-label"
                    };
                case constants.SERIES:
                default:
                    return {
                        font: "series-font",
                        textColor: "dimension-series-label"
                    };
            }
        },

        doRedMark: function () {
            this.text.doRedMark.apply(this.text, arguments);
        },

        unRedMark: function () {
            this.text.unRedMark.apply(this.text, arguments);
        },

        doClick: function () {
            DimensionSelectDataLevel0Node.superclass.doClick.apply(this, arguments);
            this.checkbox.setSelected(this.isOpened());
        },

        setOpened: function (v) {
            DimensionSelectDataLevel0Node.superclass.setOpened.apply(this, arguments);
            this.checkbox.setSelected(v);
        },

        setValue: function () {
            DimensionSelectDataLevel0Node.superclass.setValue.apply(this, arguments);
        }
    });

    BI.shortcut("bi.dimension_select_data_level0_node", DimensionSelectDataLevel0Node);
})();!(function () {
    var constants = {
        DIMENSION_FIELD: 1,
        TARGET_FIELD: 2
    };
    var DimensionFilterSelectField = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-dimension-filter-select-field"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.dimension_filter_select_field", {
                wId: this.options.wId,
                dimensionGroupId: this.options.dimensionGroupId
            });
        },

        watch: {
            tableFieldItems: function (tableFieldsItems) {
                this.pane.populate(tableFieldsItems, this.model.keyword);
                this.pane.check();
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.search_editor",
                    hgap: 5,
                    listeners: [{
                        eventName: BI.SearchEditor.EVENT_CLEAR,
                        action: function () {
                            self.store.setKeyword(this.getValue());
                        }
                    }, {
                        eventName: BI.SearchEditor.EVENT_CHANGE,
                        action: function () {
                            self.store.setKeyword(this.getValue());
                        }
                    }],
                    height: 22
                }, {
                    type: "bi.select_data_tree",
                    items: this.model.tableFieldItems,
                    ref: function (ref) {
                        self.pane = ref;
                    },
                    el: {
                        el: {
                            chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
                        }
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function (v) {
                            self.fireEvent("EVENT_CLICK_ITEM", v);
                        }
                    }]
                }],
                vgap: 5
            };
        },

        mounted: function () {
            this.pane.check();
        }
    });
    BI.shortcut("bi.dimension_filter_select_field", DimensionFilterSelectField);
})();!(function () {

    var constants = {
        DIMENSION_FIELD: 1,
        TARGET_FIELD: 2
    };

    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                keyword: ""
            };
        },

        computed: {
            tableFieldItems: function () {
                var self = this, o = this.options;
                var tables = [{
                    id: constants.DIMENSION_FIELD,
                    type: "bi.dimension_select_data_level0_node",
                    text: BI.i18nText("BI-Design_Dimension"),
                    value: BI.i18nText("BI-Design_Dimension"),
                    isParent: true,
                    fontType: 0,
                    open: true
                }, {
                    id: constants.TARGET_FIELD,
                    type: "bi.dimension_select_data_level0_node",
                    text: BI.i18nText("BI-Design_Target"),
                    value: BI.i18nText("BI-Design_Target"),
                    isParent: true,
                    fontType: 1,
                    open: true
                }];
                var dimensionFields = self._getFieldStructure(constants.DIMENSION_FIELD, o.dimensionGroupId);
                var targetFields = self._getFieldStructure(constants.TARGET_FIELD);
                var searchResult = BI.Func.getSearchResult(BI.concat(dimensionFields, targetFields), this.model.keyword);
                var result = BI.concat(searchResult.match, searchResult.find);
                var hasDimension = false, hasTarget = false;
                BI.any(result, function (idx, res) {
                    if(res.pId === constants.DIMENSION_FIELD && !hasDimension) {
                        hasDimension = true;
                    }
                    if(res.pId === constants.TARGET_FIELD && !hasTarget) {
                        hasTarget = true;
                    }
                    return hasDimension && hasTarget;
                });
                if(hasDimension) {
                    result.push(tables[0]);
                }
                if(hasTarget) {
                    result.push(tables[1]);
                }
                if(result.length === 0) {
                    result.push({
                        type: "bi.label",
                        textAlign: "center",
                        text: BI.i18nText("BI-Conf_Search_Content_Is_Empty"),
                        disabled: true
                    });
                }
                return result;
            }
        },

        actions: {
            setKeyword: function (v) {
                this.model.keyword = v;
            }
        },

        _getFieldStructure: function (tableId, dimensionGroupId) {
            var self = this, o = this.options;
            var dId = BI.Utils.getDimensionIdByDimensionGroupId(o.wId, dimensionGroupId);
            if (constants.DIMENSION_FIELD === tableId) {
                var name = BI.Utils.getDimensionNameById(dId);
                var fieldId = BI.Utils.getFieldIdBydId(dId);
                return [{
                    id: fieldId,
                    pId: constants.DIMENSION_FIELD,
                    type: "bi.select_data_level_item",
                    fieldType: BI.Utils.getFieldTypeByIdOfWidget(self.options.wId, fieldId),
                    text: name,
                    title: name,
                    value: dimensionGroupId
                }];
            }
            var allTargets = BI.Utils.getAllTargetDimensionIds(self.options.wId);
            var result = [];
            var uniqueMap = {};
            var targets = [];
            BI.each(allTargets, function (idx, tid) {
                var dimensionGroupId = BI.Utils.getDimensionsGroupIdBydId(tid);
                var fieldName = BI.Utils.getDimensionNameById(tid);
                if (!uniqueMap[dimensionGroupId]) {
                    targets.push({id: dimensionGroupId, text: fieldName});
                    uniqueMap[dimensionGroupId] = true;
                }
            });
            BI.each(targets, function (i, target) {
                var name = target.text;
                result.push({
                    id: target.id,
                    pId: constants.TARGET_FIELD,
                    type: "bi.select_data_level_item",
                    fieldType: BI.Utils.getFieldTypeByIdOfWidget(o.wId, BI.Utils.getFieldIdBydId(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, target.id))),
                    text: name,
                    title: name,
                    value: target.id
                });
            });
            return result;
        }

    });
    BI.model("bi.model.dimension_filter_select_field", Model);
})();!(function () {
    var Filter = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-target-filter-popover-center"
        },

        _store: function () {
            var o = this.options;
            return BI.Models.getModel("bi.model.target.filter.popover.center", {
                dId: o.dId,
                wId: o.wId
            });
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.filter",
                        el: {
                            type: "bi.filter_operation",
                            selections: [2]
                        },
                        items: this.model.conditions,
                        itemCreator: function (item) {
                            item.type = "bi.design.target.filter.number";
                            item.wId = o.wId;
                            if(BI.has(item, "targetId")) {
                                item.dimensionGroupId = item.targetId;
                            }
                            item.dimensionGroupId = BI.Utils.isDimensionGroupIdExist(o.wId, item.dimensionGroupId) ? item.dimensionGroupId : BI.Utils.getDimensionsGroupIdBydId(o.dId);
                            if (item.value === BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION) {
                                item.value = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                                item.filterType = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                                item.filterValue = {min: "", max: "", closeMin: true, closeMax: false};
                                item.node.set("data", item);
                            }
                            item.afterValueChange = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                            item.onDelete = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                        },
                        expander: {
                            type: "bi.and.or.filter.expander"
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.store.setFilter(this.getValue()[0]);
                            }
                        }],
                        ref: function (_ref) {
                            self.filter = _ref;
                        }
                    },
                    top: -10,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        },

        beforeInit: function (callback) {
            this.store.initFilter(callback);
        },

        getValue: function () {
            return this.store.getFilterValue();
        }
    });
    BI.shortcut("bi.design.target.filter.popover.center", Filter);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                dId: this.options.dId,
                wId: this.options.wId
            };
        },

        computed: {
            conditions: function () {
                var filter = Fix.toJSON(this.model.value);
                return this._transformConditions2Tree(BI.isNotEmptyObject(filter) ? [filter] : []);
            }
        },

        actions: {
            initFilter: function (callback) {
                this.model.value = BI.Utils.getResMeasureFilterById(this.model.dId);
                callback();
            },

            setFilter: function (v) {
                this.model.value = v;
            },

            getFilterValue: function () {
                return this.model.value;
            }
        },

        _transformConditions2Tree: function (conditions) {
            var self = this;
            BI.each(conditions, function (i, condition) {
                condition.id || (condition.id = BI.UUID());
                condition.value = condition.filterType;
                if (condition.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || condition.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
                    condition.children = condition.filterValue;
                    self._transformConditions2Tree(condition.children);
                }
            });
            return conditions;
        }
    });
    BI.model("bi.model.target.filter.popover.center", Model);
}());(function () {
    var Item = BI.inherit(BI.AbstractFilterItem, {

        _constant: {
            LEFT_ITEMS_H_GAP: 10,
            CONTAINER_HEIGHT: 40,
            BUTTON_HEIGHT: 24,
            COMBO_WIDTH: 80,
            FIELD_NAME_BUTTON_WIDTH: 90,
            TEXT_BUTTON_H_GAP: 0,
            INPUT_WIDTH: 200
        },

        props: {
            baseCls: "bi-target-number-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.target.number.filter", {
                dimensionGroupId: this.options.dimensionGroupId,
                filterType: this.options.filterType,
                filterValue: this.options.filterValue
            });
        },

        watch: {
            filterType: function (v) {
                this._refreshFilterWidget(v);
                this.filterWidgetContainer.populate([this.filterWidget]);
                this._setNodeData({
                    filterType: v
                });
                this.options.afterValueChange();
            },

            filterValue: function (v) {
                this._setNodeData({
                    filterValue: v
                });
                this.options.afterValueChange();
            }
        },

        render: function () {
            var self = this, o = this.options;
            this._refreshFilterWidget(this.model.filterType, this.model.filterValue);
            var fieldName = BI.Utils.getDimensionNameById(BI.Utils.getDimensionIdByDimensionGroupId(o.wId, o.dimensionGroupId));
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        height: this._constant.CONTAINER_HEIGHT,
                        items: {
                            left: [{
                                type: "bi.text_button",
                                warningTitle: BI.i18nText("BI-Basic_Field_Cannot_Find"),
                                text: fieldName,
                                title: fieldName,
                                width: this._constant.FIELD_NAME_BUTTON_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                textAlign: "left",
                                hgap: this._constant.TEXT_BUTTON_H_GAP,
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, "", self);
                                    }
                                }]
                            }, {
                                type: "bi.text_value_down_list_combo",
                                width: this._constant.COMBO_WIDTH,
                                height: this._constant.BUTTON_HEIGHT,
                                items: BI.Constants.getConstant("bi.constant.design.target_number_item"),
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.setFilterType(this.getValue()[0]);
                                    }
                                }],
                                value: this.model.filterType,
                                ref: function (_ref) {
                                    self.filterType = _ref;
                                },
                                warningTitle: fieldName + BI.i18nText("BI-Conf_Filter_Type_Cannot_Find")
                            }, {
                                type: "bi.button_group",
                                items: [this.filterWidget],
                                layouts: [{
                                    type: "bi.left"
                                }],
                                ref: function (_ref) {
                                    self.filterWidgetContainer = _ref;
                                }
                            }],
                            right: [{
                                type: "bi.icon_button",
                                cls: "close-h-font delete-button",
                                listeners: [{
                                    eventName: "__EVENT_CHANGE__",
                                    action: function () {
                                        self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                        o.onDelete(o.id);
                                    }
                                }]
                            }]
                        },
                        lhgap: this._constant.LEFT_ITEMS_H_GAP,
                        rhgap: this._constant.LEFT_ITEMS_H_GAP
                    }
                }]
            };
        },

        _refreshFilterWidget: function (filterType, initData) {

            switch (filterType) {
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                    this._createNumberIntervalFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                    this._createNumberInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                    this._createNumberSetInput(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.TOP_N:
                case BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N:
                    this._createNFilter(initData);
                    break;
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                default:
                    this.filterWidget = BI.createWidget();
                    break;

            }
        },

        _createNumberIntervalFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.number_interval",
                width: this._constant.INPUT_WIDTH,
                height: this._constant.BUTTON_HEIGHT,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNumberInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "bi-border",
                validationChecker: function (v) {
                    return BI.isNumeric(v);
                },
                errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);

        },

        _createNumberSetInput: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.sign_editor",
                cls: "bi-border",
                validationChecker: function (v) {
                    return BI.isNumeric(v);
                },
                errorText: BI.i18nText("BI-Numerical_Interval_Input_Data"),
                allowBlank: true,
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                value: BI.isNotNull(initData) ? initData.value : "",
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue({
                            type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                            value: this.getValue()
                        });
                    }
                }]
            });
        },

        _createNFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_n",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: this._constant.INPUT_WIDTH - 2,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            BI.isNotNull(initData) && this.filterWidget.setValue(initData);
        },

        _createNumberOneSideFilter: function (initData) {
            var self = this;
            this.filterWidget = BI.createWidget({
                type: "bi.filter.item.number_one_side",
                height: this._constant.BUTTON_HEIGHT - 2,
                width: 250,
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilterValue(this.getValue());
                    }
                }]
            });
            initData = initData || {
                type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                value: null
            };
            this.filterWidget.setValue(initData);
        },

        _setNodeData: function (v) {
            var o = this.options;
            o.node.set("data", BI.extend(o.node.get("data"), v));
        },

        populate: function (items, keyword, context) {
            this.filterType.setValue(context.filterType);
            this._refreshFilterWidget(context.filterType, context.filterValue);
        },

        getValue: function () {
            return {
                id: this.options.id,
                targetId: this.options.dimensionGroupId,
                filterType: this.model.filterType,
                filterValue: this.model.filterValue
            };
        }
    });
    BI.shortcut("bi.design.target.filter.number", Item);
}());!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.target.number.filter", Model);
})();/**
 * author: young
 * createdDate: 2018/3/30
 * description:
 */
!(function () {
    var FilterPane = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-widgets-table-chart-filter-pane bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widgets.table_chart.filter_pane");
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        watch: {
            filterItems: function () {
                this._populate();
            },
            drillItems: function () {
                this._populate();
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    left: 10,
                    top: 10,
                    right: 10,
                    bottom: 10,
                    el: {
                        type: "bi.vtape",
                        items: [{
                            el: {
                                type: "bi.tab",
                                showIndex: this.model.showIndex,
                                single: true,
                                cardCreator: BI.bind(this._cardCreator, this),
                                ref: function (ref) {
                                    self.tab = ref;
                                }
                            }
                        }, {
                            el: {
                                type: "bi.default"
                            },
                            height: 10
                        }, {
                            el: {
                                type: "bi.right_vertical_adapt",
                                items: [{
                                    type: "bi.button",
                                    text: BI.i18nText("BI-Design_Close_Filter_Pane"),
                                    handler: BI.bind(this.store.closeFilter, this.store)
                                }]
                            },
                            height: 24
                        }]
                    }
                }]
            };
        },

        _cardCreator: function (v) {
            var self = this;
            switch (v) {
                case BICst.TAB.EMPTY:
                    return {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.label",
                            text: BI.i18nText("BI-Design_No_Filter"),
                            cls: "bi-tips",
                            height: 40
                        }]
                    };
                default:
                    return {
                        type: "bi.absolute",
                        items: [{
                            el: {
                                type: "bi.horizontal_adapt",
                                items: [{
                                    el: {
                                        type: "bi.vertical",
                                        items: [{
                                            type: "bi.filter_pane",
                                            cls: "filter-pane bi-card",
                                            items: this.model.filterItems,
                                            ref: function (ref) {
                                                self.filterPane = ref;
                                            }
                                        }, {
                                            type: "bi.button_group",
                                            items: this.model.drillItems,
                                            layouts: [{
                                                type: "bi.left"
                                            }],
                                            ref: function (ref) {
                                                self.drillContainer = ref;
                                            }
                                        }]
                                    },
                                    vgap: 10
                                }],
                                scrollable: true
                            },
                            top: 0,
                            right: 0,
                            bottom: 0,
                            left: 0
                        }]
                    };
            }
        },

        _populate: function () {
            this.tab.setSelect(this.model.showIndex);
            this.filterPane && this.filterPane.populate(this.model.filterItems);
            this.drillContainer && this.drillContainer.populate(this.model.drillItems);
        },

        populate: function () {
            this._populate();
        }
    });
    BI.shortcut("bi.design.widgets.table_chart.filter_pane", FilterPane);
})();
/**
 * author: young
 * createdDate: 2018/3/30
 * description:
 */
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                linkWidgetIds: [],
                linkedFilterItems: []
            };
        },

        context: ["showFilter", "widget", "widgets"],

        computed: {
            showIndex: function () {
                return (this.model.filterItems.length > 0 || this.model.drillItems.length > 0)
                    ? BICst.TAB.CONTENT : BICst.TAB.EMPTY;
            },
            wId: function () {
                return this.model.widget.wId;
            },
            drillItems: function () {
                var wId = this.model.widget.wId;

                return BI.Utils.getDrillItems(wId);
            },
            filterItems: function () {
                var items = BI.Utils.getFilterItemsByWidgetId(this.model.wId, this.removeClickValue);

                var jumpItems = [];

                BI.each(this.model.linkWidgetIds, function (index, linkId) {
                    jumpItems.push({
                        type: "bi.design.table_chart.filter_pane.linkage_item",
                        cls: "bi-split-bottom bi-split-right",
                        id: BI.UUID(),
                        wId: linkId
                    });
                });

                jumpItems = jumpItems.concat(this.model.linkedFilterItems);

                jumpItems = BI.Utils.wrapperFilterItems(jumpItems);

                if (BI.isEmptyArray(items)) {
                    return jumpItems;
                }

                if (BI.isEmptyArray(jumpItems)) {
                    return items;
                }

                return [{
                    value: BICst.ANALYSIS_FILTER_TYPE.AND,
                    children: jumpItems.concat(items),
                    id: BI.UUID()
                }];
            }
        },
        actions: {
            initData: function (callback) {
                var self = this;
                var globalFilter = BI.designData.filter;
                if (BI.isNull(globalFilter) || BI.isEmptyObject(globalFilter)) {
                    callback();

                    return;
                }

                var linkedWidget = globalFilter.linkedWidget;
                var linkedWidgetType = linkedWidget.type;
                var clicked = globalFilter.clicked;
                var relation = BI.i18nText("BI-Basic_In");
                var fId;

                var getFilterValue = function (fId, name) {
                    BI.Utils.getJumpFieldInfoByFieldIds({
                        fieldIds: [fId],
                        clicked: clicked,
                        linkedWidget: linkedWidget
                    }, function (res) {
                        if (BI.isNull(name)) {
                            name = BI.Utils.getFieldTransferName(fId) || BI.Utils.getOriginFieldNameById(fId);
                        }

                        var value = res[fId].join("、");
                        self.model.linkedFilterItems = [{
                            type: "bi.vertical_adapt",
                            cls: "bi-border-right bi-border-bottom",
                            id: BI.UUID(),
                            items: BI.map([{
                                text: name,
                                title: name,
                                cls: "dimension-name bi-tips"
                            }, {
                                text: relation,
                                title: relation
                            }, {
                                text: value,
                                title: value
                            }], function (index, item) {
                                return BI.extend({
                                    type: "bi.label",
                                    height: 30
                                }, item);
                            }),
                            hgap: 10
                        }];
                        callback();
                    });
                };

                var setLinkage = function () {
                    BI.each(BI.get(clicked, "value", []), function (index, val) {
                        var detail = BI.get(val, "detail");
                        var dimensionName = BI.get(detail, "name");
                        var text = BI.Format.formatValueByGroup(val.text, parseInt(BI.get(detail, "groupType")));

                        self.model.linkedFilterItems.push({
                            type: "bi.vertical_adapt",
                            cls: "bi-border-right bi-border-bottom",
                            id: BI.UUID(),
                            items: BI.map([{
                                text: dimensionName,
                                title: dimensionName,
                                cls: "dimension-name bi-tips"
                            }, {
                                text: relation,
                                title: relation
                            }, {
                                text: text,
                                title: text
                            }], function (index, item) {
                                return BI.extend({
                                    type: "bi.label",
                                    height: 30
                                }, item);
                            }),
                            hgap: 10
                        });
                    });

                    callback();
                };

                if (BI.isNull(BI.first(linkedWidget.jump))) {
                    setLinkage();

                    return;
                }

                var isPassValue = BI.get(BI.first(linkedWidget.jump), "isPassValue", false);

                if (linkedWidgetType === BICst.DESIGN.WIDGET.DETAIL) {
                    BI.some(linkedWidget.dimensions, function (dId, dimension) {
                        if (dId !== clicked.dId) return false;

                        fId = dimension.fieldId;
                    });

                    if (BI.isNull(fId)) {
                        callback();

                        return;
                    }

                    getFilterValue(fId);

                    return;
                }

                if (!isPassValue) {
                    setLinkage();

                    return;
                }

                var fIds = BI.first(BI.first(linkedWidget.jump).sourceTargetFields);

                if (BI.isNull(fIds)) {
                    setLinkage();

                    return;
                }

                fId = fIds.sourceFieldId;
                var name = fIds.sourceFieldName;

                if (BI.isNull(fId) || BI.isEmptyString(fId)) {
                    setLinkage();

                    return;
                }

                getFilterValue(fId, name);
            },

            closeFilter: function () {
                this.model.showFilter = false;
            },
            removeClickValue: function (v) {
                var self = this;
                var dId = v.dId;
                var wId = BI.Utils.getWidgetIdBydId(dId);
                var clicked = this.model.widgets[wId].clicked;
                if (BI.isNotNull(clicked) && BI.isNotNull(clicked.value)) {
                    BI.some(clicked.value, function (i, value) {
                        if (BI.isEqual(value, v)) {
                            clicked.value.splice(i, 1);
                            if (clicked.value.length === 0) {
                                Fix.del(self.model.widgets[wId], "clicked");
                            }
                            BI.Broadcasts.send(BICst.BROADCAST.LINKAGE_PREFIX + self.model.widget.wId, wId);
                            return true;
                        }
                    });
                }
            }
        }
    });
    BI.model("bi.model.design.widgets.table_chart.filter_pane", Model);
})();
/**
 * author: young
 * createdDate: 2018/4/11
 * description:
 */
!(function () {
    var ControlItem = BI.inherit(BI.Widget, {
        props: {
            wId: "",
            text: "",
            height: 39
        },

        beforeInit: function (callback) {
            this.widgetName = "";
            var self = this;
            BI.Utils.getWidgetNameById(this.options.wId, function (names) {
                self.widgetName = names[self.options.wId];
                callback();
            });
        },

        render: function () {
            var o = this.options;

            return {
                type: "bi.vertical_adapt",
                items: [{
                    el: {
                        type: "bi.center_adapt",
                        cls: this.options.iconCls + " control-widget-font bi-disabled",
                        items: [{
                            type: "bi.icon"
                        }],
                        width: 20,
                        height: o.height
                    },
                    width: 20
                }, {
                    el: {
                        type: "bi.label",
                        cls: "bi-disabled",
                        text: this.widgetName,
                        title: this.widgetName,
                        height: o.height
                    },
                    rgap: 10
                }, {
                    type: "bi.label",
                    text: this.options.text.toString(),
                    title: this.options.text.toString(),
                    textAlign: "left",
                    height: o.height
                }],
                hgap: 5
            };
        }
    });
    BI.shortcut("bi.design.filter_pane.control_item", ControlItem);
})();
/**
 * author: young
 * createdDate: 2018/4/27
 * description:
 */
!(function () {
    var DimFilter = BI.inherit(BI.Widget, {
        props: {
            height: 39,
            tId: null
        },

        render: function () {
            var o = this.options;
            var opt = {};
            if (BI.isNotNull(o.tId)) {
                opt.tId = o.tId;
            } else {
                opt.fieldId = o.fieldId;
            }
            var result = BI.Utils.transformFilterItemsToText(o.filter, opt);
            var name = result.name;
            var relation = result.relation;
            var value = result.value;

            return {
                type: "bi.vertical_adapt",
                items: BI.createItems([{
                    el: {
                        text: name,
                        title: name,
                        cls: "dimension-name bi-tips bi-disabled"
                    },
                    rgap: 10
                }, {
                    text: relation,
                    title: relation,
                    cls: "bi-disabled"
                }, {
                    text: BI.isNotNull(value) ? value.toString() : "",
                    title: BI.isNotNull(value) ? value.toString() : ""
                }], {
                    type: "bi.label",
                    height: o.height
                }),
                hgap: 10
            };
        }
    });
    BI.shortcut("bi.design.table_chart.filter_pane.dim_filter", DimFilter);
})();
/**
 * @author: Teller
 * @createdAt: 2018/6/7 上午10:17
 * @Description
*/

!(function () {
    var DrillFilter = BI.inherit(BI.Widget, {
        props: {
            height: 39,
            wId: null,
            fieldId: null
        },

        render: function () {
            var o = this.options;
            var opt = {
                wId: o.wId,
                tId: o.tId,
                fieldId: o.fieldId,
                isDrillFilter: true
            };

            var result = BI.Utils.transformFilterItemsToText(o.filter, opt);
            var name = result.name;
            var relation = result.relation;
            var value = result.value;

            return {
                type: "bi.vertical_adapt",
                items: BI.createItems([{
                    el: {
                        text: name,
                        title: name,
                        cls: "dimension-name bi-tips bi-disabled"
                    },
                    rgap: 10
                }, {
                    text: relation,
                    title: relation,
                    cls: "bi-disabled"
                }, {
                    text: BI.isNotNull(value) ? value.toString() : "",
                    title: BI.isNotNull(value) ? value.toString() : ""
                }], {
                    type: "bi.label",
                    height: o.height
                }),
                hgap: 10
            };
        }
    });
    BI.shortcut("bi.design.table_chart.filter_pane.drill_filter", DrillFilter);
})();
/**
 * author: young
 * createdDate: 2018/4/11
 * description:
 */
!(function () {
    var LinkageItem = BI.inherit(BI.Widget, {
        props: {
            wId: "",
            height: 39
        },

        beforeInit: function (callback) {
            this.widgetName = "";
            var self = this;
            BI.Utils.getWidgetNameById(this.options.wId, function (names) {
                self.widgetName = names[self.options.wId];
                callback();
            });
        },

        render: function () {
            var self = this, o = this.options;
            var items = BI.map(BI.Utils.getLinkItemsTextByWId(this.options.wId), function (index, textObj) {
                return {
                    type: "bi.vertical_adapt",
                    cls: "linkage-item-single",
                    items: [{
                        type: "bi.label",
                        text: textObj.text,
                        lgap: 5
                    }, {
                        type: "bi.icon_button",
                        cls: "close-font delete-button",
                        title: BI.i18nText("BI-Basic_Delete"),
                        width: 16,
                        height: 16,
                        handler: function () {
                            self.fireEvent("EVENT_CHANGE", textObj.value);
                        }
                    }],
                    height: 20
                };
            });
            return {
                type: "bi.vertical_adapt",
                items: BI.concat([{
                    el: {
                        type: "bi.center_adapt",
                        cls: BI.Utils.getWidgetIconById(this.options.wId) + " bi-disabled",
                        items: [{
                            type: "bi.icon",
                            width: 20,
                            height: 20
                        }],
                        width: 20,
                        height: o.height
                    },
                    width: 20
                }, {
                    el: {
                        type: "bi.label",
                        cls: "bi-disabled",
                        text: this.widgetName,
                        height: o.height,
                        textAlign: "left"
                    },
                    rgap: 10
                }], items),
                hgap: 5
            };
        }
    });
    BI.shortcut("bi.design.table_chart.filter_pane.linkage_item", LinkageItem);
})();
!(function () {
    var Filter = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-general-query-filter"
        },

        _store: function () {
            var o = this.options;
            return BI.Models.getModel("bi.model.design.general_query_filter");
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.filter",
                el: {
                    type: "bi.filter_operation",
                    selections: [2]
                },
                items: this.model.conditions,
                itemCreator: function (item) {
                    item.type = BI.Services.getService("bi.service.design.detail.target.filter").createFilterItemByFilterType(item.value).type;
                    if(item.value === BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION) {
                        item.type = "bi.design.general.query.filter.no_type";
                    }
                    item.afterValueChange = function () {
                        self.store.setFilter(self.filter.getValue()[0]);
                    };
                    item.onDelete = function () {
                        self.store.setFilter(self.filter.getValue()[0]);
                    };
                },
                expander: {
                    type: "bi.and.or.filter.expander"
                },
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.store.setFilter(this.getValue()[0]);
                    }
                }],
                ref: function (_ref) {
                    self.filter = _ref;
                }
            };
        },

        populate: function () {
            this.filter.populate(this.model.conditions);
        }
    });
    BI.shortcut("bi.design.general_query_filter", Filter);
})();!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["widget"],

        computed: {
            conditions: function () {
                var filter = Fix.toJSON(this.model.value) || [];
                return this._transformConditions2Tree(BI.isArray(filter) ? filter : [filter]);
            },
            value: function () {
                return this.model.widget.value;
            },
            wId: function () {
                return this.model.widget.wId;
            }
        },

        actions: {

            setFilter: function (v) {
                this.model.widget.value = v;
            }
        },

        _transformConditions2Tree: function (conditions) {
            var self = this;
            BI.each(conditions, function (i, condition) {
                condition.id || (condition.id = BI.UUID());
                condition.value = condition.filterType;
                if (condition.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || condition.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
                    condition.children = condition.filterValue;
                    self._transformConditions2Tree(condition.children);
                }
            });
            return conditions;
        }

    });
    BI.model("bi.model.design.general_query_filter", Model);
})();!(function () {

    var constants = {
        LEFT_ITEMS_H_GAP: 10,
        CONTAINER_HEIGHT: 40,
        CONDITION_TYPE_COMBO_ADJUST: 2,
        BUTTON_HEIGHT: 24,
        MAX_HEIGHT: 500
    };

    var Item = BI.inherit(BI.AbstractFilterItem, {
        props: {
            baseCls: "bi-general-query-no-type-filter-item bi-filter-item bi-border-left bi-border-bottom",
            afterValueChange: BI.emptyFn,
            onDelete: BI.emptyFn
        },

        _store: function () {
            return BI.Models.getModel("bi.model.general.query.filter.no_type");
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.button_group",
                ref: function () {
                    self.group = this;
                },
                items: [{
                    type: "bi.left_right_vertical_adapt",
                    cls: "item-no-type",
                    height: constants.CONTAINER_HEIGHT,
                    items: {
                        left: [this._buildConditionsNoType()],
                        right: [{
                            type: "bi.icon_button",
                            cls: "close-h-font delete-button",
                            listeners: [{
                                eventName: "__EVENT_CHANGE__",
                                action: function () {
                                    self.fireEvent("__EVENT_CHANGE__", BI.Events.DESTROY, o.id, self);
                                    o.onDelete(o.id);
                                }
                            }]
                        }]
                    },
                    lhgap: constants.LEFT_ITEMS_H_GAP,
                    rhgap: constants.LEFT_ITEMS_H_GAP
                }],
                layouts: [{
                    type: "bi.vertical",
                    scrolly: false
                }]
            };
        },

        _buildConditionsNoType: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                adjustLength: constants.CONDITION_TYPE_COMBO_ADJUST,
                el: {
                    type: "bi.button",
                    level: "common",
                    height: constants.BUTTON_HEIGHT,
                    text: BI.i18nText("BI-Basic_Please_Select_Field")
                },
                popup: {
                    el: {
                        type: "bi.general_query_select_data_tab",
                        height: constants.MAX_HEIGHT,
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (v) {
                                self._onTypeSelected(v);
                            }
                        }]
                    },
                    minHeight: 300,
                    minWidth: 228,
                    maxHeight: constants.MAX_HEIGHT
                }
            };
        },

        _onTypeSelected: function (v) {
            var self = this, o = this.options;
            BI.Utils.getFieldTypeById(v, function (fieldType) {
                var filterItem = BI.Services.getService("bi.service.design.detail.target.filter").createFilterItemByFieldType(fieldType);
                self.group.populate([BI.extend(filterItem, {
                    id: o.id,
                    fieldId: v,
                    wId: o.wId,
                    node: o.node,
                    cls: "no-type-container",
                    afterValueChange: o.afterValueChange,
                    listeners: [{
                        eventName: "__EVENT_CHANGE__",
                        action: function () {
                            self.fireEvent("__EVENT_CHANGE__", arguments);
                        }
                    }],
                    ref: function () {
                        self.typeSelectedItem = this;
                    }
                })]);
                o.node.set("data", BI.extend(o.node.get("data"), {
                    value: filterItem.filterType,
                    filterType: filterItem.filterType,
                    fieldId: v
                }));
                o.afterValueChange();
            });
        },

        getValue: function () {
            if(BI.isNotNull(this.typeSelectedItem)) {
                return this.typeSelectedItem.getValue();
            }
            return {
                filterType: BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION
            };
        }
    });
    BI.shortcut("bi.design.general.query.filter.no_type", Item);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        context: ["wId"],

        state: function () {
            return {
                filterType: this.options.filterType,
                filterValue: BI.isNull(this.options.filterValue) ? BI.Utils.getDefaultFilterValue(this.options.filterType) : this.options.filterValue
            };
        },

        computed: {

        },

        actions: {
            setFilterType: function (v) {
                this.model.filterType = v;
                this.model.filterValue = BI.Utils.getDefaultFilterValue(v);
            },

            setFilterValue: function (v) {
                this.model.filterValue = v;
            }
        }
    });
    BI.model("bi.model.general.query.filter.no_type", Model);
})();!(function () {

    var constants = {
        SHOW_PACK_FIELDS: 1,
        SHOW_USED_FIELDS: 2
    };

    var Tab = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-general-query-select-data-tab"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.tab",
                    showIndex: constants.SHOW_PACK_FIELDS,
                    ref: function () {
                        self.tab = this;
                    },
                    tab: {
                        type: "bi.line_segment",
                        items: [{
                            text: BI.i18nText("BI-Design_Package_Field"),
                            value: constants.SHOW_PACK_FIELDS
                        }, {
                            text: BI.i18nText("BI-Design_All_In_Used_Fields"),
                            value: constants.SHOW_USED_FIELDS
                        }],
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.tab.setSelect(this.getValue()[0]);
                                if (self.tab.getSelect() === constants.SHOW_USED_FIELDS) {
                                    self.tab.populate();
                                }
                            }
                        }],
                        height: 40
                    },
                    cardCreator: BI.bind(this._createTabs, this)
                }]
            };
        },

        mounted: function () {
            this.tab.setSelect(constants.SHOW_PACK_FIELDS);
        },

        _createTabs: function (v) {
            var self = this;
            var o = this.options;
            switch (v) {
                case constants.SHOW_USED_FIELDS:
                    return {
                        type: "bi.general_query_used_fields_pane",
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }]
                    };
                case constants.SHOW_PACK_FIELDS:
                default:
                    return {
                        type: "bi.general_query_select_data_pane",
                        listeners: [{
                            eventName: "EVENT_CLICK_ITEM",
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }]
                    };
            }
        }
    });
    BI.shortcut("bi.general_query_select_data_tab", Tab);
})();!(function () {
    var Pane = BI.inherit(BI.Widget, {

        render: function () {
            var self = this;
            return {
                type: "bi.package_select_data_service",
                defaultInit: false,
                chooseType: BI.Selection.Single,
                listeners: [{
                    eventName: "EVENT_CLICK_ITEM",
                    action: function () {
                        self.fireEvent("EVENT_CLICK_ITEM", arguments);
                    }
                }]
            };
        }
    });
    BI.shortcut("bi.general_query_select_data_pane", Pane);
})();!(function () {
    var Pane = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-general-query-used-fields-pane"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vtape",
                element: this,
                items: [{
                    el: {
                        type: "bi.searcher",
                        el: {
                            type: "bi.small_search_editor",
                            height: 25
                        },
                        isAutoSearch: true,
                        isAutoSync: true,
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("EVENT_CHANGE");
                            }
                        }],
                        ref: function () {
                            self.searcher = this;
                        }
                    },
                    lgap: 10,
                    tgap: 10,
                    rgap: 10,
                    height: 45
                }, {
                    el: {
                        type: "bi.button_group",
                        items: [],
                        layouts: [{
                            type: "bi.vertical"
                        }],
                        ref: function () {
                            self.usedFields = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }]
                    },
                    height: "fill"
                }]
            };
        },

        mounted: function () {
            this.searcher.setAdapter(this.usedFields);
        },

        populate: function () {
            var allFields = BI.Utils.getAllUsedFieldIdsAndWidgetId();
            var items = [];
            BI.each(allFields, function (i, field) {
                var type = BI.Utils.getFieldTypeByIdOfWidget(field.wId, field.fId);
                var name = BI.Utils.getFieldNameByIdOfWidget(field.wId, field.fId);
                if(type !== BICst.COLUMN.COUNTER) {
                    items.push({
                        type: "bi.general_query_select_data_item",
                        value: field.fId,
                        fieldType: type,
                        text: name,
                        title: name
                    });
                }
            });
            this.usedFields.populate(items);
        }
    });
    BI.shortcut("bi.general_query_used_fields_pane", Pane);
})();!(function () {

    var Item = BI.inherit(BI.Single, {

        props: {
            extraCls: "bi-general-query-select-data-level0-item bi-select-data-level0-item",
            height: 25,
            hgap: 0,
            fieldType: BICst.COLUMN.STRING,
            layer: 0,
            lgap: 10,
            rgap: 10
        },

        _getFieldClass: function (type) {
            switch (type) {
                case BICst.COLUMN.STRING:
                    return "string-field-font";
                case BICst.COLUMN.NUMBER:
                    return "number-field-font";
                case BICst.COLUMN.DATE:
                    return "date-field-font";
                case BICst.COLUMN.COUNTER:
                default:
                    return "number-field-font";
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.blank_icon_text_item",
                        trigger: "mousedown",
                        cls: "select-data-level0-item-button bi-list-item-select " + this._getFieldClass(o.fieldType),
                        blankWidth: 0,
                        text: o.text,
                        value: o.value,
                        height: 25,
                        textLgap: 10,
                        textRgap: 5,
                        listeners: [{
                            eventName: "__EVENT_CHANGE__",
                            action: function () {
                                self.fireEvent("__EVENT_CHANGE__", BI.Events.CLICK, self.getValue(), self);
                            }
                        }],
                        ref: function () {
                            self.button = this;
                        }
                    },
                    top: 0,
                    left: 10,
                    right: 10
                }]
            };
        },

        isSelected: function () {
            return this.button.isSelected();
        },

        setSelected: function (b) {
            this.button.setSelected(b);
        },

        doRedMark: function () {
            this.button.doRedMark.apply(this.button, arguments);
        },

        unRedMark: function () {
            this.button.unRedMark.apply(this.button, arguments);
        },

        doHighLight: function () {
            this.button.doHighLight.apply(this.button, arguments);
        },

        unHighLight: function () {
            this.button.unHighLight.apply(this.button, arguments);
        }
    });

    BI.shortcut("bi.general_query_select_data_item", Item);

})();!(function () {
    var GlobalExport = BI.inherit(BI.Widget, {

        _const: {
            PANE_WIDTH: 1366,
            PANE_HEIGHT: 768,
            HEIGHT: 30,
            TRIGGER_WIDTH: 80,
            EDIT_PANE_LEFT: 60,
            EXPORT_EXCEL: 0,
            EXPORT_PDF: 1,
            EXPORT_TIP_LAYER_ID: BI.UUID()
        },

        props: {
            baseCls: "bi-design-global-export"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.global.export");
        },

        watch: {
            showExportTip: function (v) {
                if (v) {
                    this._createExportTip();
                } else {
                    BI.Maskers.remove(this._const.EXPORT_TIP_LAYER_ID);
                }
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                trigger: "hover",
                ref: function (ref) {
                    self.combo = ref;
                },
                isNeedAdjustHeight: false,
                isNeedAdjustWidth: false,
                el: {
                    type: "bi.icon_text_item",
                    readonly: true,
                    text: BI.i18nText("BI-Basic_Export"),
                    cls: "export-font",
                    width: 50,
                    height: 25
                },
                popup: {
                    el: {
                        type: "bi.text_value_combo_popup",
                        chooseType: BI.ButtonGroup.CHOOSE_TYPE_NONE,
                        items: [{
                            text: BI.i18nText("BI-Design_Export_Excel"),
                            value: this._const.EXPORT_EXCEL
                        }, {
                            text: BI.i18nText("BI-Design_Export_Pdf"),
                            value: this._const.EXPORT_PDF
                        }],
                        listeners: [{
                            eventName: BI.TextValueComboPopup.EVENT_CHANGE,
                            action: BI.bind(this._operate, this)
                        }]
                    }
                }
            };
        },

        _operate: function (v) {
            var self = this;
            this.combo.hideView();
            switch (v) {
                case this._const.EXPORT_EXCEL:
                    BI.Utils.getGlobalExportData(function (data) {
                        self._export(BI.GlobalExportExcelURL, data);
                    });
                    break;
                case this._const.EXPORT_PDF:
                    this._export(BI.GlobalExportPdfURL, {});
                    break;
                default:
                    break;
            }
        },

        _createExportTip: function () {
            BI.Maskers.create(this._const.EXPORT_TIP_LAYER_ID, "", {
                render: {
                    type: "bi.vtape",
                    items: [{
                        type: "bi.layout",
                        height: 30
                    }, {
                        type: "bi.center_adapt",
                        height: 30,
                        items: [{
                            el: {
                                type: "bi.vertical_adapt",
                                cls: "global-export-tip",
                                items: [{
                                    type: "bi.layout",
                                    cls: "export-tip-background",
                                    width: 30,
                                    height: 30
                                }, {
                                    type: "bi.label",
                                    textAlign: "left",
                                    text: BI.i18nText("BI-Design_Global_Prepare_Export_Data"),
                                    width: 115
                                }]
                            }
                        }]
                    }]
                }
            });
            BI.Maskers.show(this._const.EXPORT_TIP_LAYER_ID);
        },

        _export: function (url, data) {
            BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/js/export.min.js&type=plain&parser=plain");
            if (BI.isIE9Below()) {
                this._exportRequest(url, data, "");
                return;
            }
            var self = this, hasDragGroup = $(".bi-drag-icon-group").length > 0;
            $(".map-export-container").css("z-index", 1000000);

            var vessel = $(".fit-container");
            vessel.scrollTop(0).scrollLeft(0);

            var background = this._getStyle().bodyStyle.background;
            var height = vessel.height(), width = vessel.width();
            var arrangementHeight = height;

            BI.each(BI.Utils.getAllWidgetIds(), function (i, id) {
                var bounds = BI.Utils.getWidgetBoundsById(id);
                height = Math.max(height, bounds.top + bounds.height, self._const.PANE_HEIGHT);
                width = Math.max(width, bounds.left + bounds.width, width);
            });
            this._setArrangementContainerHeight(arrangementHeight);
            vessel.height(height);
            vessel.width(width);
            // 处理body的背景、地图图层等问题
            var canvas = this._createCanvas();
            var cropLeft = hasDragGroup ? this._const.EDIT_PANE_LEFT : 0;
            var cropTop = this._const.HEIGHT;
            canvas.width = width + (hasDragGroup ? this._const.EDIT_PANE_LEFT : 0) + this.model.fitGap;
            canvas.height = height + cropTop;
            var ctx = canvas.getContext("2d");
            if (background.indexOf("url") > -1) {
                var img = new Image;
                img.onload = function () {
                    ctx.fillStyle = ctx.createPattern(self._createTempImgCanvas(this, canvas.width, canvas.height), "no-repeat");
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                    self._html2canvas(vessel, canvas, url, data, cropTop, cropLeft);
                };
                img.onerror = function () {
                    self._html2canvas(vessel, canvas, url, data, cropTop, cropLeft);
                };
                img.src = background.replace(/url\(['"]{0,}|['"]{0,}\)$/ig, "");
            } else {
                ctx.fillStyle = background;
                ctx.fillRect(cropLeft, cropTop, width, height);
                this._html2canvas(vessel, canvas, url, data, cropTop, cropLeft);
            }
        },

        _html2canvas: function (vessel, canvas, cmd, data, cropTop, cropLeft) {
            var self = this;
            html2canvas(vessel, {
                useCORS: true,
                logging: false,
                canvas: canvas,
                cropTop: cropTop,
                cropLeft: cropLeft,
                iframeTimeout: 1500
            }).then(function (canvas) {
                vessel.height("");
                vessel.width("");
                $(".map-export-container").css("z-index", "");
                self._setArrangementContainerHeight("");
                var imgData = canvas.toDataURL();
                self._exportRequest(cmd, data, imgData);
            });
        },

        _setArrangementContainerHeight: function (height) {
            $(".arrangement-container").height(height);
        },

        _createCanvas: function () {
            var canvas = document.createElement("canvas");
            if (!document.createElement("canvas").getContext) {
                canvas = window.G_vmlCanvasManager.initElement(canvas);
            }
            return canvas;
        },

        _createTempImgCanvas: function (img, width, height) {
            var tmpCanvas = this._createCanvas();
            var tmpContext = tmpCanvas.getContext("2d");
            tmpCanvas.width = width; // 目标宽度
            tmpCanvas.height = height; // 目标高度
            tmpContext.drawImage(img, 0, 0, width, height);
            return tmpCanvas;
        },

        _exportRequest: function (url, data, imgData) {
            BI.Utils.exportFile(url, BI.extend(data, {
                reportName: BI.designModel.reportName,
                base64: imgData.replaceAll("data:image/png;base64,", "")
            }), this.store.showTip);
        },

        _getStyle: function () {
            var globalStyle = BI.Utils.getActualTemplateStyle();
            var manager = BI.Services.getService("bi.service.design.template.style");
            globalStyle || (globalStyle = {});
            var defaultConfig = BI.Utils.getPlateStyle();
            var mainBackground = manager.getGsBackgroundValue(globalStyle, "templateBackground");
            var mainColor;
            var actualMainBackground = mainBackground, actualMainColor;
            if (BI.DOM.isHexColor(mainBackground)) {
                actualMainColor = mainColor = BI.DOM.getContrastColor(mainBackground);
            } else if (mainBackground === "") {
                actualMainBackground = manager.getGsBackgroundValue(defaultConfig, "mainBackground");
                if (BI.DOM.isHexColor(actualMainBackground)) {
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                } else {
                    if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                        actualMainBackground = "#191B2B";
                        actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                    } else {
                        actualMainBackground = "#eff1f4";
                        actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                    }
                }
            } else if (mainBackground === "transparent") {
                if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                    actualMainBackground = "#191B2B";
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                } else {
                    actualMainBackground = "#eff1f4";
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                }
            }

            var bodyStyle = {
                background: actualMainBackground,
                color: actualMainColor
            };

            return {
                bodyStyle: bodyStyle
            };
        }
    });
    BI.shortcut("bi.design.global.export", GlobalExport);
})();!(function () {
    var GlobalExportModel = BI.inherit(Fix.Model, {

        state: function () {
            return {
                showExportTip: false
            };
        },

        computed: {
            fitGap: function () {
                return BI.Utils.getActualWidgetGap() === BICst.WIDGET_GAP.GAP ? 3 : 1;
            }
        },

        actions: {
            showTip: function (v) {
                this.model.showExportTip = v;
            }
        }

    });
    BI.model("bi.model.design.global.export", GlobalExportModel);
})();/**
 * @author: Teller
 * @createdAt: 2018/2/24 上午9:16
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-interval-slider-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || view || dimensions.**": function () {
                this.populate();
            },

            disabled: function () {
                this.intervalSlider.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.interval_slider",
                ref: function (_ref) {
                    self.intervalSlider = _ref;
                },
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                listeners: [{
                    eventName: BI.IntervalSlider.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.populate();
        },

        getValue: function () {
            var value = this.intervalSlider.getValue();
            return {
                closeMax: true,
                closeMin: true,
                max: value.max,
                min: value.min
            };
        },

        setValue: function (v) {
            if (BI.isNull(v)) {
                this.intervalSlider.setValue({
                    max: this.intervalSlider.max,
                    min: this.intervalSlider.min
                });

                this.intervalSlider.populate();
            } else {
                this.intervalSlider.setValue(v);
            }
        },

        reset: function () {
            this.intervalSlider.setValue({
                max: this.intervalSlider.max,
                min: this.intervalSlider.min
            });

            this.intervalSlider.populate();
        },

        populate: function () {
            var self = this;

            var dimensions = BI.keys(this.model.dimensions);
            var widgetValue = this.model.value || {};
            var value = {min: widgetValue.min, max: widgetValue.max};
            if (dimensions.length === 0) {
                this.intervalSlider.reset();
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(self.model.widgetConfig, function (jsonData) {
                    if (BI.isNotEmptyObject(jsonData)) {
                        var jsonMax = self.store.fixNumber(jsonData.max, true);
                        var jsonMin = self.store.fixNumber(jsonData.min, false);
                        self.intervalSlider.setMinAndMax({
                            max: jsonMax,
                            min: jsonMin
                        });
                        self.intervalSlider.setValue(value);
                        self.intervalSlider.populate();
                    }
                });
            }
        }
    });
    BI.shortcut("bi.interval_slider_control", Widget);
})();
!(function () {
    var CONSTANTS = {
        ICON_WIDTH: 24,
        ICON_HEIGHT: 24
    };
    var maximization = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-maximization"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.maximization", this.options);
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                ref: function () {
                    self.widget = this;
                },
                items: [{
                    el: {
                        type: "bi.vtape",
                        cls: "bi-background",
                        items: [{
                            el: {
                                type: "bi.absolute",
                                cls: "bi-dashboard-widget bi-card",
                                items: [{
                                    el: {
                                        type: "bi.vtape",
                                        ref: function (_ref) {
                                            self.widgetLayout = _ref;
                                        },
                                        items: [{
                                            el: this._createTitle(),
                                            height: this._getTitleHeight()
                                        }, {
                                            el: this._createTableChart()
                                        }]
                                    },
                                    top: 0,
                                    left: 0,
                                    bottom: 0,
                                    right: 0
                                }, {
                                    el: this._createTools(),
                                    top: 5,
                                    right: 10
                                }]
                            }
                        }]
                    },
                    top: 50,
                    left: 50,
                    bottom: 50,
                    right: 50
                }]
            };
        },

        mounted: function () {
            var self = this;
            this._resizeHandler = BI.debounce(function () {
                self.tableChart.resize();
            }, 0);

            BI.ResizeDetector.addResizeListener(this, function () {
                self._resizeHandler();
            });
            this._setBackground();
        },

        _createTools: function () {
            return {
                type: "bi.left",
                cls: "operator-region tools-icon",
                items: BI.createItems(this.model.comboItems, {
                    width: CONSTANTS.ICON_WIDTH,
                    height: CONSTANTS.ICON_HEIGHT
                })
            };
        },

        _createTitle: function () {
            var self = this;
            return {
                type: "bi.absolute",
                height: this._getTitleHeight(),
                invisible: !this.model.showTitle,
                items: [{
                    el: {
                        type: "bi.label",
                        text: this.options.name,
                        textAlign: "left"
                    },
                    left: 10,
                    top: 5,
                    right: 10,
                    bottom: 5
                }],
                ref: function (ref) {
                    self.titleWrapper = ref;
                }
            };
        },

        _createTableChart: function () {
            var self = this;
            return {
                type: "bi.design.widget.table_chart_manager",
                wId: this.options.wId,
                ref: function (_ref) {
                    self.tableChart = _ref;
                }
            };
        },

        _getTitleHeight: function () {
            return this.model.showTitle ? 27 : 10;
        },

        _setBackground: function () {
            if (!BI.Utils.isWidgetExistById(this.model.wId)) {
                return;
            }
            var service = BI.Services.getService("bi.service.design.template.style");
            var widgetBg = BI.Utils.getResWidgetBackgroundById(this.model.wId);
            this.widgetLayout.element.css(service.getBackgroundAndColor(widgetBg) || {});
            if (service.getBackgroundValue(widgetBg) === "transparent") {
                this.widgetLayout.element.addClass("transparent");
            }
            var titleBg = BI.Utils.getResTitleBackgroundById(this.model.wId);
            this.titleWrapper.element.css(service.getBackgroundAndColor(titleBg) || {});
        }
    });
    BI.shortcut("bi.maximization", maximization);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: {
            scale: 1
        },
        context: ["showMaximize"],
        childContext: ["widget", "scale"],
        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            widget: function () {
                return BI.deepClone(BI.designModel.widgets[this.options.wId]);
            },
            name: function () {
                return this.model.widget.name;
            },
            type: function () {
                return this.model.widget.type;
            },
            showTitle: function () {
                return this.model.widget.showTitle;
            },
            settings: function () {
                return this.model.widget.settings;
            },
            comboItems: function () {
                return [
                    {
                        type: "bi.icon_button",
                        cls: "widget-increase-font widget-tool bi-card",
                        title: BI.i18nText("BI-Design_Widget_Increase"),
                        handler: BI.bind(this.hideMaximize, this.store)
                    }
                ];
            },
            titleHeight: function () {
                return this.model.settings.titleHeight;
            }
        },

        actions: {
            hideMaximize: function () {
                this.model.showMaximize = false;
            }
        }
    });
    BI.model("bi.model.maximization", Model);
})();
!(function () {
    var Pane = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-table-chart-manager"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.maximization.pane");
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.tab",
                        single: true,
                        showIndex: this.model.wType,
                        cardCreator: BI.bind(this._createChartTabs, this),
                        ref: function (ref) {
                            self.tableChartTab = ref;
                        }
                    },
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }, {
                    el: {
                        type: "bi.table_chart_empty_pane",
                        invisible: !this.model.isWidgetEmpty,
                        ref: function (_ref) {
                            self.emptyPane = _ref;
                        }
                    },
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }, {
                    el: {
                        type: "bi.table_chart_error_pane",
                        invisible: true,
                        ref: function (_ref) {
                            self.errorPane = _ref;
                        }
                    },
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }]
            };
        },

        _createChartTabs: function (v) {
            var self = this, o = this.options;
            switch (v) {
                case BICst.DESIGN.WIDGET.TABLE:
                    return {
                        type: "bi.group_table",
                        ref: function (ref) {
                            self.table = ref;
                        }
                    };
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    return {
                        type: "bi.cross_table",
                        ref: function (ref) {
                            self.table = ref;
                        }

                    };
                case BICst.DESIGN.WIDGET.DETAIL:
                    return {
                        type: "bi.detail_table",
                        ref: function (ref) {
                            self.table = ref;
                        }
                    };
                default:
                    return {
                        type: "bi.components.chart.display"
                    };
            }
        },

        resize: function () {
            this.tableChartTab.getSelectedTab() && this.tableChartTab.getSelectedTab().resize();
        },

        getValue: function () {
            return this.tableChartTab.getValue();
        },

        magnify: function () {
            this.tableChartTab.getSelectedTab() && this.tableChartTab.getSelectedTab().magnify();
        },

        populate: function () {
            this.emptyPane.setVisible(this.model.isWidgetEmpty);
            this.errorPane.setVisible(false);
            this.tableChartTab.setSelect(this.model.wType);
            this.tableChartTab.populate();
        }
    });
    Pane.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.maximization_pane", Pane);
})();!(function () {
    var PaneModel = BI.inherit(Fix.Model, {

        context: ["widget"],

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            wType: function () {
                return this.model.widget.type;
            },
            isWidgetEmpty: function () {
                var view = this.model.widget.view;
                switch (this.model.wType) {
                    case BICst.DESIGN.WIDGET.TABLE:
                    case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    case BICst.DESIGN.WIDGET.DETAIL:
                        return BI.isEmpty(view[BICst.REGION.DIMENSION1]) &&
                            BI.isEmpty(view[BICst.REGION.DIMENSION2]) &&
                            BI.isEmpty(view[BICst.REGION.TARGET1]);
                    case BICst.DESIGN.WIDGET.CHART:
                        var chartAttr = this.model.widget.settings.chartAttr;
                        var attrService = BI.Services.getService("bi.service.design.chart.attr");
                        return BI.isEmpty(view[BICst.REGION.DIMENSION1]) &&
                            BI.isEmpty(view[BICst.REGION.TARGET1]) &&
                            attrService.isAttrSettingEmpty(chartAttr.graphic);
                    default:
                        return false;
                }
            }
        }

    });
    BI.model("bi.model.design.widget.maximization.pane", PaneModel);
})();/**
 * @author: Teller
 * @createdAt: 2018/2/28 上午10:44
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-month-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;

            var yearMap = {}, monthMap = {};
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.dynamic_year_month_combo",
                        ref: function (_ref) {
                            self.combo = _ref;
                        },
                        value: this.model.value,
                        behaviors: {
                            highlight: function (val) {
                                return yearMap[val] === true || monthMap[val] === true;
                            }
                        },
                        listeners: [{
                            eventName: BI.DynamicYearMonthCombo.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }, {
                            eventName: BI.DynamicYearMonthCombo.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                BI.Utils.getWidgetDataByWidgetInfo(self.model.widgetConfig, function (data) {
                                    if (BI.isNotEmptyArray(data.year)) {
                                        yearMap = BI.makeObject(data.year, true);
                                    }
                                    if (BI.isNotEmptyArray(data.month)) {
                                        monthMap = BI.makeObject(data.month, true);
                                    }
                                    if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                                        self.combo.doBehavior();
                                    }
                                });
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {

        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.month_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午5:17
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-number-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.numberInterval.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.number_interval",
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                ref: function (_ref) {
                    self.numberInterval = _ref;
                },
                listeners: [{
                    eventName: BI.NumberInterval.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.setValue(this.model.value);
        },

        getValue: function () {
            return this.numberInterval.getValue();
        },

        setValue: function (v) {
            this.numberInterval.setValue(v);
        },

        populate: function () {},

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.number_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/27 上午10:51
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-quarter-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;

            var yearMap = {}, quarterMap = {};
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.dynamic_year_quarter_combo",
                        ref: function (_ref) {
                            self.combo = _ref;
                        },
                        value: this.model.value,
                        behaviors: {
                            highlight: function (val) {
                                return yearMap[val] === true || quarterMap[val] === true;
                            }
                        },
                        listeners: [{
                            eventName: BI.DynamicYearQuarterCombo.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }, {
                            eventName: BI.DynamicYearQuarterCombo.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                BI.Utils.getWidgetDataByWidgetInfo(self.model.widgetConfig, function (data) {
                                    if (BI.isNotEmptyArray(data.year)) {
                                        yearMap = BI.makeObject(data.year, true);
                                    }
                                    if (BI.isNotEmptyArray(data.quarter)) {
                                        quarterMap = BI.makeObject(data.quarter, true);
                                    }
                                    if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.quarter)) {
                                        self.combo.doBehavior();
                                    }
                                });
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {

        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.quarter_control", Widget);
})();
!(function () {
    var Combo = BI.inherit(BI.RichEditorParamAction, {

        props: {
            baseCls: "bi-design-insert-param-combo",
            height: 20,
            width: 20
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.insert_param_combo");
        },

        beforeInit: function (callback) {
            this.options.paramFormatter = this._getInsertFieldNameByValue;
            callback();
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                isNeedAdjustHeight: true,
                isNeedAdjustWidth: false,
                el: {
                    type: "bi.icon_button",
                    width: o.width,
                    height: o.height,
                    forceNotSelected: true,
                    cls: "insert-font bi-list-item-active"
                },
                direction: "bottom,left",
                listeners: [{
                    eventName: BI.Combo.EVENT_AFTER_POPUPVIEW,
                    action: function () {
                        self.tree.populate();
                    }
                }, {
                    eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                    action: function () {
                        self._savePosition();
                    }
                }],
                popup: {
                    el: {
                        type: "bi.absolute",
                        height: 400,
                        width: 240,
                        items: [{
                            el: {
                                type: "bi.rich_editor_insert_tree",
                                dimensionIdsGetter: o.dimensionIdsGetter,
                                wId: this.options.wId,
                                ref: function (_ref) {
                                    self.tree = _ref;
                                },
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function (v) {
                                        self._addParam(v);
                                    }
                                }]
                            },
                            top: 10,
                            left: 15,
                            right: 15,
                            bottom: 0
                        }]
                    },
                    stopEvent: true,
                    width: 240
                },
                ref: function (_ref) {
                    self.combo = _ref;
                }
            };
        },

        _addParam: function (v) {
            this.addParam(v);
            // this._restorePosition();
            this.combo.hideView();
            this.fireEvent("EVENT_CHANGE");
        },

        _getInsertFieldNameByValue: function (wIdOrdId) {
            var name = "";
            var service = BI.Services.getService("bi.service.design.detail.dimension.name");
            if(!BI.Utils.isWidgetExistById(wIdOrdId) && !BI.Utils.isDimensionExist(wIdOrdId) && !BI.Utils.isDimensionGroupIdExist(null, wIdOrdId)) {
                return "<!" + BI.i18nText("BI-Design_Element_Is_Deleted") + "!>";
            }
            // 是控件
            if (BI.Utils.isWidgetExistById(wIdOrdId)) {
                BI.Utils.getWidgetNameById(wIdOrdId, function (names) {
                    name = names[wIdOrdId];
                });
            } else {
                var id = BI.Utils.isDimensionExist(wIdOrdId) ? wIdOrdId : BI.Utils.getDimensionIdByDimensionGroupId(null, wIdOrdId);
                name = service.getDimensionFullNameWithOutSameValueGroup(id);
            }
            return name;
        },

        _savePosition: function () {
            var instance = this._getInstance();
            instance.saveRng();
        },

        _restorePosition: function () {
            var instance = this._getInstance();
            instance.initSelection();
        },

        _getInstance: function () {
            return this.options.editor.selectedInstance || this.options.editor.getInstance();
        },

        activate: function () {

        },

        deactivate: function () {

        }

    });
    BI.shortcut("bi.design.insert_param_combo", Combo);
})();!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                value: "",
                param: ""
            };
        },

        context: [],

        computed: {

        },

        actions: {
            addParam: function (value, param) {
                this.model.value = value;
                this.model.param = param;
            }
        }
    });
    BI.model("bi.model.design.insert_param_combo", Model);
})();!(function () {
    var Tree = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-dynamic-title-field-tree",
            dimensionIdsGetter: function (wId) {
                return BI.Utils.getAllDimensionIDs(wId);
            }
        },

        _store: function () {
            return BI.Models.getModel("bi.model.rich_editor_insert_tree");
        },

        watch: {
            keyword: function (keyword) {
                var self = this;
                this.editor.setValue(keyword);
                this._getSearchResult(keyword, function (items) {
                    self.pane.populate(items, self.model.keyword);
                });
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    type: "bi.search_editor",
                    ref: function () {
                        self.editor = this;
                    },
                    listeners: [{
                        eventName: BI.SearchEditor.EVENT_CLEAR,
                        action: function () {
                            self.store.setKeyword(this.getValue());
                        }
                    }, {
                        eventName: BI.SearchEditor.EVENT_CHANGE,
                        action: function () {
                            self.store.setKeyword(this.getValue());
                        }
                    }],
                    height: 22
                }, {
                    type: "bi.select_data_tree.pane",
                    items: this.model.tableFieldItems,
                    ref: function (ref) {
                        self.pane = ref;
                    },
                    itemsCreator: function (op, populate) {
                        // 搜索状态不需要创建
                        if (!BI.isEmpty(self.model.keyword)) {
                            return;
                        }
                        if (!op.node) {// 根节点
                            self._createWidgetNodes(populate);
                            return;
                        }
                        if (BI.isNotNull(op.node.isParent) && !BI.isKey(op.node.keyword)) {
                            var dimensions = self._createDimensions(op.node.id);
                            populate(dimensions);
                        }
                    },
                    tgap: 5,
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function (v) {
                            self._stopSearch();
                            self.fireEvent("EVENT_CHANGE", v);
                        }
                    }]
                }]
            };
        },

        _getSearchResult: function (keyword, callback) {
            var self = this, o = this.options;
            var map = {};
            var searchResult = [], matchResult = [];
            var service = BI.Services.getService("bi.service.design.detail.dimension.name");
            var wIds = BI.filter(BI.Utils.getAllWidgetIds(), function (idx, wId) {
                var type = BI.Utils.getWidgetTypeById(wId);
                return wId !== o.wId && type !== BICst.DESIGN.WIDGET.GENERAL_QUERY && type !== BICst.DESIGN.WIDGET.DETAIL &&
                    type !== BICst.DESIGN.WIDGET.RESET && type !== BICst.DESIGN.WIDGET.QUERY && !BI.Utils.isSpecialWidgetByWidgetId(wId);
            });
            BI.Utils.getWidgetNameById(wIds, function (names) {
                var items = [];
                BI.each(wIds, function (i, wId) {
                    var dIds = o.dimensionIdsGetter(wId);
                    if(!self._isSpecialControlType(wId)) {
                        items.push({
                            type: "bi.multilayer_icon_tree_leaf_item",
                            pId: -1,
                            id: wId,
                            text: names[wId],
                            title: names[wId],
                            layer: 0,
                            iconCls: BI.Func.getWidgetFontClass(BI.Utils.getWidgetTypeById(wId)),
                            value: wId,
                            keyword: keyword
                        });
                    }else{
                        var text = names[wId];
                        var obj = self._getParentNodeByWidgetId(wId);
                        items.push(BI.extend({
                            pId: -1,
                            id: wId,
                            text: text,
                            title: text,
                            layer: 0,
                            isParent: true,
                            value: wId,
                            keyword: keyword
                        }, obj));
                        if(BI.Utils.isControlWidgetByWidgetId(wId)) {
                            BI.each(dIds, function (i, dId) {
                                var name = BI.Utils.getDimensionNameById(dId);
                                var dimensionType = BI.Utils.getDimensionTypeById(dId);
                                var obj = {
                                    id: dId,
                                    pId: wId,
                                    type: "bi.blank_icon_text_item",
                                    blankWidth: 20,
                                    height: 25,
                                    text: name,
                                    title: name,
                                    isParent: false,
                                    value: dId,
                                    keyword: keyword,
                                    cls: "bi-list-item-active " + self._getFieldClass(dimensionType)
                                };
                                items.push(obj);
                            });
                        } else {
                            var dimensionGroupIds = BI.Utils.getSamePropertyDimensionGroupBydIds(dIds);
                            BI.each(dimensionGroupIds, function (i, dimensionGroup) {
                                var dId = BI.Utils.getDimensionIdByDimensionGroupId(wId, dimensionGroup.group);
                                var name = BI.Utils.getDimensionNameById(dId) + service.getDimensionGroupName(dId);
                                var dimensionType = BI.Utils.getDimensionTypeById(dId);
                                var obj = {
                                    id: dimensionGroup.group,
                                    pId: wId,
                                    type: "bi.blank_icon_text_item",
                                    blankWidth: 20,
                                    height: 25,
                                    text: name,
                                    title: name,
                                    isParent: false,
                                    value: dimensionGroup.group,
                                    keyword: keyword,
                                    cls: "bi-list-item-active " + self._getFieldClass(dimensionType)
                                };
                                items.push(obj);
                            });
                        }
                    }
                });
                var rs = BI.Func.getSearchResult(items, keyword);
                searchResult = rs.find;
                matchResult = rs.match;
                var filterResult = searchResult.concat(matchResult);
                BI.each(filterResult, function (j, finded) {
                    map[finded.id] = true;
                });
                BI.each(filterResult, function (j, finded) {
                    if (finded.pId !== -1 && !map[finded.pId]) {
                        var text = names[finded.pId];
                        var obj = self._getParentNodeByWidgetId(finded.pId);
                        searchResult.push(BI.extend({
                            pId: -1,
                            id: finded.pId,
                            text: text,
                            title: text,
                            layer: 0,
                            isParent: true,
                            value: finded.pId,
                            keyword: keyword
                        }, obj));
                        map[finded.pId] = true;
                    }
                });
                // 目前交互不再需要单独列出完全匹配的项
                callback(self._getSortedItems(searchResult.concat(matchResult)), []);
            });
        },

        _createDimensions: function (wId) {
            var self = this, o = this.options;
            var service = BI.Services.getService("bi.service.design.detail.dimension.name");
            var items = [];
            if(BI.Utils.isControlWidgetByWidgetId(wId)) {
                items = BI.map(o.dimensionIdsGetter(wId), function (idx, dId) {
                    var name = BI.Utils.getDimensionNameById(dId);
                    var dimensionType = BI.Utils.getDimensionTypeById(dId);
                    return {
                        id: dId,
                        pId: wId,
                        type: "bi.blank_icon_text_item",
                        blankWidth: 20,
                        height: 25,
                        text: name,
                        title: name,
                        isParent: false,
                        value: dId,
                        cls: "bi-list-item-active " + self._getFieldClass(dimensionType)
                    };
                });
                return this.store.getSortedDimensions4Control(wId, items);
            }
            items = BI.map(BI.Utils.getSamePropertyDimensionGroupBydIds(o.dimensionIdsGetter(wId)), function (idx, dimensionGroup) {
                var dId = BI.Utils.getDimensionIdByDimensionGroupId(wId, dimensionGroup.group);
                var name = service.getDimensionFullNameWithOutSameValueGroup(dId);
                var dimensionType = BI.Utils.getDimensionTypeById(dId);
                return {
                    id: dimensionGroup.group,
                    pId: wId,
                    type: "bi.blank_icon_text_item",
                    blankWidth: 20,
                    height: 25,
                    text: name,
                    title: name,
                    isParent: false,
                    value: dimensionGroup.group,
                    cls: "bi-list-item-active " + self._getFieldClass(dimensionType)
                };
            });
            return this.store.getSortedDimensions4Widget(wId, items);
        },

        _createWidgetNodes: function (callback) {
            var self = this, o = this.options;
            var wIds = BI.filter(BI.Utils.getAllWidgetIds(), function (idx, wId) {
                var type = BI.Utils.getWidgetTypeById(wId);
                return wId !== o.wId && type !== BICst.DESIGN.WIDGET.GENERAL_QUERY && type !== BICst.DESIGN.WIDGET.DETAIL &&
                    type !== BICst.DESIGN.WIDGET.RESET && type !== BICst.DESIGN.WIDGET.QUERY && !BI.Utils.isSpecialWidgetByWidgetId(wId);
            });
            BI.Utils.getWidgetNameById(wIds, function (names) {
                var nodes = BI.map(wIds, function (idx, wId) {
                    var text = names[wId];
                    var obj = {
                        pId: -1,
                        id: wId,
                        text: text,
                        title: text,
                        layer: 0,
                        cls: "dynamic-common-type",
                        iconCls: BI.Func.getWidgetFontClass(BI.Utils.getWidgetTypeById(wId)) + " icon-size-16",
                        isParent: true,
                        value: wId,
                        iconWidth: 16,
                        iconHeight: 16
                    };
                    var node = self._getParentNodeByWidgetId(wId);
                    return BI.extend(obj, node);
                });
                callback(self._getSortedItems(nodes), "<!" + BI.i18nText("BI-Design_Element_Is_Deleted") + "!>");
            });
        },

        _getParentNodeByWidgetId: function (wId) {
            var obj = {};
            if(this._isSpecialControlType(wId)) {
                obj.type = "bi.arrow_group_node";
                obj.open = true;
            } else {
                obj.type = "bi.multilayer_icon_tree_leaf_item";
                obj.isParent = false;
            }
            return obj;
        },

        _getFieldClass: function (type) {
            switch (type) {
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                    return "string-field-font";
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    return "number-field-font";
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    return "date-field-font";
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    return "number-field-font";
                default:
                    return "cal-target-field-font";
            }
        },

        _getSortedItems: function (items) {
            var widget = [], control = [], extendWidget = [], otherItems = [];
            var service = BI.Services.getService("bi.services.design.rich_text_area");
            BI.each(items, function (idx, item) {
                if(BI.Utils.isWidgetExistById(item.value)) {
                    var type = BI.Utils.getWidgetTypeById(item.value);
                    if(BI.Utils.isExtendWidgetByWidgetType(type)) {
                        extendWidget.push(item);
                    }else{
                        if(BI.Utils.isControlWidgetByWidgetType(type)) {
                            control.push(item);
                        }else{
                            widget.push(item);
                        }
                    }
                } else {
                    otherItems.push(item);
                }
            });
            return BI.concat(BI.concat(BI.concat(
                BI.sortBy(service.makeFirstPY4Sort(control), "py"),
                BI.sortBy(service.makeFirstPY4Sort(widget), "py")
            ), BI.sortBy(service.makeFirstPY4Sort(extendWidget), "py")), BI.sortBy(service.makeFirstPY4Sort(otherItems), "py"));
        },

        _isSpecialControlType: function (wId) {
            var type = BI.Utils.getWidgetTypeById(wId);
            if (BI.Utils.isSpecialWidgetByWidgetId(wId)) {
                return false;
            }
            if (!BI.Utils.isControlWidgetByWidgetId(wId)) {
                return true;
            }
            return type === BICst.DESIGN.WIDGET.TREE ||
                type === BICst.DESIGN.WIDGET.TREE_LIST ||
                type === BICst.DESIGN.WIDGET.TREE_LABEL;
        },

        _stopSearch: function () {
            this.editor.blur();
            this.store.setKeyword("");
        },

        populate: function () {
            this.pane.populate();
        }

    });
    BI.shortcut("bi.rich_editor_insert_tree", Tree);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {
        state: function () {
            return {
                keyword: ""
            };
        },

        context: [],

        computed: {

        },

        actions: {
            setKeyword: function (keyword) {
                this.model.keyword = keyword;
            }
        },

        getSortedDimensions4Control: function (wId, dimensionItems) {
            var view = BI.Utils.getWidgetViewById(wId);
            var sortedDimensionIds = BI.values(view)[0];
            return BI.sortBy(dimensionItems, function (idx, item) {
                return sortedDimensionIds.indexOf(item.id);
            });
        },

        getSortedDimensions4Widget: function (wId, dimensionItems) {
            var view = BI.Utils.getWidgetViewById(wId);
            var sortedKey = BI.sortBy(BI.keys(BI.Utils.getWidgetViewById(wId)));
            var sortedDimensionGroupIds = [];
            BI.each(sortedKey, function (idx, key) {
                BI.each(view[key], function (idx, dId) {
                    var dimensionGroupId = BI.Utils.getDimensionsGroupIdBydId(dId);
                    sortedDimensionGroupIds.pushDistinct(dimensionGroupId);
                });
            });
            return BI.sortBy(dimensionItems, function (idx, item) {
                return sortedDimensionGroupIds.indexOf(item.id);
            });
        }
    });
    BI.model("bi.model.rich_editor_insert_tree", Model);
})();!(function () {
    var SelectDataTreePane = BI.inherit(BI.Pane, {

        props: {
            items: [],
            itemsCreator: BI.emptyFn,
            tipText: BI.i18nText("BI-Basic_No_Search_Result")
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.select_data_tree",
                items: o.items,
                ref: function (ref) {
                    self.tree = ref;
                },
                el: {
                    el: {
                        chooseType: BI.ButtonGroup.CHOOSE_TYPE_SINGLE
                    }
                },
                itemsCreator: o.itemsCreator,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function (v) {
                        self.fireEvent("EVENT_CHANGE", v);
                    }
                }]
            };
        },

        showView: function (b) {
            this.tree.showView(b);
        },

        hideView: function (b) {
            this.tree.hideView(b);
        },

        getAllButtons: function () {
            return this.tree.getAllButtons();
        },

        doBehavior: function () {
            this.tree.doBehavior.apply(this.tree, arguments);
        },

        empty: function () {

        },

        populate: function (items) {
            BI.isNotNull(items) && SelectDataTreePane.superclass.populate.apply(this, arguments);
            this.options.items = items;
            this.tree.populate.apply(this.tree, arguments);
        },

        setValue: function (v) {
            this.tree.setValue(v);
        },

        getValue: function () {
            return this.tree.getValue();
        }
    });
    BI.shortcut("bi.select_data_tree.pane", SelectDataTreePane);
})();!(function () {
    var RichTextArea = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-rich-text-area"
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.rich_editor",
                        ref: function () {
                            self.richEditor = this;
                        },
                        height: "100%",
                        toolbar: {
                            type: "bi.rich_text_area_toolbar",
                            ref: function (_ref) {
                                self.toolbar = _ref;
                            },
                            listeners: [{
                                eventName: "EVENT_CHANGE",
                                action: function (v) {
                                    self.richEditor.element.css({
                                        backgroundColor: v,
                                        color: BI.DOM.getContrastColor(v)
                                    });
                                    self.fireEvent("EVENT_BACK_COLOR_CHANGE", v);
                                }
                            }]
                        },
                        listeners: [{
                            eventName: BI.RichEditor.EVENT_FOCUS,
                            action: function () {
                                self._showInput();
                            }
                        }, {
                            eventName: "EVENT_CONFIRM",
                            action: function () {
                                if (BI.isEmptyString(this.getValue())) {
                                    self._showEmptyTip();
                                } else {
                                    self._showShowTextLabel();
                                }
                                self.fireEvent("EVENT_CHANGE", arguments);
                            }
                        }, {
                            eventName: "EVENT_AFTER_HIDEVIEW",
                            action: function () {
                                if (BI.isNotEmptyString(this.getValue())) {
                                    self._showShowTextLabel();
                                } else {
                                    self._showEmptyTip();
                                }
                            }
                        }]
                    },
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }, {
                    el: {
                        type: "bi.read_rich_editor",
                        ref: function () {
                            self.readOnlyEditor = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self._showInput();
                            }
                        }]
                    },
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }, {
                    el: {
                        type: "bi.text_button",
                        cls: "text-area-editor-text-button-label bi-tips",
                        whiteSpace: "normal",
                        text: BI.i18nText("BI-Design_Click_To_Input_Text"),
                        ref: function () {
                            self.tipLabel = this;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self._showInput();
                            }
                        }]
                    },
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            };
        },

        _showInput: function () {
            var self = this;
            this.tipLabel.setVisible(false);
            this.readOnlyEditor.setVisible(false);
            this.richEditor.setVisible(true);
            // richeditor的focus
            BI.defer(function () {
                self.richEditor.focus();
            });
        },

        _showShowTextLabel: function () {
            this.tipLabel.setVisible(false);
            this.richEditor.setVisible(false);
            this.readOnlyEditor.setVisible(true);
        },

        _showEmptyTip: function () {
            this.tipLabel.setVisible(true);
            this.richEditor.setVisible(false);
            this.readOnlyEditor.setVisible(false);
        },

        setBackgroundColor: function (color) {
            this.richEditor.element.css({
                backgroundColor: color,
                color: BI.DOM.getContrastColor(color)
            });
            this.readOnlyEditor.element.css({
                backgroundColor: color,
                color: BI.DOM.getContrastColor(color)
            });
        },

        setValue: function (v) {
            v = v || {};
            v.content = v.content || "";
            v.style = v.style || {};
            if (BI.isNotEmptyString(v.content)) {
                this._showShowTextLabel();
            }
            this.richEditor.setValue(v.content);
            this.readOnlyEditor.setValue(v.content);
            this.richEditor.element.css({
                backgroundColor: v.style.backgroundColor,
                color: BI.DOM.getContrastColor(v.style.backgroundColor)
            });
            this.readOnlyEditor.element.css({
                backgroundColor: v.style.backgroundColor,
                color: BI.DOM.getContrastColor(v.style.backgroundColor)
            });
        },

        setState: function (v) {
            v = v || {};
            v.content = v.content || "";
            v.style = v.style || {};
            if (BI.isEmptyString(v.content)) {
                this._showEmptyTip();
            }else{
                this._showShowTextLabel();
                this.readOnlyEditor.setValue(v.content);
            }
            this.readOnlyEditor.element.css({
                backgroundColor: v.style.backgroundColor,
                color: BI.DOM.getContrastColor(v.style.backgroundColor)
            });
        },

        getValue: function () {
            return this.richEditor.getValue();
        }

    });
    BI.shortcut("bi.rich_text_area", RichTextArea);
})();!(function () {
    var ReadRichEditor = BI.inherit(BI.BasicButton, {

        props: {
            baseCls: "bi-read-rich-editor",
            singleLine: false
        },

        render: function () {
            var self = this, o = this.options;
            return o.singleLine === false ? {
                type: "bi.rich_editor",
                height: "100%",
                readOnly: true,
                ref: function (_ref) {
                    self.editor = _ref;
                }
            } : {
                type: "bi.rich_editor",
                cls: "single-line-dot",
                width: "100%",
                readOnly: true,
                ref: function (_ref) {
                    self.editor = _ref;
                }
            };
        },

        mounted: function () {
            var o = this.options;
            if (BI.isNotNull(o.value)) {
                this.editor.setValue(o.value);
            }
        },

        setStyle: function (v) {
            this.editor.element.css(v);
        },

        doClick: function () {
            if (this.isValid()) {
                this.fireEvent("EVENT_CHANGE", this.getValue(), this);
            }
        },

        setValue: function (v) {
            this.editor.setValue(v);
        },

        getValue: function () {
            return this.editor.getValue();
        },

        getContentHeight: function () {
            return this.editor.getContentHeight();
        }
    });
    BI.shortcut("bi.read_rich_editor", ReadRichEditor);
})();!(function () {
    var Service = BI.inherit(BI.OB, {

        makeFirstPY4Sort: function (items) {
            BI.each(items, function (i, item) {
                var text = item.name || item.text;
                if (BI.isNotNull(text)) {
                    var py = BI.makeFirstPY(text);
                    item.py = BI.toUpperCase(py);
                }
            });
            return items;
        }

    });

    BI.service("bi.services.design.rich_text_area", Service);
})();!(function () {
    var ToolBar = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-dynamic-title-toolbar"
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.rich_editor_text_toolbar",
                buttons: [
                    {type: "bi.rich_editor_font_chooser"},
                    {type: "bi.rich_editor_size_chooser"},
                    {type: "bi.rich_editor_bold_button"},
                    {type: "bi.rich_editor_italic_button"},
                    {type: "bi.rich_editor_underline_button"},
                    {type: "bi.rich_editor_color_chooser"}, {
                        type: "bi.rich_editor_background_color_chooser",
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (v) {
                                self.fireEvent("EVENT_CHANGE", v);
                            }
                        }]
                    },
                    {type: "bi.rich_editor_align_left_button"},
                    {type: "bi.rich_editor_align_center_button"},
                    {type: "bi.rich_editor_align_right_button"},
                    {type: "bi.design.insert_param_combo"}
                ],
                editor: o.editor
            };
        },

        getValue: function () {
            return this.toolbar.getValue();
        },

        setValue: function (v) {
            this.toolbar.setValue(v);
        }
    });
    BI.shortcut("bi.rich_text_area_toolbar", ToolBar);
})();!(function () {
    BI.SelectDimensionDataCombo = BI.inherit(BI.Widget, {

        _const: {
            perPage: 10
        },

        props: {
            baseCls: "bi-select-dimension-data-combo",
            height: 28,
            dimensionGroupId: ""
        },

        render: function () {
            var self = this, o = this.options;
            this.options.dId = BI.Utils.getDimensionIdByDimensionGroupId(o.wId, o.dimensionGroupId);
            this.dimension = {
                type: BI.Utils.getSwitchDimensionTypeById(o.dId),
                name: BI.Utils.getDimensionNameById(o.dId),
                fieldId: BI.Utils.getMeasureSwitchFieldById(o.dId),
                group: {
                    type: BI.Utils.getSwitchDimensionGroupTypeById(o.dId)
                },
                sort: BI.Utils.getSwitchMeasureSortById(o.dId)
            };

            return {
                type: "bi.multi_select_insert_combo",
                text: BI.i18nText("BI-Basic_Unrestricted"),
                ref: function () {
                    self.combo = this;
                },
                itemsCreator: BI.bind(this._itemsCreator, this),
                valueFormatter: function (v) {
                    var text = v;
                    if (BI.isNotNull(v) && BI.Utils.getFieldTypeByIdOfWidget(o.wId, self.dimension.fieldId) === BICst.COLUMN.DATE && (v + "").length > 4) {
                        if (BI.isNumeric(v)) {
                            var setting = BI.Utils.getSwitchMeasureSettingById(self.options.dId);
                            var formatType = setting.dateFormat ? setting.dateFormat.type : BICst.DESIGN.DATE_FORMAT.SPLIT;
                            text = BI.Format.formatValueByGroupAndFormatter(v, self.dimension.group.type || BICst.GROUP.YMD, formatType);
                        }
                    }
                    return text;
                },
                listeners: [{
                    eventName: BI.MultiSelectCombo.EVENT_CONFIRM,
                    action: function () {
                        self.fireEvent("EVENT_CONFIRM");
                    }
                }],
                width: o.width,
                height: o.height,
                value: o.value
            };
        },

        _itemsCreator: function (options, callback) {
            var o = this.options, self = this;

            var dimensions = {};
            var view = {};
            dimensions[o.dId] = this.dimension;
            view[BICst.REGION.DIMENSION1] = [o.dId];

            var groupType = BI.Utils.getSwitchDimensionGroupTypeById(self.options.dId);
            if ((groupType === BICst.DESIGN.GROUP.YMD ||
                groupType === BICst.DESIGN.GROUP.YMDH || groupType === BICst.DESIGN.GROUP.YMDHM ||
                groupType === BICst.DESIGN.GROUP.YMDHMS) && (options.keywords || options.keyword)) {
                var keywords = (options.keywords || []).slice();
                if (options.keyword) {
                    keywords.push(options.keyword);
                }
                // 考虑到现在不同分组的维度的配置是存在不同位置的，那么日期的模糊搜索就成为了可能
                options.keyword && delete options.keyword;

            }

            if (!this.items) {
                this.items = [];
                BI.Utils.getWidgetDataByWidgetInfoWithParam({
                    dimensions: dimensions,
                    view: view,
                    tableName: BI.Utils.getTableNameWidgetId(o.wId),
                    measures: BI.designModel.widgets[o.wId].measures,
                    fields: BI.Utils.getFieldsByTableName(BI.designModel.widgets[o.wId].tableName),
                    page: -1
                }, function (data) {
                    if (BI.isNotEmptyArray(data.items)) {
                        self.items = self._createItemsByData(BI.map(data.items[0].children, "text"));
                    }
                    call();
                });
            } else {
                call();
            }

            function call () {
                var items = self.items;
                var keywords = options.keywords || [];
                var keyword = options.keyword;
                if (BI.isNull(keyword)) {
                } else {
                    keywords.push(keyword);
                }
                if (BI.isNotEmptyArray(keywords)) {
                    var matched = [], finded = [];
                    BI.each(keywords, function (idx, keyword) {
                        var search = BI.Func.getSearchResult(items, keyword);
                        matched = BI.concat(matched, search.match);
                        finded = BI.concat(finded, search.find);
                    });
                    items = BI.concat(matched, finded);
                }
                if (BI.isNotNull(options.selectedValues)) {// 过滤
                    var filter = BI.makeObject(options.selectedValues, true);
                    items = BI.filter(items, function (i, ob) {
                        return !filter[ob.value];
                    });
                }
                if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
                    callback({
                        items: items
                    });
                    return;
                }
                if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
                    callback({count: items.length});
                    return;
                }
                callback({
                    items: self._getItemsByTimes(items, options.times),
                    hasNext: self._hasNextByTimes(items, options.times)
                });
            }
        },

        _getItemsByTimes: function (items, times) {
            var res = [];
            BI.each(BI.makeArray(100, null), function (idx, item) {
                var i = (times - 1) * 100 + idx;
                if (BI.isNotNull(items[i])) {
                    res.push(items[i]);
                }
            });
            return res;
        },

        _hasNextByTimes: function (items, times) {
            return times * 100 < items.length;
        },

        _createItemsByData: function (values) {
            var self = this, o = this.options, result = [];
            BI.each(values, function (idx, value) {
                var groupType = BI.Utils.getSwitchDimensionGroupTypeById(o.dId);
                var formatterObj = BI.Utils.getSwitchMeasureSettingById(o.dId) || {};
                var formatter = formatterObj.dateFormat || {};
                var text = BI.Format.formatValueByGroupAndFormatter(value, groupType, formatter.type);
                result.push({
                    text: text,
                    value: value,
                    title: text
                });

            });
            return result;
        },

        _assertValue: function (v) {
            v = v || {};
            v.type = v.type || BI.Selection.Multi;
            v.value = v.value || [];
            return v;
        },

        setValue: function (v) {
            v = this._assertValue(v);
            this.combo.setValue(v);
        },

        getValue: function () {
            var val = this.combo.getValue() || {};
            return {
                type: val.type,
                value: val.value,
                assist: val.assist
            };
        },

        populate: function () {
            this.combo.populate();
        }
    });
    BI.shortcut("bi.select_dimension_data_combo", BI.SelectDimensionDataCombo);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 上午9:13
 * @Description
 */

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-control-multi",
            height: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.combo.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.vertical",
                height: 24,
                items: [{
                    type: "bi.multi_select_insert_combo",
                    value: this.model.value,
                    itemsCreator: BI.bind(this._itemsCreator, this),
                    width: o.width,
                    height: o.height,
                    text: BI.i18nText("BI-Basic_Unrestricted"),
                    disabled: this.model.disabled,
                    warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                    belowMouse: true,
                    ref: function (_ref) {
                        self.combo = _ref;
                    },
                    listeners: [{
                        eventName: BI.MultiSelectInsertCombo.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE", self.getValue());
                        }
                    }]
                }]
            };
        },

        setValue: function (v) {
            var value = this._assertValue(v);
            this.combo.setValue(value);
        },

        getValue: function () {
            var val = this.combo.getValue();
            return {
                type: val.type,
                value: val.value,
                // 保存4个值
                // 1.为了做trigger只有一个值的时候显示这个值
                // 2.动态标题的显示处理
                assist: (val.assist || []).slice(0, 20)
            };
        },

        reset: function () {
            this.setValue();
        },

        populate: function () {

        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (BI.size(dimensions) === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }

                    if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
                        callback({count: data.rowSize});
                        return;
                    }

                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        },

        _assertValue: function (v) {
            if (BI.isEmpty(v)) {
                return {
                    type: BI.Selection.Multi,
                    value: []
                };
            }
            return v;
        }
    });
    BI.shortcut("bi.string_control.multi", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/5/19 下午8:44
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-control-multi-no-bar",
            height: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.combo.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.vertical",
                height: 24,
                items: [{
                    type: "bi.multi_select_insert_no_bar_combo",
                    value: this._deAssertValue(this.model.value),
                    itemsCreator: BI.bind(this._itemsCreator, this),
                    text: BI.i18nText("BI-Basic_Unrestricted"),
                    width: o.width,
                    height: o.height,
                    disabled: this.model.disabled,
                    warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                    belowMouse: true,
                    ref: function (_ref) {
                        self.combo = _ref;
                    },
                    listeners: [{
                        eventName: BI.MultiSelectInsertNoBarCombo.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE", self.getValue());
                        }
                    }]
                }]
            };
        },

        setValue: function (v) {
            var value = this._deAssertValue(v);
            this.combo.setValue(value);
        },

        getValue: function () {
            var val = this.combo.getValue();
            return {
                type: BI.Selection.Multi,
                value: val,
                // 保存4个值
                // 1.为了做trigger只有一个值的时候显示这个值
                // 2.动态标题的显示处理
                assist: (val.assist || []).slice(0, 20)
            };
        },

        reset: function () {
            this.setValue();
        },

        populate: function () {

        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (BI.size(dimensions) === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }

                    if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
                        callback({count: data.rowSize});
                        return;
                    }

                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        },

        _deAssertValue: function (v) {
            var value = v || {};

            return value.value || [];
        }
    });
    BI.shortcut("bi.string_control.multi_no_bar", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 上午9:13
 * @Description
 */

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-control-single",
            height: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.combo.setEnable(!this.model.disabled);
            }
        },

        mounted: function () {
            this.setValue(this.model.value);
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.vertical",
                height: 24,
                items: [{
                    type: "bi.single_select_insert_combo",
                    value: this._deAssertValue(this.model.value),
                    itemsCreator: BI.bind(this._itemsCreator, this),
                    text: BI.i18nText("BI-Basic_Unrestricted"),
                    width: o.width,
                    height: o.height,
                    disabled: this.model.disabled,
                    warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                    belowMouse: true,
                    ref: function (_ref) {
                        self.combo = _ref;
                    },
                    listeners: [{
                        eventName: BI.MultiSelectInsertCombo.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE", self.getValue());
                        }
                    }]
                }]
            };
        },

        setValue: function () {
            this.combo.setValue(this._deAssertValue(this.model.value));
        },

        getValue: function () {
            var val = this.combo.getValue();

            if (BI.isNull(val)) {
                return {
                    type: BI.Selection.Multi,
                    value: [],
                    assist: []
                };
            }

            return {
                // 转成多选的结构
                type: BI.Selection.Multi,
                value: [val],
                assist: [val]
            };
        },

        reset: function () {
            this.setValue();
        },

        populate: function () {

        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (BI.size(dimensions) === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.MultiSelectCombo.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }

                    if (options.type === BI.MultiSelectCombo.REQ_GET_DATA_LENGTH) {
                        callback({count: data.value});
                        return;
                    }

                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        },

        _deAssertValue: function (v) {
            var value = v || {};

            return BI.first(value.value);
        }
    });
    BI.shortcut("bi.string_control.single", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/4/11 上午11:42
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-control-text",
            height: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.text_editor",
                        allowBlank: true,
                        value: this._deAssertValue(this.model.value),
                        width: o.width,
                        height: o.height,
                        ref: function (_ref) {
                            self.editor = _ref;
                        },
                        listeners: [{
                            eventName: BI.TextEditor.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        setValue: function (v) {
            var value = this._deAssertValue(v);
            this.editor.setValue(value);
        },

        getValue: function () {
            var val = this.editor.getValue();

            return {
                // 转成多选的结构
                type: BI.Selection.Multi,
                value: [val],
                assist: [val]
            };
        },

        reset: function () {
            this.setValue();
        },

        populate: function () {},

        _deAssertValue: function (v) {
            var value = v || {};

            return BI.first(value.value);
        }
    });
    BI.shortcut("bi.string_control.text", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 上午11:30
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-label-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || dimensions.** || view ": function () {
                this.populate();
            },
            disabled: function () {
                this.listLabel.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.list_label",
                ref: function (_ref) {
                    self.listLabel = _ref;
                },
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.populate();
        },

        populate: function () {
            var self = this;

            var dimensions = BI.keys(this.model.dimensions);
            if (dimensions.length === 0) {
                self.listLabel.populate([]);
            } else {
                var labels = this.model.dimensions[dimensions[0]].name;
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    var result = [];
                    var value = data.value;

                    if (BI.has(self.model.value, "value")) {
                        BI.each(self.model.value.value, function (index, val) {
                            BI.remove(value, val);
                        });

                        value = BI.concat(self.model.value.value || [], value);
                    }

                    BI.each(value, function (idx, dt) {
                        result.push({
                            value: dt,
                            text: dt,
                            title: dt
                        });
                    });
                    self.listLabel.populate({
                        title: labels,
                        items: result
                    });

                    self.setValue(self.model.value);

                }, {textOptions: {times: 1}});
            }
        },

        setValue: function (v) {
            v = v || {};
            if (v.type === 1) {
                this.listLabel.setValue(v.value);
            } else {
                this.listLabel.setValue([BICst.LIST_LABEL_TYPE.ALL]);
            }
        },

        getValue: function () {
            var value = this.listLabel.getValue();
            if (BI.contains(value, BICst.LIST_LABEL_TYPE.ALL)) {
                return {};
            }

            return {
                type: 1,
                value: value
            };
        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.string_label_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/5/30 下午2:34
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-label-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || dimensions.** || view ": function () {
                this.populate();
            },
            disabled: function () {
                this.listLabel.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.list_label_no_limit",
                ref: function (_ref) {
                    self.listLabel = _ref;
                },
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.populate();
        },

        populate: function () {
            var self = this;

            var dimensions = BI.keys(this.model.dimensions);
            if (dimensions.length === 0) {
                self.listLabel.populate([]);
            } else {
                var labels = this.model.dimensions[dimensions[0]].name;
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    var result = [];
                    var value = data.value;

                    if (BI.has(self.model.value, "value")) {
                        BI.each(self.model.value.value, function (index, val) {
                            BI.remove(value, val);
                        });

                        value = BI.concat(self.model.value.value || [], value);
                    }

                    BI.each(value, function (idx, dt) {
                        result.push({
                            value: dt,
                            text: dt,
                            title: dt
                        });
                    });
                    self.listLabel.populate({
                        title: labels,
                        items: result
                    });

                    self.setValue(self.model.value);

                }, {textOptions: {times: 1}});
            }
        },

        setValue: function (v) {
            v = v || {};
            if (v.type === 1) {
                this.listLabel.setValue(v.value);
            } else {
                this.listLabel.setValue([BICst.LIST_LABEL_TYPE.ALL]);
            }
        },

        getValue: function () {
            var value = this.listLabel.getValue();
            if (BI.contains(value, BICst.LIST_LABEL_TYPE.ALL)) {
                return {};
            }

            return {
                type: 1,
                value: value
            };
        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.string_label_control_no_limit", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午2:17
 * @Description
 */

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-list-control-multi"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || view || dimensions.**": function () {
                this.populate();
            },
            disabled: function () {
                this.list.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.multi_select_insert_list",
                itemsCreator: BI.bind(this._itemsCreator, this),
                ref: function (_ref) {
                    self.list = _ref;
                },
                value: this.model.value,
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                listeners: [{
                    eventName: BI.MultiSelectInsertList.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.populate();
        },

        reset: function () {
            this.setValue();
        },

        setValue: function (v) {
            this.list.setValue(v);
        },

        getValue: function () {
            var val = this.list.getValue();
            return {
                type: val.type,
                value: val.value,
                // 保存2个值为了做trigger只有一个值的时候显示这个值
                assist: (val.assist || []).slice(0, 20)
            };
        },

        populate: function () {
            this.setValue(this.model.value);
            this.list.populate();
        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (dimensions.length === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.MultiSelectList.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }
                    if (options.type === BI.MultiSelectList.REQ_GET_DATA_LENGTH) {
                        callback({count: data.value});
                        return;
                    }
                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        }
    });
    BI.shortcut("bi.string_list_control.multi", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/5/19 下午8:52
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-list-control-multi-no-bar"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || view || dimensions.**": function () {
                this.populate();
            },
            disabled: function () {
                this.list.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.multi_select_insert_no_bar_list",
                itemsCreator: BI.bind(this._itemsCreator, this),
                ref: function (_ref) {
                    self.list = _ref;
                },
                value: this._deAssertValue(this.model.value),
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                listeners: [{
                    eventName: BI.MultiSelectInsertNoBarList.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.populate();
        },

        reset: function () {
            this.setValue();
        },

        setValue: function (v) {
            this.list.setValue(this._deAssertValue(v));
        },

        getValue: function () {
            var val = this.list.getValue();
            return {
                type: BI.Selection.Multi,
                value: val,
                // 保存2个值为了做trigger只有一个值的时候显示这个值
                assist: (val.assist || []).slice(0, 20)
            };
        },

        populate: function () {
            this.setValue(this.model.value);
            this.list.populate();
        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (dimensions.length === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.MultiSelectList.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }
                    if (options.type === BI.MultiSelectList.REQ_GET_DATA_LENGTH) {
                        callback({count: data.value});
                        return;
                    }
                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        },

        _deAssertValue: function (v) {
            var value = v || {};

            return value.value || [];
        }
    });
    BI.shortcut("bi.string_list_control.multi_no_bar", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午2:17
 * @Description
 */

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-string-list-control-single"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || view || dimensions.**": function () {
                this.populate();
            },
            disabled: function () {
                this.list.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.single_select_insert_list",
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                itemsCreator: BI.bind(this._itemsCreator, this),
                ref: function (_ref) {
                    self.list = _ref;
                },
                value: this.model.value,
                listeners: [{
                    eventName: BI.SingleSelectInsertList.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.setValue(this.model.value);
            this.populate();
        },

        reset: function () {
            this.setValue();
        },

        setValue: function (v) {
            this.list.setValue(this._deAssertValue(v));
        },

        getValue: function () {
            var val = this.list.getValue();
            return {
                type: BI.Selection.Multi,
                value: [val],
                // 保存2个值为了做trigger只有一个值的时候显示这个值
                assist: (val.assist || []).slice(0, 20)
            };
        },

        populate: function () {
            this.setValue(this.model.value);
            this.list.populate();
        },

        _itemsCreator: function (options, callback) {
            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (dimensions.length === 0) {
                callback([]);
            } else {
                BI.Utils.getWidgetDataByWidgetInfo(this.model.filteredWidgetConfig, function (data) {
                    if (options.type === BI.SingleSelectList.REQ_GET_ALL_DATA) {
                        callback({
                            items: self._createItemsByData(data)
                        });
                        return;
                    }
                    if (options.type === BI.SingleSelectList.REQ_GET_DATA_LENGTH) {
                        callback({count: data.value});
                        return;
                    }
                    callback({
                        items: self._createItemsByData(data),
                        hasNext: data.hasNext
                    });
                }, {textOptions: options});
            }
        },

        _createItemsByData: function (data) {
            var result = [];
            BI.each(data.value, function (idx, value) {
                result.push({
                    text: value,
                    value: value,
                    title: value
                });
            });
            return result;
        },

        _deAssertValue: function (v) {
            var value = v || {};

            return BI.first(value.value);
        }
    });
    BI.shortcut("bi.string_list_control.single", Widget);
})();
!(function () {
    var SwitchCombo = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-table-chart-tool-switch-combo",
            height: 20,
            width: 120
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart.switch_combo");
        },

        watch: {
            isSwitchButtonVisible: function (v) {
                this.combo.setVisible(v);
            },
            switchDimensions: function (items) {
                this.dimensions && this.dimensions.populate(this._getItems(items));
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.combo",
                isDefaultInit: true,
                invisible: !this.model.isSwitchButtonVisible,
                ref: function (ref) {
                    self.combo = ref;
                },
                el: {
                    type: "bi.icon_button",
                    height: o.height,
                    cls: "switch-dimension-font widget-tool bi-card",
                    title: BI.i18nText("BI-Design_Switch_Dimension")
                },
                popup: {
                    el: {
                        type: "bi.button_group",
                        ref: function (ref) {
                            self.dimensions = ref;
                        },
                        items: this._getItems(this.model.switchDimensions),
                        layouts: [{
                            type: "bi.vertical",
                            hgap: 10,
                            vgap: 10
                        }]
                    },
                    minWidth: 140
                }
            };
        },

        _getItems: function (items) {
            var self = this;
            BI.each(items, function (i, item) {
                BI.extend(item, {
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.combo.hideView();
                        }
                    }]
                });
            });
            return items;
        }
    });
    BI.shortcut("bi.design.widget.table_chart.switch_combo", SwitchCombo);
})();
!(function () {
    var SwitchComboModel = BI.inherit(Fix.Model, {

        context: ["widget"],

        computed: {
            switchDimensions: function () {
                var self = this, items = [], viewDIds = [];
                BI.each(this.model.widget.view, function (type, region) {
                    viewDIds = BI.concat(viewDIds, region);
                });
                var dIds = BI.keys(this.model.widget.dimensions);
                dIds = BI.filter(dIds, function (i, dId) {
                    // view 里的按顺序 && 去掉结果过滤器里的
                    if (!viewDIds.contains(dId) && !self.model.widget.resultFilter.contains(dId)) {
                        return true;
                    }
                });
                dIds = viewDIds.concat(dIds);
                var resultDIds = [];
                BI.each(dIds, function (idx, dId) {
                    if (BI.Utils.isDrillDimensionById(dId) && !BI.Utils.isGeometricDimension(dId)) {
                        var hasSame = BI.some(resultDIds, function (i, id) {
                            var isSameField = BI.Utils.getFieldIdBydId(id) === BI.Utils.getFieldIdBydId(dId);
                            var hasSameGroupType = BI.Utils.getDimensionGroupTypeById(id) === BI.Utils.getDimensionGroupTypeById(dId);
                            if (isSameField && hasSameGroupType) {
                                return true;
                            }
                        });
                        !hasSame && resultDIds.push(dId);
                    }
                });
                BI.each(resultDIds, function (i, dId) {
                    items.push({
                        type: "bi.design.widget.table_chart.switch_button",
                        dId: dId
                    });
                });
                return items;
            },
            isSwitchButtonVisible: function () {
                return this.model.switchDimensions.length !== 0 && this.model.widget.type !== BICst.DESIGN.WIDGET.DETAIL;
            }
        }

    });
    BI.model("bi.model.design.widget.table_chart.switch_combo", SwitchComboModel);
})();!(function () {
    var SwitchDimension = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-table-chart-tool-switch-button bi-high-light-background",
            height: 20,
            width: 120
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart.switch_button", {
                dId: this.options.dId
            });
        },

        render: function () {
            var self = this, o = this.options;
            var service = BI.Services.getService("bi.service.design.detail.dimension.name");
            return {
                type: "bi.vertical_adapt",
                items: [{
                    type: "bi.combo",
                    ref: function (ref) {
                        self.combo = ref;
                    },
                    isNeedAdjustHeight: false,
                    isNeedAdjustWidth: false,
                    el: {
                        type: "bi.icon_button",
                        height: o.height,
                        width: o.height,
                        cls: "switch-dimension-font",
                        title: BI.i18nText("BI-Design_Switch_Dimension")
                    },
                    popup: {
                        el: {
                            type: "bi.text_value_combo_popup",
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: function () {
                                    self.combo.hideView();
                                }
                            }]
                        }
                    },
                    listeners: [{
                        eventName: BI.Combo.EVENT_BEFORE_POPUPVIEW,
                        action: function () {
                            this.populate(self.model.drillFields);
                        }
                    }, {
                        eventName: BI.Combo.EVENT_CHANGE,
                        action: function (v) {
                            self.store.switchDimension(v);
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                }, {
                    type: "bi.label",
                    width: 100,
                    height: 20,
                    textAlign: "left",
                    text: service.getDimensionFullNameWithOutSameValueGroup(this.options.dId),
                    title: service.getDimensionFullName(this.options.dId)
                }]
            };
        }
    });
    BI.shortcut("bi.design.widget.table_chart.switch_button", SwitchDimension);
})();!(function () {
    var SwitchDimensionModel = BI.inherit(Fix.Model, {

        context: ["widget", "refreshTableChart"],

        computed: {
            drillFields: function () {
                var field = BI.Utils.getFieldByIdOfWidget(this.model.widget.wId, BI.Utils.getFieldIdBydId(this.options.dId));
                var items = [], self = this;
                var service = BI.Services.getService("bi.service.design.detail.dimension.name");
                BI.each(field.drillDir, function (i, dFid) {
                    items.push({
                        type: "bi.text_button",
                        cls: "bi-list-item-active",
                        textAlign: "left",
                        width: 120,
                        lgap: 5,
                        selected: dFid.id === BI.Utils.getMeasureSwitchFieldById(self.options.dId),
                        value: dFid.id,
                        text: service.getFieldGroupFullName(self.options.dId, dFid.id),
                        title: service.getFieldGroupFullName(self.options.dId, dFid.id)
                    });
                });
                return items;
            }
        },

        actions: {
            switchDimension: function (v) {
                var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                service.mountAttribute(this.options.dId, "switchFieldId", v);
                var measureService = BI.Services.getService("bi.service.design.widget.measure");
                measureService.clearDrillSequence(this.model.widget.wId);
                this.model.refreshTableChart = !this.model.refreshTableChart;
            }
        }

    });
    BI.model("bi.model.design.widget.table_chart.switch_button", SwitchDimensionModel);
})();/**
 * author: young
 * createdDate: 2018/3/14
 * description:
 */
!(function () {
    var Service = BI.inherit(BI.OB, {
        createMenuItems: function (wId) {
            var c = BI.Constants.getConstant("bi.constant.design.widgets.table_chart.menu");
            var items = [
                [{
                    text: BI.i18nText("BI-Design_Detail_Setting"),
                    cls: "widget-edit-liner-font",
                    value: c.DETAIL_SETTING
                }],
                [{
                    text: BI.i18nText("BI-Design_Open_Jump"),
                    selected: BI.Utils.getWidgetOpenJumpById(wId),
                    cls: BI.Utils.getWidgetOpenJumpById(wId) ? "dashboard-widget-hook-font bi-list-item-active" : "",
                    value: c.OPEN_JUMP
                }, {
                    text: BI.i18nText("BI-Design_Detail_Jump_Setting"),
                    cls: "widget-jump-font",
                    value: c.JUMP_SETTING,
                    disabled: !BI.Utils.getWidgetOpenJumpById(wId),
                    warningTitle: BI.i18nText("BI-Design_Please_Open_Jump")
                }]
            ];
            if (BI.Utils.getWidgetTypeById(wId) !== BICst.DESIGN.WIDGET.DETAIL) {
                items.push([{
                    text: BI.i18nText("BI-Design_Custom_Linkage_Setting"),
                    cls: "widget-linear-custom-link-font",
                    value: c.CUSTOM_LINKAGE
                }]);
            }
            items = items.concat([
                [{
                    text: BI.i18nText("BI-Design_Allow_Overlap"),
                    selected: BI.Utils.getWidgetOverlapById(wId),
                    cls: BI.Utils.getWidgetOverlapById(wId) ? "dashboard-widget-hook-font bi-list-item-active" : "",
                    value: c.ALLOW_OVERLAP
                }],
                [{
                    text: BI.i18nText("BI-Design_Show_Title"),
                    selected: BI.Utils.getWidgetShowTitleById(wId),
                    cls: BI.Utils.getWidgetShowTitleById(wId) ? "dashboard-widget-hook-font bi-list-item-active" : "",
                    value: c.SHOW_TITLE
                }], [{
                    text: BI.i18nText("BI-Design_Show_Filters"),
                    cls: "widget-filter-thin-font",
                    value: c.SHOW_FILTER
                }], [{
                    text: BI.i18nText("BI-Design_Export_Excel"),
                    cls: "widget-export-font",
                    value: c.EXPORT_EXCEL
                }], [{
                    text: BI.i18nText("BI-Basic_Copy"),
                    cls: "widget-copy-font",
                    value: c.COPY
                }, {
                    text: BI.i18nText("BI-Basic_Delete"),
                    cls: "widget-delete-font",
                    value: c.DELETE
                }]
            ]);
            return items;
        },

        getCalTargetLinkagePopupItems: function (dId) {
            // A = 购买数量 + 合同金额 ， B = A+ 合同金额
            // 显示 A: 按合同金额联动(A) 按合购买数量联动(A) B: 按合同金额联动(A/B) 按购买数量联动(A)
            // 找到所有原始字段对应的计算指标
            var map = {};
            var wId = BI.Utils.getWidgetIdBydId(dId),
                fieldId = BI.Utils.getFieldIdBydId(dId);
            this._createCalMap(wId, fieldId, [], map);
            var items = [];
            BI.each(map, function (id, tars) {
                tars = BI.uniq(tars);
                if (tars.length === 0) {
                    return;
                }
                var names = BI.map(tars, function (i, id) {
                    return BI.Utils.getFieldNameByIdOfWidget(wId, id);
                });
                items.push({
                    text: BI.i18nText("BI-Design_Link_By", BI.Utils.getFieldNameByIdOfWidget(wId, id)) + "(" + names.join("/") + ")",
                    value: id
                });
            });
            if (items.length > 0) {
                return [items];
            }
            return items;
        },

        _createCalMap: function (wId, fieldId, pre, map) {
            var self = this;
            var tars = BI.Utils.getCalculateTargetIdsByFieldIdOfWidget(wId, fieldId);
            // 计算指标可使用日期类控件，但联动时候不展示
            BI.each(tars, function (i, fId) {
                if (BI.Utils.isWidgetExistById(fId) || fId.endWith(BICst.PREFIX.TIME_START) || fId.endWith(BICst.PREFIX.TIME_END)) {
                    return;
                }
                if (BI.Utils.isCalculateField4UseByFieldIdOfWidget(wId, fId)) {
                    self._createCalMap(wId, fId, pre, map);
                    return;
                }
                if (BI.isNull(map[fId])) {
                    map[fId] = [];
                    map[fId] = map[fId].concat(pre);
                }
                map[fId].push(fieldId);
            });
        }
    });
    BI.service("bi.service.design.widgets.table_chart", Service);
})();
!(function () {

    var ChartDisplay = BI.inherit(BI.Pane, {

        props: {
            baseCls: "bi-components-chart-display"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.components.chart.display");
        },

        watch: {
            loading: function (loading) {
                loading && this.loading();
            },
            clicked: function (v) {
                this.fireEvent("EVENT_CHANGE", {clicked: v});
                BI.Utils.broadcastLinkWidgets2Refresh(this.model.wId);
            },

            data: function (data) {
                var self = this;

                if (BI.isEmptyObject(data)) {
                    return;
                }

                try {
                    if (!self.chart) {

                        self.chart = new Van.VanChart(self.container.element[0], data);

                        self.chart.on("imagePointHover", function ( options ) {

                            BI.Utils.getTooltipInfo(options, function (res) {

                                var rowInfo = res.data;

                                if(!rowInfo || !rowInfo.shape) {
                                    return;
                                }

                                var geom = self.chart.data.geoms[rowInfo.geomIndex];
                                BI.extend(geom, geom.options);

                                var tooltip = {
                                    row: rowInfo.row,
                                    instance: {
                                        shape: rowInfo.shape,
                                        tooltipPos: rowInfo.shape.tooltipPos,
                                        boundingRect: rowInfo.shape.boundingRect
                                    },
                                    geom: geom
                                };

                                self.chart.trigger("imageHover", {tooltip: tooltip});

                            });

                        });

                        self.chart.on("imagePointSelected", function ( options ) {

                            BI.Utils.getTooltipInfo(options, function (res) {

                                var rowInfo = res.data;
                                if(!rowInfo || !rowInfo.shape) {
                                    return;
                                }

                                var row = rowInfo.row;
                                row.shape = rowInfo.shape;
                                var geom = self.chart.data.geoms[rowInfo.geomIndex];

                                var metaData = geom.metaData;

                                self.chart.trigger("pointSelected", {pos: options.pos, row: row, metaData: metaData});

                            });

                        });

                        self.chart.on("imageAxisSelected", function ( options ) {

                            BI.Utils.getTooltipInfo(options, function (res) {

                                var hoverInfo = res.data;

                                if(!hoverInfo || !hoverInfo.id) {
                                    return;
                                }

                                var state = self.chart.store.getState();
                                var dimensionIds = state[hoverInfo.facet].dimensionIds, id = hoverInfo.id;

                                var names = id.split("*");
                                var value = BI.map(names, function (index, text) {

                                    return {
                                        dId: dimensionIds[index],
                                        text: text
                                    };

                                });

                                self.chart.trigger("axisClick", {dId: dimensionIds[names.length - 1], value: value});
                            });
                        });

                        self.chart.on("filter", function (filter) {
                            self._populate({
                                chartFilter: filter
                            });
                        });

                        self.chart.on("pointSelected", function ( para ) {

                            var row = para.row, meta = para.metaData;

                            var dFields = BI.filter(meta, function (i, field) {
                                return field.isDimension && field.id;
                            });

                            var mFields = BI.filter(meta, function (i, field) {
                                return field.isMeasure && field.id;
                            });

                            // 钻取
                            self.store.triggerWidgetDrill(BI.map(dFields, function (i, field) {
                                return {
                                    dId: field.id,
                                    fieldId: BI.Utils.getResultDimensionFieldIdById(field.id),
                                    value: row[field.id]
                                };
                            }));

                            if (!mFields.length) {// 无指标字段，则不做指标联动
                                return;
                            }

                            var measureId = mFields[0].id;
                            var clicked = {
                                dId: measureId,
                                fieldId: BI.Utils.getFieldIdBydId(measureId),
                                value: BI.filter(BI.map(dFields, function (i, field) {
                                    return {
                                        dId: field.id,
                                        fieldId: BI.Utils.getResultDimensionFieldIdById(field.id),
                                        text: row[field.id]
                                    };
                                }), function (i, obj) {
                                    return obj.text !== null;
                                })
                            };

                            // 指标跳转
                            var combo = self._createPopup(para.pos, measureId, clicked);
                            var items = [];

                            BI.each(mFields, function (i, field) {

                                var mId = field.id;

                                if (BI.Utils.isCalculateTargetById(mId)) {
                                    var service = BI.Services.getService("bi.service.design.widgets.table_chart");
                                    items = items.concat(service.getCalTargetLinkagePopupItems(mId));
                                }

                                // 计算指标不支持跳转
                                if (self.store.isJumpEnabled(mId) && !BI.Utils.isCalculateTargetById(mId)) {
                                    items.push([{
                                        text: BI.i18nText("BI-Design_Link_By", BI.Utils.getFieldNameByDId(mId)),
                                        value: mId
                                    }]);

                                    // 只显示一个跳转到item
                                    if(i === mFields.length - 1) {
                                        items = items.concat(self.store.getJumpItems(mId));
                                    }

                                }
                            });

                            if (items && items.length > 0) {
                                combo.populate(items);
                                combo.showView();
                                self.fireEvent("EVENT_CLICK_CELL", measureId);
                            } else {
                                // 跳转包含指标联动，没有跳转的时候检查一下指标联动
                                BI.Utils.getAllLinkageWidgets(self.model.widget.wId, function (links) {
                                    if (links.length > 0) {
                                        Fix.set(self.model.widgetAttr, "clicked", clicked);
                                    }
                                });
                            }

                        });

                        // 维度联动
                        self.chart.on("axisClick", function ( ev ) {

                            if(self.model.expand) {
                                return;
                            }

                            BI.Utils.getAllLinkageWidgets(self.model.widget.wId, function (links) {
                                if (links.length > 0) {
                                    Fix.set(self.model.widgetAttr, "clicked", {
                                        dId: ev.dId,
                                        fieldId: BI.Utils.getResultDimensionFieldIdById(ev.dId),
                                        value: ev.value
                                    });
                                }
                            });

                        });

                        self.chart.on("axisResize", function (data) {
                            self.store.resizeAxisBounds(data);
                        });

                        self.chart.render();

                    } else {
                        // container大小变了 container里的div大小没变，导致图没刷新
                        self.chart.refreshData(data);
                    }
                } catch (e) {
                    this.store.setError(e.stack);
                } finally {
                    !this.model.loading && this.loaded();
                }
            }
        },

        mounted: function () {
            var self = this;
            this._resizeHandler = BI.debounce(function () {
                if (BI.isNull(self.store)) {
                    return;
                }
                var width = self._getChartWidth(), height = self._getChartHeight();
                if (this.lastChartWidth !== width || this.lastChartHeight !== height) {
                    self._populate();
                }
                this.lastChartWidth = width;
                this.lastChartHeight = height;
            }, 0);
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.layout",
                        ref: function (ref) {
                            self.container = ref;
                        }
                    },
                    left: 0,
                    top: 0
                }]
            };
        },

        _createPopup: function (pos, dId, clicked) {
            var self = this;

            var combo = BI.createWidget({
                type: "bi.down_list_combo",
                trigger: "",
                height: 25,
                el: {type: "bi.layout"},
                direction: "right",
                listeners: [{
                    eventName: BI.DownListCombo.EVENT_CHANGE,
                    action: function (id) {
                        if (BI.Utils.isCalculateTargetById(clicked.dId)) {
                            clicked.fieldId = id;
                        }
                        Fix.set(self.model.widgetAttr, "clicked", clicked);
                        combo.destroy();
                    }
                }, {
                    eventName: BI.DownListCombo.EVENT_SON_VALUE_CHANGE,
                    action: function (v) {
                        self.store.doJump(v, dId, clicked);
                        combo.destroy();
                    }
                }]
            });

            BI.createWidget({
                type: "bi.absolute",
                element: this.element,
                items: [{
                    el: combo,
                    top: pos.y / this._getScale(),
                    left: pos.x / this._getScale()
                }]
            });

            return combo;
        },

        _getChartWidth: function () {
            return this.element.width() * this._getScale();
        },

        _getChartHeight: function () {
            return this.element.height() * this._getScale();
        },

        _populate: function (options) {
            var attrService = BI.Services.getService("bi.service.design.chart.attr");

            options = options || {};

            options.page = -1;
            options.chartBounds = {
                width: this._getChartWidth(),
                height: this._getChartHeight(),
                scale: this._getScale()
            };
            this._scale();

            // 当地当前图形指标所在轴的标记值
            options.measuresToGeoms = attrService.getGeomRegionType(this.model.view);
            this.store.reqChartOptions(options);
        },

        _getScale: function () {
            return this.model.chartScale;
        },

        _scale: function () {
            if (!BI.isIE() && this._getScale() !== 1 ) {
                this.container.element.css("transform", "scale(" + (1 / this._getScale()) + ")");
                this.container.element.css("transform-origin", "top left");
            }
        },

        populate: function () {
            this._populate();
        },

        resize: function () {
            this._resizeHandler();
        }
    });
    BI.shortcut("bi.components.chart.display", ChartDisplay);
})();!(function () {
    var ChartDisplayModel = BI.inherit(Fix.Model, {

        context: ["widget", "drillControl", "refreshTableChart", "error", "expand", "dataMiningError", "scale"],

        state: function () {
            return {
                data: {},
                widgetAttr: {},
                isLoadedData: null,
                loading: false
            };
        },

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },

            dimensions: function () {
                return this.model.widget.dimensions;
            },

            view: function () {
                return this.model.widget.view;
            },

            viewAttr: function () {
                return this.model.widget.viewAttr;
            },

            clicked: function () {
                return this.model.widgetAttr.clicked;
            },

            chartScale: function () {
                return BI.parseFloat(Math.ceil(this.model.scale || 1));
            }
        },

        actions: {

            triggerWidgetDrill: function (v) {
                this.model.drillControl.value = v;
                this.model.drillControl.trigger = !this.model.drillControl.trigger;
            },

            doJump: function (v, dId, clicked) {
                var service = BI.Services.getService("bi.service.design.jump_setting");
                service.doJump(dId, this.jumpMap[v], BI.extend(clicked, {
                    type: BICst.DESIGN.WIDGET.CHART
                }));
            },

            reqChartOptions: function (options) {
                var bounds = options.chartBounds;

                if (Math.abs(bounds.width) < 1e-6 || Math.abs(bounds.height) < 1e-6) {
                    return;
                }

                var self = this;
                this.model.loading = true;
                BI.Utils.getWidgetDataByID(this.model.widget.wId, {
                    success: function (res) {
                        self.model.error = {
                            errorCode: res.errorCode,
                            message: res.errorMsg
                        };
                        self.model.data = res.data || {};
                        self.model.dataMiningError = {
                            message: res.data && res.data.error
                        };

                        self.model.loading = false;
                    }
                }, options);
            },

            setError: function (error) {
                this.model.error = {
                    errorCode: -1,
                    message: error
                };
            },

            resizeAxisBounds: function (data) {
                var regionType = data.horizontal ? BICst.REGION.DIMENSION1 : BICst.REGION.TARGET1;
                var dimensions = this.model.dimensions;

                // 触发数据改变刷新图表请求
                this.model.refreshTableChart = !this.model.refreshTableChart;

                // 当前改变的是最小单元的size
                if (data.fixUnit) {
                    Fix.set(this.model.viewAttr[regionType], "size", data.value);
                    return;
                }

                var attrService = BI.Services.getService("bi.service.design.chart.attr");
                // 维度字段只改变自身size
                if (!BI.Utils.isTargetById(data.fieldId)) {
                    attrService.setPrivateDimSettings(dimensions, data.fieldId, "size", data.value);
                    return;
                }

                // 指标字段则改变与之处于同一侧的所有指标字段
                var sharedAxis = BI.Utils.getDimensionSharedAxisById(data.fieldId);
                BI.each(this.model.view[regionType], function (idx, dId) {
                    if (!BI.Utils.isTargetById(dId)) {
                        return;
                    }

                    if (sharedAxis === BI.Utils.getDimensionSharedAxisById(dId)) {
                        attrService.setPrivateDimSettings(dimensions, dId, "size", data.value);
                    }
                });
            }
        },

        isJumpEnabled: function (dId) {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            var wId = BI.Utils.getWidgetIdBydId(dId);
            return service.hasJump(BI.Utils.getJumpByID(wId)) && BI.Utils.getWidgetOpenJumpById(wId);
        },

        isCalculateTarget: function (dId) {
            return BI.Utils.isCalculateTargetById(dId);
        },

        getJumpItems: function (dId) {
            var service = BI.Services.getService("bi.service.design.jump_setting");

            var jumpMap = service.getJumpMap(dId);

            this.jumpMap = this.jumpMap || jumpMap;
            BI.extend(this.jumpMap, jumpMap);
            return service.getJumpItems(jumpMap);
        }
    });
    BI.model("bi.model.components.chart.display", ChartDisplayModel);
})();
!(function () {
    var TableChartEmptyPane = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-table-chart-empty-pane"
        },

        watch: {
            iconClass: function (cls) {
                this.icon.setIcon(cls);
            }
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart.empty_pane.store");
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                scrollable: false,
                items: [{
                    el: {
                        type: "bi.center_adapt",
                        cls: "widget-tip-pane",
                        items: [{
                            type: "bi.vertical",
                            width: "100%",
                            items: [{
                                type: "bi.icon_change_button",
                                iconCls: this.model.iconClass,
                                height: 100,
                                ref: function () {
                                    self.icon = this;
                                }
                            }, {
                                type: "bi.label",
                                invisible: this.model.hideEmptyTip,
                                text: BI.i18nText("BI-Design_Empty_Widget_Tip"),
                                cls: "empty-widget-tip bi-tips",
                                height: 30
                            }]
                        }]
                    },
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        }
    });
    BI.shortcut("bi.table_chart_empty_pane", TableChartEmptyPane);
})();!(function () {
    var TableChartEmptyPaneStore = BI.inherit(Fix.Model, {

        context: ["widget", "hideEmptyTip"],

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            wType: function () {
                return this.model.widget.type;
            },
            iconClass: function () {
                var cls = "";
                switch (this.model.wType) {
                    case BICst.DESIGN.WIDGET.DETAIL:
                        cls = "background-detail-table-tip";
                        break;
                    case BICst.DESIGN.WIDGET.TABLE:
                        cls = "background-group-table-tip";
                        break;
                    case BICst.DESIGN.WIDGET.CROSS_TABLE:
                        cls = "background-cross-table-tip";
                        break;
                    case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                        cls = "background-complex-table-tip";
                        break;
                    case BICst.DESIGN.WIDGET.CHART:
                        // var chartAttr = this.model.widget.settings.chartAttr;
                        // var types = [];
                        // BI.each(chartAttr, function (dId, dimension) {
                        //     types.push(dimension.type);
                        // });
                        // cls = this._getChartIcon(BI.uniq(types));
                        cls = "background-empty-chart-tip";
                        break;
                    default:
                        cls = "background-group-table-tip";
                }
                return cls;
            }
        },

        _getChartIcon: function (types) {
            if (BI.size(types) !== 1) return "background-many-chart-tip";
            switch (BI.first(types)) {
                case BICst.CHART.ATTR.CHART_TYPE.INTERVAL:
                    return "background-interval-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.POINT:
                    return "background-point-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.HEAT_MAP:
                    return "background-heatmap-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.LINE:
                    return "background-line-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.AREA:
                    return "background-area-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.SQUARE:
                    return "background-square-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.PIE:
                    return "background-pie-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.TEXT:
                    return "background-text-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.MAP:
                    return "background-map-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.FUNNEL:
                    return "background-funnel-chart-tip";
                case BICst.CHART.ATTR.CHART_TYPE.GAUGE:
                    return "background-gauge-chart-tip";
                default:
                    return "background-many-chart-tip";
            }
        }

    });
    BI.model("bi.model.design.widget.table_chart.empty_pane.store", TableChartEmptyPaneStore);
})();!(function () {
    var TableChartErrorPane = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-table-chart-error-pane bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.table_chart_error_pane");
        },

        watch: {
            error: function (error) {
                this.summaryText.setText(this.model.summaryText);
                this.errorInfo.setText(error.message);
            }
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.horizontal_auto",
                scrolly: true,
                items: [{
                    type: "bi.center_adapt",
                    cls: "execute-fail-icon",
                    items: [{
                        type: "bi.icon",
                        width: 100,
                        height: 100
                    }]
                }, {
                    type: "bi.label",
                    text: this.model.summaryText,
                    cls: "error-comment-page-not-found",
                    height: 30,
                    ref: function () {
                        self.summaryText = this;
                    }
                }, {
                    type: "bi.text_button",
                    cls: "bi-high-light-border bi-high-light bi-border",
                    text: BI.i18nText("BI-Basic_Detail_Info"),
                    width: 90,
                    height: 30,
                    listeners: [{
                        eventName: BI.Button.EVENT_CHANGE,
                        action: function () {
                            self.errorInfo.setVisible(!self.errorInfo.isVisible());
                        }
                    }]
                }, {
                    type: "bi.label",
                    textHeight: 25,
                    cls: "error-info bi-card",
                    whiteSpace: "normal",
                    textAlign: "left",
                    text: this.model.detailText,
                    invisible: true,
                    ref: function (ref) {
                        self.errorInfo = ref;
                    }
                }],
                vgap: 10
            };
        }
    });
    BI.shortcut("bi.table_chart_error_pane", TableChartErrorPane);
})();
!(function () {
    var TableChartErrorPane = BI.inherit(Fix.Model, {

        context: ["error"],

        computed: {
            summaryText: function () {
                switch (this.model.error.errorCode) {
                    case BICst.ErrorCode.PACKAGE_ABSENT:
                    case BICst.ErrorCode.TABLE_ABSENT:
                    case BICst.ErrorCode.FIELD_ABSENT:
                    case BICst.ErrorCode.GROUP_ABSENT:
                        return BI.i18nText("BI-Design_Current_Data_Is_Delete_Can_Not_Show");
                    case BICst.ErrorCode.PACKAGE_NO_AUTH:
                    case BICst.ErrorCode.TABLE_NO_AUTH:
                    case BICst.ErrorCode.FIELD_NO_AUTH:
                    case BICst.ErrorCode.GROUP_NO_AUTH:
                        return BI.i18nText("BI-Design_No_Auth_Check_Data");
                    case BICst.DEC_ERROR_CODE.JWT_EXPIRED:
                        return BI.i18nText("BI-Design_JWT_Error");
                    case BICst.RES_STATUS.TOO_LARGE_DATA:
                        return BI.i18nText("BI-Design_Too_Large_Data");
                    default:
                        return BI.i18nText("BI-Design_Error_Please_Contact_Admin");
                }
            },

            detailText: function () {
                return this.model.error.message;
            }
        }
    });
    BI.model("bi.model.table_chart_error_pane", TableChartErrorPane);
})();
!(function () {
    var TableChartErrorPane = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-table-chart-error-pane bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.license_pane");
        },

        watch: {
            funcName: function () {
                this.label.setText(BI.i18nText("BI-Design_Use_No_License_Function", this.model.funcName));
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.horizontal_auto",
                scrolly: true,
                items: [{
                    type: "bi.center_adapt",
                    cls: "auth-fail-icon",
                    items: [{
                        type: "bi.icon",
                        width: 100,
                        height: 100
                    }]
                }, {
                    type: "bi.label",
                    text: BI.i18nText("BI-Design_Data_Can_Not_Read")
                }, {
                    type: "bi.label",
                    text: BI.i18nText("BI-Design_Use_No_License_Function", this.model.funcName),
                    ref: function (_ref) {
                        self.label = _ref;
                    }
                }],
                vgap: 10
            };
        }
    });
    BI.shortcut("bi.table_chart_license_pane", TableChartErrorPane);
})();
!(function () {
    var TableChartErrorPane = BI.inherit(Fix.Model, {

        context: ["error"],

        computed: {
            funcName: function () {
                return BI.Services.getService("bi.service.lic").getLicenseTipByErrorCode(this.model.error.errorCode);
            }
        }
    });
    BI.model("bi.model.license_pane", TableChartErrorPane);
})();
/**
 * Created by astronaut007 on 2018/8/1
 */
!(function () {
    var TableChartStyleService = BI.inherit(BI.OB, {

    });
})();!(function () {
    var TableChartManager = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-table-chart-manager"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table_chart_manager");
        },

        watch: {
            isWidgetEmpty: function (isWidgetEmpty) {
                this.emptyPane.setVisible(isWidgetEmpty);
            },
            isError: function (error) {
                this.errorPane.setVisible(error);
            },
            isLicense: function (v) {
                this.licensePane.setVisible(v);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                cls: "wId-" + this.model.wId,
                items: [{
                    el: {
                        type: "bi.tab",
                        single: true,
                        showIndex: this.model.wType,
                        cardCreator: BI.bind(this._createChartTabs, this),
                        ref: function (ref) {
                            self.tableChartTab = ref;
                        },
                        invisible: this.model.isError
                    },
                    top: 0,
                    bottom: 10,
                    left: 0,
                    right: 0
                }, {
                    el: {
                        type: "bi.table_chart_error_pane",
                        invisible: !this.model.isError,
                        ref: function (_ref) {
                            self.errorPane = _ref;
                        }
                    },
                    top: 0,
                    bottom: 10,
                    left: 10,
                    right: 10
                }, {
                    el: {
                        type: "bi.table_chart_license_pane",
                        invisible: !this.model.isLicense,
                        ref: function (_ref) {
                            self.licensePane = _ref;
                        }
                    },
                    top: 0,
                    bottom: 0,
                    left: 0,
                    right: 0
                }, {
                    el: {
                        type: "bi.table_chart_empty_pane",
                        invisible: !this.model.isWidgetEmpty,
                        ref: function (_ref) {
                            self.emptyPane = _ref;
                        }
                    },
                    top: 0,
                    bottom: 10,
                    left: 10,
                    right: 10
                }]
            };
        },

        _createChartTabs: function (v) {
            var self = this;
            switch (v) {
                case BICst.DESIGN.WIDGET.TABLE:
                    return {
                        type: "bi.group_table",
                        ref: function (ref) {
                            self.table = ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (obs) {
                                self.fireEvent(TableChartManager.EVENT_CHANGE, obs);
                            }
                        }]
                    };
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    return {
                        type: "bi.cross_table",
                        ref: function (ref) {
                            self.table = ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (obs) {
                                self.fireEvent(TableChartManager.EVENT_CHANGE, obs);
                            }
                        }]
                    };
                case BICst.DESIGN.WIDGET.DETAIL:
                    return {
                        type: "bi.detail_table",
                        ref: function (ref) {
                            self.table = ref;
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (obs) {
                                self.fireEvent(TableChartManager.EVENT_CHANGE, obs);
                            }
                        }]
                    };
                default:
                    return {
                        type: "bi.components.chart.display",
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function (obs) {
                                self.fireEvent(TableChartManager.EVENT_CHANGE, obs);
                            }
                        }]
                    };
            }
        },

        resize: function () {
            this.tableChartTab.getSelectedTab() && this.tableChartTab.getSelectedTab().resize();
        },

        setTableColumnEqualDivide: function () {
            this.table.setTableColumnEqualDivide();
        },

        getValue: function () {
            return this.tableChartTab.getValue();
        },

        magnify: function () {
            this.tableChartTab.getSelectedTab() && this.tableChartTab.getSelectedTab().magnify();
        },

        populate: function () {
            this.tableChartTab.setSelect(this.model.wType);
            this.tableChartTab.populate();
        }
    });
    TableChartManager.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.design.widget.table_chart_manager", TableChartManager);
})();
!(function () {
    var TableChartManagerModel = BI.inherit(Fix.Model, {

        context: ["widget", "error"],

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            wType: function () {
                return this.model.widget.type;
            },
            isWidgetEmpty: function () {
                var view = this.model.widget.view;
                switch (this.model.wType) {
                    case BICst.DESIGN.WIDGET.TABLE:
                    case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    case BICst.DESIGN.WIDGET.DETAIL:
                        return BI.isEmpty(view[BICst.REGION.DIMENSION1]) &&
                                BI.isEmpty(view[BICst.REGION.DIMENSION2]) &&
                                BI.isEmpty(view[BICst.REGION.TARGET1]);
                    case BICst.DESIGN.WIDGET.CHART:
                        var chartAttr = this.model.widget.settings.chartAttr;
                        var attrService = BI.Services.getService("bi.service.design.chart.attr");
                        return BI.isEmpty(view[BICst.REGION.DIMENSION1]) &&
                                BI.isEmpty(view[BICst.REGION.TARGET1]) &&
                                attrService.isAttrSettingEmpty(chartAttr.graphic);
                    default:
                        return false;
                }
            },
            isError: function () {
                var errorCode = this.model.error.errorCode;
                return BI.isNotNull(errorCode)
                    && !BI.Services.getService("bi.service.lic").isLicenseError(errorCode);
            },

            isLicense: function () {
                return BI.Services.getService("bi.service.lic").isLicenseError(this.model.error.errorCode);
            }
        }
    });
    BI.model("bi.model.design.widget.table_chart_manager", TableChartManagerModel);
})();
!(function () {
    var CONSTANT = {
        HEIGHT: 24,
        COMBO_HEIGHT: 30,
        ICON_BUTTON_WIDTH: 24,
        ICON_BUTTON_HEIGHT: 24,
        ICON_GAP: 2,
        V_GAP: 7,
        B_GAP: 10,
        L_GAP_1: 10,
        L_GAP_2: 15,
        FONT_SIZE: 12
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-table-chart-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.chart_popup");
        },

        watch: {
            showChartFontSetting: function (show) {
                this.chartFontSetting && this.chartFontSetting.setVisible(show);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Design_Color_Setting"),
                                height: CONSTANT.COMBO_HEIGHT,
                                lineHeight: CONSTANT.COMBO_HEIGHT
                            },
                            lgap: CONSTANT.L_GAP_2
                        }, {
                            el: {
                                type: "bi.components.select.color.combo",
                                value: this.model.chartColor,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.changeChartColor(this.getValue());
                                    }
                                }]
                            },
                            lgap: CONSTANT.L_GAP_2
                        }]
                    },
                    vgap: CONSTANT.V_GAP
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        height: CONSTANT.HEIGHT,
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Words"),
                                height: CONSTANT.HEIGHT
                            },
                            lgap: CONSTANT.L_GAP_2
                        }, {
                            el: {
                                type: "bi.button_group",
                                value: this.model.chartFontType,
                                items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.auto_custom"), function (i, item) {
                                    return BI.extend({}, item, {
                                        type: "bi.single_select_radio_item",
                                        width: 36 + 12 * item.text.length,
                                        hgap: 5
                                    });
                                }),
                                layouts: [{
                                    type: "bi.vertical_adapt"
                                }],
                                listeners: [{
                                    eventName: BI.Segment.EVENT_CHANGE,
                                    action: BI.bind(this.store.changeChartFontType, this.store)
                                }]
                            },
                            lgap: CONSTANT.L_GAP_2
                        }]
                    },
                    bgap: CONSTANT.B_GAP
                }, {
                    el: {
                        type: "bi.vertical",
                        invisible: !this.model.showChartFontSetting,
                        ref: function (ref) {
                            self.chartFontSetting = ref;
                        },
                        items: [{
                            el: {
                                type: "bi.vertical_adapt",
                                height: CONSTANT.HEIGHT,
                                items: [{
                                    type: "bi.text_value_combo",
                                    value: this.model.chartFontFamily,
                                    width: 161,
                                    height: 24,
                                    items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_family"),
                                    listeners: [{
                                        eventName: BI.TextValueCombo.EVENT_CHANGE,
                                        action: BI.bind(this.store.changeChartFontFamily, this.store)
                                    }]
                                }, {
                                    el: {
                                        type: "bi.text_value_combo",
                                        value: this.model.chartFontSize,
                                        width: 60,
                                        height: 24,
                                        items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_size"),
                                        listeners: [{
                                            eventName: BI.TextValueCombo.EVENT_CHANGE,
                                            action: BI.bind(this.store.changeChartFontSize, this.store)
                                        }]
                                    },
                                    lgap: CONSTANT.L_GAP_1
                                }]
                            },
                            bgap: CONSTANT.B_GAP
                        }, {
                            type: "bi.vertical_adapt",
                            height: CONSTANT.HEIGHT,
                            items: [{
                                type: "bi.button_group",
                                chooseType: BI.Selection.Multi,
                                value: this.model.chartFontStyle,
                                items: [{
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_HEIGHT,
                                    width: CONSTANT.ICON_BUTTON_WIDTH,
                                    title: BI.i18nText("BI-Basic_Bold"),
                                    cls: "bi-list-item-active text-bold-font",
                                    value: BICst.FONT_STYLE.BOLD
                                }, {
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_HEIGHT,
                                    width: CONSTANT.ICON_BUTTON_WIDTH,
                                    title: BI.i18nText("BI-Basic_Italic"),
                                    cls: "bi-list-item-active text-italic-font",
                                    value: BICst.FONT_STYLE.ITALIC
                                }],
                                layouts: [{
                                    type: "bi.vertical_adapt",
                                    rgap: CONSTANT.ICON_GAP
                                }],
                                listeners: [{
                                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                                    action: BI.bind(this.store.changeChartFontStyle, this.store)
                                }]
                            }, {
                                type: "bi.color_chooser",
                                value: this.model.chartFontColor,
                                el: {
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_HEIGHT,
                                    width: CONSTANT.ICON_BUTTON_WIDTH,
                                    cls: "font-color-font",
                                    title: BI.i18nText("BI-Design_Color")
                                },
                                listeners: [{
                                    eventName: BI.ColorChooser.EVENT_CHANGE,
                                    action: function () {
                                        self.store.changeChartFontColor(this.getValue());
                                    }
                                }]
                            }]
                        }]
                    },
                    lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 2,
                    bgap: CONSTANT.B_GAP
                }]
            };
        }
    });
    BI.shortcut("bi.design.template.style.setting.chart_popup", TemplatePopup);
})();
!(function () {
    var ChartPopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            // fontType 从style中拿
            showChartFontSetting: function () {
                return this.model.style.chart.font.type === BICst.AUTO_CUSTOM.CUSTOM;
            },

            // 获取真实样式
            chartColor: function () {
                return this.model.actualStyle.chart.chartColor;
            },
            chartFont: function () {
                return this.model.actualStyle.chart.font;
            },
            chartFontType: function () {
                return this.model.chartFont.type;
            },
            chartFontFamily: function () {
                return this.model.chartFont.fontFamily;
            },
            chartFontSize: function () {
                return this.model.chartFont.fontSize;
            },
            chartFontBold: function () {
                return this.model.chartFont.bold;
            },
            chartFontItalic: function () {
                return this.model.chartFont.italic;
            },
            chartFontUnderline: function () {
                return this.model.chartFont.underline;
            },
            chartFontStyle: function () {
                var value = [];
                if (this.model.chartFontBold) {
                    value.push(BICst.FONT_STYLE.BOLD);
                }
                if (this.model.chartFontItalic) {
                    value.push(BICst.FONT_STYLE.ITALIC);
                }
                if (this.model.chartFontUnderline) {
                    value.push(BICst.FONT_STYLE.UNDERLINE);
                }
                return value;
            },
            chartFontColor: function () {
                return this.model.chartFont.fontColor;
            }
        },

        actions: {
            changeChartColor: function (v) {
                this.model.style.chart.chartColor = v;
            },
            changeChartFontType: function (v) {
                this.model.style.chart.font.type = v;
            },
            changeChartFontFamily: function (v) {
                this.model.style.chart.font.fontFamily = v;
            },
            changeChartFontSize: function (v) {
                this.model.style.chart.font.fontSize = v;
            },
            changeChartFontStyle: function (v) {
                switch (v) {
                    case BICst.FONT_STYLE.BOLD:
                        this.model.style.chart.font.bold = !this.model.style.chart.font.bold;
                        break;
                    case BICst.FONT_STYLE.ITALIC:
                        this.model.style.chart.font.italic = !this.model.style.chart.font.italic;
                        break;
                    case BICst.FONT_STYLE.UNDERLINE:
                        this.model.style.chart.font.underline = !this.model.style.chart.font.underline;
                        break;
                    default:
                        break;
                }
            },
            changeChartFontColor: function (v) {
                this.model.style.chart.font.fontColor = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.chart_popup", ChartPopupModel);
})();
!(function () {
    var CONSTANT = {
        HEIGHT: 24,
        COMBO_WIDTH: 219,
        V_GAP: 10,
        L_GAP: 15
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-filter-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.filter_popup");
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical_adapt",
                vgap: CONSTANT.V_GAP,
                items: [{
                    el: {
                        type: "bi.label",
                        text: BI.i18nText("BI-Basic_Theme_Color")
                    },
                    lgap: CONSTANT.L_GAP,
                    height: CONSTANT.HEIGHT
                }, {
                    el: {
                        type: "bi.color_chooser",
                        value: this.model.filterThemeColor,
                        width: CONSTANT.COMBO_WIDTH,
                        listeners: [{
                            eventName: BI.ColorChooser.EVENT_CHANGE,
                            action: function () {
                                self.store.changeFilterThemeColor(this.getValue());
                            }
                        }]
                    },
                    lgap: CONSTANT.L_GAP,
                    height: CONSTANT.HEIGHT
                }]
            };
        }
    });
    BI.shortcut("bi.design.template.style.setting.filter_popup", TemplatePopup);
})();!(function () {
    var FilterPopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            filterThemeColor: function () {
                return this.model.actualStyle.controlTheme;
            }
        },

        actions: {
            changeFilterThemeColor: function (v) {
                this.model.style.controlTheme = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.filter_popup", FilterPopupModel);
})();!(function () {
    var CONSTANT = {
        HEIGHT: 30,
        COMBO_HEIGHT: 24,
        COMBO_WIDTH_1: 149,
        COMBO_WIDTH_2: 60,
        ICON_WIDTH: 16,
        ICON_BUTTON_WIDTH: 24,
        ICON_BUTTON_HEIGHT: 24,
        ICON_GAP: 2,
        V_GAP: 10,
        B_GAP: 10,
        L_GAP_1: 10,
        L_GAP_2: 15,
        FONT_SIZE: 12
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-table-chart-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.table_popup");
        },

        watch: {
            showTableFontSetting: function (show) {
                this.tableFontSetting && this.tableFontSetting.setVisible(show);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                vgap: CONSTANT.V_GAP,
                items: [{
                    type: "bi.vertical_adapt",
                    height: CONSTANT.HEIGHT,
                    items: [{
                        el: {
                            type: "bi.label",
                            text: BI.i18nText("BI-Basic_Style")
                        },
                        lgap: CONSTANT.L_GAP_2
                    }, {
                        el: {
                            type: "bi.button_group",
                            value: this.model.tableStyle,
                            items: BI.map(BI.Constants.getConstant("bi.constant.components.table.style.items"), function (i, item) {
                                return BI.extend(item, {
                                    type: "bi.icon_button",
                                    extraCls: "style-button",
                                    height: CONSTANT.ICON_BUTTON_HEIGHT,
                                    width: CONSTANT.ICON_BUTTON_WIDTH,
                                    iconWidth: CONSTANT.ICON_WIDTH,
                                    iconHeight: CONSTANT.ICON_WIDTH
                                });
                            }),
                            layouts: [{
                                type: "bi.left",
                                rgap: 5
                            }],
                            listeners: [{
                                eventName: BI.ButtonGroup.EVENT_CHANGE,
                                action: BI.bind(this.store.changeTableStyle, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2 + CONSTANT.FONT_SIZE
                    }]
                }, {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        el: {
                            type: "bi.label",
                            text: BI.i18nText("BI-Basic_Theme_Color")
                        },
                        lgap: CONSTANT.L_GAP_2
                    }, {
                        el: {
                            type: "bi.color_chooser",
                            value: this.model.tableThemeColor,
                            width: 219,
                            listeners: [{
                                eventName: BI.ColorChooser.EVENT_CHANGE,
                                action: function () {
                                    self.store.changeTableThemeColor(this.getValue());
                                }
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2
                    }]
                }, {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        el: {
                            type: "bi.label",
                            text: BI.i18nText("BI-Basic_Words"),
                            height: CONSTANT.COMBO_HEIGHT
                        },
                        lgap: CONSTANT.L_GAP_2
                    }, {
                        el: {
                            type: "bi.button_group",
                            value: this.model.tableFontType,
                            items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.auto_custom"), function (i, item) {
                                return BI.extend({}, item, {
                                    type: "bi.single_select_radio_item",
                                    width: 36 + 12 * item.text.length,
                                    hgap: 5
                                });
                            }),
                            layouts: [{
                                type: "bi.vertical_adapt"
                            }],
                            listeners: [{
                                eventName: BI.Segment.EVENT_CHANGE,
                                action: BI.bind(this.store.changeTableFontType, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2 + CONSTANT.FONT_SIZE
                    }]
                }, {
                    type: "bi.vertical",
                    invisible: !this.model.showTableFontSetting,
                    ref: function (ref) {
                        self.tableFontSetting = ref;
                    },
                    items: [].concat(this._getHeaderFontStyle(), this._getBodyFontStyle())
                }]
            };
        },

        _getHeaderFontStyle: function () {
            var self = this;
            return [{
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        el: {
                            type: "bi.label",
                            text: BI.i18nText("BI-Design_Table_Header")
                        },
                        lgap: CONSTANT.L_GAP_2
                    }, {
                        el: {
                            type: "bi.text_value_combo",
                            value: this.model.headerFontFamily,
                            width: CONSTANT.COMBO_WIDTH_1,
                            height: CONSTANT.COMBO_HEIGHT,
                            items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_family"),
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: BI.bind(this.store.changeHeaderFontFamily, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2 + CONSTANT.FONT_SIZE
                    }, {
                        el: {
                            type: "bi.text_value_combo",
                            value: this.model.headerFontSize,
                            width: CONSTANT.COMBO_WIDTH_2,
                            height: CONSTANT.COMBO_HEIGHT,
                            items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_size"),
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: BI.bind(this.store.changeHeaderFontSize, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_1
                    }]
                },
                bgap: CONSTANT.B_GAP
            }, {
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        type: "bi.button_group",
                        value: this.model.headerFontStyle,
                        chooseType: BI.Selection.Multi,
                        height: CONSTANT.COMBO_HEIGHT,
                        items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_style"), function (i, item) {
                            return BI.extend({}, item, {
                                type: "bi.icon_button",
                                height: CONSTANT.ICON_BUTTON_HEIGHT,
                                width: CONSTANT.ICON_BUTTON_WIDTH
                            });
                        }),
                        layouts: [{
                            type: "bi.vertical_adapt",
                            rgap: CONSTANT.ICON_GAP
                        }],
                        listeners: [{
                            eventName: BI.ButtonGroup.EVENT_CHANGE,
                            action: BI.bind(this.store.changeHeaderFontStyle, this.store)
                        }]
                    }, {
                        type: "bi.color_chooser",
                        value: this.model.headerFontColor,
                        el: {
                            type: "bi.icon_button",
                            height: CONSTANT.ICON_BUTTON_HEIGHT,
                            width: CONSTANT.ICON_BUTTON_WIDTH,
                            cls: "font-color-font",
                            title: BI.i18nText("BI-Design_Color")
                        },
                        listeners: [{
                            eventName: BI.ColorChooser.EVENT_CHANGE,
                            action: function () {
                                self.store.changeHeaderFontColor(this.getValue());
                            }
                        }]
                    }, {
                        type: "bi.button_group",
                        value: this.model.headerFontAlign,
                        items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_align"), function (i, item) {
                            return BI.extend({}, item, {
                                type: "bi.icon_button",
                                height: CONSTANT.ICON_BUTTON_HEIGHT,
                                width: CONSTANT.ICON_BUTTON_WIDTH
                            });
                        }),
                        listeners: [{
                            eventName: BI.ButtonGroup.EVENT_CHANGE,
                            action: BI.bind(this.store.changeHeaderFontAlign, this.store)
                        }],
                        layouts: [{
                            type: "bi.vertical_adapt",
                            rgap: CONSTANT.ICON_GAP
                        }]
                    }]
                },
                lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 3,
                bgap: CONSTANT.B_GAP
            }];
        },

        _getBodyFontStyle: function () {
            var self = this;
            return [{
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        el: {
                            type: "bi.label",
                            text: BI.i18nText("BI-Design_Table_Body")
                        },
                        lgap: CONSTANT.L_GAP_2
                    }, {
                        el: {
                            type: "bi.text_value_combo",
                            value: this.model.bodyFontFamily,
                            width: CONSTANT.COMBO_WIDTH_1,
                            height: CONSTANT.COMBO_HEIGHT,
                            items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_family"),
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: BI.bind(this.store.changeBodyFontFamily, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2 + CONSTANT.FONT_SIZE
                    }, {
                        el: {
                            type: "bi.text_value_combo",
                            value: this.model.bodyFontSize,
                            width: CONSTANT.COMBO_WIDTH_2,
                            height: CONSTANT.COMBO_HEIGHT,
                            items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_size"),
                            listeners: [{
                                eventName: BI.TextValueCombo.EVENT_CHANGE,
                                action: BI.bind(this.store.changeBodyFontSize, this.store)
                            }]
                        },
                        lgap: CONSTANT.L_GAP_1
                    }]
                },
                bgap: CONSTANT.B_GAP
            }, {
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        type: "bi.button_group",
                        value: this.model.bodyFontStyle,
                        chooseType: BI.Selection.Multi,
                        height: CONSTANT.COMBO_HEIGHT,
                        items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_style"), function (i, item) {
                            return BI.extend({}, item, {
                                type: "bi.icon_button",
                                height: CONSTANT.ICON_BUTTON_WIDTH,
                                width: CONSTANT.ICON_BUTTON_WIDTH
                            });
                        }),
                        layouts: [{
                            type: "bi.vertical_adapt",
                            rgap: CONSTANT.ICON_GAP
                        }],
                        listeners: [{
                            eventName: BI.ButtonGroup.EVENT_CHANGE,
                            action: BI.bind(this.store.changeBodyFontStyle, this.store)
                        }]
                    }, {
                        type: "bi.color_chooser",
                        value: this.model.bodyFontColor,
                        el: {
                            type: "bi.icon_button",
                            height: CONSTANT.ICON_BUTTON_WIDTH,
                            width: CONSTANT.ICON_BUTTON_WIDTH,
                            cls: "font-color-font",
                            title: BI.i18nText("BI-Design_Color")
                        },
                        listeners: [{
                            eventName: BI.ColorChooser.EVENT_CHANGE,
                            action: function () {
                                self.store.changeBodyFontColor(this.getValue());
                            }
                        }]
                    }]
                },
                lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 3,
                bgap: CONSTANT.B_GAP
            }, {
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Design_Dimension")
                    }, {
                        el: {
                            type: "bi.button_group",
                            value: this.model.dimFontAlign,
                            items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_align"), function (i, item) {
                                return BI.extend({}, item, {
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_WIDTH,
                                    width: CONSTANT.ICON_BUTTON_WIDTH
                                });
                            }),
                            listeners: [{
                                eventName: BI.ButtonGroup.EVENT_CHANGE,
                                action: BI.bind(this.store.changeDimFontAlign, this.store)
                            }],
                            layouts: [{
                                type: "bi.vertical_adapt",
                                rgap: CONSTANT.ICON_GAP
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2
                    }]
                },
                lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 3,
                bgap: CONSTANT.B_GAP
            }, {
                el: {
                    type: "bi.vertical_adapt",
                    height: CONSTANT.COMBO_HEIGHT,
                    items: [{
                        type: "bi.label",
                        text: BI.i18nText("BI-Design_Target")
                    }, {
                        el: {
                            type: "bi.button_group",
                            value: this.model.tarFontAlign,
                            items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_align"), function (i, item) {
                                return BI.extend({}, item, {
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_WIDTH,
                                    width: CONSTANT.ICON_BUTTON_WIDTH
                                });
                            }),
                            listeners: [{
                                eventName: BI.ButtonGroup.EVENT_CHANGE,
                                action: BI.bind(this.store.changeTarFontAlign, this.store)
                            }],
                            layouts: [{
                                type: "bi.vertical_adapt",
                                rgap: CONSTANT.ICON_GAP
                            }]
                        },
                        lgap: CONSTANT.L_GAP_2
                    }]
                },
                lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 3
            }];
        }
    });
    BI.shortcut("bi.design.template.style.setting.table_popup", TemplatePopup);
})();
!(function () {
    var TablePopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            // 取style中type
            showTableFontSetting: function () {
                return this.model.style.table.font.type === BICst.AUTO_CUSTOM.CUSTOM;
            },
            // 取真实样式
            tableFont: function () {
                return this.model.actualStyle.table.font;
            },
            tableThemeColor: function () {
                return this.model.actualStyle.table.themeColor;
            },
            tableStyle: function () {
                return this.model.actualStyle.table.tableStyle;
            },
            tableFontType: function () {
                return this.model.tableFont.type;
            },
            headerFont: function () {
                return this.model.tableFont.header;
            },
            headerFontFamily: function () {
                return this.model.headerFont.fontFamily;
            },
            headerFontSize: function () {
                return this.model.headerFont.fontSize;
            },
            headerFontBold: function () {
                return this.model.headerFont.bold;
            },
            headerFontItalic: function () {
                return this.model.headerFont.italic;
            },
            headerFontUnderline: function () {
                return this.model.headerFont.underline;
            },
            headerFontStyle: function () {
                var value = [];
                if (this.model.headerFontBold) {
                    value.push(BICst.FONT_STYLE.BOLD);
                }
                if (this.model.headerFontItalic) {
                    value.push(BICst.FONT_STYLE.ITALIC);
                }
                if (this.model.headerFontUnderline) {
                    value.push(BICst.FONT_STYLE.UNDERLINE);
                }
                return value;
            },
            headerFontColor: function () {
                return this.model.headerFont.fontColor;
            },
            headerFontAlign: function () {
                return this.model.headerFont.fontAlign;
            },
            bodyFont: function () {
                return this.model.tableFont.body;
            },
            bodyFontFamily: function () {
                return this.model.bodyFont.fontFamily;
            },
            bodyFontSize: function () {
                return this.model.bodyFont.fontSize;
            },
            bodyFontBold: function () {
                return this.model.bodyFont.bold;
            },
            bodyFontItalic: function () {
                return this.model.bodyFont.italic;
            },
            bodyFontUnderline: function () {
                return this.model.bodyFont.underline;
            },
            bodyFontStyle: function () {
                var value = [];
                if (this.model.bodyFontBold) {
                    value.push(BICst.FONT_STYLE.BOLD);
                }
                if (this.model.bodyFontItalic) {
                    value.push(BICst.FONT_STYLE.ITALIC);
                }
                if (this.model.bodyFontUnderline) {
                    value.push(BICst.FONT_STYLE.UNDERLINE);
                }
                return value;
            },
            bodyFontColor: function () {
                return this.model.bodyFont.fontColor;
            },
            dimFontAlign: function () {
                return this.model.bodyFont.dimFontAlign;
            },
            tarFontAlign: function () {
                return this.model.bodyFont.tarFontAlign;
            }
        },

        actions: {
            changeTableThemeColor: function (v) {
                this.model.style.table.themeColor = v;
            },
            changeTableStyle: function (v) {
                this.model.style.table.tableStyle = v;
            },
            changeTableFontType: function (v) {
                this.model.style.table.font.type = v;
            },
            changeHeaderFontFamily: function (v) {
                this.model.style.table.font.header.fontFamily = v;
            },
            changeHeaderFontSize: function (v) {
                this.model.style.table.font.header.fontSize = v;
            },
            changeHeaderFontStyle: function (v) {
                switch (v) {
                    case BICst.FONT_STYLE.BOLD:
                        this.model.style.table.font.header.bold = !this.model.style.table.font.header.bold;
                        break;
                    case BICst.FONT_STYLE.ITALIC:
                        this.model.style.table.font.header.italic = !this.model.style.table.font.header.italic;
                        break;
                    case BICst.FONT_STYLE.UNDERLINE:
                        this.model.style.table.font.header.underline = !this.model.style.table.font.header.underline;
                        break;
                    default:
                        break;
                }
            },
            changeHeaderFontColor: function (v) {
                this.model.style.table.font.header.fontColor = v;
            },
            changeHeaderFontAlign: function (v) {
                this.model.style.table.font.header.fontAlign = v;
            },
            changeBodyFontFamily: function (v) {
                this.model.style.table.font.body.fontFamily = v;
            },
            changeBodyFontSize: function (v) {
                this.model.style.table.font.body.fontSize = v;
            },
            changeBodyFontStyle: function (v) {
                switch (v) {
                    case BICst.FONT_STYLE.BOLD:
                        this.model.style.table.font.body.bold = !this.model.style.table.font.body.bold;
                        break;
                    case BICst.FONT_STYLE.ITALIC:
                        this.model.style.table.font.body.italic = !this.model.style.table.font.body.italic;
                        break;
                    case BICst.FONT_STYLE.UNDERLINE:
                        this.model.style.table.font.body.underline = !this.model.style.table.font.body.underline;
                        break;
                    default:
                        break;
                }
            },
            changeBodyFontColor: function (v) {
                this.model.style.table.font.body.fontColor = v;
            },
            changeDimFontAlign: function (v) {
                this.model.style.table.font.body.dimFontAlign = v;
            },
            changeTarFontAlign: function (v) {
                this.model.style.table.font.body.tarFontAlign = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.table_popup", TablePopupModel);
})();
!(function () {
    var CONSTANT = {
        HEIGHT: 24,
        V_GAP: 10,
        B_GAP: 10,
        L_GAP_1: 5,
        L_GAP_2: 10,
        L_GAP_3: 15,
        FONT_SIZE: 12,
        RADIO_WIDTH: 16
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-template-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.template_popup");
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Background"),
                                height: CONSTANT.HEIGHT
                            },
                            lgap: CONSTANT.L_GAP_3
                        }, {
                            el: {
                                type: "bi.components.background",
                                bgStyle: this.model.templateBackground,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.changeTemplateBg(this.getValue());
                                    }
                                }]
                            },
                            lgap: CONSTANT.L_GAP_2
                        }]
                    },
                    vgap: CONSTANT.V_GAP
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Design_Widget_Gap"),
                                height: CONSTANT.HEIGHT
                            },
                            lgap: CONSTANT.L_GAP_3
                        }, {
                            el: {
                                type: "bi.text_value_combo",
                                items: BI.Constants.getConstant("bi.constant.components.template.style.widget.gap.items"),
                                value: this.model.widgetGap,
                                height: CONSTANT.HEIGHT,
                                width: 172,
                                listeners: [{
                                    eventName: BI.TextValueCombo.EVENT_CHANGE,
                                    action: BI.bind(self.store.setWidgetGap, self.store)
                                }]
                            },
                            lgap: CONSTANT.L_GAP_3 * 2 + CONSTANT.L_GAP_1 + CONSTANT.RADIO_WIDTH
                        }]
                    },
                    bgap: CONSTANT.B_GAP
                }]
            };
        }
    });
    BI.shortcut("bi.design.template.style.setting.template_popup", TemplatePopup);
})();!(function () {
    var TemplatePopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            widgetGap: function () {
                return this.model.actualStyle.widgetGap;
            },
            templateBackground: function () {
                return this.model.actualStyle.templateBackground;
            }
        },

        actions: {
            setWidgetGap: function (v) {
                this.model.style.widgetGap = v;
            },
            changeTemplateBg: function (v) {
                this.model.style.templateBackground = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.template_popup", TemplatePopupModel);
})();!(function () {
    var CONSTANT = {
        HEIGHT: 24,
        ICON_BUTTON_WIDTH: 24,
        ICON_BUTTON_HEIGHT: 24,
        ICON_GAP: 2,
        V_GAP: 10,
        B_GAP: 10,
        L_GAP_1: 10,
        L_GAP_2: 15,
        FONT_SIZE: 12
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-title-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.title_popup");
        },

        watch: {
            showTitleFontSetting: function (show) {
                this.titleFontSetting && this.titleFontSetting.setVisible(show);
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Background"),
                                height: CONSTANT.HEIGHT
                            },
                            lgap: CONSTANT.L_GAP_2
                        }, {
                            el: {
                                type: "bi.components.background",
                                bgStyle: this.model.titleBackground,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.changeTitleBg(this.getValue());
                                    }
                                }]
                            },
                            lgap: CONSTANT.L_GAP_1
                        }]
                    },
                    vgap: CONSTANT.V_GAP
                }, {
                    el: {
                        type: "bi.vertical_adapt",
                        height: CONSTANT.HEIGHT,
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Words"),
                                height: CONSTANT.HEIGHT
                            }
                        }, {
                            el: {
                                type: "bi.button_group",
                                value: this.model.titleFontType,
                                items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.auto_custom"), function (i, item) {
                                    return BI.extend({}, item, {
                                        type: "bi.single_select_radio_item",
                                        width: 36 + 12 * item.text.length,
                                        hgap: 5
                                    });
                                }),
                                layouts: [{
                                    type: "bi.vertical_adapt"
                                }],
                                listeners: [{
                                    eventName: BI.Segment.EVENT_CHANGE,
                                    action: BI.bind(this.store.changeTitleFontType, this.store)
                                }]
                            },
                            lgap: CONSTANT.L_GAP_2
                        }]
                    },
                    bgap: CONSTANT.B_GAP,
                    lgap: CONSTANT.L_GAP_2
                }, {
                    el: {
                        type: "bi.vertical",
                        invisible: !this.model.showTitleFontSetting,
                        ref: function (ref) {
                            self.titleFontSetting = ref;
                        },
                        items: [{
                            el: {
                                type: "bi.vertical_adapt",
                                height: CONSTANT.HEIGHT,
                                items: [{
                                    type: "bi.text_value_combo",
                                    value: this.model.titleFontFamily,
                                    width: 161,
                                    height: 24,
                                    items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_family"),
                                    listeners: [{
                                        eventName: BI.TextValueCombo.EVENT_CHANGE,
                                        action: BI.bind(this.store.changeTitleFontFamily, this.store)
                                    }]
                                }, {
                                    el: {
                                        type: "bi.text_value_combo",
                                        value: this.model.titleFontSize,
                                        width: 60,
                                        height: 24,
                                        items: BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_size"),
                                        listeners: [{
                                            eventName: BI.TextValueCombo.EVENT_CHANGE,
                                            action: BI.bind(this.store.changeTitleFontSize, this.store)
                                        }]
                                    },
                                    lgap: CONSTANT.L_GAP_1
                                }]
                            },
                            bgap: CONSTANT.B_GAP
                        }, {
                            type: "bi.vertical_adapt",
                            height: CONSTANT.HEIGHT,
                            items: [{
                                type: "bi.button_group",
                                chooseType: BI.Selection.Multi,
                                value: this.model.titleFontStyle,
                                items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_style"), function (i, item) {
                                    return BI.extend({}, item, {
                                        type: "bi.icon_button",
                                        height: CONSTANT.ICON_BUTTON_HEIGHT,
                                        width: CONSTANT.ICON_BUTTON_WIDTH
                                    });
                                }),
                                layouts: [{
                                    type: "bi.vertical_adapt",
                                    rgap: CONSTANT.ICON_GAP
                                }],
                                listeners: [{
                                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                                    action: BI.bind(this.store.changeTitleFontStyle, this.store)
                                }]
                            }, {
                                type: "bi.color_chooser",
                                value: this.model.titleFontColor,
                                el: {
                                    type: "bi.icon_button",
                                    height: CONSTANT.ICON_BUTTON_HEIGHT,
                                    width: CONSTANT.ICON_BUTTON_WIDTH,
                                    cls: "font-color-font",
                                    title: BI.i18nText("BI-Design_Color")
                                },
                                listeners: [{
                                    eventName: BI.ColorChooser.EVENT_CHANGE,
                                    action: function () {
                                        self.store.changeTitleFontColor(this.getValue());
                                    }
                                }],
                                rgap: CONSTANT.ICON_GAP
                            }, {
                                type: "bi.button_group",
                                value: this.model.titleFontAlign,
                                items: BI.map(BI.Constants.getConstant("bi.constant.design.widget.detail.table_style.font_align"), function (i, item) {
                                    return BI.extend({}, item, {
                                        type: "bi.icon_button",
                                        height: CONSTANT.ICON_BUTTON_HEIGHT,
                                        width: CONSTANT.ICON_BUTTON_WIDTH
                                    });
                                }),
                                listeners: [{
                                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                                    action: BI.bind(this.store.changeTitleFontAlign, this.store)
                                }],
                                layouts: [{
                                    type: "bi.vertical_adapt",
                                    rgap: CONSTANT.ICON_GAP
                                }]
                            }]
                        }]
                    },
                    lgap: CONSTANT.L_GAP_2 * 2 + CONSTANT.FONT_SIZE * 2,
                    bgap: CONSTANT.B_GAP
                }]
            };
        }
    });
    BI.shortcut("bi.design.template.style.setting.title_popup", TemplatePopup);
})();
!(function () {
    var TitlePopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            // style中的type
            showTitleFontSetting: function () {
                return this.model.style.titleFont.type === BICst.AUTO_CUSTOM.CUSTOM;
            },

            // 获取真实样式
            titleBackground: function () {
                return this.model.actualStyle.titleBackground;
            },
            titleFont: function () {
                return this.model.actualStyle.titleFont;
            },
            titleFontType: function () {
                return this.model.titleFont.type;
            },
            titleFontFamily: function () {
                return this.model.titleFont.fontFamily;
            },
            titleFontSize: function () {
                return this.model.titleFont.fontSize;
            },
            titleFontBold: function () {
                return this.model.titleFont.bold;
            },
            titleFontItalic: function () {
                return this.model.titleFont.italic;
            },
            titleFontUnderline: function () {
                return this.model.titleFont.underline;
            },
            titleFontStyle: function () {
                var value = [];
                if (this.model.titleFontBold) {
                    value.push(BICst.FONT_STYLE.BOLD);
                }
                if (this.model.titleFontItalic) {
                    value.push(BICst.FONT_STYLE.ITALIC);
                }
                if (this.model.titleFontUnderline) {
                    value.push(BICst.FONT_STYLE.UNDERLINE);
                }
                return value;
            },
            titleFontColor: function () {
                return this.model.titleFont.fontColor;
            },
            titleFontAlign: function () {
                return this.model.titleFont.fontAlign;
            }
        },

        actions: {
            changeTitleBg: function (v) {
                this.model.style.titleBackground = v;
            },
            changeTitleFontType: function (v) {
                this.model.style.titleFont.type = v;
            },
            changeTitleFontFamily: function (v) {
                this.model.style.titleFont.fontFamily = v;
            },
            changeTitleFontSize: function (v) {
                this.model.style.titleFont.fontSize = v;
            },
            changeTitleFontStyle: function (v) {
                switch (v) {
                    case BICst.FONT_STYLE.BOLD:
                        this.model.style.titleFont.bold = !this.model.style.titleFont.bold;
                        break;
                    case BICst.FONT_STYLE.ITALIC:
                        this.model.style.titleFont.italic = !this.model.style.titleFont.italic;
                        break;
                    case BICst.FONT_STYLE.UNDERLINE:
                        this.model.style.titleFont.underline = !this.model.style.titleFont.underline;
                        break;
                    default:
                        break;
                }
            },
            changeTitleFontColor: function (v) {
                this.model.style.titleFont.fontColor = v;
            },
            changeTitleFontAlign: function (v) {
                this.model.style.titleFont.fontAlign = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.title_popup", TitlePopupModel);
})();
!(function () {
    var CONSTANT = {
        HEIGHT: 24,
        V_GAP: 10,
        L_GAP1: 10,
        L_GAP2: 15
    };
    var TemplatePopup = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting-widget-popup"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting.widget_popup");
        },

        render: function () {
            var self = this;
            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.left",
                        items: [{
                            el: {
                                type: "bi.label",
                                text: BI.i18nText("BI-Basic_Background"),
                                height: CONSTANT.HEIGHT
                            },
                            lgap: CONSTANT.L_GAP2
                        }, {
                            el: {
                                type: "bi.components.background",
                                bgStyle: this.model.widgetBackground,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: function () {
                                        self.store.changeWidgetBg(this.getValue());
                                    }
                                }]
                            },
                            lgap: CONSTANT.L_GAP1
                        }]
                    },
                    vgap: CONSTANT.V_GAP
                }]
            };
        }
    });
    BI.shortcut("bi.design.template.style.setting.widget_popup", TemplatePopup);
})();!(function () {
    var WidgetPopupModel = BI.inherit(Fix.Model, {

        context: ["style", "actualStyle"],

        computed: {
            widgetBackground: function () {
                return this.model.actualStyle.widgetBackground;
            }
        },

        actions: {
            changeWidgetBg: function (v) {
                this.model.style.widgetBackground = v;
            }
        }

    });
    BI.model("bi.model.design.template.style.setting.widget_popup", WidgetPopupModel);
})();!(function () {
    var StyleButton = BI.inherit(BI.BasicButton, {

        props: {
            extraCls: "bi-template-style-prediction-style-button",
            value: "",
            canDelete: false
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.prediction.style.button", {
                value: this.options.value
            });
        },

        mounted: function () {
            var defaultMainBackground = {type: "color", color: "#EFF1F4"};
            var defaultWidgetBackground = {type: "color", color: "#ffffff"};
            var defaultTitleBackground = {type: "color", color: "#ffffff"};
            if (this.model.style.theme === BICst.DESIGN.THEME.DARK) {
                defaultMainBackground = {type: "color", color: "#191B2B"};
                defaultWidgetBackground = {type: "color", color: "#242640"};
                defaultTitleBackground = {type: "color", color: "#242640"};
            }

            var mainBG = this.model.style.templateBackground || defaultMainBackground;
            var widgetBG = this.model.style.widgetBackground || defaultWidgetBackground;
            var titleBG = this.model.style.titleBackground || defaultTitleBackground;
            var chartColor = this.model.style.chartColor || BI.Utils.getDefaultChartColor();

            var templateBackground = (mainBG.type === BICst.BACKGROUND_TYPE.COLOR && BI.isNotEmptyString(mainBG.color)) ? mainBG.color : defaultMainBackground.color;
            var widgetBackground = (widgetBG.type === BICst.BACKGROUND_TYPE.COLOR && BI.isNotEmptyString(widgetBG.color)) ? widgetBG.color : defaultWidgetBackground.color;
            var titleBackground = (titleBG.type === BICst.BACKGROUND_TYPE.COLOR && BI.isNotEmptyString(titleBG.color)) ? titleBG.color : defaultTitleBackground.color;

            this.mainBackgroundLayout.element.css("background-color", templateBackground);
            this.widgetBackgroundLayout.element.css("background-color", widgetBackground);
            this.titleBackgroundLayout.element.css("background-color", titleBackground);
            this.chartColorOne.element.css("background-color", chartColor[0]);
            this.chartColorTwo.element.css("background-color", chartColor[1]);
            this.chartColorThree.element.css("background-color", chartColor[2]);
        },

        render: function () {
            var items = [{
                el: this._renderStyleButton()
            }];
            this.options.canDelete && items.push({
                el: this._renderDeleteCombo(),
                right: 0
            });
            return {
                type: "bi.absolute",
                items: items,
                height: 68,
                width: 108
            };
        },

        _renderStyleButton: function () {
            var mainBackgroundLayout = this._createLayout("mainBackgroundLayout", 68, 108);
            var widgetBackgroundLayout = this._createLayout("widgetBackgroundLayout", 50, 90);
            var titleBackgroundLayout = this._createLayout("titleBackgroundLayout", 10, 90);
            var chartColorOne = this._createLayout("chartColorOne", 6, 40);
            var chartColorTwo = this._createLayout("chartColorTwo", 6, 70);
            var chartColorThree = this._createLayout("chartColorThree", 6, 50);
            return {
                type: "bi.absolute",
                items: [
                    this._createItem(mainBackgroundLayout, 0, 0),
                    this._createItem(widgetBackgroundLayout, 10, 10),
                    this._createItem(titleBackgroundLayout, 10, 10),
                    this._createItem(chartColorOne, 27, 20),
                    this._createItem(chartColorTwo, 37, 20),
                    this._createItem(chartColorThree, 47, 20)
                ],
                height: 68,
                width: 108
            };
        },

        _createItem: function (el, top, left) {
            return {
                el: el,
                top: top,
                left: left
            };
        },

        _createLayout: function (layout, height, width) {
            var self = this;
            return {
                type: "bi.layout",
                height: height,
                width: width,
                ref: function (ref) {
                    self[layout] = ref;
                }
            };
        },

        _renderDeleteCombo: function () {
            var self = this;
            return {
                type: "bi.bubble_combo",
                cls: "delete-button",
                ref: function (ref) {
                    self.deleteCombo = ref;
                },
                el: {
                    type: "bi.icon_button",
                    cls: "close-red-font"
                },
                popup: {
                    type: "bi.text_bubble_bar_popup_view",
                    text: BI.i18nText("BI-Design_Confirm_To_Delete_Style"),
                    listeners: [{
                        eventName: BI.BubblePopupBarView.EVENT_CLICK_TOOLBAR_BUTTON,
                        action: function (v) {
                            v && self.store.delCustomPredictionStyle();
                            self.deleteCombo.hideView();
                        }
                    }]
                },
                stopPropagation: true
            };
        }
    });
    BI.shortcut("bi.design.prediction.style.button", StyleButton);
})();!(function () {
    var StyleButtonModel = BI.inherit(Fix.Model, {
        context: ["templateStyle"],

        computed: {
            style: function () {
                var self = this;
                var styles = BI.concat(BI.Constants.getConstant("bi.constant.design.prediction.styles"), this.model.templateStyle.predictionStyles);
                return BI.find(styles, function (id, item) {
                    if (self.options.value === item.id) {
                        return true;
                    }
                });
            }
        },

        actions: {
            delCustomPredictionStyle: function () {
                var self = this;
                var idx = BI.findKey(this.model.templateStyle.predictionStyles, function (i, style) {
                    if(self.options.value === style.id) {
                        return true;
                    }
                });
                this.model.templateStyle.predictionStyles.splice(idx, 1);
            }
        }

    });
    BI.model("bi.model.design.prediction.style.button", StyleButtonModel);
})();!(function () {
    BI.constant("bi.constant.design.prediction.styles", {
        DEFAULT: {
            id: "DEFAULT",
            theme: BICst.DESIGN.THEME.DEFAULT,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "color",
                color: "",
                imageId: ""
            },
            widgetBackground: {
                type: "color",
                color: "#ffffff",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "#ffffff",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.AUTO,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: false,
                italic: false,
                underline: false,
                fontColor: "",
                fontAlign: BICst.FONT_ALIGN.LEFT
            },
            chart: {
                gradient: ["#4FDEFF", "#439DF7", "#526EFA"],
                chartColor: [
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343",
                    "#89f4c2",
                    "#78d56c",
                    "#38975a",
                    "#8b78fa",
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343",
                    "#89f4c2",
                    "#78d56c",
                    "#38975a",
                    "#8b78fa",
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                tableStyle: BICst.TABLE_STYLE.STYLE1,
                themeColor: "#c5e3ff",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.LEFT,
                        tarFontAlign: BICst.FONT_ALIGN.RIGHT
                    }
                }
            },
            controlTheme: ""
        },

        DARK: {
            id: "DARK",
            theme: BICst.DESIGN.THEME.DARK,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "color",
                color: "",
                imageId: ""
            },
            widgetBackground: {
                type: "color",
                color: "#242640",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "#242640",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.AUTO,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: false,
                italic: false,
                underline: false,
                fontColor: "",
                fontAlign: BICst.FONT_ALIGN.LEFT
            },
            chart: {
                gradient: ["#4FDEFF", "#439DF7", "#526EFA"],
                chartColor: [
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343",
                    "#89f4c2",
                    "#78d56c",
                    "#38975a",
                    "#8b78fa",
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343",
                    "#89f4c2",
                    "#78d56c",
                    "#38975a",
                    "#8b78fa",
                    "#4fdfff",
                    "#42a0f7",
                    "#5a6eff",
                    "#26e0a5",
                    "#00b2da",
                    "#2871d3",
                    "#ffcf48",
                    "#ffa343"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                themeColor: "#3b64a2",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.LEFT,
                        tarFontAlign: BICst.FONT_ALIGN.RIGHT
                    }
                }
            },
            controlTheme: ""
        },

        STYLE1: {
            id: "STYLE1",
            theme: BICst.DESIGN.THEME.DARK,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "image",
                color: "",
                imageId: "template/background_style3.png"
            },
            widgetBackground: {
                type: "color",
                color: "transparent",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "transparent",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.AUTO,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: false,
                italic: false,
                underline: false,
                fontColor: "",
                fontAlign: BICst.FONT_ALIGN.LEFT
            },
            chart: {
                gradient: ["#FBE1D8", "#AE59C5", "#2A2A8A"],
                chartColor: [
                    "#3eadff",
                    "#7d84ff",
                    "#e186f7",
                    "#fa5084",
                    "#f9d023",
                    "#f2901c",
                    "#9d5ec4",
                    "#749af7",
                    "#6443ef",
                    "#124bd8",
                    "#3386ff",
                    "#12c495",
                    "#3eadff",
                    "#7d84ff",
                    "#e186f7",
                    "#fa5084",
                    "#f9d023",
                    "#f2901c",
                    "#9d5ec4",
                    "#749af7",
                    "#6443ef",
                    "#124bd8",
                    "#3386ff",
                    "#12c495",
                    "#3eadff",
                    "#7d84ff",
                    "#e186f7",
                    "#fa5084",
                    "#f9d023",
                    "#f2901c",
                    "#9d5ec4",
                    "#749af7"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                tableStyle: BICst.TABLE_STYLE.STYLE1,
                themeColor: "#7d84ff",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.LEFT,
                        tarFontAlign: BICst.FONT_ALIGN.RIGHT
                    }
                }
            },
            controlTheme: "#7d84ff"
        },
        STYLE2: {
            id: "STYLE2",
            theme: BICst.DESIGN.THEME.DEFAULT,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "color",
                color: "#dfe6ef",
                imageId: ""
            },
            widgetBackground: {
                type: "color",
                color: "#fafcfc",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "#ffffff",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.CUSTOM,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: true,
                italic: false,
                underline: false,
                fontColor: "#344750",
                fontAlign: BICst.FONT_ALIGN.LEFT
            },
            chart: {
                gradient: ["#5867C3", "#FF525E"],
                chartColor: [
                    "#00c5dc",
                    "#5867c3",
                    "#ff525e",
                    "#ffa9cc",
                    "#ffaa00",
                    "#ffdb03",
                    "#9ccc66",
                    "#36c398",
                    "#00a7af",
                    "#2281bc",
                    "#766aef",
                    "#c576d3",
                    "#00c5dc",
                    "#5867c3",
                    "#ff525e",
                    "#ffa9cc",
                    "#ffaa00",
                    "#ffdb03",
                    "#9ccc66",
                    "#36c398",
                    "#00a7af",
                    "#2281bc",
                    "#766aef",
                    "#c576d3",
                    "#00c5dc",
                    "#5867c3",
                    "#ff525e",
                    "#ffa9cc",
                    "#ffaa00",
                    "#ffdb03",
                    "#9ccc66",
                    "#36c398"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                tableStyle: BICst.TABLE_STYLE.STYLE1,
                themeColor: "#5867c3",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.LEFT,
                        tarFontAlign: BICst.FONT_ALIGN.RIGHT
                    }
                }
            },
            controlTheme: "#5867c3"
        },
        STYLE3: {
            id: "STYLE3",
            theme: BICst.DESIGN.THEME.DARK,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "color",
                color: "#1f2a3d",
                imageId: ""
            },
            widgetBackground: {
                type: "color",
                color: "#223b4d",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "#223b4d",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.AUTO,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: true,
                italic: false,
                underline: false,
                fontColor: "",
                fontAlign: BICst.FONT_ALIGN.LEFT
            },
            chart: {
                gradient: ["#78FD84", "#00C8FF"],
                chartColor: [
                    "#3ae8ef",
                    "#3ad0f9",
                    "#78fd84",
                    "#068eea",
                    "#01bdbe",
                    "#0373a1",
                    "#f86a8c",
                    "#d63d65",
                    "#f4ab98",
                    "#ffcd40",
                    "#f28e2b",
                    "#05a6bb",
                    "#3ae8ef",
                    "#3ad0f9",
                    "#78fd84",
                    "#068eea",
                    "#01bdbe",
                    "#0373a1",
                    "#f86a8c",
                    "#d63d65",
                    "#f4ab98",
                    "#ffcd40",
                    "#f28e2b",
                    "#05a6bb",
                    "#3ae8ef",
                    "#3ad0f9",
                    "#78fd84",
                    "#068eea",
                    "#01bdbe",
                    "#0373a1",
                    "#f86a8c",
                    "#d63d65"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                tableStyle: BICst.TABLE_STYLE.STYLE1,
                themeColor: "#3ae8ef",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.CENTER,
                        tarFontAlign: BICst.FONT_ALIGN.CENTER
                    }
                }
            },
            controlTheme: "#3ae8ef"
        },
        STYLE4: {
            id: "STYLE4",
            theme: BICst.DESIGN.THEME.DARK,
            widgetGap: BICst.WIDGET_GAP.GAP,
            templateBackground: {
                type: "image",
                color: "",
                imageId: "template/background_style6.png"
            },
            widgetBackground: {
                type: "color",
                color: "transparent",
                imageId: ""
            },
            titleBackground: {
                type: "color",
                color: "transparent",
                imageId: ""
            },
            titleFont: {
                type: BICst.AUTO_CUSTOM.AUTO,
                fontFamily: "Microsoft YaHei",
                fontSize: 12,
                bold: true,
                italic: false,
                underline: false,
                fontColor: "",
                fontAlign: BICst.FONT_ALIGN.CENTER
            },
            chart: {
                gradient: ["#FFDB03", "#E65555"],
                chartColor: [
                    "#b25757",
                    "#e18169",
                    "#f1c15f",
                    "#f4ab98",
                    "#fa706d",
                    "#f7a552",
                    "#9c755f",
                    "#bfa395",
                    "#8d9a90",
                    "#4c9f95",
                    "#587d85",
                    "#6388b4",
                    "#b25757",
                    "#e18169",
                    "#f1c15f",
                    "#f4ab98",
                    "#fa706d",
                    "#f7a552",
                    "#9c755f",
                    "#bfa395",
                    "#8d9a90",
                    "#4c9f95",
                    "#587d85",
                    "#6388b4",
                    "#b25757",
                    "#e18169",
                    "#f1c15f",
                    "#f4ab98",
                    "#fa706d",
                    "#f7a552",
                    "#9c755f",
                    "#bfa395"
                ],
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    fontFamily: "Microsoft YaHei",
                    fontSize: 12,
                    bold: false,
                    italic: false,
                    underline: false,
                    fontColor: ""
                }
            },
            table: {
                tableStyle: BICst.TABLE_STYLE.STYLE1,
                themeColor: "#e88f5d",
                font: {
                    type: BICst.AUTO_CUSTOM.AUTO,
                    header: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        fontAlign: BICst.FONT_ALIGN.CENTER
                    },
                    body: {
                        fontFamily: "Microsoft YaHei",
                        fontSize: 12,
                        bold: false,
                        italic: false,
                        underline: false,
                        fontColor: "",
                        dimFontAlign: BICst.FONT_ALIGN.LEFT,
                        tarFontAlign: BICst.FONT_ALIGN.RIGHT
                    }
                }
            },
            controlTheme: "#e88f5d"
        }
    });
})();
!(function () {
    BI.constant("bi.constant.components.template.style.widget.gap.items", [{
        text: BI.i18nText("BI-Design_Has_Gap"),
        value: BICst.WIDGET_GAP.GAP
    }, {
        text: BI.i18nText("BI-Design_Has_No_Gap"),
        value: BICst.WIDGET_GAP.NO_GAP
    }]);

    BI.constant("bi.constant.components.chart.style.items", [{
        cls: "chart-style1-icon",
        value: BICst.CHART_STYLE.NORMAL,
        title: BI.i18nText("BI-Design_Pure_Color")
    }, {
        cls: "chart-style2-icon",
        value: BICst.CHART_STYLE.GRADIENT,
        title: BI.i18nText("BI-Design_Gradient_Color")
    }]);

    BI.constant("bi.constant.components.table.style.items", [{
        cls: "table-style1-icon",
        value: BICst.TABLE_STYLE.STYLE1
    }, {
        cls: "table-style2-icon",
        value: BICst.TABLE_STYLE.STYLE2
    }, {
        cls: "table-style3-icon",
        value: BICst.TABLE_STYLE.STYLE3
    }]);

})();!(function () {
    var CONSTANT = {
        BUTTON_WIDTH: 80,
        BUTTON_HEIGHT: 24,
        ICON_WIDTH: 24,
        ICON_HEIGHT: 24,
        HEIGHT: 30,
        L_GAP: 10,
        L_GAP2: 20,
        COMBO_HEIGHT: 24,
        EXPANDER_GAP: 15
    };
    var EXPANDER = {
        TEMPLATE: "template",
        TITLE: "title",
        WIDGET: "widget",
        CHART: "chart",
        TABLE: "table",
        FILTER: "filter"
    };
    var StyleSetting = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style-setting bi-card",
            width: 300
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style.setting");
        },

        watch: {
            // 预设样式
            currentPage: function (currentPage) {
                this.paginationGroup.setValue(currentPage);
            },
            hasLastPage: function (hasLastPage) {
                this.leftButton.setEnable(hasLastPage);
            },
            hasNextPage: function (hasNextPage) {
                this.rightButton.setEnable(hasNextPage);
            },
            items: function (items) {
                this.styleButtons.populate(items);
                this.styleButtons.setValue(this.model.actualStyleId);
            },
            styleId: function (v) {
                this.settings.setSelect(v);
            },
            currentExpander: function (v) {
                this._hideOtherExpander(v);
            },
            paginationIconItems: function (items) {
                this.paginationGroup.populate(items);
                this.paginationGroup.setValue(this.model.pageSize);
            },
            styleSaveButtonDisabled: function (v) {
                this.styleSaveButton.setEnable(!v);
            }
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.label",
                        text: BI.i18nText("BI-Design_Template_Style"),
                        height: 40,
                        lgap: CONSTANT.EXPANDER_GAP,
                        textAlign: "left",
                        cls: "cm-strong"
                    },
                    height: 40
                }, {
                    el: {
                        type: "bi.horizontal_adapt",
                        items: [{
                            type: "bi.layout",
                            cls: "bi-border-top",
                            width: 270,
                            height: 1
                        }]
                    },
                    height: 1
                }, {
                    el: this._getPredictionStyles(),
                    height: 195
                }, {
                    el: {
                        type: "bi.tab",
                        showIndex: this.model.styleId,
                        single: true,
                        cardCreator: BI.bind(this._cardCreator, this),
                        ref: function (ref) {
                            self.settings = ref;
                        }
                    }
                }, {
                    el: {
                        type: "bi.left_right_vertical_adapt",
                        items: {
                            right: [{
                                type: "bi.button",
                                level: "ignore",
                                text: BI.i18nText("BI-Basic_Cancel"),
                                height: CONSTANT.BUTTON_HEIGHT,
                                width: CONSTANT.BUTTON_WIDTH,
                                listeners: [{
                                    eventName: BI.Button.EVENT_CHANGE,
                                    action: BI.bind(self.store.cancel, self.store)
                                }]
                            }, {
                                type: "bi.button",
                                text: BI.i18nText("BI-Basic_Sure"),
                                height: CONSTANT.BUTTON_HEIGHT,
                                width: CONSTANT.BUTTON_WIDTH,
                                listeners: [{
                                    eventName: BI.Button.EVENT_CHANGE,
                                    action: BI.bind(self.store.saveTemplateStyle, self.store)
                                }]
                            }]
                        },
                        rrgap: 10,
                        height: 44
                    },
                    height: 44
                }]
            };
        },

        _getPredictionStyles: function () {
            var self = this;
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.htape",
                        items: [{
                            el: {
                                type: "bi.center_adapt",
                                items: [{
                                    type: "bi.icon_button",
                                    disabled: !this.model.hasLastPage,
                                    cls: "arrow-widget widget-arrow-left-font",
                                    height: 26,
                                    width: 16,
                                    handler: function () {
                                        self.store.lastPage();
                                    },
                                    ref: function (ref) {
                                        self.leftButton = ref;
                                    }
                                }]
                            },
                            width: 30
                        }, {
                            el: {
                                type: "bi.button_group",
                                items: this.model.items,
                                value: this.model.actualStyleId,
                                layouts: [{
                                    type: "bi.left",
                                    lgap: 5,
                                    rgap: 5,
                                    tgap: 5,
                                    bgap: 5
                                }],
                                listeners: [{
                                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                                    action: function () {
                                        self.store.chooseStyle(this.getValue()[0]);
                                    }
                                }],
                                ref: function (ref) {
                                    self.styleButtons = ref;
                                }
                            }
                        }, {
                            el: {
                                type: "bi.center_adapt",
                                items: [{
                                    type: "bi.icon_button",
                                    cls: "arrow-widget widget-arrow-right-font",
                                    height: 26,
                                    width: 16,
                                    disabled: !this.model.hasNextPage,
                                    handler: function () {
                                        self.store.nextPage();
                                    },
                                    ref: function (ref) {
                                        self.rightButton = ref;
                                    }
                                }]
                            },
                            width: 30
                        }]
                    },
                    tgap: 10
                }, {
                    el: {
                        type: "bi.absolute",
                        items: [{
                            el: {
                                type: "bi.button_group",
                                items: this.model.paginationIconItems,
                                value: this.model.currentPage,
                                layouts: [{
                                    type: "bi.float_center_adapt",
                                    items: [{
                                        type: "bi.horizontal"
                                    }]
                                }],
                                listeners: [{
                                    eventName: BI.ButtonGroup.EVENT_CHANGE,
                                    action: function () {
                                        self.store.setPage(this.getValue()[0]);
                                    }
                                }],
                                ref: function (ref) {
                                    self.paginationGroup = ref;
                                }
                            },
                            left: 0,
                            top: 0,
                            right: 0,
                            bottom: 0
                        }, {
                            el: {
                                type: "bi.vertical_adapt",
                                items: [{
                                    type: "bi.text_button",
                                    cls: "prediction-save",
                                    title: BI.i18nText("BI-Design_Save_As_Prediction_Style"),
                                    text: BI.i18nText("BI-Design_Save_As_Prediction_Style"),
                                    handler: BI.bind(this.store.savePredictionStyle, this.store),
                                    warningTitle: BI.i18nText("BI-Design_Cannot_Save_Prediction_Styles_More_Than_Five"),
                                    disabled: this.model.styleSaveButtonDisabled,
                                    ref: function (ref) {
                                        self.styleSaveButton = ref;
                                    }
                                }]
                            },
                            top: 2,
                            right: 10
                        }]
                    },
                    height: 20,
                    bgap: 5
                }]
            };
        },

        _cardCreator: function () {
            var self = this;
            return {
                type: "bi.vertical",
                cls: "bi-background",
                items: [{
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.TEMPLATE] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.TEMPLATE);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Platform_Dashboard"),
                        title: BI.i18nText("BI-Platform_Dashboard")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.template_popup"
                    }
                }, {
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.TITLE] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.TITLE);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Basic_Title"),
                        title: BI.i18nText("BI-Basic_Title")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.title_popup"
                    }
                }, {
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.WIDGET] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.WIDGET);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Design_Widget"),
                        title: BI.i18nText("BI-Design_Widget")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.widget_popup"
                    }
                }, {
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.CHART] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.CHART);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Basic_Chart"),
                        title: BI.i18nText("BI-Basic_Chart")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.chart_popup"
                    }
                }, {
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.TABLE] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.TABLE);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Basic_Table"),
                        title: BI.i18nText("BI-Basic_Table")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.table_popup"
                    }
                }, {
                    type: "bi.expander",
                    ref: function (ref) {
                        self[EXPANDER.FILTER] = ref;
                    },
                    listeners: [{
                        eventName: BI.Expander.EVENT_EXPAND,
                        action: function () {
                            self.store.changeExpander(EXPANDER.FILTER);
                        }
                    }],
                    cls: "bi-border-bottom",
                    el: {
                        type: "bi.design.arrow.expander.node",
                        height: 36,
                        text: BI.i18nText("BI-Design_Filter_Component"),
                        title: BI.i18nText("BI-Design_Filter_Component")
                    },
                    popup: {
                        type: "bi.design.template.style.setting.filter_popup"
                    }
                }]
            };
        },

        _hideOtherExpander: function (v) {
            var self = this;
            BI.each(EXPANDER, function (k, value) {
                if (v !== value) {
                    self[value].hideView();
                }
            });
        }
    });
    StyleSetting.EVENT_CANCEL = "EVENT_CANCEL";
    StyleSetting.EVENT_SAVE = "EVENT_SAVE";
    BI.shortcut("bi.design.template.style.setting", StyleSetting);
})();!(function () {
    var PAGE_COUNTS = 4;
    var TemplateStyleModel = BI.inherit(Fix.Model, {

        _init: function () {
            this.cache = BI.deepClone(this.model.templateStyle);
        },

        state: function () {
            return {
                currentPage: 1,
                styleId: BI.UUID(),
                currentExpander: null
            };
        },

        context: ["layerShown", "templateStyle"],
        childContext: ["style", "actualStyle"],

        watch: {
            items: function (items) {
                items.length === 0 && this.model.currentPage--;
            }
        },

        computed: {
            style: function () {
                return this.model.templateStyle.style;
            },
            actualStyle: function () {
                return BI.Utils.getActualTemplateStyle();
            },
            actualStyleId: function () {
                return this.model.actualStyle.id;
            },
            // 预设样式
            styles: function () {
                var styles = [];
                var constants = BI.Constants.getConstant("bi.constant.design.prediction.styles");
                BI.each(constants, function (name, style) {
                    styles.push({
                        title: BI.i18nText("BI-Design_Prediction_Style_{R1}", styles.length + 1),
                        style: style,
                        value: name
                    });
                });
                styles = styles.concat(BI.map(this.model.templateStyle.predictionStyles, function (i, style) {
                    return {
                        title: BI.i18nText("BI-Design_Custom_Style_{R1}", i + 1),
                        style: style,
                        value: style.id,
                        canDelete: true
                    };
                }));
                return styles;
            },
            styleSaveButtonDisabled: function () {
                return this.model.templateStyle.predictionStyles.length >= 5;
            },
            items: function () {

                var items = this.model.styles.slice((this.model.currentPage - 1) * PAGE_COUNTS, this.model.currentPage * PAGE_COUNTS);
                return BI.map(items, function (idx, item) {
                    return BI.extend(item, {
                        type: "bi.design.prediction.style.button",
                        cls: "button-shadow"
                    });
                });
            },
            pageSize: function () {
                return Math.ceil(BI.size(this.model.styles) / PAGE_COUNTS);
            },
            hasLastPage: function () {
                return this.model.currentPage > 1;
            },
            hasNextPage: function () {
                return this.model.currentPage < this.model.pageSize;
            },
            paginationIconItems: function () {
                var icons = [];
                for (var i = 0; i < this.model.pageSize; i++) {
                    icons.push({
                        type: "bi.icon_button",
                        cls: "page-pagination-font",
                        value: i + 1,
                        forceSelected: true,
                        width: 20,
                        height: 20
                    });
                }
                return icons;
            }
        },

        actions: {
            changeExpander: function (v) {
                this.model.currentExpander = v;
            },
            // 预设样式
            setPage: function (v) {
                this.model.currentPage = v;
            },
            lastPage: function () {
                this.model.currentPage--;
            },
            nextPage: function () {
                this.model.currentPage++;
            },
            chooseStyle: function (key) {
                var styles = BI.concat(BI.Constants.getConstant("bi.constant.design.prediction.styles"), BI.designModel.templateStyle.predictionStyles);
                this.model.templateStyle.style = BI.deepClone(BI.find(styles, function (id, style) {
                    if (key === style.id) {
                        return true;
                    }
                }));
                this.model.styleId = BI.UUID();
            },
            // 样式
            cancel: function () {
                this.model.layerShown = false;
                this.model.templateStyle.style = this.cache.style;
                this.model.templateStyle.predictionStyles = this.cache.predictionStyles;
            },
            saveTemplateStyle: function () {
                this.model.layerShown = false;
                this.cache = BI.deepClone(this.model.templateStyle);
            },
            savePredictionStyle: function () {
                this.model.templateStyle.predictionStyles.push(BI.extend({}, BI.deepClone(this.model.templateStyle.style), {
                    id: BI.UUID()
                }));
                this.model.currentPage = this.model.pageSize;
            }
        }
    });
    BI.model("bi.model.design.template.style.setting", TemplateStyleModel);
})();!(function () {
    var GLOBAL_STYLE_LAYER = BI.UUID();
    var TemplateStyle = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-template-style"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.template.style");
        },

        watch: {
            layerShown: function (layerShown) {
                this._createGlobalStylePane(layerShown);
            },
            // 样式
            "templateStyle.style||templateStyle.style.**": function () {
                this._populate();
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.icon_text_item",
                cls: "template-style-font",
                text: BI.i18nText("BI-Design_Template_Style"),
                title: BI.i18nText("BI-Design_Template_Style"),
                height: 25,
                logic: {
                    dynamic: true
                },
                listeners: [{
                    eventName: BI.Button.EVENT_CHANGE,
                    action: function () {
                        self.store.showLayer();
                    }
                }]
            };
        },

        _createGlobalStylePane: function (show) {
            var self = this;
            if (!show) {
                BI.Layers.hide(GLOBAL_STYLE_LAYER);
                return;
            }
            BI.createWidget({
                type: "bi.absolute",
                element: BI.Layers.create(GLOBAL_STYLE_LAYER),
                items: [{
                    el: {
                        type: "bi.design.template.style.setting",
                        ref: function (ref) {
                            self.templateStyleSetting = ref;
                        }
                    },
                    top: 31,
                    left: 61,
                    bottom: 0
                }]
            });
            BI.Layers.show(GLOBAL_STYLE_LAYER);
        },

        _populate: function () {
            this.manager = this.manager || BI.Services.getService("bi.service.design.template.style");
            // 渲染事实上的样式
            this.manager.setThemeStyle();
            this.manager.setGlobalStyle();
        }
    });
    BI.shortcut("bi.design.template.style", TemplateStyle);
})();!(function () {
    var TemplateStyleModel = BI.inherit(Fix.Model, {

        state: function () {
            return {
                save: null,
                layerShown: null
            };
        },

        context: ["templateStyle"],
        childContext: ["layerShown"],

        actions: {
            showLayer: function () {
                this.model.layerShown = true;
            }
        }

    });
    BI.model("bi.model.design.template.style", TemplateStyleModel);
})();/**
 * 汇总表格帮助类
 * Created by Young's on 2017/1/19.
 */
!(function () {
    var TemplateStyleService = BI.inherit(BI.OB, {

        constant: {
            GLOBAL_STYLE: "__global_style__"
        },

        _isColor: function (color) {
            return color === "" || BI.DOM.isColor(color) || color === "transparent";
        },

        getBackgroundValue: function (background) {
            if (!background) {
                return;
            }
            switch (background.type) {
                case BICst.BACKGROUND_TYPE.COLOR:
                    return background.color;
                case BICst.BACKGROUND_TYPE.IMAGE:
                    if (background["imageId"]) {
                        return "url(" + BI.Func.getCompleteImageUrl(background["imageId"]) + ")";
                    }
                    // 没设置图片就用透明的吧
                    return "transparent";
                default:
                    return "";
            }
        },

        getBackgroundAndColor: function (bg) {
            if (!bg) {
                return {};
            }
            var background = this.getBackgroundValue(bg);
            switch (bg.type) {
                case BICst.BACKGROUND_TYPE.COLOR:
                    if (BI.DOM.isHexColor(background)) {
                        return {
                            color: BI.DOM.getContrastColor(background),
                            background: background
                        };
                    }
                    return {
                        color: "",
                        background: background
                    };
                case BICst.BACKGROUND_TYPE.IMAGE:
                    return {
                        color: "",
                        background: background,
                        backgroundSize: "100% 100%",
                        backgroundRepeat: "no-repeat"
                    };
                default:
                    return {};
            }
        },

        getGsBackgroundValue: function (gs, name) {
            return this.getBackgroundValue(gs[name]);
        },

        setStyle: function (id, objects) {
            var result = "";
            BI.each(objects, function (cls, object) {
                result += cls + "{";
                BI.each(object, function (name, value) {
                    result += name + ":" + value + ";";
                });
                result += "} ";
            });
            BI.StyleLoaders.removeStyle(id).loadStyle(id, result);
        },

        setThemeStyle: function () {
            var gs = BI.Utils.getActualTemplateStyle() || {};
            $("html").removeClass(BICst.DESIGN.THEME.DEFAULT).removeClass(BICst.DESIGN.THEME.DARK);
            switch (gs.theme) {
                case BICst.DESIGN.THEME.DARK:
                    $("html").addClass(BICst.DESIGN.THEME.DARK);
                    break;
                default:
                    $("html").addClass(BICst.DESIGN.THEME.DEFAULT);
                    break;
            }
        },

        setGlobalStyle: function () {
            var globalStyle = BI.Utils.getActualTemplateStyle() || {};
            var plateConfig = BI.Utils.getPlateStyle();
            this._getMainBackground(globalStyle, plateConfig);
            this._getWidgetBackground(globalStyle, plateConfig);
            this._getTitleBackground(globalStyle, plateConfig);
            var service = BI.Services.getService("bi.service.table");
            var titleFont = {};
            if (globalStyle.titleFont.type === BICst.AUTO_CUSTOM.CUSTOM) {
                titleFont = service.getCellFontStyle(globalStyle.titleFont);
                titleFont.textAlign = service.getCellFontTextAlign(globalStyle.titleFont.fontAlign);
                titleFont.fontSize += "px";
                titleFont.color = BI.isEmptyString(titleFont.color) ? this.actualTitleColor : titleFont.color;
            } else {
                titleFont.color = this.actualTitleColor;
            }
            var convertedTitleFont = {};
            BI.each(titleFont, function (k, v) {
                if (v) {
                    convertedTitleFont[BI.hyphenate(k)] = v;
                }
            });
            var titleStyle = BI.extend({
                background: this.actualTitleBackground,
                color: this.actualTitleColor
            }, convertedTitleFont);

            var innerTitleStyle = BI.deepClone(titleStyle);
            delete innerTitleStyle.background;

            var controlRGBColor = globalStyle.controlTheme;
            var json = BI.DOM.rgb2json(controlRGBColor);
            json.a = 0.05;
            var controlRGBAColor = BI.DOM.json2rgba(json);

            var style = BI.extend({
                "#body": {
                    background: this.actualMainBackground,
                    "background-size": "100% 100%",
                    filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(src=" + this.actualMainBackground + ",sizingMethod='scale')",
                    color: this.actualMainColor
                },

                "#body .bi-dashboard-widget": {
                    background: this.widgetBackground,
                    color: this.actualWidgetColor
                },
                // 处理单个组件设置了透明 用模板确定的文字颜色
                "#body .bi-dashboard-widget.transparent": {
                    color: this.actualMainColor
                },

                // 防止之后加控件颜色
                "#body .bi-dashboard-widget .dashboard-control-widget-title": titleStyle,

                "#body .bi-dashboard-widget .dashboard-widget-title": titleStyle,

                "#body .bi-dashboard-widget .dashboard-widget-title .bi-textarea": innerTitleStyle

                // 组件背景不可用就用模版背景
            }, this._fixedBackgroundColor("#body .bi-dashboard-widget", this.actualWidgetBackground === "transparent" ? (globalStyle.theme === BICst.DESIGN.THEME.DARK ? "#000000" : "#ffffff") : this.actualWidgetBackground),
            this._fixedBackgroundColor("#body .bi-dashboard-widget .bi-background", this.actualMainBackground === "transparent" ? (globalStyle.theme === BICst.DESIGN.THEME.DARK ? "#000000" : "#ffffff") : this.actualMainBackground),
            this._fixedBackgroundColor("#body .bi-dashboard-widget.transparent", this.actualMainBackground), {
                // 控件
                "#body .bi-control-widget .bi-list-item:hover": {"background-color": controlRGBAColor},
                "#body .bi-control-widget .bi-list-item-effect:hover": {"background-color": controlRGBAColor},
                "#body .bi-control-widget .bi-list-item-active:hover": {"background-color": controlRGBAColor},

                "#body .bi-control-widget .bi-list-item-effect:active": {"background-color": controlRGBAColor},
                "#body .bi-control-widget .bi-list-item-effect.active": {color: controlRGBColor},
                "#body .bi-control-widget .bi-list-item-active:active": {color: controlRGBColor},
                "#body .bi-control-widget .bi-list-item-active.active": {color: controlRGBColor},
                "#body .bi-control-widget .bi-list-item-select:hover": {
                    color: controlRGBColor,
                    "background-color": controlRGBAColor
                },
                "#body .bi-control-widget .bi-list-item-select.active": {
                    "background-color": controlRGBColor,
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },
                "#body .bi-control-widget .bi-list-item-select.active:hover": {
                    "background-color": controlRGBColor,
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },
                "#body .bi-control-widget .bi-list-item-select:active": {
                    "background-color": controlRGBColor,
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },

                "#body .bi-control-widget .bi-border": {"border-color": controlRGBColor},
                "#body .bi-control-widget .bi-border-left": {"border-color": controlRGBColor},
                "#body .bi-control-widget .bi-border-right": {"border-color": controlRGBColor},
                "#body .bi-control-widget .bi-border-top": {"border-color": controlRGBColor},
                "#body .bi-control-widget .bi-border-bottom": {"border-color": controlRGBColor},
                "#body .bi-control-widget .bi-high-light": {color: controlRGBColor},
                "#body .bi-control-widget .bi-high-light-background": {
                    "background-color": controlRGBColor,
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },
                "#body .bi-control-widget .bi-high-light-border": {"border-color": controlRGBColor},

                // button
                "#body .bi-control-widget .bi-button.button-common": {
                    "border-color": controlRGBColor,
                    "background-color": controlRGBColor,
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },
                "#body .bi-control-widget .bi-button.button-common .b-font:before": {
                    color: BI.DOM.getContrastColor(controlRGBColor)
                },
                "#body .bi-control-widget .bi-button.button-common.clear,#body .bi-control-widget .bi-button.button-common.clear .b-font:before": {
                    color: controlRGBColor
                }
            });
            this.setStyle(this.constant.GLOBAL_STYLE, style);
        },

        _fixedBackgroundColor: function (prefix, themeColor) {
            var ob = {};
            var themeFontColor = BI.DOM.getContrastColor(themeColor);

            // 边框色、滚动条色
            var borderColor, scrollbarColor, thumbColor, thumbHoverColor, disabledColor;
            var isDark = BI.DOM.isDarkColor(themeColor);
            if (isDark === true) {
                borderColor = "#525466";
                scrollbarColor = "rgba(204, 204, 204, 0.05)";
                thumbHoverColor = "rgba(204,204,204,0.7)";
                thumbColor = "rgba(204, 204, 204, 0.3)";
                disabledColor = "#666666";
            } else {
                borderColor = "#d4dadd";
                scrollbarColor = "rgba(102, 102, 102, 0.05)";
                thumbHoverColor = "rgba(102,102,102,0.7)";
                thumbColor = "rgba(102, 102, 102, 0.3)";
                disabledColor = "#cccccc";
            }

            // 输入框
            ob[prefix + " .bi-input"] = {color: themeFontColor};
            ob[prefix + " .bi-textarea"] = {color: themeFontColor};

            // 边框
            ob[prefix + " .bi-border"] = {"border-color": borderColor};
            ob[prefix + " .bi-border-left"] = {"border-color": borderColor};
            ob[prefix + " .bi-border-right"] = {"border-color": borderColor};
            ob[prefix + " .bi-border-top"] = {"border-color": borderColor};
            ob[prefix + " .bi-border-bottom"] = {"border-color": borderColor};

            // 滚动条
            ob[prefix + " .scrollbar-layout-main"] = {"background-color": scrollbarColor};
            ob[prefix + " .scrollbar-layout-main-horizontal"] = {"background-color": scrollbarColor};
            ob[prefix + " .public-scrollbar-face:after"] = {"background-color": thumbColor};
            ob[prefix + " div::-webkit-scrollbar"] = {"background-color": scrollbarColor};
            ob[prefix + " div::-webkit-scrollbar-thumb"] = {"background-color": thumbColor};
            ob[prefix + " div::-webkit-scrollbar-thumb:hover"] = {"background-color": thumbHoverColor};

            ob[prefix + " .public-scrollbar-main:hover .public-scrollbar-face:after"] = {"background-color": thumbHoverColor};
            ob[prefix + " .public-scrollbar-main-active .public-scrollbar-face:after"] = {"background-color": thumbHoverColor};
            ob[prefix + " .public-scrollbar-face-active:after"] = {"background-color": thumbHoverColor};

            // 灰化
            ob[prefix + " .base-disabled"] = {color: disabledColor + "!important"};
            ob[prefix + " .base-disabled .bi-input"] = {color: disabledColor + "!important"};
            ob[prefix + " .base-disabled .bi-textarea"] = {color: disabledColor + "!important"};
            ob[prefix + " .base-disabled .b-font:before"] = {color: disabledColor + "!important"};

            // 各种悬浮特效
            var hover = {
                "background-color": isDark ? "rgba(255,255,255,.05)" : "rgba(26,26,26,.05)",
                color: isDark ? "#ffffff" : "#1a1a1a"
            };
            ob[prefix + " .bi-list-item:hover"] = hover;
            ob[prefix + " .bi-list-item-effect:hover"] = hover;
            ob[prefix + " .bi-list-item-active:hover"] = hover;
            ob[prefix + " .bi-list-item-select:hover"] = hover;

            return ob;
        },

        _getAllBackground: function () {
            var globalStyle = BI.Utils.getActualTemplateStyle() || {};
            var plateConfig = BI.Utils.getPlateStyle();
            this._getMainBackground(globalStyle, plateConfig);
            this._getWidgetBackground(globalStyle, plateConfig);
            this._getTitleBackground(globalStyle, plateConfig);
        },

        _getMainBackground: function (globalStyle, plateConfig) {
            var mainBackground = this.getGsBackgroundValue(globalStyle, "templateBackground");
            var actualMainBackground = mainBackground, actualMainColor;
            if (BI.DOM.isHexColor(mainBackground)) {
                actualMainColor = BI.DOM.getContrastColor(mainBackground);
            } else if (mainBackground === "") {
                actualMainBackground = this.getGsBackgroundValue(plateConfig, "mainBackground");
                if (BI.DOM.isHexColor(actualMainBackground)) {
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                } else {
                    if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                        actualMainBackground = "#191B2B";
                        actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                    } else {
                        actualMainBackground = "#eff1f4";
                        actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                    }
                }
            } else if (mainBackground === "transparent") {
                if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                    actualMainBackground = "#191B2B";
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                } else {
                    actualMainBackground = "#eff1f4";
                    actualMainColor = BI.DOM.getContrastColor(actualMainBackground);
                }
            }
            this.actualMainBackground = actualMainBackground;
            this.actualMainColor = actualMainColor;
        },

        getActualMainBackground: function () {
            this._getAllBackground();
            return this.actualMainBackground;
        },

        _getWidgetBackground: function (globalStyle, plateConfig) {
            var widgetBackground = this.getGsBackgroundValue(globalStyle, "widgetBackground");
            var actualWidgetBackground = widgetBackground, actualWidgetColor;
            if (BI.DOM.isHexColor(widgetBackground)) {
                actualWidgetColor = BI.DOM.getContrastColor(widgetBackground);
            } else if (widgetBackground === "") {
                actualWidgetBackground = this.getGsBackgroundValue(plateConfig, "widgetBackground");
                if (BI.DOM.isHexColor(actualWidgetBackground)) {
                    actualWidgetColor = BI.DOM.getContrastColor(actualWidgetBackground);
                } else if (actualWidgetBackground === "") {
                    if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                        actualWidgetBackground = "#242640";
                        actualWidgetColor = BI.DOM.getContrastColor(actualWidgetBackground);
                    } else {
                        actualWidgetBackground = "#ffffff";
                        actualWidgetColor = BI.DOM.getContrastColor(actualWidgetBackground);
                    }
                } else if (actualWidgetBackground === "transparent") {
                    actualWidgetBackground = this._isColor(this.actualMainBackground) ? this.actualMainBackground : "transparent";
                    actualWidgetColor = this.actualMainColor;
                }
            } else if (widgetBackground === "transparent") {
                actualWidgetBackground = this._isColor(this.actualMainBackground) ? this.actualMainBackground : "transparent";
                actualWidgetColor = this.actualMainColor;
            }
            // BI-29259 透明的时候有问题
            this.actualWidgetBackground = actualWidgetBackground;
            this.widgetBackground = widgetBackground === "transparent" ? "transparent" : this.actualWidgetBackground;
            this.actualWidgetColor = actualWidgetColor;
        },

        getActualWidgetBackground: function () {
            this._getAllBackground();
            return this.actualWidgetBackground;
        },

        _getTitleBackground: function (globalStyle, plateConfig) {
            var titleBackground = this.getGsBackgroundValue(globalStyle, "titleBackground");
            var actualTitleBackground = titleBackground, actualTitleColor;
            if (BI.DOM.isHexColor(titleBackground)) {
                actualTitleColor = BI.DOM.getContrastColor(titleBackground);
            } else if (titleBackground === "") {
                actualTitleBackground = this.getGsBackgroundValue(plateConfig, "titleBackground");
                if (BI.DOM.isHexColor(actualTitleBackground)) {
                    actualTitleColor = BI.DOM.getContrastColor(actualTitleBackground);
                } else if (actualTitleBackground === "") {
                    if (globalStyle.theme === BICst.DESIGN.THEME.DARK) {
                        actualTitleBackground = "#242640";
                        actualTitleColor = BI.DOM.getContrastColor(actualTitleBackground);
                    } else {
                        actualTitleBackground = "#ffffff";
                        actualTitleColor = BI.DOM.getContrastColor(actualTitleBackground);
                    }
                } else if (actualTitleBackground === "transparent") {
                    actualTitleBackground = this._isColor(this.actualWidgetBackground) ? this.actualWidgetBackground : "transparent";
                    actualTitleColor = this.actualWidgetColor;
                }
            }
            this.actualTitleBackground = actualTitleBackground;
            this.actualTitleColor = actualTitleColor;
        }

    });
    BI.service("bi.service.design.template.style", TemplateStyleService);
})();
!(function () {
    BI.constant("bi.constant.design.widget.title.operator", [{
        type: "bi.single_select_radio_item",
        text: BI.i18nText("BI-Basic_Auto"),
        hgap: 5,
        logic: {
            dynamic: true
        },
        // stopPropagation: true,
        value: BICst.DESIGN.WIDGET_NAME_STYLE.AUTO
    }, {
        type: "bi.single_select_radio_item",
        text: BI.i18nText("BI-Basic_Custom"),
        hgap: 5,
        logic: {
            dynamic: true
        },
        stopPropagation: true,
        value: BICst.DESIGN.WIDGET_NAME_STYLE.CUSTOM
    }]);
})();!(function () {
    var Operator = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-widget-title-operator"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.title.operator", {
                wId: this.options.wId
            });
        },

        watch: {
            mode: function (mode) {
                if(mode === BICst.DESIGN.WIDGET_NAME_STYLE.CUSTOM) {
                    this.toolbar.showFontRelationTool();
                }else {
                    this.toolbar.hideFontRelationTool();
                    // 去掉与样式有关
                    var text = this.editor.getValue().replaceAll(BICst.REGULAR_STRING.HTML_STYLE_TAG, "");
                    text = text.replaceAll("<div[\\s\\S]*?>", "<div>");
                    this.editor.setValue(text);
                }
            }
        },

        render: function () {
            var self = this, o = this.options;
            this.validation = true;
            this.editor = this._getEditor();
            return {
                type: "bi.vtape",
                items: [{
                    el: {
                        type: "bi.htape",
                        items: [{
                            type: "bi.label",
                            text: BI.i18nText("BI-Design_Font_Style") + ": ",
                            textAlign: "left",
                            width: 70
                        }, {
                            type: "bi.button_group",
                            items: BI.Constants.getConstant("bi.constant.design.widget.title.operator"),
                            listeners: [{
                                eventName: BI.ButtonGroup.EVENT_CHANGE,
                                action: function () {
                                    self.store.changeMode(this.getValue()[0]);
                                }
                            }],
                            ref: function () {
                                self.switcher = this;
                            },
                            layouts: [{
                                type: "bi.left",
                                rgap: 5
                            }],
                            value: this.model.mode,
                            width: 125
                        }, this._getToolBar()]
                    },
                    height: 24
                }, {
                    el: this.editor,
                    tgap: 10
                }]
            };
        },

        _getEditor: function () {
            var self = this, o = this.options;
            return BI.createWidget({
                type: "bi.nic_editor",
                height: 365,
                cls: "editor-region",
                value: this.model.value,
                listeners: [{
                    eventName: BI.NicEditor.EVENT_KEYUP,
                    action: function () {
                        self._checkEmptyAndRepeat();
                    }
                }, {
                    eventName: BI.NicEditor.EVENT_BLUR,
                    action: function () {
                        self.validation && self.store.setName(self.editor.getValue());
                        BI.Bubbles.hide(self.getName() + "invalid");
                    }
                }, {
                    eventName: BI.NicEditor.EVENT_FOCUS,
                    action: function () {
                        if (self.validation === false) {
                            BI.Bubbles.show(self.getName() + "invalid", self._getErrorText(), self, {offsetStyle: "center"});
                        }
                    }
                }]
            });
        },

        _getToolBar: function () {
            var self = this;
            return {
                cls: "toolbar-region",
                type: "bi.design.widget.title.operator.toolbar",
                wId: this.options.wId,
                editor: self.editor,
                hideFontTool: this.model.mode === BICst.DESIGN.WIDGET_NAME_STYLE.AUTO,
                ref: function (_ref) {
                    self.toolbar = _ref;
                },
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self._checkEmptyAndRepeat();
                    }
                }],
                height: 25
            };
        },

        _checkEmptyAndRepeat: function () {
            var self = this, o = this.options;
            if(BI.isEmptyString(this._trimValue(BI.htmlDecode(this.editor.getValue())))) {
                this.validation = false;
                BI.Bubbles.show(this.getName() + "invalid", this._getErrorText(), this, {
                    offsetStyle: "center"
                });
            }else{
                if (BI.Utils.checkWidgetNameByID(this._trimValue(this.editor.getValue()), o.wId)) {
                    self.validation = true;
                    BI.Bubbles.hide(self.getName() + "invalid");
                } else {
                    self.validation = false;
                    BI.Bubbles.show(self.getName() + "invalid", self._getErrorText(), self, {
                        offsetStyle: "center"
                    });
                }
            }
        },

        _getErrorText: function () {
            if(BI.isEmptyString(this._trimValue(BI.htmlDecode(this.editor.getValue())))) {
                return BI.i18nText("BI-Design_Widget_Name_Can_Not_Null");
            }
            if(this.validation === false) {
                return BI.i18nText("BI-Design_Widget_Name_Can_Not_Repeat");
            }
            return "";

        },

        _trimValue: function (value) {
            // BI-20086 rich_editor的回车插入了div和br
            var newValue = value.replaceAll("<br>|<div[\\s\\S]*?>|</div>", "");
            return BI.trim(newValue);
        },

        mounted: function () {
            this.setValue(this.model.formatName);
            this.editor.bindToolbar(this.toolbar);
            this.editor.focus();
        },

        setValue: function (v) {
            v = v || "";
            this.editor.setValue(v);
        },

        getValue: function () {
            return {
                name: this.model.name,
                nameStyleType: this.model.mode
            };
        }
    });
    BI.shortcut("bi.design.widget.title.operator", Operator);
})();!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                mode: BI.designModel.widgets[this.options.wId].settings.nameStyleType,
                name: BI.designModel.widgets[this.options.wId].name
            };
        },

        computed: {
            widget: function () {
                return BI.designModel.widgets[this.options.wId];
            },
            initialName: function () {
                return this.model.widget.name;
            },
            formatName: function () {
                var attr = BI.DOM.getImage("<!" + BI.i18nText("BI-Design_Element_Is_Deleted") + "!>", "#ff4949", "transparent");
                var src = attr.src;
                var style = attr.style;
                this.deleteMap = this.deleteMap || {};
                var service = BI.Services.getService("bi.service.editor.format");
                return service.convertPlaceHolderToImage(this.model.initialName).replaceAll("<img.*?[^!]>", function (imageStr) {
                    var str = imageStr.match(/alt=".*?"/)[0];
                    var id = str.substring(5, str.length - 1);
                    var nameStr = imageStr.match(/name=".*?"/)[0];
                    var name = nameStr.substring(6, nameStr.length - 1);
                    if ((!BI.Utils.isWidgetExistById(id) && !BI.Utils.isDimensionExist(id) && !BI.Utils.isDimensionGroupIdExist(null, id)) ||
                        BI.Utils.getDimensionState(id) !== BICst.DIMENSION_STATE.NORMAL
                    ) {
                        return "<img class='rich-editor-param' width='" + attr.width + "' height='" + attr.height + "' src='" + src + "' alt='" + id + "' name='" + name + "' style='" + style + "' />";
                    }
                    return imageStr;
                });
            }
        },

        actions: {
            changeMode: function (mode) {
                this.model.mode = mode;
            },
            setName: function (name) {
                var service = BI.Services.getService("bi.service.editor.format");
                this.model.name = service.convertImageToPlaceHolder(name);
            }
        }
    });
    BI.model("bi.model.design.widget.title.operator", Model);
})();!(function () {
    var RichEditorTextToolbar = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-rich-editor-text-toolbar",
            height: 25,
            hideFontTool: false
        },

        render: function () {
            var self = this, o = this.options;
            this.buttons = BI.createWidgets(BI.map(this._getButtons(), function (i, btn) {
                return BI.extend(btn, {
                    editor: o.editor
                });
            }));
            return {
                type: "bi.left_right_vertical_adapt",
                lrgap: 10,
                items: {
                    left: BI.filter(this.buttons, function (idx) {
                        return idx !== self.buttons.length - 1;
                    }),
                    right: [this.buttons[this.buttons.length - 1]]
                }
            };
        },

        mounted: function () {
            var self = this, o = this.options;
            if (BI.isIE9Below()) {// IE8下必须要设置unselectable才能不blur输入框
                this.element.mousedown(function () {
                    self._noSelect(self.element[0]);
                });
                this._noSelect(this.element[0]);
            }
            if(o.hideFontTool) {
                this.hideFontRelationTool();
            }
        },

        _getButtons: function () {
            var self = this;
            return [
                {type: "bi.rich_editor_font_chooser"},
                {type: "bi.rich_editor_size_chooser"},
                {type: "bi.rich_editor_bold_button"},
                {type: "bi.rich_editor_italic_button"},
                {type: "bi.rich_editor_underline_button"},
                {type: "bi.rich_editor_color_chooser"},
                {type: "bi.rich_editor_align_left_button"},
                {type: "bi.rich_editor_align_center_button"},
                {type: "bi.rich_editor_align_right_button"},
                {
                    type: "bi.design.insert_param_combo",
                    wId: this.options.wId,
                    dimensionIdsGetter: function (wId) {
                        return BI.Utils.getAllDimDimensionIds(wId);
                    },
                    listeners: [{
                        eventName: "EVENT_CHANGE",
                        action: function () {
                            self.fireEvent("EVENT_CHANGE");
                        }
                    }]
                }];
        },

        _noSelect: function (element) {
            if (element.setAttribute && element.nodeName.toLowerCase() != "input" && element.nodeName.toLowerCase() != "textarea") {
                element.setAttribute("unselectable", "on");
            }
            for (var i = 0; i < element.childNodes.length; i++) {
                this._noSelect(element.childNodes[i]);
            }
        },

        hideFontRelationTool: function () {
            var self = this;
            BI.each(this.buttons, function (idx, button) {
                idx !== self.buttons.length - 1 && button.setVisible(false);
            });
        },

        showFontRelationTool: function () {
            var self = this;
            BI.each(this.buttons, function (idx, button) {
                idx !== self.buttons.length - 1 && button.setVisible(true);
            });
        }
    });
    BI.shortcut("bi.design.widget.title.operator.toolbar", RichEditorTextToolbar);
})();

!(function () {
    var Title = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-design-widget-title"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.title");
        },

        watch: {
            initName: function (initName) {
                this.title.setValue(initName);
            },
            style: function (v) {
                BI.isNotNull(v) && this.title.setStyle(v);
            }
        },

        beforeInit: function (callback) {
            this.store.initData(callback);
        },

        mounted: function () {
            BI.isNotNull(this.model.style) && this.title.setStyle(this.model.style);
        },

        render: function () {
            var self = this, o = this.options;
            this._broadcasts = [];
            this._broadcasts.push(BI.Broadcasts.on(BICst.BROADCAST.DIMENSIONS_PREFIX, function () {
                self.populate();
            }));
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.read_rich_editor",
                        singleLine: true,
                        value: this.model.initName,
                        ref: function (_ref) {
                            self.title = _ref;
                        }
                    },
                    top: 0,
                    bottom: 10,
                    left: 0,
                    right: 0
                }]
            };
        },

        getHeight: function () {
            return this.title.getContentHeight();
        },

        getValue: function () {
            this.title.getValue();
        },

        setValue: function (v) {
            this.title.setValue(v);
        },

        populate: function () {
            this.store.initData();
        },

        destroyed: function () {
            BI.each(this._broadcasts, function (I, removeBroadcast) {
                removeBroadcast();
            });
            this._broadcasts = [];
        }
    });
    BI.shortcut("bi.design.widget.title", Title);
})();
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                initName: ""
            };
        },

        context: ["widget"],

        computed: {
            name: function () {
                return this.model.widget.name;
            },
            wId: function () {
                return this.model.widget.wId;
            },
            style: function () {
                var titleFontType = BI.Utils.getWidgetTitleFontType(this.model.wId);
                if (titleFontType === BICst.DESIGN.WIDGET_NAME_STYLE.CUSTOM) {
                    return {};
                }
                var service = BI.Services.getService("bi.service.design.template.style");
                var titleBgValue = service.getBackgroundValue(BI.Utils.getTitleBackgroundById(this.model.wId));
                var actualTitleColor;
                if (BI.DOM.isHexColor(titleBgValue)) {
                    actualTitleColor = BI.DOM.getContrastColor(titleBgValue);
                } else if (titleBgValue === "transparent") {
                    var widgetBgValue = service.getBackgroundValue(BI.Utils.getWidgetBackgroundById(this.model.wId));
                    if (BI.DOM.isHexColor(widgetBgValue)) {
                        actualTitleColor = BI.DOM.getContrastColor(widgetBgValue);
                    } else if(widgetBgValue === "") {
                        var templateWidgetBg = service.getBackgroundValue(BI.Utils.getActualWidgetBackground());
                        if(BI.DOM.isHexColor(templateWidgetBg)) {
                            actualTitleColor = BI.DOM.getContrastColor(templateWidgetBg);
                        }
                    }
                } else {
                    actualTitleColor = "";
                }
                return {
                    color: actualTitleColor
                };
            }
        },

        watch: {
            name: function () {
                this.initData();
            }
        },

        actions: {
            initData: function (callback) {
                var self = this;
                this.model.wId && BI.Utils.getWidgetNameById(this.model.wId, function (names) {
                    self.model.initName = self.doRedMark(names[self.model.wId]);
                    callback && callback();
                }, {
                    keepStyle: true
                });
            }
        },

        doRedMark: function (str) {
            return str.replaceAll("<!.*?!>", function (str) {
                return "<font color='#ff4949'>" + BI.htmlEncode(str) + "</font>";
            });
        }

    });
    BI.model("bi.model.design.widget.title", Model);
})();/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午2:48
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Single, {

        props: {
            baseCls: "bi-tree-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.combo.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.multi_tree_combo",
                        ref: function (_ref) {
                            self.combo = _ref;
                        },
                        disabled: this.model.disabled,
                        warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                        belowMouse: true,
                        itemsCreator: function (op, callback) {
                            var data = BI.extend({
                                floors: BI.size(BI.keys(self.model.dimensions))
                            }, op);
                            BI.Utils.getWidgetDataByWidgetInfo(self.model.filteredWidgetConfig, function (data) {
                                if (BI.contains([BI.TreeView.REQ_TYPE_ADJUST_DATA, BI.TreeView.REQ_TYPE_SELECT_DATA], op.type)) {
                                    callback(data.items);
                                } else {
                                    callback(data);
                                }
                            }, {treeOptions: data}, {sync: op.type === BI.TreeView.REQ_TYPE_ADJUST_DATA});
                        },
                        listeners: [{
                            eventName: BI.MultiTreeCombo.EVENT_CONFIRM,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }]
                    },
                    top: 0,
                    right: 0,
                    bottom: 0,
                    left: 0
                }],
                height: 35
            };
        },

        mounted: function () {
            this.setValue(this.model.value);
        },

        reset: function () {
            this.setValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        getValue: function () {
            return this.combo.getValue();
        },

        populate: function () {
            this.combo.populate();
        }
    });
    BI.shortcut("bi.tree_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午3:30
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Single, {

        props: {
            baseCls: "bi-tree-label-control",
            warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting")
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            "dimensions || dimensions.** || view ": function () {
                this.setValue(this.model.value);
            },
            disabled: function () {
                this.treeLabel.setEnable(!this.model.disabled);
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.tree_label",
                ref: function (_ref) {
                    self.treeLabel = _ref;
                },
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                itemsCreator: function (op, callback) {
                    op.selectedValues = self._unwrapItems(op.selectedValues);
                    if (BI.isEmptyObject(op)) {
                        callback({});
                    } else {
                        BI.Utils.getWidgetDataByWidgetInfo(self.model.filteredWidgetConfig, function (jsonData) {
                            jsonData.items = self._wrapItems(jsonData.items);
                            jsonData.values = self._wrapItems(jsonData.values);
                            callback(jsonData);
                        }, {treeOptions: op});
                    }
                },
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.setValue(this.model.value);
        },

        setValue: function (v) {
            if (BI.isEmpty(v)) {
                v = [];
            }

            var self = this;
            var dimensions = BI.keys(this.model.dimensions);
            if (BI.isEmptyArray(dimensions)) {
                self.treeLabel.populate({
                    items: [[]],
                    titles: [BI.i18nText("BI-Design_Tree_Label_Widget")]
                });
                self.treeLabel.setValue([]);
                return;
            }

            BI.Utils.getWidgetDataByWidgetInfo(self.model.filteredWidgetConfig, function (jsonData) {
                self.treeLabel.populate({
                    items: self._wrapItems(jsonData.items),
                    values: self._wrapItems(jsonData.values),
                    titles: self.model.titles
                });
            }, {treeOptions: {
                floors: -1,
                selectedValues: dimensions.length === v.length ? self._unwrapItems(v) : []
            }});
        },

        populate: function () {
            this.setValue(this.model.value);
        },

        reset: function () {
            this.setValue();
        },

        getValue: function () {
            return this._unwrapItems(this.treeLabel.getValue());
        },

        _wrapItems: function (items) {
            items = items || [[]];
            BI.each(items, function (idx, itemGroup) {
                BI.any(itemGroup, function (id, text) {
                    if(BI.isEmptyString(text)) {
                        itemGroup[id] = BI.i18nText("BI-Basic_(Empty)");
                        return true;
                    }
                });
            });
            return items;
        },

        _unwrapItems: function (items) {
            items = items || [[]];
            BI.each(items, function (idx, itemGroup) {
                BI.any(itemGroup, function (id, text) {
                    if(text === BI.i18nText("BI-Basic_(Empty)")) {
                        itemGroup[id] = "";
                        return true;
                    }
                });
            });
            return items;
        }
    });
    BI.shortcut("bi.tree_label_control", Widget);
})();
/**
 * @author: Teller
 * @createdAt: 2018/2/23 下午4:42
 * @Description
*/

!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-tree-list-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        watch: {
            disabled: function () {
                this.treeList.setEnable(!this.model.disabled);
            },
            "dimensions || view || dimensions.**": function () {
                this.populate();
            }
        },

        render: function () {
            var self = this;

            return {
                type: "bi.multi_select_tree",
                ref: function (_ref) {
                    self.treeList = _ref;
                },
                disabled: this.model.disabled,
                warningTitle: BI.i18nText("BI-Basic_Please_Do_Detail_Setting"),
                belowMouse: true,
                itemsCreator: function (op, callback) {
                    var data = BI.extend({
                        floors: BI.size(BI.keys(self.model.dimensions))
                    }, op);
                    if (BI.isNull(self.model.filteredWidgetConfig)) return;

                    BI.Utils.getWidgetDataByWidgetInfo(self.model.filteredWidgetConfig, function (data) {
                        if (BI.contains([BI.TreeView.REQ_TYPE_ADJUST_DATA, BI.TreeView.REQ_TYPE_SELECT_DATA], op.type)) {
                            callback(data.items);
                        } else {
                            callback(data);
                        }
                    }, {treeOptions: data}, {sync: op.type === BI.TreeView.REQ_TYPE_ADJUST_DATA});
                },
                listeners: [{
                    eventName: BI.MultiSelectTree.EVENT_CHANGE,
                    action: function () {
                        self.fireEvent("EVENT_CHANGE", self.getValue());
                    }
                }]
            };
        },

        mounted: function () {
            this.treeList.setSelectedValue(this.model.value);
            this.treeList.populate();
        },

        reset: function () {
            this.setValue();
        },

        getValue: function () {
            return this.treeList.getValue();
        },

        setValue: function (v) {
            this.treeList.setSelectedValue(v);
            this.populate();
        },

        populate: function () {
            this.treeList.setSelectedValue(this.model.value);
            this.treeList.populate();
        }
    });
    BI.shortcut("bi.tree_list_control", Widget);
})();
!(function () {
    var WidgetsRenderService = BI.inherit(BI.OB, {
        _init: function () {
            this._widgets = {};
            this._populate = {};
            this._resize = {};

            // 等待刷新的组件队列
            this._waitingWidgets = [];
            // 处理完的组件队列
            this._completedWidgets = [];

            this._scrollTop = 0;
            this._scrollLeft = 0;
            this._clientWidth = 0;
            this._clientHeihgt = 0;

            this._scrollHandler = BI.debounce(BI.bind(this._onScroll, this), 30);

            this._delay2RefreshWaitingWidgets = BI.debounce(BI.bind(this._refreshWaitingWidgets, this), 500);
        },

        _onScroll: function (scroll) {
            var self = this;
            // this._scrollTop = scroll.scrollTop;
            // this._scrollLeft = scroll.scrollLeft;
            var waiting = this._waitingWidgets.slice();
            this._waitingWidgets = [];
            BI.each(waiting, function (i, wId) {
                self.populateWidget(wId);
            });
        },

        _refreshWaitingWidgets: function () {
            var self = this;
            var waiting = this._waitingWidgets.slice();
            this._waitingWidgets = [];
            BI.each(waiting, function (i, wId) {
                self._populate[wId]();
                self._pushToCompleteList(wId);
            });
            this.allCompleted = true;
        },

        _canWidgetPopulate: function (wId) {
            if (this.allCompleted === true) {
                return true;
            }
            var bounds = BI.Utils.getWidgetBoundsById(wId);
            var region1 = new BI.Region(bounds.left, bounds.top, bounds.width, bounds.height);
            var region2 = new BI.Region(this._scrollLeft, this._scrollTop, this._clientWidth, this._clientHeihgt);
            // 区域是否相交
            if (region1.isIntersects(region2)) {
                return true;
            }
            return false;
        },

        _canWidgetResize: function (wId) {
            return this._completedWidgets.contains(wId);
        },

        _pushToWaitingList: function (wId) {
            BI.remove(this._completedWidgets, wId);
            if (!this._waitingWidgets.contains(wId)) {
                this._waitingWidgets.push(wId);
            }
        },

        _pushToCompleteList: function (wId) {
            BI.remove(this._waitingWidgets, wId);
            if (!this._completedWidgets.contains(wId)) {
                this._completedWidgets.push(wId);
            }
        },

        _shouldPopulateByCheckAutoQuery: function () {
            return !(BI.Utils.isQueryControlExist() && BI.isNull(BI.Utils.getControlFilters()));
        },

        pushWidget: function (wId, widget) {
            this._widgets[wId] = widget;
            this._populate[wId] = BI.debounce(BI.bind(widget.populate, widget), 0);
            this._resize[wId] = BI.debounce(BI.bind(widget.resize, widget), 0);
        },

        populateWidget: function (wId) {
            if (!BI.Utils.isWidgetExistById(wId)) {
                return;
            }
            if (!this._shouldPopulateByCheckAutoQuery()) {
                return;
            }
            if (this._canWidgetPopulate(wId)) {
                this._populate[wId]();
                this._pushToCompleteList(wId);
            } else {
                this._pushToWaitingList(wId);
            }
        },

        resizeWidget: function (wId) {
            if (!BI.Utils.isWidgetExistById(wId)) {
                return;
            }
            if (this._canWidgetResize(wId)) {
                this._resize[wId]();
            }
        },

        setScroll: function (scroll) {
            // this._scrollHandler(scroll);
        },

        resize: function (clientSize) {
            this._clientWidth = clientSize.clientWidth;
            this._clientHeihgt = clientSize.clientHeight;
            this._onScroll();
            this._delay2RefreshWaitingWidgets();
        },

        removeWidget: function (wId) {
            delete this._widgets[wId];
            delete this._populate[wId];
            delete this._resize[wId];
            BI.remove(this._waitingWidgets, wId);
            BI.remove(this._completedWidgets, wId);
        }
    });
    BI.service("bi.service.widgets.render", WidgetsRenderService);
})();!(function () {
    var YearControl = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-year-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;
            var value = {};
            return {
                type: "bi.vertical",
                items: [{
                    type: "bi.dynamic_year_combo",
                    ref: function (_ref) {
                        self.combo = _ref;
                    },
                    value: this.model.value,
                    behaviors: {
                        highlight: function (val) {
                            return value[val] === true;
                        }
                    },
                    listeners: [{
                        eventName: BI.DynamicYearCombo.EVENT_CONFIRM,
                        action: function () {
                            self.fireEvent("EVENT_CHANGE", self.getValue());
                        }
                    }, {
                        eventName: BI.DynamicYearCombo.EVENT_BEFORE_POPUPVIEW,
                        action: function () {
                            BI.Utils.getWidgetDataByWidgetInfo(self.model.widgetConfig, function (data) {
                                if (BI.isNotEmptyArray(data.value)) {
                                    value = BI.makeObject(data.value, true);
                                    self.combo.doBehavior();
                                }
                            });
                        }
                    }]
                }]
            };
        },

        getValue: function () {
            return this.combo.getValue();
        },

        setValue: function (v) {
            this.combo.setValue(v);
        },

        populate: function () {

        },

        reset: function () {
            this.setValue();
        }
    });
    YearControl.EVENT_CONFIRM = "EVENT_CONFIRM";
    BI.shortcut("bi.year_control", YearControl);
})();
!(function () {
    var Widget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-year-month-interval-control"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.filter_control");
        },

        render: function () {
            var self = this;

            var yearMap = {}, monthMap = {};

            return {
                type: "bi.vertical",
                items: [{
                    el: {
                        type: "bi.year_month_interval",
                        value: this.model.value,
                        ref: function (_ref) {
                            self.yearMonthInterval = _ref;
                        },
                        behaviors: {
                            highlight: function (val) {
                                return yearMap[val] === true || monthMap[val] === true;
                            }
                        },
                        listeners: [{
                            eventName: BI.YearMonthInterval.EVENT_CHANGE,
                            action: function () {
                                self.fireEvent("EVENT_CHANGE", self.getValue());
                            }
                        }, {
                            eventName: BI.YearMonthInterval.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                // 伪造成年月控件的请求， value置空
                                BI.Utils.getWidgetDataByWidgetInfo(BI.extend(self.model.widgetConfig, {
                                    type: BICst.DESIGN.WIDGET.MONTH,
                                    value: null
                                }), function (data) {
                                    if (BI.isNotEmptyArray(data.year)) {
                                        yearMap = BI.makeObject(data.year, true);
                                    }
                                    if (BI.isNotEmptyArray(data.month)) {
                                        monthMap = BI.makeObject(data.month, true);
                                    }
                                    if (BI.isNotEmptyArray(data.year) || BI.isNotEmptyArray(data.month)) {
                                        self.yearMonthInterval.doBehavior();
                                    }
                                });
                            }
                        }]
                    },
                    height: 24
                }]
            };
        },

        getValue: function () {
            return this.yearMonthInterval.getValue();
        },

        setValue: function (v) {
            this.yearMonthInterval.setValue(v);
        },

        populate: function () {

        },

        reset: function () {
            this.setValue();
        }
    });
    BI.shortcut("bi.year_month_interval_control", Widget);
})();
/**
 * Create by xiaofu.qin {2018/1/12}
 * description:
 */

!(function () {

    var obj = {};
    // 获取图形属性的默认值的方法
    BI.extend(obj, {
        /**
         * 形状为自动的时候，给某一个指标字段设置具体的chartType
         * http://www.finedevelop.com/pages/viewpage.action?pageId=15329273
         */
        getAutoChartType: function (view) {
            var dims = [], measures = [], dateDims = [],
                addDims = BI.concat(view[BICst.REGION.TARGET1], view[BICst.REGION.DIMENSION1]);

            BI.each(addDims, function (idx, dId) {
                if (BI.Utils.isTargetById(dId)) {
                    measures.push(dId);
                } else if (BI.Utils.getDimensionTypeById(dId) === BICst.DESIGN.DIMENSION_TYPE.DATE) {
                    dims.push(dId);
                    dateDims.push(dId);
                } else {
                    dims.push(dId);
                }
            });
            if (BI.isEmptyArray(measures) && BI.isEmptyArray(dims)) {
                return BICst.CHART.ATTR.CHART_TYPE.SQUARE;
            } else if (BI.isEmptyArray(measures) && BI.isNotEmptyArray(dims)) {
                return BICst.CHART.ATTR.CHART_TYPE.TEXT;
            } else if (BI.isNotEmptyArray(measures) && BI.isEmptyArray(dims)) {
                return BICst.CHART.ATTR.CHART_TYPE.POINT;
            } else if (BI.isNotEmptyArray(measures) && BI.isNotEmptyArray(dateDims)) {
                return BICst.CHART.ATTR.CHART_TYPE.LINE;
            } else {
                return BICst.CHART.ATTR.CHART_TYPE.INTERVAL;
            }
        },

        getEntireAttrSetting: function (widget) {
            var self = this;
            var dimensions = widget.dimensions;
            var basicSettings = this._getOriginEntireSetting();
            var chartAttr = {};

            BI.each(widget.settings.chartAttr, function (geomId, geomSettings) {
                if (geomSettings) {
                    chartAttr[geomId] = geomSettings;
                }
            });

            // 更改type
            basicSettings.type = this.getAutoChartType(widget.view);

            // 设置颜色
            var colors = BI.Utils.getActualChartColor();
            basicSettings.color.dimension.colors = colors.slice();

            BI.each(basicSettings, function (attrName, attrValue) {
                if (BI.isArray(attrValue.dimensionIds)) {
                    var isSame = self.isAllMeasureHasSameField(chartAttr, dimensions, attrName);
                    if (isSame) {
                        var geomSettings = BI.values(chartAttr)[0];
                        var dims = geomSettings[attrName] && geomSettings[attrName].dimensionIds || [];
                        attrValue.dimensionIds = BI.map(dims, function (idx, dId) {
                            return self.addDimensions(dimensions, dId);
                        });
                    }
                }
            });

            return basicSettings;
        },

        // 获取默认的“全部”面板上的配置
        _getOriginEntireSetting: function () {
            var symbols = BI.Constants.getConstant("bi.constant.design.chart.popup.symbols").GEOMETRIC,
                symbolSetting = BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.symbol_setting")),
                label = BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.label_setting"));

            symbolSetting.symbols = BI.map(symbols, function (idx, item) {
                return item.value;
            });

            return {
                dimensionId: "",
                // 默认的形状为自动
                type: BICst.WORDS.AUTO,
                // 图形类型combo的value，不过后台不需要用它
                selectedType: "auto",
                color: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.color_setting")),
                heatColor: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.heat_color_setting")),
                label: label,
                tooltip: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.tooltip_setting")),
                size: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.size_setting")),
                pieAngle: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.no_popup_attr_setting")),
                symbol: symbolSetting,
                lineConnect: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.line_connect_setting")),
                text: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.text_setting")),
                // 细粒度
                granularity: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.no_popup_attr_setting")),
                gaugeType: BICst.CHART.ATTR.GAUGE_TYPE.POINT_GAUGE,
                gaugeMaxValue: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.gauge_max_value_setting")),
                gaugePointNumber: BI.deepClone(BI.Constants.getConstant("bi.constant.design.chart.attr.no_popup_attr_setting"))
            };
        },

        getBasicAttrSetting: function (widget) {
            return {
                dimensionId: "",
                // 默认的形状为自动
                type: this.getAutoChartType(widget.view),
                // 图形类型combo的value，不过后台不需要用它
                selectedType: "auto",
                color: {
                    dimensionIds: []
                },
                heatColor: {
                    dimensionIds: []
                },
                label: {
                    dimensionIds: []
                },
                tooltip: {
                    dimensionIds: [],
                    forecastKey: BI.i18nText("BI-Design_Predict")
                },
                size: {
                    dimensionIds: []
                },
                pieAngle: {
                    dimensionIds: []
                },
                symbol: {
                    dimensionIds: []
                },
                lineConnect: {
                    dimensionIds: []
                },
                text: {
                    dimensionIds: [],
                    defaultContent: BI.i18nText("BI-Design_Text")
                },
                // 细粒度
                granularity: {
                    dimensionIds: []
                },
                gaugeType: BICst.CHART.ATTR.GAUGE_TYPE.POINT_GAUGE,
                gaugeMaxValue: {
                    dimensionIds: []
                },
                gaugePointNumber: {
                    dimensionIds: []
                }
            };
        },

        // 为已存在的图形属性设置颜色相关的属性
        setChartStyleToGeomSettings: function (widget) {
            var chartAttr = widget.settings.chartAttr;
            var colors = BI.Utils.getActualChartColor();

            BI.each(chartAttr, function (geomId, geomSettings) {
                var color = geomSettings.color;
                if (color.dimension && color.dimension.auto) {
                    color.dimension.colors = colors.slice();
                }
            });
        },

        isAttrSettingEmpty: function (setting) {
            // 先对所有含dimensionIds的属性进行判断，之后可能有所调整
            var checkKeys = ["color", "heatColor", "label", "tooltip", "size", "pieAngle", "symbol", "lineConnect", "text", "granularity", "gaugeMaxValue", "gaugePointNumber"];
            return !BI.any(BI.keys(setting), function (idx, key) {
                return BI.isArray(setting[key].dimensionIds) && !BI.isEmpty(setting[key].dimensionIds);
            });

        },

        //颜色&形状面板 指标字段 自定义默认区间
        getCustomMeasureRange: function (geomId, targetId, callback) {
            var widgetSetting = BI.Utils.getWidgetById(BI.Utils.getWidgetIdBydId(targetId));
            var self = this;

            // “全部”面板上获取range与在各指标上获取的range不一致的问题
            if (geomId === BICst.WORDS.ENTIRE) {
                var chartAttr = widgetSetting.settings.chartAttr;
                geomId = BI.findKey(chartAttr, function (id) {
                    return id !== BICst.WORDS.ENTIRE && id !== BICst.WORDS.GRAPHIC;
                });
            }

            BI.Utils.getTargetRangeWidthDimensions({
                widgetBean: widgetSetting,
                targetId: targetId,
                geomId: geomId
            }, function (data) {
                var minMaxObj = self._getMinMaxObj(data);
                // ajax 的stateCode为500也会走complete回调，处理一下
                if (!BI.isPlainObject(minMaxObj) || data.code !== "200") {
                    return;
                }
                callback(minMaxObj);
            });
        },

        // 获取维度字段的内容（特殊处理指标名称字段）
        getDimensionFieldData: function (geomId, dId, attrName, callback) {
            var widget = BI.Utils.getWidgetById(BI.Utils.getWidgetIdBydId(dId)),
                view = widget.view,
                measures = this.getMeasureFields(view),
                data;

            if (BI.Utils.isTargetNameFieldById(dId)) {
                data = BI.map(measures, function (idx, dId) {
                    return BI.Utils.getDimensionNameById(dId);
                });
                return BI.isFunction(callback) && callback(data);
            } else if (BI.Utils.isClusterDimById(dId)) {
                data = BI.map(BI.makeArray(widget.dataMining.cluster, 1), function (idx) {
                    return idx;
                });
                return BI.isFunction(callback) && callback(data);
            }

            // “全部”面板上获取range与在各指标上获取的range不一致的问题
            if (geomId === BICst.WORDS.ENTIRE) {
                geomId = measures[0];
                dId = widget.settings.chartAttr[geomId][attrName].dimensionIds[0];
            }

            BI.Utils.getDimensionDomain({
                dimensionId: dId,
                widgetBean: widget,
                geomId: geomId
            }, function (response) {
                var data = response && response.data && response.data.data;
                if (response.code === "200") {
                    BI.isFunction(callback) && callback(data);
                }
            });
        },

        _getMinMaxObj: function (response) {
            var minMaxObj = response && response.data && response.data.value;
            // ajax 的stateCode为500也会走complete回调，处理一下
            if (!BI.isPlainObject(minMaxObj)) {
                return;
            }

            // BI-27657 无穷小的问题
            Math.abs(minMaxObj.min) < 1e-6 && (minMaxObj.min = 0);
            Math.abs(minMaxObj.max) < 1e-6 && (minMaxObj.max = 0);
            return minMaxObj;
        }
    });

    // 更新删除图形属性的方法
    BI.extend(obj, {
        /**
         * 指标字段数量发生变化，更新chartAttr的值。
         */
        geomsChanged: function (widget, chartAttr) {
            var measures = this.getMeasureFields(widget.view),
                originMeasures = BI.filter(BI.keys(chartAttr), function (idx, geomId) {
                    return geomId !== BICst.WORDS.ENTIRE && geomId !== BICst.WORDS.GRAPHIC;
                }),
                diffObj = this.getDiffDims(measures, originMeasures);

            BI.isNotEmptyArray(diffObj.removedDims) && this.removeAttrSettings(widget, chartAttr, diffObj.removedDims);
            BI.isNotEmptyArray(diffObj.addedDims) && this.addAttrSettings(widget, chartAttr, diffObj.addedDims);
        },

        /**
         * 横纵轴指标字段数量变化导致图形指标所在轴发生变化的处理。
         */
        geomRegionChanged: function (widget, chartAttr) {
            var dimensions = widget.dimensions,
                newMeasures = this.getMeasureFields(widget.view),
                oldMeasures = BI.filter(BI.keys(chartAttr), function (idx, geomId) {
                    return geomId !== BICst.WORDS.ENTIRE && geomId !== BICst.WORDS.GRAPHIC;
                }),
                self = this,
                entireSettings = chartAttr[BICst.WORDS.ENTIRE];

            // 处理相同字段的属性继承
            BI.each(newMeasures, function (idx, geomId) {
                BI.some(oldMeasures, function (idx, oldGeomId) {
                    if (self.isDimensionNotEquals(dimensions, geomId, oldGeomId)) {
                        return false;
                    }
                    var geomSettings = BI.deepClone(chartAttr[oldGeomId]);

                    if (oldGeomId === geomId) {
                        geomSettings = self.inheritGeomSettingsFromEntireGeom(widget, entireSettings, geomId);
                        chartAttr[geomId] = geomSettings;
                    } else {
                        geomSettings = self._replaceGeomDimensions(geomSettings, dimensions);
                        geomSettings.dimensionId = geomId;
                        Fix.set(chartAttr, geomId, geomSettings);
                    }
                    return true;
                });
            });

            BI.each(newMeasures, function (idx, geomId) {
                if (!BI.has(chartAttr, geomId)) {
                    var geomSettings = self.inheritGeomSettingsFromEntireGeom(widget, entireSettings, geomId);
                    Fix.set(chartAttr, geomId, geomSettings);
                }
            });

            this.setNewRichTextContent(widget, chartAttr);
        },

        /**
         * 横纵轴字段交换处理
         */
        switchAxis: function (widget, chartAttr) {
            function isNeedAssignGeomSettings () {
                return !BI.isEqual(measureFields, originalMeasureFields)
                    && BI.any(measureFields, function (idx, geomId) {
                        return !BI.has(chartAttr, geomId);
                    });
            }

            var measureFields = this.getMeasureFields(widget.view),
                originalMeasureFields = BI.filter(BI.keys(chartAttr), function (idx, geomId) {
                    return geomId !== BICst.WORDS.ENTIRE && geomId !== BICst.WORDS.GRAPHIC;
                });

            if (isNeedAssignGeomSettings()) {
                this._setEntireSettingsBeforeAdding(chartAttr, widget.dimensions);
                this.geomRegionChanged(widget, chartAttr);
            }
        },

        /**
         * 添加指标字段settings
         */
        addAttrSettings: function (widget, chartAttr, measureFieldIds, options) {
            options = BI.extend({
                // 指标字段所在轴是否发生了变化
                isGeomRegionChanged: false
            }, options || {});

            var self = this,
                dimensions = widget.dimensions,
                originGeomIds = BI.keys(chartAttr),
                addedMeasureFields = BI.filter(measureFieldIds, function (idx, geomId) {
                    return !BI.contains(originGeomIds, geomId);
                });

            BI.isNotEmptyArray(addedMeasureFields) && this._setEntireSettingsBeforeAdding(chartAttr, dimensions);

            BI.each(addedMeasureFields, function (index, dimensionId) {
                self._addAttrSetting(widget, chartAttr, dimensionId, options);
            });

            BI.each(chartAttr, function (geomId, geomSettings) {
                self._setChartType(geomSettings, widget.view);
            });

            this.setNewRichTextContent(widget, chartAttr);
        },

        removeAttrSettings: function (widget, chartAttr, removedFields) {
            var self = this;

            // 删除已经拖走的指标字段的setting
            BI.each(removedFields, function (idx, dId) {
                self._removeMeasureFieldSetting(widget, chartAttr, dId);
            });

            this._setEntireSettingsAfterRemoving(widget, chartAttr);
            BI.each(chartAttr, function (geomId, geomSettings) {
                self._setChartType(geomSettings, widget.view);
            });

            this.setNewRichTextContent(widget, chartAttr);
        },

        /**
         * 删除横纵轴上没有的但是在chartAttr中存在的配置
         */
        delGeomSettings: function (widget, chartAttr, geomId) {
            this._removeGeomDimensions(chartAttr[geomId], widget.dimensions);
            Fix.del(chartAttr, geomId);
        },

        /**
         * 图形属性中新添加一个字段，刚拖进来的指标字段一定继承自“全部”面板里面的属性
         */
        _addAttrSetting: function (widget, chartAttr, dimensionId) {
            var entireSettings = chartAttr[BICst.WORDS.ENTIRE],
                newGeomSettings = this.inheritGeomSettingsFromEntireGeom(widget, entireSettings, dimensionId);

            Fix.set(chartAttr, dimensionId, newGeomSettings);
        },

        /**
         * 移除指标字段的时候删除当前的setting
         */
        _removeMeasureFieldSetting: function (widget, chartAttr, dimensionId) {
            var dimensions = widget.dimensions,
                measureSetting = chartAttr[dimensionId];

            function _isRegionHasJustOneMeasure () {
                var keys = BI.keys(chartAttr);
                return keys.length === 3
                    && BI.contains(keys, BICst.WORDS.GRAPHIC)
                    && BI.contains(keys, BICst.WORDS.ENTIRE);
            }

            if (_isRegionHasJustOneMeasure()) {
                // 如果当前删除的是最后一个指标字段，那么将该指标字段的值赋给graphic
                this._mergeAttrSettings(chartAttr[BICst.WORDS.GRAPHIC], measureSetting, dimensions);

                // 将graphic里面的dimensionId置为空
                chartAttr[BICst.WORDS.GRAPHIC].dimensionId = "";
            }
            this._removeGeomDimensions(measureSetting, dimensions);
        },

        _mergeAttrSettings: function (attrTarget, attrSource, dimensions) {
            this._removeGeomDimensions(attrTarget, dimensions);

            BI.deepExtend(attrTarget, attrSource);

            this._replaceGeomDimensions(attrSource, dimensions);
            return attrTarget;
        },

        // 添加字段之前先对entire的属性字段进行比较赋值
        _setEntireSettingsBeforeAdding: function (chartAttr, dimensions) {
            var entireGeomSetting = chartAttr[BICst.WORDS.ENTIRE];
            var self = this;

            function _regionHasNotMeasure () {
                var keys = BI.keys(chartAttr);
                var names = [BICst.WORDS.GRAPHIC, BICst.WORDS.ENTIRE];
                return BI.isEqual(keys.sort(), names.sort());
            }

            function _regionHasOneMeasure () {
                var keys = BI.keys(chartAttr);
                return keys.length === 3
                    && BI.contains(keys, BICst.WORDS.GRAPHIC)
                    && BI.contains(keys, BICst.WORDS.ENTIRE);
            }

            // 在未拖进字段之前横纵轴上无指标字段，则需要将graphic合并到entire中
            if (_regionHasNotMeasure()) {
                entireGeomSetting = this._mergeAttrSettings(entireGeomSetting, chartAttr[BICst.WORDS.GRAPHIC], dimensions);
            }
            else if (_regionHasOneMeasure()) {
                var geomSetting = BI.find(chartAttr, function (geomId) {
                    return geomId !== BICst.WORDS.ENTIRE && geomId !== BICst.WORDS.GRAPHIC;
                });

                entireGeomSetting = this._mergeAttrSettings(chartAttr[BICst.WORDS.ENTIRE], geomSetting, dimensions);
            }
            // 有大于一个的指标字段
            else {
                this._removeGeomDimensions(entireGeomSetting, dimensions);

                BI.each(entireGeomSetting, function (attrName, attrSettings) {
                    if (!BI.isArray(attrSettings.dimensionIds)) {
                        return;
                    }
                    var isAllGeomHasSameDims = self.isAllMeasureHasSameField(chartAttr, dimensions, attrName);
                    var dimensionIds = attrSettings.dimensionIds;
                    if (!isAllGeomHasSameDims) {
                        BI.each(dimensionIds, function (idx, dId) {
                            self.removeDimensions(dimensions, dId);
                        });
                        dimensionIds.splice(0, dimensionIds.length);
                        return;
                    }

                    var geomSettings = BI.find(chartAttr, function (geomId, geomSettings) {
                        return geomId !== BICst.WORDS.GRAPHIC && geomId !== BICst.WORDS.ENTIRE;
                    });
                    dimensionIds = geomSettings[attrName].dimensionIds;

                    attrSettings.dimensionIds = BI.map(dimensionIds, function (idx, dId) {
                        return self.addDimensions(dimensions, dId);
                    });
                });
            }

            this._removeGeomDimensions(chartAttr[BICst.WORDS.GRAPHIC], dimensions);

            chartAttr[BICst.WORDS.GRAPHIC].dimensionId = "";
            entireGeomSetting.dimensionId = "";
            return entireGeomSetting;
        },

        // 删除字段之后对entire的属性字段进行比较赋值
        _setEntireSettingsAfterRemoving: function (widget, chartAttr) {
            var entireSettings = chartAttr[BICst.WORDS.ENTIRE],
                self = this,
                dimensions = widget.dimensions,
                measureFields = this.getMeasureFields(widget.view),
                newAttr = {};

            // 当前横纵轴上的字段少于两个的时候不作处理
            if (measureFields.length < 2) {
                return entireSettings;
            }

            this._removeGeomDimensions(entireSettings, dimensions);

            BI.each(chartAttr, function (geomId, geomSettings) {
                BI.contains(measureFields, geomId) && (newAttr[geomId] = geomSettings);
            });

            BI.each(entireSettings, function (attrName, attrSettings) {
                if (!BI.isArray(attrSettings.dimensionIds)) {
                    return;
                }
                var isAllGeomHasSameDims = self.isAllMeasureHasSameField(newAttr, dimensions, attrName);
                if (!isAllGeomHasSameDims) {
                    return;
                }

                var geomSettings = BI.find(newAttr, function (geomId, geomSettings) {
                    return geomId !== BICst.WORDS.GRAPHIC && geomId !== BICst.WORDS.ENTIRE;
                });
                var dimensionIds = geomSettings[attrName].dimensionIds;

                attrSettings.dimensionIds = BI.map(dimensionIds, function (idx, dId) {
                    return self.addDimensions(dimensions, dId);
                });
            });

            return entireSettings;
        },

        _setChartType: function (geomSettings, view) {
            var originType = geomSettings.type;

            if (geomSettings.selectedType === BICst.WORDS.AUTO
                || geomSettings.selectedType === BICst.WORDS.MULTI) {
                geomSettings.type = this.getAutoChartType(view);
                geomSettings.selectedType = BICst.WORDS.AUTO;
            }

            // type发生变化，转移字段
            var service = BI.Services.getService("bi.service.design.chart.attr.chart_type_combo");
            service.transferFields(geomSettings, geomSettings.type, originType);

            return geomSettings;
        },

        // 删除某一个指标字段的dimensionIds
        _removeGeomDimensions: function (geomSettings, dimensions) {
            var self = this;
            BI.each(geomSettings, function (attrName, attrSettings) {
                if (BI.isNotNull(attrSettings) && BI.isNotEmptyArray(attrSettings.dimensionIds)) {
                    BI.each(attrSettings.dimensionIds, function (idx, dId) {
                        self.removeDimensions(dimensions, dId);
                    });
                    attrSettings.dimensionIds = [];
                }
            });

            return geomSettings;
        },

        // 替换某一个指标字段的所有dimensionIds
        _replaceGeomDimensions: function (geomSettings, dimensions) {
            var self = this;
            BI.each(geomSettings, function (attrName, attrSettings) {
                if (BI.isArray(attrSettings.dimensionIds)) {
                    attrSettings.dimensionIds = BI.map(attrSettings.dimensionIds, function (idx, dId) {
                        return self.addDimensions(dimensions, dId);
                    });
                }
            });

            return geomSettings;
        },

        setNewRichTextContent: function (widget, chartAttr) {
            var richTextService = BI.Services.getService("bi.service.design.chart.attr.rich_text");
            var dimensions = widget.dimensions;
            var view = widget.view;

            function getContent (dimensions, dimensionIds, content) {
                content = richTextService.replaceFieldId(dimensions, dimensionIds, content);
                return richTextService.dealMissingFields(dimensions, dimensionIds, content);
            }

            BI.each(chartAttr, function (geomId, geomSettings) {
                var tooltip = geomSettings.tooltip, label = geomSettings.label, text = geomSettings.text;
                var content = tooltip.content;
                var dimensionIds;

                if (BI.isNotNull(content)) {
                    dimensionIds = richTextService.getTooltipParamDims(chartAttr, view, geomId, {
                        isDuplication: true
                    });
                    tooltip.content = getContent(dimensions, dimensionIds, content);
                }

                content = label.content;
                dimensionIds = label.dimensionIds;
                if (BI.isNotNull(content)) {
                    label.content = getContent(dimensions, dimensionIds, content);
                }

                content = label.content;
                dimensionIds = text.dimensionIds;
                if (BI.isNotNull(content)) {
                    text.content = getContent(dimensions, dimensionIds, content);
                }

            });
        },

        // 添加一个指标字段的时候，从"全部"上继承属性
        inheritGeomSettingsFromEntireGeom: function (widget, entireSettings, newGeomId) {
            var newGeomSettings = this.getBasicAttrSetting(widget);
            var defaultGeomSettings = this.getEntireAttrSetting(widget);

            newGeomSettings.dimensionId = newGeomId;
            newGeomSettings.type = entireSettings.type;
            newGeomSettings.selectedType = entireSettings.selectedType;

            this._inheritAttrDims(widget, entireSettings, newGeomSettings);
            this._inheritColorSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritHeatColorSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritLabelSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritTooltipSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritLineSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritTextSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritGaugeMaxValueSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritSymbolSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);
            this._inheritSizeSettings(widget, entireSettings, newGeomSettings, defaultGeomSettings);

            return newGeomSettings;
        },

        _inheritDetailAttrSettings: function (widget, defaultGeomSettings, entireGeomSettings, newGeomSettings, attrName, inheritedKeys) {
            inheritedKeys = BI.isArray(inheritedKeys) ? inheritedKeys : [inheritedKeys];

            BI.each(inheritedKeys, function (idx, key) {
                // 与默认设置不一致才去set
                if (!BI.isEqual(entireGeomSettings[attrName][key], defaultGeomSettings[attrName][key])) {
                    newGeomSettings[attrName][key] = BI.deepClone(entireGeomSettings[attrName][key]);
                }
            });

            return newGeomSettings;
        },

        _inheritAttrDims: function (widget, entireSettings, newGeomSettings) {
            var self = this,
                dimensions = widget.dimensions;

            BI.each(entireSettings, function (attrName, attrSettings) {
                if (BI.isArray(attrSettings.dimensionIds)) {
                    newGeomSettings[attrName].dimensionIds = BI.map(attrSettings.dimensionIds, function (idx, dId) {
                        return self.addDimensions(dimensions, dId);
                    });
                }
            });

            return newGeomSettings;
        },

        _inheritColorSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["opacity", "isUserDefinedOpacity", "gradient", "borderColor", "overlayEffect"];
            var attrDim = newGeomSettings.color.dimensionIds[0];
            var isTargetDim = BI.Utils.isTargetById(attrDim);

            if (BI.isNull(attrDim)) {
                inheritedKeys.push("nonField");
            } else if (isTargetDim) {
                inheritedKeys.push("measure");
            } else {
                inheritedKeys.push("dimension");
            }

            if (newGeomSettings.type === BICst.CHART.ATTR.CHART_TYPE.GAUGE) {
                inheritedKeys.push("gauge");
            }

            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "color", inheritedKeys);
        },

        _inheritHeatColorSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["opacity", "name", "autoInterval", "count", "custom", "colors"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "heatColor", inheritedKeys);
        },

        _inheritLabelSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["valid", "hasModified", "content", "position", "showWay", "allowOverlap", "autoAdjust"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "label", inheritedKeys);
        },

        _inheritTooltipSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["hasModified", "content", "background", "shared"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "tooltip", inheritedKeys);
        },

        // 连线属性
        _inheritLineSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["convert2Radar", "line", "marker"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "lineConnect", inheritedKeys);
        },

        _inheritTextSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["hasModified", "content"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "text", inheritedKeys);
        },

        _inheritGaugeMaxValueSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["auto", "value", "valid"];
            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "gaugeMaxValue", inheritedKeys);
        },

        _inheritSymbolSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["symbolType", "symbol", "symbols"];
            if (BI.Utils.isTargetById(newGeomSettings.symbol.dimensionIds[0])) {
                inheritedKeys.push("measure");
            }

            return this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "symbol", inheritedKeys);
        },

        _inheritSizeSettings: function (widget, entireSettings, newGeomSettings, defaultGeomSettings) {
            var inheritedKeys = ["hasModified", "lastSliderPosition"];
            var ignoreKeys = BI.concat(inheritedKeys, ["dimensionIds"]);
            var sizeService = BI.Services.getService("bi.service.design.chart.attr.size_setting");
            var detailSizeName = sizeService.getDetailSizeNameByChartType(newGeomSettings.type);

            newGeomSettings = this._inheritDetailAttrSettings(widget, defaultGeomSettings, entireSettings, newGeomSettings, "size", inheritedKeys);

            // 大小值已经发生了变化，获取当前图表类型对应的大小值
            if (newGeomSettings.size.lastSliderPosition > -1 && detailSizeName) {
                var options = this.getSizeOptions(widget, newGeomSettings.dimensionId);

                var newSize = sizeService.getCurrentSizeObject(entireSettings.size, newGeomSettings.size, newGeomSettings.type, options);
                var sizeRangesObj = sizeService.getSizeRangeByChartType(newGeomSettings.type, options);
                var sizeValue = this.getDeepObjValue(newSize, detailSizeName);

                if (sizeValue.isExist) {
                    sizeValue = sizeService.sizeRangeMapping([0, 1], sizeRangesObj.targetRange, sizeValue.value);
                } else {
                    sizeValue = newGeomSettings.size.lastSliderPosition;
                }

                this.deepAssign(newSize, detailSizeName, sizeValue);
                newGeomSettings.size = BI.extend(newGeomSettings.size, newSize);
            }

            return newGeomSettings;
        },

        getSizeOptions: function (widget, geomId) {
            var view = widget.view,
                wId = widget.wId;

            return {
                isEntirePane: geomId === BICst.WORDS.ENTIRE,
                isOnlyDimsInOppositeRegion: this.isOnlyDimsInOppositeRegion(view, geomId),
                isFieldsInRegion: this.isFieldsInRegion(wId),
                isOnlyDimsInSomeRegion: this.isOnlyDimsInSomeRegion(wId),
                isOnlyDimsInRegion: this.isOnlyDimsInRegion(wId),
                isMeasuresInRegion: this.isMeasuresInRegion(wId),
                isRegionSuit4Map: this.isRegionSuit4Map(wId),
                isAnyMeasureInRegion: this.isAnyMeasureInRegion(wId)
            };
        },

        // 图表类型发生变化或者横纵轴上的字段数量发生变化，大小属性的值范围就有可能发生变化，在这里处理值范围的变化
        changeSizeValueRange: function (widget, chartAttr) {
            var sizeService = BI.Services.getService("bi.service.design.chart.attr.size_setting");

            BI.each(chartAttr, function (geomId, geomSettings) {
                if (geomId === BICst.WORDS.ENTIRE) {
                    return;
                }
                if (sizeService.isNeedResetSizeObject(widget, geomSettings)) {
                    sizeService.resetSizeObject(chartAttr, geomId);
                }
            });
        }
    });

    // 有关横纵轴上字段统计的方法
    BI.extend(obj, {
        _isMeasureFieldIterator: function () {
            return function (idx, did) {
                return BI.Utils.isTargetById(did);
            };
        },

        /**
         * 当前指标所在轴向垂直的轴仅有维度字段，返回true，否则返回false
         */
        isOnlyDimsInOppositeRegion: function (view, geomId) {
            // todo: graphic面板怎么处理？
            // “全部”时则使用起一个指标字段来代替
            if (geomId === BICst.WORDS.ENTIRE) {
                var measures = this.getMeasureFields(view);
                geomId = measures[0];
            }
            var region = BI.contains(view[BICst.REGION.DIMENSION1], geomId) ? view[BICst.REGION.TARGET1] : view[BICst.REGION.DIMENSION1];

            return BI.isNotEmptyArray(region) && !BI.any(region, this._isMeasureFieldIterator());
        },

        /**
         * 判断横纵轴上是否有字段, 有 true， 无 false
         */
        isFieldsInRegion: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId);
            return BI.isNotEmptyArray(view[BICst.REGION.TARGET1]) || BI.isNotEmptyArray(view[BICst.REGION.DIMENSION1]);
        },

        /**
         * 判断横纵轴中的其中一个轴是否仅有维度字段， 满足条件返回true，反之返回false
         */
        isOnlyDimsInSomeRegion: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId);

            var isOnlyDimsOnVAxis = BI.isNotEmptyArray(view[BICst.REGION.TARGET1])
                && !BI.any(view[BICst.REGION.TARGET1], this._isMeasureFieldIterator());
            var isOnlyDimsOnHAxis = BI.isNotEmptyArray(view[BICst.REGION.DIMENSION1])
                && !BI.any(view[BICst.REGION.DIMENSION1], this._isMeasureFieldIterator());

            return isOnlyDimsOnHAxis && !isOnlyDimsOnVAxis
                || !isOnlyDimsOnHAxis && isOnlyDimsOnVAxis;
        },

        /**
         * 判断横纵轴上是否仅有维度字段
         * 只有維度字段 true， 反之false
         */
        isOnlyDimsInRegion: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId),
                dimensionIds = BI.concat(view[BICst.REGION.TARGET1], view[BICst.REGION.DIMENSION1]);

            return BI.isNotEmptyArray(dimensionIds) && !BI.any(dimensionIds, this._isMeasureFieldIterator());
        },

        /**
         * 判断横纵轴上是否有指标字段
         * 有指标字段 true， 反之false
         */
        isAnyMeasureInRegion: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId);
            var dimensionIds = BI.concat(view[BICst.REGION.TARGET1], view[BICst.REGION.DIMENSION1]);
            return BI.isNotEmptyArray(dimensionIds) && BI.any(dimensionIds, this._isMeasureFieldIterator());
        },

        /**
         * 横纵轴上都有指标 || 横纵轴其中一轴有指标，另一轴无字段
         * 满足条件的时候为true， 反之为false
         */
        isMeasuresInRegion: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId),
                vAxis = view[BICst.REGION.DIMENSION1],
                hAxis = view[BICst.REGION.TARGET1];

            var isVAxisHasMeasure = BI.some(vAxis, this._isMeasureFieldIterator());
            var isHAxisHasMeasure = BI.some(hAxis, this._isMeasureFieldIterator());

            return isVAxisHasMeasure && isHAxisHasMeasure
                || isVAxisHasMeasure && BI.isEmptyArray(hAxis)
                || isHAxisHasMeasure && BI.isEmptyArray(vAxis);
        },

        /**
         * 获取当前横纵轴上的所有字段中可以放置到图形属性里面的指标字段
         */
        getMeasureFields: function (view) {
            var hAxisFields = view[BICst.REGION.DIMENSION1],
                vAxisFields = view[BICst.REGION.TARGET1];

            // 横轴上的指标字段个数
            hAxisFields = BI.filter(hAxisFields, this._isMeasureFieldIterator());
            // 纵轴上的指标字段的个数
            vAxisFields = BI.filter(vAxisFields, this._isMeasureFieldIterator());

            return vAxisFields.length >= hAxisFields.length ? vAxisFields : hAxisFields;
        },

        /**
         * 判断横纵轴上的字段是否适合绘制地图。
         * true：横纵轴上只有地理角色字段以及一般的维度字段，横轴有一个经度，纵轴有一个维度。
         */
        isRegionSuit4Map: function (wId) {
            function classifyFields(array) {
                var measureFields = [], longitudeFields = [], latitudeFields = [];
                BI.each(array, function (idx, dId) {
                    if (BI.Utils.isLongitudeDimension(dId) || BI.Utils.isLongitudeTarget(dId)) {
                        longitudeFields.push(dId);
                    } else if (BI.Utils.isLatitudeDimension(dId) || BI.Utils.isLatitudeTarget(dId)) {
                        latitudeFields.push(dId);
                    } else if (BI.Utils.isTargetById(dId)) {
                        measureFields.push(dId);
                    }
                });

                return {
                    longitudeFields: longitudeFields,
                    latitudeFields: latitudeFields,
                    measureFields: measureFields
                };
            }

            // 维度地理字段必须是同属于一个fieldId；指标地理字段必须都是指标字段
            function isPairedGeoDims (hRegionGeoDims, vRegionGeoDim) {
                var longitudeFieldId = BI.Utils.getFieldIdBydId(hRegionGeoDims.longitudeFields[0]),
                    latitudeFieldId = BI.Utils.getFieldIdBydId(vRegionGeoDim.latitudeFields[0]);

                return BI.Utils.isLongitudeTarget(hRegionGeoDims.longitudeFields[0])
                    && BI.Utils.isLatitudeTarget(vRegionGeoDim.latitudeFields[0])
                    || BI.Utils.isLongitudeDimension(hRegionGeoDims.longitudeFields[0])
                    && BI.Utils.isLatitudeDimension(vRegionGeoDim.latitudeFields[0])
                    && longitudeFieldId === latitudeFieldId;
            }

            var view = BI.Utils.getWidgetViewById(wId),
                hResult, vResult;

            // 横轴必须有一个经度的地理角色字段，>=0 个维度字段，=0个指标字段
            var hRegionObj = classifyFields(view[BICst.REGION.DIMENSION1]);
            // 纵轴必须有一个纬度的地理角色字段，>=0 个维度字段，=0个指标字段
            var vRegionObj = classifyFields(view[BICst.REGION.TARGET1]);

            hResult = hRegionObj.longitudeFields.length === 1
                && hRegionObj.latitudeFields.length === 0
                && hRegionObj.measureFields.length === 0;

            vResult = vRegionObj.latitudeFields.length === 1
                && vRegionObj.longitudeFields.length === 0
                && vRegionObj.measureFields.length === 0;

            return hResult && vResult && isPairedGeoDims(hRegionObj, vRegionObj);
        }
    });

    // facet有关的统计方法
    BI.extend(obj, {
        // 获取当前图形指标字段所在轴
        getGeomRegionType: function (view) {
            var measures = this.getMeasureFields(view);
            if (measures.length === 0) {
                return BICst.CHART.MEASURE_TO_GEOMS.NONE;
            } else if (BI.contains(view[BICst.REGION.TARGET1], measures[0])) {
                return BICst.CHART.MEASURE_TO_GEOMS.V_AXIS;
            }
            return BICst.CHART.MEASURE_TO_GEOMS.H_AXIS;
        }
    });

    // 有关属性面板上字段的统计方法
    BI.extend(obj, {
        /**
         * 判断所有的相同的字段框是否都拖入了字段
         */
        isAllMeasureHasField: function (chartAttr, attrName) {
            var isAllHasField = false;

            BI.some(chartAttr, function (dimensionId, settings) {
                if (dimensionId === BICst.WORDS.ENTIRE || dimensionId === BICst.WORDS.GRAPHIC) {
                    return false;
                }
                if (BI.isEmptyArray(settings[attrName].dimensionIds)) {
                    isAllHasField = false;
                    return true;
                }
            });

            return isAllHasField;
        },

        /**
         * 所有指标字段都拖入了相同的字段，返回true，否则返回false，都未拖入字段的时候也返回false
         */
        isAllMeasureHasSameField: function (chartAttr, dimensions, attrName) {
            function isAttrDisplayed(geomSettings, attrName) {
                return BI.contains(chartAttrsMap[geomSettings.type], attrName);
            }

            var cached,
                result = false,
                self = this,
                measures = BI.filter(BI.keys(chartAttr), function (idx, dId) {
                    return dId !== BICst.WORDS.ENTIRE && dId !== BICst.WORDS.GRAPHIC;
                }),
                chartAttrsMap = BI.Constants.getConstant("bi.constant.design.chart.attr.chart_type_field_box_map"),
                newChartAttr = {};

            // 没有“全部”面板的时候直接返回false
            if (measures.length < 2) {
                return false;
            }

            // BI-28747 筛选出包含attrName的指标
            BI.each(chartAttr, function (geomId, geomSettings) {
                var isMeasureGeom = geomId !== BICst.WORDS.ENTIRE && geomId !== BICst.WORDS.GRAPHIC;
                isMeasureGeom && isAttrDisplayed(geomSettings, attrName) && (newChartAttr[geomId] = geomSettings);
            });

            BI.some(newChartAttr, function (geomId, geomSettings) {
                var dims = geomSettings[attrName] && geomSettings[attrName].dimensionIds || [];
                dims = dims.slice();
                if (!cached) {
                    cached = dims;
                    result = true;
                    return false;
                }

                if (!self.isDimensionArrayEquals(cached, dims)) {
                    result = false;
                    return true;
                }
            });

            return result;
        },

        /**
         * 判断当前的指标字段是否是“全部”对应的指标
         */
        isEntirePane: function (dimensionId) {
            return dimensionId === BICst.WORDS.ENTIRE;
        },

        /**
         * 判断当前的Dimension面板是通过指标生成的
         */
        isDimensionPane: function (dimensionId) {
            return dimensionId === BICst.WORDS.ENTIRE || dimensionId === BICst.WORDS.GRAPHIC;
        },

        /**
         * 判断某一个图形指标属性中是否拖入了维度字段
         * @param geomSetting
         * @param filters {Array} 不需要考虑的属性
         */
        hasAnyDimOnGeomSettings: function (geomSetting, filters) {
            filters = BI.isArray(filters) ? filters : [filters];

            return BI.some(geomSetting, function (name, subSettings) {
                if (BI.contains(filters, name)
                    || !BI.isPlainObject(subSettings)
                    || !BI.isArray(subSettings.dimensionIds)) {
                    return false;
                }
                return BI.some(subSettings.dimensionIds, function (idx, dId) {
                    return !BI.Utils.isTargetById(dId);
                });
            });
        }
    });

    BI.extend(obj, {
        // 判断两个字段是否属于同一字段
        isDimensionEquals: function (dimensions, dId1, dId2) {
            var info1 = dimensions[dId1],
                info2 = dimensions[dId2];

            if (BI.isNull(info1) || BI.isNull(info2) || info1.fieldId !== info2.fieldId) {
                return false;
            }
            var groups = BI.Utils.getSamePropertyDimensionGroupBydIds([dId1, dId2]);

            // 如果两个字段属于同一个字段，group就只会有一个
            return BI.keys(groups).length === 1;
        },

        isDimensionNotEquals: function (dimensions, dId1, dId2) {
            return !this.isDimensionEquals.apply(this, arguments);
        },

        // 判断两个dimensionId数组是否全等
        isDimensionArrayEquals: function (dimensionIds1, dimensionIds2) {
            if (dimensionIds1.length !== dimensionIds2.length) {
                return false;
            }

            var groups = BI.Utils.getSamePropertyDimensionGroupBydIds(BI.concat(dimensionIds1, dimensionIds2));

            function findDims (dId) {
                var group = BI.find(groups, function (groupName, group) {
                    return BI.contains(group.dimensionIds, dId);
                });
                return group.dimensionIds;
            }

            return !BI.some(dimensionIds1, function (idx, dId) {
                return !BI.contains(findDims(dId), dimensionIds2[idx]);
            });
        },

        // 字段数组去重，去重之后的顺序依然要保持不变
        uniqueDimension: function (dimensionIds, dimensions) {
            function _dealGeoDims (geoDims) {
                var longitude, latitude, dims = [];

                // 地理维度字段去重处理
                function uniqueGeoDimIds (dIds) {
                    var uniqueMap = {};
                    var arr = [];
                    BI.each(dIds, function (idx, dId) {
                        var fieldId = BI.Utils.getFieldIdBydId(dId);
                        if (!uniqueMap[fieldId]) {
                            uniqueMap[fieldId] = true;
                            arr.push(dId);
                        }
                    });

                    return arr;
                }

                longitude = BI.filter(geoDims, function (idx, dId) {
                    return BI.Utils.isLongitudeDimension(dId) || BI.Utils.isLongitudeTarget(dId);
                });
                latitude = BI.filter(geoDims, function (idx, dId) {
                    return BI.Utils.isLatitudeDimension(dId) || BI.Utils.isLatitudeTarget(dId);
                });

                dims = BI.concat(dims, uniqueGeoDimIds(longitude));
                dims = BI.concat(dims, uniqueGeoDimIds(latitude));

                return dims;
            }

            var geoDims, normalDims, newDims = [], groups;

            dimensionIds = BI.filter(dimensionIds, function (idx, dId) {
                return dimensions[dId];
            });

            geoDims = BI.filter(dimensionIds, function (idx, dId) {
                return BI.Utils.isGeometricDimension(dId);
            });
            normalDims = BI.filter(dimensionIds, function (idx, dId) {
                return !BI.contains(geoDims, dId);
            });

            groups = BI.Utils.getSamePropertyDimensionGroupBydIds(normalDims);
            BI.each(groups, function (id, group) {
                newDims.push(group.dimensionIds[0]);
            });
            // 处理地理字段
            newDims = BI.concat(newDims, _dealGeoDims(geoDims));
            // 按照原来的顺序排序
            newDims.sort(function (dId1, dId2) {
                return dimensionIds.indexOf(dId1) - dimensionIds.indexOf(dId2) > 0;
            });

            return newDims;
        }
    });

    BI.extend(obj, {
        // 在widget.dimensions中添加一条新的记录
        addDimensions: function (dimensions, dimensionId) {
            var newDimensionId;

            BI.some(dimensions, function (dimId, obj) {
                if (dimId === dimensionId) {
                    newDimensionId = BI.UUID();
                    var newDim = BI.deepClone(obj);
                    newDim.id = newDimensionId;
                    Fix.set(dimensions, newDimensionId, newDim);
                    return true;
                }
            });

            return newDimensionId;
        },

        // 在widget.dimensions中删除一条新的记录
        removeDimensions: function (dimensions, dimensionId) {
            Fix.del(dimensions, dimensionId);
        },

        // 给dimensions重新赋值，但是为了触发对dimensionGroups的计算，需要一个一个set，不能整体赋值
        setNewDimensions: function (widget, chartAttr) {
            var dimensions = widget.dimensions,
                newDims = [],
                newDimensions = {};

            // 获取当前正在使用的所有字段Id
            BI.each(widget.view, function (regionType, region) {
                newDims = BI.concat(newDims, region);
            });
            BI.each(chartAttr, function (geomId, geomSettings) {
                BI.each(geomSettings, function (attrName, attrSettings) {
                    if (BI.isNotEmptyArray(attrSettings.dimensionIds)) {
                        newDims = BI.concat(newDims, attrSettings.dimensionIds);
                    }
                });
            });

            BI.each(newDims, function (idx, dId) {
                newDimensions[dId] = dimensions[dId];
            });

            widget.dimensions = newDimensions;
        },

        // 设置字段私有属性
        setPrivateDimSettings: function (dimensions, dId, name, value) {
            dimensions[dId] && Fix.set(dimensions[dId].settings, name, value);
        }
    });

    BI.extend(obj, {
        /**
         * 更改一个深结构的对象属性
         * @param obj
         * @param key {String} key值，可以是name.a,这样表示要改变obj.name.a
         * @param value
         */
        deepAssign: function (obj, key, value) {
            if (!BI.isPlainObject(obj)) {
                return false;
            }

            var keys = key.split("."),
                len = keys.length - 1,
                tempObj = obj,
                result = false;

            BI.some(keys, function (idx, key) {
                if (idx === len) {
                    // 赋值操作
                    if (BI.contains(BI.keys(tempObj), key)) {
                        tempObj[key] = value;
                    } else {
                        Fix.set(tempObj, key, value);
                    }
                    result = true;
                }
                tempObj = tempObj[key];
                if (!BI.isPlainObject(tempObj)) {
                    return true;
                }
            });

            return result;
        },

        /**
         * 获取一个深结构的对象属性
         */
        getDeepObjValue: function (obj, key) {
            var keys = key.split("."),
                value = obj,
                isExist = true;

            if (!BI.isPlainObject(obj)) {
                return {
                    isExist: false,
                    value: null
                };
            }

            BI.some(keys, function (idx, key) {
                try {
                    if (BI.isPlainObject(value) && BI.contains(BI.keys(value), key)) {
                        value = BI.deepClone(value[key]);
                    } else {
                        isExist = false;
                        value = null;
                    }
                } catch (e) {
                    isExist = false;
                    value = null;
                }
                if (!isExist) {
                    return true;
                }
            });

            return {
                isExist: isExist,
                value: value
            };
        }
    });

    // 有关指标面板上的属性统计方法
    BI.extend(obj, {
        isAllGeomHasSameLabelContent: function (chartAttr) {
            return this._isAllGeomHasSameRichText(chartAttr, "label");
        },

        isAllGeomHasSameTextContent: function (chartAttr) {
            return this._isAllGeomHasSameRichText(chartAttr, "text");
        },

        // 提取出判断所有指标字段label、text文本内容是否相同的方法
        _isAllGeomHasSameRichText: function (chartAttr, attrName) {
            var filterGeomId = [BICst.WORDS.GRAPHIC, BICst.WORDS.ENTIRE],
                editorService = BI.Services.getService("bi.service.design.chart.common.editor"),
                prevContent,
                result = false;

            BI.some(chartAttr, function (geomId, geomSetting) {
                if (BI.contains(filterGeomId, geomId)) {
                    return false;
                }
                var tempContent;
                if (geomSetting[attrName].hasModified) {
                    tempContent = geomSetting[attrName].content;
                } else {
                    var richTextService = BI.Services.getService("bi.service.design.chart.attr.rich_text");
                    if (attrName === "text") {
                        tempContent = richTextService.getTextRichContent(geomSetting[attrName]);
                    } else {
                        tempContent = richTextService.getLabelContent(geomSetting[attrName]);
                    }
                }

                if (BI.isNull(prevContent)) {
                    prevContent = tempContent;
                    return false;
                }
                result = editorService.isRichTextEqual(prevContent, tempContent);
                prevContent = tempContent;
                return !result;
            });

            return result;
        },

        isAllGeomHasSameTooltipContent: function (chartAttr, view) {
            var filterGeomId = [BICst.WORDS.GRAPHIC, BICst.WORDS.ENTIRE],
                editorService = BI.Services.getService("bi.service.design.chart.common.editor"),
                prevContent,
                result = false;

            BI.some(chartAttr, function (geomId, geomSetting) {
                if (BI.contains(filterGeomId, geomId)) {
                    return false;
                }
                var tempContent;
                if (geomSetting.tooltip.hasModified) {
                    tempContent = geomSetting.tooltip.content;
                } else {
                    var richTextService = BI.Services.getService("bi.service.design.chart.attr.rich_text");
                    var allDims = richTextService.getTooltipParamDims(chartAttr, view, geomId);
                    tempContent = richTextService.getTooltipContent(geomSetting.tooltip, allDims);
                }

                if (BI.isNull(prevContent)) {
                    prevContent = tempContent;
                    return false;
                }
                result = editorService.isRichTextEqual(prevContent, tempContent);
                prevContent = tempContent;
                return !result;
            });

            return result;
        },

        /**
         * 判断所有指标字段某一个属性是否具有相同的值。
         */
        isAllGeomHasSameAttrValue: function (chartAttr, view, attrName) {
            var entireResult = this.getDeepObjValue(chartAttr[BICst.WORDS.ENTIRE], attrName);
            // 对象类型的属性值不进行比较
            if (BI.isPlainObject(entireResult.value)) {
                throw new Error(attrName + " property can not be an Object value.");
            }
            if (!entireResult.isExist) {
                throw new Error("Can not find the " + attrName + "property in entireGeomSettings.");
            }

            var self = this;
            var entireValue = entireResult.value;
            var measureFields = this.getMeasureFields(view);
            var prevValue;

            return !BI.any(measureFields, function (idx, geomId) {
                var result = self.getDeepObjValue(chartAttr[geomId], attrName);
                if (!result.isExist) {
                    result.value = entireValue;
                }
                if (BI.isNull(prevValue)) {
                    prevValue = result.value;
                    return;
                }

                var tempResult = BI.isEqual(prevValue, result.value);
                prevValue = result.value;

                return !tempResult;
            });
        },

        getEntireAttrValue: function (chartAttr, view, attrName, defaultValue) {
            var isSame = this.isAllGeomHasSameAttrValue(chartAttr, view, attrName);
            var entireValue = this.getDeepObjValue(chartAttr[BICst.WORDS.ENTIRE], attrName);
            var self = this;
            var measureFields = this.getMeasureFields(view);
            var value;

            entireValue = entireValue.value;

            if (isSame) {
                BI.some(measureFields, function (idx, geomId) {
                    var result = self.getDeepObjValue(chartAttr[geomId], attrName);
                    if (result.isExist) {
                        value = result.value;
                        return true;
                    }
                });
                value = BI.isNotNull(value) ? value : entireValue;
            } else {
                value = BI.isNotNull(defaultValue) ? defaultValue : entireValue;
            }

            return value;
        }
    });

    // 字体有关方法
    BI.extend(obj, {
        getFontStyle: function () {
            var chartFontStyle = BI.Utils.getActualChartFont();
            var fontStyle = {
                textAlign: "center",
                fontFamily: "",
                fontColor: "transparent",
                fontSize: 12,
                italic: false,
                fontBold: false
            };

            BI.each(fontStyle, function (key, value) {
                fontStyle[key] = BI.isNull(chartFontStyle[key]) ? fontStyle[key] : chartFontStyle[key];
            });

            return fontStyle;
        },

        getAxisTitleStyle: function () {
            var fontStyle = this.getFontStyle();
            fontStyle.fontSize = 13;
            return fontStyle;
        },

        // BI-23574 富文本内容不需要fontColor
        getRichTextFontStyle: function () {
            var fontStyle = {
                textAlign: "center",
                fontFamily: "",
                fontSize: 12,
                italic: false,
                fontBold: false
            };
            var actualFontStyle = this.getFontStyle();

            BI.each(fontStyle, function (key, value) {
                fontStyle[key] = actualFontStyle[key];
            });

            return fontStyle;
        },

        getLabelFontStyle: function () {
            var fontStyle = this.getRichTextFontStyle();
            fontStyle.textAlign = "center";
            return fontStyle;
        },

        getTooltipFontStyle: function () {
            var chartFontStyle = BI.Utils.getActualChartColor();
            var fontStyle = this.getRichTextFontStyle();
            fontStyle.fontSize = chartFontStyle.type === BICst.AUTO_CUSTOM.AUTO ? 14 : fontStyle.fontSize;
            fontStyle.textAlign = "left";
            return fontStyle;
        },

        getTextFontStyle: function () {
            var fontStyle = this.getRichTextFontStyle();
            fontStyle.textAlign = "center";
            return fontStyle;
        },

        getAnnotationFontStyle: function () {
            return this.getTooltipFontStyle();
        }
    });

    BI.extend(obj, {
        /**
         * 对时间维度字段值进行格式化
         * @param dateItems
         * @param dimensionId
         */
        formatDateItems: function (dateItems, dimensionId) {
            if (BI.Utils.getDimensionTypeById(dimensionId) !== BICst.DESIGN.DIMENSION_TYPE.DATE) {
                return dateItems;
            }

            return BI.map(dateItems, function (idx, value) {
                return BI.Format.formatValueByGroup(value, BI.Utils.getSwitchDimensionGroupTypeById(dimensionId));
            });
        },

        restoreAxisBounds: function (widget) {
            var viewAttr = widget.viewAttr,
                dimensions = widget.dimensions;

            BI.each(viewAttr, function (regionType, obj) {
                Fix.del(obj, "size");
            });

            BI.each(dimensions, function (dId, dimSettings) {
                Fix.del(dimSettings.settings, "size");
            });
        },

        getDiffDims: function (newDims, cachedDims) {
            var removedDims = BI.filter(cachedDims, function (idx, dId) {
                    return !BI.contains(newDims, dId);
                }),
                addedDims = BI.filter(newDims, function (idx, dId) {
                    return !BI.contains(cachedDims, dId);
                });

            return {
                removedDims: removedDims,
                addedDims: addedDims
            };
        }
    });

    var Service = BI.inherit(BI.OB, obj);

    BI.service("bi.service.design.chart.attr", Service);
})();!(function () {

    var DimensionNameService = BI.inherit(BI.OB, {
        // 获取字段的全称——字段原名+汇总分组名
        getDimensionFullName: function (dId) {
            return BI.Utils.getDimensionNameById(dId) + this.getDimensionGroupName(dId);
        },

        getDimensionFullNameWithOutSameValueGroup: function (dId) {
            var groupName = BI.Utils.getSwitchDimensionGroupTypeById(dId) === BICst.GROUP.ID_GROUP ? "" : this.getDimensionGroupName(dId);
            return BI.Utils.getDimensionNameById(dId) + groupName;
        },

        // 获取字段的全名，但是维度地理字段不返回“经纬度”字符
        getNotGeoDimensionFullName: function (dId) {
            if (BI.Utils.isLongitudeDimension(dId) || BI.Utils.isLatitudeDimension(dId)) {
                var name = BI.Utils.getDimensionNameById(dId);
                name = name.replace(BI.i18nText("BI-Design_Longitude_With_Brackets"), "");
                name = name.replace(BI.i18nText("BI-Design_Latitude_With_Brackets"), "");
                return name;
            }
            var displayName = BI.Utils.getDimensionDisplayNameById(dId);
            return BI.isNotNull(displayName) ? displayName : this.getDimensionFullNameWithOutSameValueGroup(dId);
        },

        // 获取字段汇总分组名称
        getDimensionGroupName: function (dId) {
            var groupName = this._getGroupName(dId);
            var calName = this._getCalName(dId);
            if (BI.isEmptyString(calName) && BI.isNotEmptyString(groupName)) {
                return BI.i18nText("BI-Design_Dimension_Group_Param_Brackets", groupName);
            }
            if (BI.isNotEmptyString(calName)) {
                if (BI.isEmptyString(groupName)) {
                    return BI.i18nText("BI-Design_Dimension_Group_Param_Brackets", calName);
                }

                return BI.i18nText("BI-Design_Target_Group_Param_Brackets", groupName, calName);
            }
            return "";
        },

        _getGroupName: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);

            if (BI.Utils.isControlWidgetByWidgetId(wId)) return "";

            switch (BI.Utils.getDimensionTypeById(dId)) {
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    return this._getCounterDepName(dId, wId);
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    if (BI.Utils.checkFieldIsAggByDId(wId, dId)) {
                        return BI.i18nText("BI-Design_AGG_Group");
                    }
                    return this._getTarGroupName(dId);
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                default:
                    return this._getDimGroupName(dId);
            }
        },

        _getCounterDepName: function (dId, wId) {
            var counterDep = BI.Utils.getDimensionCounterDepById(dId);
            if (counterDep === BICst.DESIGN.COUNTER_DEP.TOTAL_ROWS) {
                return BI.i18nText("BI-Design_Total_Rows");
            }
            return BI.Utils.getFieldNameByIdOfWidget(wId, counterDep);
        },

        _getTarGroupName: function (dId) {
            switch (BI.Utils.getDimensionGroupTypeById(dId)) {
                case BICst.DESIGN.SUMMARY_TYPE.SUM:
                    return BI.i18nText("BI-Basic_Calculate_Sum");
                case BICst.DESIGN.SUMMARY_TYPE.AVG:
                    return BI.i18nText("BI-Basic_Calculate_Avg");
                case BICst.DESIGN.SUMMARY_TYPE.MIDDLE_VALUE:
                    return BI.i18nText("BI-Basic_Calculate_Median");
                case BICst.DESIGN.SUMMARY_TYPE.MAX:
                    return BI.i18nText("BI-Basic_Calculate_Max");
                case BICst.DESIGN.SUMMARY_TYPE.MIN:
                    return BI.i18nText("BI-Basic_Calculate_Min");
                case BICst.DESIGN.SUMMARY_TYPE.STANDARD_DEVIATION:
                    return BI.i18nText("BI-Basic_Calculate_Standard_Deviation");
                case BICst.DESIGN.SUMMARY_TYPE.VARIANCE:
                    return BI.i18nText("BI-Basic_Calculate_Variance");
                case BICst.DESIGN.SUMMARY_TYPE.DISTINCT_COUNT:
                    return BI.i18nText("BI-Basic_No_Repeat_Count");
                case BICst.DESIGN.SUMMARY_TYPE.RECORD_COUNT:
                    return BI.i18nText("BI-Basic_Record_Count");
                case BICst.DESIGN.COUNTER_DEP.TOTAL_ROWS:
                    return BI.i18nText("BI-Design_Total_Rows");
                default:
                    return "";
            }
        },

        getDimGroupNameByGroupTypeWidthOutSameValueGroup: function (groupType) {
            return groupType === BICst.GROUP.ID_GROUP ? "" : this.getDimGroupNameByGroupType(groupType);
        },

        getDimGroupNameByGroupType: function (groupType) {
            switch (groupType) {
                case BICst.DESIGN.GROUP.ID_GROUP:
                    return BI.i18nText("BI-Basic_Same_Value_A_Group");
                case BICst.DESIGN.GROUP.CUSTOM_GROUP:
                    return BI.i18nText("BI-Basic_Custom_Grouping_Dot");
                case BICst.GROUP.NUMBER_GROUP:
                    return BI.i18nText("BI-Basic_Number_Custom_Group_Setting");
                case BICst.DESIGN.GROUP.AUTO_GROUP:
                    return BI.i18nText("BI-Basic_Grouping_Setting");
                case BICst.DESIGN.GROUP.YMD:
                    return BI.i18nText("BI-Basic_YMD_Date");
                case BICst.DESIGN.GROUP.YW:
                    return BI.i18nText("BI-Basic_Year_Week");
                case BICst.DESIGN.GROUP.YM:
                    return BI.i18nText("BI-Basic_Year_Month");
                case BICst.DESIGN.GROUP.YS:
                    return BI.i18nText("BI-Basic_Year_Quarter");
                case BICst.DESIGN.GROUP.Y:
                    return BI.i18nText("BI-Basic_Multi_Date_Year");
                case BICst.DESIGN.GROUP.S:
                    return BI.i18nText("BI-Basic_Quarter");
                case BICst.DESIGN.GROUP.M:
                    return BI.i18nText("BI-Basic_Month_Fen");
                case BICst.DESIGN.GROUP.WEEK_COUNT:
                    return BI.i18nText("BI-Basic_Week_Count");
                case BICst.DESIGN.GROUP.W:
                    return BI.i18nText("BI-Basic_Week_XingQi");
                case BICst.DESIGN.GROUP.D:
                    return BI.i18nText("BI-Basic_Date_Day");
                case BICst.DESIGN.GROUP.HOUR:
                    return BI.i18nText("BI-Basic_Hour_Sin");
                case BICst.DESIGN.GROUP.MINUTE:
                    return BI.i18nText("BI-Basic_Minute");
                case BICst.DESIGN.GROUP.SECOND:
                    return BI.i18nText("BI-Basic_Seconds");
                case BICst.DESIGN.GROUP.YMDH:
                    return BI.i18nText("BI-Basic_YMDH");
                case BICst.DESIGN.GROUP.YMDHM:
                    return BI.i18nText("BI-Basic_YMDHM");
                case BICst.DESIGN.GROUP.YMDHMS:
                    return BI.i18nText("BI-Basic_Detail_Date");
                default:
                    return "";
            }
        },

        _getDimGroupName: function (dId) {
            return this.getDimGroupNameByGroupType(BI.Utils.getSwitchDimensionGroupTypeById(dId));
        },

        _getCalName: function (dId) {
            switch (BI.Utils.getDimensionCalculationTypeById(dId)) {
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_YEAR:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Param", BI.i18nText("BI-Basic_Multi_Date_Year"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_MONTH:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Param", BI.i18nText("BI-Basic_Multi_Date_Month"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_QUARTER:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Param", BI.i18nText("BI-Basic_Quarter"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_WEEK:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Param", BI.i18nText("BI-Basic_Multi_Date_Week"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_WEEKDAY:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Param", BI.i18nText("BI-Basic_Week_XingQi"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.MONTH_ON_MONTH_VALUE:
                    return BI.i18nText("BI-Basic_Calculate_Same_Ring");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_YEAR:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate_Param", BI.i18nText("BI-Basic_Multi_Date_Year"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_MONTH:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate_Param", BI.i18nText("BI-Basic_Multi_Date_Month"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_QUARTER:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate_Param", BI.i18nText("BI-Basic_Quarter"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_WEEK:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate_Param", BI.i18nText("BI-Basic_Multi_Date_Week"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_WEEKDAY:
                    return BI.i18nText("BI-Basic_Calculate_Same_Period_Rate_Param", BI.i18nText("BI-Basic_Week_XingQi"));
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.MONTH_ON_MONTH_RATE:
                    return BI.i18nText("BI-Basic_Calculate_Same_Ring_Rate");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_ASC:
                    return BI.i18nText("BI-Basic_ASC_Sort");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_DES:
                    return BI.i18nText("BI-Basic_DSC_Sort");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_IN_GROUP_ASC:
                    return BI.i18nText("BI-Design_Asc_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_IN_GROUP_DES:
                    return BI.i18nText("BI-Design_Dsc_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_SUM:
                    return BI.i18nText("BI-Design_All_Value_Sum");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_AVG:
                    return BI.i18nText("BI-Design_All_Value_Avg");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_MAX:
                    return BI.i18nText("BI-Design_All_Value_Max");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_MIN:
                    return BI.i18nText("BI-Design_All_Value_Min");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_SUM:
                    return BI.i18nText("BI-Design_All_Value_Sum_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_AVG:
                    return BI.i18nText("BI-Design_All_Value_Avg_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_MAX:
                    return BI.i18nText("BI-Design_All_Value_Max_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_MIN:
                    return BI.i18nText("BI-Design_All_Value_Min_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ABOVE:
                    return BI.i18nText("BI-Basic_Sum_Of_Above");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ABOVE_IN_GROUP:
                    return BI.i18nText("BI-Basic_Sum_Of_Above_In_Group");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.CURRENT_DIMENSION_PERCENT:
                    return BI.i18nText("BI-Design_Current_Dimension_Percent");
                case BICst.DESIGN.RAPID_CALCULATE_TYPE.CURRENT_TARGET_PERCENT:
                    return BI.i18nText("BI-Design_Current_Target_Percent");
                default:
                    return "";
            }
        },

        getFieldGroupFullName: function (dId, fId) {
            var fieldName = BI.Utils.getDimensionNameBydIdAndFieldId(dId, fId);
            var fGroupType = BI.Utils.getDimensionGroupTypeBydIdAndFieldId(dId, fId);
            var groupName = this.getDimGroupNameByGroupTypeWidthOutSameValueGroup(fGroupType);
            groupName = BI.isNotEmptyString(groupName) ? BI.i18nText("BI-Design_Dimension_Group_Param_Brackets", groupName) : groupName;
            return fieldName + groupName;
        }
    });

    BI.service("bi.service.design.detail.dimension.name", DimensionNameService);

}());
!(function () {
    var Service = BI.inherit(BI.OB, {
        convertImageToPlaceHolder: function (str) {
            return str.replaceAll("<img.*?[^!]>", function (imageStr) {
                var altStr = imageStr.match(/alt=".*?"/)[0];
                var nameStr = imageStr.match(/name=".*?"/)[0];
                var alt = altStr.substring(5, altStr.length - 1);
                var name = nameStr.substring(6, nameStr.length - 1);
                return "$" + JSON.stringify({
                    alt: alt,
                    name: name
                });
            });
        },

        convertPlaceHolderToImage: function (str) {
            var self = this;
            var service = BI.Services.getService("bi.service.design.detail.dimension.name");
            return str.replaceAll("\\$[\\{][^\\}]*[\\}]", function (imageStr) {
                var obj = JSON.parse(imageStr.substring(1, imageStr.length));
                if (BI.isNull(obj.alt)) {
                    return imageStr;
                }
                var dId = BI.Utils.getDimensionIdByDimensionGroupId(null, obj.alt);
                var text = dId ? service.getDimensionFullNameWithOutSameValueGroup(dId) : BI.Utils.isDimensionExist(obj.alt) ? service.getDimensionFullNameWithOutSameValueGroup(dId) : BI.Utils.getWidgetById(obj.alt).name;
                var image = BI.DOM.getImage(text);
                return self._getImageString(BI.extend({}, image, obj, {
                    class: "rich-editor-param"
                }));
            });
        },

        _getImageString: function (options) {
            var result = "";
            BI.each(options, function (key, str) {
                result = result + key + "=\"" + str + "\" ";
            });
            return "<img " + result + "/>";
        }
    });
    BI.service("bi.service.editor.format", Service);
})();
!(function () {
    var Service = BI.inherit(BI.OB, {

        _init: function () {

        },

        getJumpMap: function (dId) {
            var jumpSetting = BI.Utils.getJumpByID(BI.Utils.getWidgetIdBydId(dId));
            var jumpMap = {};
            BI.each(jumpSetting, function (idx, jump) {
                jumpMap[BI.UUID()] = jump;
            });
            return jumpMap;
        },

        hasJump: function (jumpMap) {
            return BI.size(jumpMap) !== 0;
        },

        isJumpEnabled: function (jumpMap, isJumpOpen) {
            var hasJump = this.hasJump(jumpMap);
            return hasJump && isJumpOpen;
        },

        getJumpItems: function (jumpMap) {
            return [[{
                el: {
                    text: BI.i18nText("BI-Design_Pure_Jump_To"),
                    cls: ""
                },
                children: BI.map(jumpMap, function (id, jump) {
                    return {
                        text: jump.name,
                        value: id,
                        cls: jump.isPassValue ? "widget-filter-font" : ""
                    };
                })
            }]];
        },

        doJump: function (dId, jumpInfo, clicked) {
            var self = this, o = this.options;
            var obj = jumpInfo;
            var isTemplate = (obj.type === BICst.DESIGN.JUMP_TYPE.ANALYSIS_TEMPLATE);
            var isDialog = (obj.openPosition === BICst.DESIGN.JUMP_POSITION.DIALOG);
            var linkedWidget = BI.Utils.getWidgetCalculationByID(BI.Utils.getWidgetIdBydId(dId));
            linkedWidget.jump = [obj];
            var paramObj = {openPosition: obj.openPosition};
            var additionClicked = BI.deepClone(clicked);
            additionClicked.detail = {
                name: BI.Utils.getDimensionNameById(clicked.dId),
                groupType: BI.Utils.getSwitchDimensionGroupTypeById(clicked.dId)
            };
            BI.each(BI.get(additionClicked, "value", []), function (index, val) {
                if (BI.isNull(val.dId)) {
                    return;
                }
                val.detail = {
                    name: BI.Utils.getDimensionNameById(val.dId),
                    groupType: BI.Utils.getSwitchDimensionGroupTypeById(val.dId)
                };
            });
            if (obj.type === BICst.DESIGN.JUMP_TYPE.ANALYSIS_TEMPLATE || obj.type === BICst.DESIGN.JUMP_TYPE.WEB_LINK) {
                BI.extend(paramObj, {
                    linkedWidget: linkedWidget,
                    clicked: additionClicked
                });
            }
            switch ((isDialog << 1) | isTemplate) {
                // !isDialog !isTemplate
                case 0:
                    BI.Utils.doJumpByUrl(obj.targetUrl, paramObj);
                    break;
                // !isDialog isTemplate
                case 1:
                    BI.Utils.doJumpByTemplateId(obj.targetTemplateId, paramObj);
                    break;
                // isDialog !isTemplate
                case 2:
                    BI.Utils.doJumpByUrl(obj.targetUrl, BI.extend(paramObj, {
                        name: dId
                    }));
                    break;
                // isDialog isTemplate
                case 3:
                    BI.Utils.doJumpByTemplateId(obj.targetTemplateId, BI.extend(paramObj, {
                        name: dId
                    }));
                    break;
                default:
                    break;
            }
        }


    });
    BI.service("bi.service.design.jump_setting", Service);
})();
!(function () {
    var Service = BI.inherit(BI.OB, {
        delMeasure: function (widget, fieldId) {
            var usedByNames = [];

            BI.each(widget.measures, function (i, m) {
                if (m.targetIds && m.targetIds.contains(fieldId)) {
                    usedByNames.push(BI.Utils.getFieldNameByIdOfWidget(widget.wId, m.id));
                }
            });

            if (BI.isNotEmptyArray(usedByNames)) {
                var POPOVER_ID = BI.UUID();
                BI.Popovers.create(POPOVER_ID, {
                    header: BI.i18nText("BI-Basic_Prompt"),
                    body: {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.vertical_adapt",
                            items: [{
                                type: "bi.center_adapt",
                                cls: "measure-del-font exit-warning-font icon-size-50",
                                items: [{
                                    type: "bi.icon",
                                    width: 50,
                                    height: 50
                                }],
                                width: 50
                            }, {
                                type: "bi.default",
                                width: 20,
                                height: 2
                            }, {
                                type: "bi.label",
                                cls: "bi-small-popover-text",
                                textAlign: "left",
                                whiteSpace: "normal",
                                text: BI.i18nText("BI-Design_Measure_Used_By_Others", usedByNames.join("、"))
                            }]
                        }]
                    },
                    footer: {
                        type: "bi.right_vertical_adapt",
                        lgap: 10,
                        items: [{
                            type: "bi.button",
                            text: BI.i18nText("BI-Basic_Sure"),
                            value: 0,
                            handler: function () {
                                BI.Popovers.remove(POPOVER_ID);
                            }
                        }]
                    },
                    type: "bi.bar_popover",
                    size: "small",
                    listeners: [{
                        eventName: BI.Popover.EVENT_CLOSE,
                        action: function () {
                            BI.Popovers.remove(POPOVER_ID);
                        }
                    }]
                }).open(POPOVER_ID);

                return;
            }
            this.dimensionRemove(widget, function () {
                var ids = BI.map(widget.measures, "id");
                widget.measures.splice(ids.indexOf(fieldId), 1);
            }, fieldId, BI.i18nText("BI-Design_Delete_Measure_Tip", BI.Utils.getFieldNameByIdOfWidget(widget.wId, fieldId)));
        },

        copyMeasure: function (measures, field, wId) {
            var newField = BI.extend({}, BI.deepClone(BI.Constants.getConstant("bi.constant.design.widget.measure.conf")), BI.deepClone(field));
            var allNames = BI.map(BI.Utils.getFieldsOfWidget(wId), function (i, field) {
                return {
                    name: BI.Utils.getFieldNameByIdOfWidget(wId, field.id)
                };
            });
            var measure = BI.extend({}, BI.deepClone(newField), {
                id: BI.UUID(),
                transferName: BI.Func.createDistinctName(allNames, BI.Utils.getFieldNameByIdOfWidget(wId, field.id)),
                copied: true,
                source: newField.source || newField.id,
                drillName: "",
                drillDir: []
            });
            measures.push(measure);
        },

        setOptions: function (measures, field, opt) {
            var idx = -1;
            BI.some(measures, function (i, m) {
                if (m.id === field.id) {
                    idx = i;
                    return true;
                }
            });
            if (idx !== -1) {
                measures.splice(idx, 1, BI.extend({}, measures[idx], opt));
            } else {
                var measure = BI.extend({}, BI.deepClone(BI.Constants.getConstant("bi.constant.design.widget.measure.conf")), BI.deepClone(field), opt);
                measures.push(measure);
            }
        },

        clearDrillSequence: function (wId) {
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return;
            }
            BI.each(widget.measures, function (idx, measure) {
                BI.each(measure.group, function (i, group) {
                    group.drillSequence && (group.drillSequence = []);
                });
            });
            widget.drillOrder = [];
        },

        clearDrillConfAndSwitchField: function (wId) {
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return;
            }
            BI.each(widget.measures, function (idx, measure) {
                BI.each(measure.group, function (i, group) {
                    group.drillSequence && (group.drillSequence = []);
                    group.switchFieldId && (group.switchFieldId = "");
                });
            });
            widget.drillOrder = [];
        },

        dimensionRemove: function (widget, callback, measureId, text) {
            if (!widget) {
                return;
            }
            var self = this;
            var needPopover = BI.some(widget.dimensions, function (dId) {
                if (measureId === BI.Utils.getFieldIdBydId(dId)) {
                    return true;
                }
            });
            if (needPopover) {
                var POPOVER_ID = BI.UUID();
                BI.Popovers.create(POPOVER_ID, {
                    header: BI.i18nText("BI-Basic_Prompt"),
                    body: {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.vertical_adapt",
                            items: [{
                                type: "bi.center_adapt",
                                cls: "measure-del-font exit-warning-font  icon-size-50",
                                items: [{
                                    type: "bi.icon",
                                    width: 50,
                                    height: 50
                                }],
                                width: 50
                            }, {
                                type: "bi.default",
                                width: 20,
                                height: 2
                            }, {
                                type: "bi.label",
                                cls: "bi-small-popover-text",
                                textAlign: "left",
                                whiteSpace: "normal",
                                text: text
                            }]
                        }]
                    },
                    type: "bi.bar_popover",
                    size: "small",
                    listeners: [{
                        eventName: BI.Popover.EVENT_CONFIRM,
                        action: function () {
                            self._delDimension(widget, measureId);
                            callback();
                        }
                    }, {
                        eventName: BI.Popover.EVENT_CLOSE,
                        action: function () {
                            BI.Popovers.remove(POPOVER_ID);
                        }
                    }]
                }).open(POPOVER_ID);
            } else {
                callback();
            }
        },

        _delDimension: function (widget, measureId) {
            BI.each(widget.view, function (regionType, region) {
                BI.each(region, function (idx, id) {
                    if (measureId === BI.Utils.getFieldIdBydId(id)) {
                        region.splice(idx, 1);
                    }
                });
            });
            BI.each(widget.dimensions, function (dId) {
                if (measureId === BI.Utils.getFieldIdBydId(dId)) {
                    Fix.del(widget.dimensions, dId);
                }
            });
        }
    });
    BI.service("bi.service.design.widget.measure", Service);
})();
!(function () {
    var Service = BI.inherit(BI.OB, {
        getDimensionButton: function (wid, dId, isAttrDimension, opt) {
            var item = {};
            if (opt && BI.isFunction(opt.onRemove)) {
                BI.extend(item, {
                    onRemove: opt.onRemove
                });
            }
            switch (BI.Utils.getDimensionTypeById(dId)) {
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                case BICst.DESIGN.DIMENSION_TYPE.TARGET_NAME:
                case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                    BI.extend(item, {
                        type: "bi.design.widget.detail.region.dimension.button",
                        cls: "region-dimension-button",
                        attributes: {
                            dimensionId: dId
                        },
                        data: {
                            dimensionId: dId
                        },
                        dimensionId: dId,
                        isAttrDimension: isAttrDimension
                    });
                    break;
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    BI.extend(item, {
                        type: "bi.design.widget.detail.region.target.button",
                        cls: "region-dimension-button",
                        attributes: {
                            dimensionId: dId
                        },
                        data: {
                            dimensionId: dId
                        },
                        dimensionId: dId,
                        isAttrDimension: isAttrDimension
                    });
                    break;
                default:
                    break;
            }
            return item;
        },

        getDimensionCombo: function (wId, dId) {
            switch (BI.Utils.getDimensionGroupTypeById(dId)) {
                case BICst.DESIGN.GROUP.LONGITUDE:
                case BICst.DESIGN.GROUP.LATITUDE:
                    return "bi.design.detail.region.dimension.del.combo";
                default:
                    break;
            }

            var isResultFilter = BI.contains(BI.Utils.getWidgetResultFilterById(wId), dId);
            var dimensionType = BI.Utils.getSwitchDimensionTypeById(dId);

            if (isResultFilter) {
                switch (dimensionType) {
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                        return "bi.result_date_dimension_combo";
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                        return "bi.result_string_dimension_combo";
                    case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                        return "bi.result_target_combo";
                    default:
                        break;
                }
            }

            switch (dimensionType) {
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    return this._getNumberDimensionCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    return this._getDateDimensionCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                    return this._getStringDimensionCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.TARGET_NAME:
                    return this._getTargetNameDimensionCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    return this._getNumberTargetCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    return this._getCounterTargetCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                    return this._getClusterDimensionCombo(wId);
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                default:
                    return this._getCalcTargetCombo(wId);
            }
        },

        _getClusterDimensionCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    return "bi.table_cluster_dimension_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_cluster_dimension_combo";
                default:
                    return "bi.table_cluster_dimension_combo";
            }
        },

        _getNumberDimensionCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_number_dimension_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_number_dimension_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_number_dimension_combo";
                default:
                    return "bi.table_number_dimension_combo";
            }
        },

        _getStringDimensionCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_string_dimension_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_string_dimension_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_string_dimension_combo";
                default:
                    return "bi.table_string_dimension_combo";
            }
        },

        _getTargetNameDimensionCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_target_name_combo";
                default:
                    return this._getStringDimensionCombo(wId);
            }
        },

        _getDateDimensionCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_date_dimension_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_date_dimension_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_date_dimension_combo";
                default:
                    return "bi.table_date_dimension_combo";
            }
        },

        _getNumberTargetCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_target_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_number_dimension_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_target_combo";
                default:
                    return "bi.table_target_combo";
            }
        },

        _getCounterTargetCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_counter_target_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_counter_target_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_counter_target_combo";
                default:
                    return "bi.table_counter_target_combo";
            }
        },

        _getCalcTargetCombo: function (wId) {
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
                    return "bi.table_cal_target_combo";
                case BICst.DESIGN.WIDGET.DETAIL:
                    return "bi.detail_table_calc_target_combo";
                case BICst.DESIGN.WIDGET.CHART:
                    return "bi.chart_cal_target_combo";
                default:
                    return "bi.table_calc_target_combo";
            }
        },

        _mountDimensionAttribute: function (dId, key, value) {
            // 汇总方式 & 快速计算类型
            // 决定属性是设置到field上和dimension上
            // 目前（除图表的）仅在维度自定义分组的情况下要设置到dimension上，其他全部设置到field上
            // 根据返回对象的key进行相应的extend
            var wId = BI.Utils.getWidgetIdBydId(dId), field, groupType;
            // 维度切换和钻取始终存在第一个钻取字段的group内
            var isDrillParentAttr = ["switchFieldId", "drillSequence", "drillOrder", "drillFields"].contains(key);
            if (!isDrillParentAttr) {
                var switchFieldId = BI.Utils.getMeasureSwitchFieldById(dId);
                field = BI.Utils.getFieldByIdOfWidget(wId, switchFieldId);
                groupType = "group_" + BI.Utils.getSwitchDimensionGroupTypeById(dId);
            } else {
                var fieldId = BI.Utils.getFieldIdBydId(dId);
                field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);
                groupType = "group_" + BI.Utils.getDimensionGroupTypeById(dId);
            }

            if (BI.isNull(field.group)) {
                field.group = {};
            }
            if (BI.isNull(field.group[groupType])) {
                field.group[groupType] = {};
            }
            field.group[groupType][key] = value;
            return field;
        },

        // FIXME: 暂时性的方法，以后整一整这三块代码
        _mountDimensionHeaderFilter: function (dId, key, value) {
            // 汇总方式 & 快速计算类型
            // 决定属性是设置到field上和dimension上
            // 目前（除图表的）仅在维度自定义分组的情况下要设置到dimension上，其他全部设置到field上
            // 根据返回对象的key进行相应的extend
            var wId = BI.Utils.getWidgetIdBydId(dId), field, groupType;
            // 维度切换和钻取始终存在第一个钻取字段的group内
            var isDrillParentAttr = ["switchFieldId", "drillSequence", "drillOrder", "drillFields"].contains(key);
            if (!isDrillParentAttr) {
                var switchFieldId = BI.Utils.getResultDimensionFieldIdById(dId);
                field = BI.Utils.getFieldByIdOfWidget(wId, switchFieldId);
                groupType = "group_" + BI.Utils.getResultDimensionGroupTypeById(dId);
            } else {
                var fieldId = BI.Utils.getFieldIdBydId(dId);
                field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);
                groupType = "group_" + BI.Utils.getDimensionGroupTypeById(dId);
            }

            if (BI.isNull(field.group)) {
                field.group = {};
            }
            if (BI.isNull(field.group[groupType])) {
                field.group[groupType] = {};
            }
            field.group[groupType][key] = value;
            return field;
        },

        _mountTargetAttribute: function (dId, key, value) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var widget = BI.designModel.widgets[wId];
            var dim = widget.dimensions[dId];
            if (!dim) {
                return;
            }
            var dimGroup = dim.group;
            var fieldId = BI.Utils.getFieldIdBydId(dId);
            var field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);
            var dimCalculation = BI.Utils.getDimensionCalculationTypeById(dId);
            // todo 需要utils方法获取
            var groupPrefix = "summary_", calculatePrefix = "cal_";

            dimGroup = groupPrefix + (dimGroup ? dimGroup.type : BICst.SUMMARY_TYPE.SUM);
            dimCalculation = calculatePrefix + dimCalculation;
            if (BI.isNull(field.group)) {
                field.group = {};
            }
            if (BI.isNull(field.group[dimGroup])) {
                field.group[dimGroup] = {};
            }
            if (BI.isNull(field.group[dimGroup]["cal"])) {
                field.group[dimGroup]["cal"] = {};
            }
            if (BI.isNull(field.group[dimGroup]["cal"][dimCalculation])) {
                field.group[dimGroup]["cal"][dimCalculation] = {};
            }
            field.group[dimGroup]["cal"][dimCalculation][key] = value;
            return field;
        },

        _mountCounterAttribute: function (dId, key, value) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var widget = BI.designModel.widgets[wId];
            var dim = widget.dimensions[dId];
            if (!dim) {
                return;
            }
            var fieldId = BI.Utils.getFieldIdBydId(dId);
            var field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);
            var dimCalculation = BI.Utils.getDimensionCalculationTypeById(dId);
            // todo 需要utils方法获取
            var counterDepPrefix = "counterDep_", calculatePrefix = "cal_";

            var counterDep = counterDepPrefix + BI.Utils.getDimensionCounterDepById(dId);
            dimCalculation = calculatePrefix + dimCalculation;
            if (BI.isNull(field.group)) {
                field.group = {};
            }
            if (BI.isNull(field.group[counterDep])) {
                field.group[counterDep] = {};
            }
            if (BI.isNull(field.group[counterDep]["cal"])) {
                field.group[counterDep]["cal"] = {};
            }
            if (BI.isNull(field.group[counterDep]["cal"][dimCalculation])) {
                field.group[counterDep]["cal"][dimCalculation] = {};
            }
            field.group[counterDep]["cal"][dimCalculation][key] = value;
            return field;
        },

        // FIXME: 先用比较恶心的写法，之后和imp一起整一下
        mountAttribute: function (dId, key, value, isHeaderFilter) {
            var field = {};

            if (isHeaderFilter === true) {
                field = this._mountDimensionHeaderFilter(dId, key, value);
            } else {
                switch (BI.Utils.getDimensionTypeById(dId)) {
                    case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                        field = this._mountCounterAttribute(dId, key, value);
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                        field = this._mountTargetAttribute(dId, key, value);
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                    default:
                        field = this._mountDimensionAttribute(dId, key, value);
                        break;
                }
            }

            var wId = BI.Utils.getWidgetIdBydId(dId);
            var widget = BI.designModel.widgets[wId];
            var index = widget.measures.length;
            BI.some(widget.measures, function (i, item) {
                if (item.id === field.id) {
                    index = i;
                    return true;
                }
            });
            widget.measures.splice(index, 1, field);
        },

        clearCustomGroup: function (dimensionId, dimensions, switchFieldId) {
            var count = BI.size(BI.filter(dimensions, function (dId, dimension) {
                if (dId === dimensionId) return false;

                var fId = BI.Utils.getFieldIdBydId(dId);

                var valid = fId === switchFieldId && dimension.group.type === BICst.GROUP.CUSTOM_GROUP;

                if (valid) return valid;

                var drillFields = BI.Utils.getMeasureDrillFieldsById(dId);

                valid = BI.some(drillFields, function (fieldId, field) {
                    return fieldId === switchFieldId && field.group.type === BICst.GROUP.CUSTOM_GROUP;
                });

                return valid;
            }));

            if (count !== 0) return;

            this.mountAttribute(dimensionId, "customGroup", {});
        }
    });
    BI.service("bi.service.design.expander.detail.region.dimension_button", Service);
})();
/**
 * Create by xiaofu.qin {2018/1/22}
 * description:
 */

!(function () {

    // 判断某一个数字与模式是否匹配
    function patternMatched (pattern, num) {
        var result = false;
        if (/^\d+$/.test(pattern)) {
            result = num === BI.parseInt(pattern);
        } else if (/^>=/.test(pattern)) {
            result = num >= BI.parseInt(pattern.replace(/>=/g, ""));
        } else if (/\|\|/g.test(pattern)) {
            BI.some(pattern.split("||"), function (idx, str) {
                if (patternMatched(str, num)) {
                    result = true;
                    return true;
                }
            });
        }

        return result;
    }

    function clearArray (arr) {
        return BI.isArray(arr) ? arr.splice(0, arr.length) : [];
    }

    var Service = BI.inherit(BI.OB, {
        // 图表切换到表格
        switchChartToTable: function (widget, chartAttr, targetWidgetType) {
            var attrService = BI.Services.getService("bi.service.design.chart.attr");
            var dimensions = widget.dimensions,
                view = widget.view,
                measureFields = attrService.getMeasureFields(view),
                clearGeomIds = [BICst.WORDS.ENTIRE];

            if (measureFields.length > 0) {
                clearGeomIds.push(BICst.WORDS.GRAPHIC);
            } else if (targetWidgetType === BICst.DESIGN.WIDGET.DETAIL) {
                clearGeomIds = BI.keys(chartAttr);
            }

            function clearGeomDims (geomSettings) {
                BI.each(geomSettings, function (attrName, attrSettings) {
                    if (!BI.isArray(attrSettings.dimensionIds)) {
                        return;
                    }
                    BI.each(attrSettings.dimensionIds, function (idx, dId) {
                        attrService.removeDimensions(dimensions, dId);
                    });
                    attrSettings.dimensionIds = [];
                });
            }

            // 删除不需要放置到横纵轴上的属性字段
            BI.each(chartAttr, function (geomId, geomSettings) {
                if (BI.contains(clearGeomIds, geomId)) {
                    clearGeomDims(geomSettings);
                }
            });

            // 切换到明细表只需要清空图形属性字段即可
            if (targetWidgetType === BICst.DESIGN.WIDGET.DETAIL) {
                return;
            }

            // 将图形属性里面的字段移动至表格维度与指标上
            var allDims = [], dimensionIds, measureIds;

            BI.each(chartAttr, function (geomId, geomSettings) {
                BI.each(geomSettings, function (attrName, attrSettings) {
                    if (BI.isNotEmptyArray(attrSettings.dimensionIds)) {
                        var dimensionIds = attrSettings.dimensionIds;
                        allDims = BI.concat(allDims, dimensionIds);
                        dimensionIds.splice(0, dimensionIds.length);
                    }
                });
            });

            dimensionIds = BI.filter(allDims, function (idx, dId) {
                return !BI.Utils.isTargetById(dId);
            });
            measureIds = BI.filter(allDims, function (idx, dId) {
                return !BI.contains(dimensionIds, dId);
            });

            view[BICst.REGION.DIMENSION1] = BI.concat(view[BICst.REGION.DIMENSION1], dimensionIds);
            view[BICst.REGION.TARGET1] = BI.concat(view[BICst.REGION.TARGET1], measureIds);
        },

        // 表格切换到图表
        switchTableToChart: function (widget, recommendChartType) {
            var attrService = BI.Services.getService("bi.service.design.chart.attr");
            var recommendService = BI.Services.getService("bi.service.design.widget.detail.intelligent_recommend");

            // 将表格属性里面的字段放置到横纵轴上
            this._removeTableAttrDims(widget);

            var newAttr = {};
            var widgetSettings = Fix.toJSON(widget);
            var viewAttr = widget.viewAttr;

            newAttr[BICst.WORDS.GRAPHIC] = attrService.getBasicAttrSetting(widget);
            newAttr[BICst.WORDS.ENTIRE] = attrService.getEntireAttrSetting(widget);

            var valueObj = recommendService.chooseRecommendChart(recommendChartType, widgetSettings, newAttr, viewAttr);
            newAttr = valueObj.chartAttr;
            widgetSettings = valueObj.widget;

            widget.dimensions = widgetSettings.dimensions;
            widget.view = widgetSettings.view;

            var chartAttr = {};
            var geomIds = attrService.getMeasureFields(widgetSettings.view);
            BI.isEmptyArray(geomIds) && geomIds.push(BICst.WORDS.GRAPHIC);
            BI.each(geomIds, function (idx, geomId) {
                chartAttr[geomId] = newAttr[geomId];
            });

            widget.settings.chartAttr = chartAttr;
            attrService.setNewDimensions(widget, chartAttr);
        },

        // 将表格属性里面的字段放置到横纵轴上
        _removeTableAttrDims: function (widget) {
            var tableAttr = widget.settings.tableAttr,
                view = widget.view,
                allDims = [], dimensionIds = [], measureIds = [];

            allDims = BI.concat(allDims, clearArray(view[BICst.REGION.DIMENSION2]));
            BI.each(tableAttr.color, function (id, settings) {
                allDims = BI.concat(allDims, clearArray(settings.dims));
            });
            BI.each(tableAttr.shape, function (id, settings) {
                allDims = BI.concat(allDims, clearArray(settings.dims));
            });

            BI.each(allDims, function (idx, dId) {
                if (BI.Utils.isTargetById(dId)) {
                    measureIds.push(dId);
                } else {
                    dimensionIds.push(dId);
                }
            });

            view[BICst.REGION.DIMENSION1] = BI.concat(view[BICst.REGION.DIMENSION1], dimensionIds);
            view[BICst.REGION.TARGET1] = BI.concat(view[BICst.REGION.TARGET1], measureIds);
        },

        /**
         * 判断给定的维度字段、指标字段的数量是否与patternObj里面描述的相同
         * @param patternObj {Object}
         * @param dims {Array} 横纵轴面板上维度字段
         * @param measures {Array} 横纵轴面板上的所有指标字段
         */
        isPatternMatched: function (patternObj, dims, measures) {
            if (patternObj.dimensionLongitude
                || patternObj.dimensionLatitude
                || patternObj.measureLongitude
                || patternObj.measureLatitude) {
                return this._isMapMatched(patternObj, dims, measures);
            }
            return this._isMatched(patternObj.measure, measures) && this._isMatched(patternObj.dimension, dims);
        },

        /**
         * 判断fields(字段数组)的数量和类型是否匹配pattern描述的模式。
         */
        _isMatched: function (pattern, fields) {
            return patternMatched(pattern, fields.length);
        },

        _isMapMatched: function (requireObj, dims, measures) {
            var normalDims, normalMeasures,
                dimensionLongitude, dimensionLatitude,  // 维度转化地理字段
                measureLongitude, measureLatitude;  // 指标转化地理字段

            normalDims = BI.filter(dims, function (idx, dId) {
                return !BI.Utils.isGeometricDimension(dId);
            });
            normalMeasures = BI.filter(measures, function (idx, dId) {
                return !BI.Utils.isGeometricDimension(dId);
            });

            dimensionLongitude = BI.filter(dims, function (idx, dId) {
                return BI.Utils.isLongitudeDimension(dId);
            });
            dimensionLatitude = BI.filter(dims, function (idx, dId) {
                return BI.Utils.isLatitudeDimension(dId);
            });

            measureLongitude = BI.filter(measures, function (idx, dId) {
                return BI.Utils.isLongitudeTarget(dId);
            });
            measureLatitude = BI.filter(measures, function (idx, dId) {
                return BI.Utils.isLatitudeTarget(dId);
            });

            var result = true;
            BI.some(requireObj, function (key, value) {
                switch (key) {
                    // 普通维度
                    case "dimension":
                        result = patternMatched(value, normalDims.length);
                        break;
                    // 普通指标
                    case "measure":
                        result = patternMatched(value, normalMeasures.length);
                        break;
                    // 维度转化的经度字段
                    case "dimensionLongitude":
                        result = patternMatched(value, dimensionLongitude.length);
                        break;
                    // 维度转化的纬度字段
                    case "dimensionLatitude":
                        result = patternMatched(value, dimensionLatitude.length);
                        break;
                    // 指标转化的经度字段
                    case "measureLongitude":
                        result = patternMatched(value, measureLongitude.length);
                        break;
                    // 指标转化的纬度字段
                    case "measureLatitude":
                        result = patternMatched(value, measureLatitude.length);
                        break;
                }
                if (!result) {
                    return true;
                }
            });

            var hasDimensionGeo = dimensionLongitude.length > 0 || dimensionLatitude.length > 0;
            var hasMeasureGeo = measureLongitude.length > 0 || measureLatitude.length > 0;
            // 地图在所有地理字段都同属于维度或者都属于指标的时候才能高亮
            if (hasDimensionGeo && hasMeasureGeo) {
                result = false;
            }

            return result;
        },

        /**
         * 获取某一种图表对应的提示信息
         */
        getTipInfo: function (type) {
            // 表格提示
            var info = this._getTableTip(type);
            if (BI.isNotEmptyString(info)) {
                return info;
            }
            var chartType = BI.Constants.getConstant("bi.constant.design.widget.detail.chart_type"),
                chartTypeItems = BI.Constants.getConstant("bi.constant.design.widget.detail.chart_type_items"),
                self = this;

            // 获取图表类型的名称
            BI.some(chartTypeItems, function (index, item) {
                if (type === item.value) {
                    info += item.text;
                    return true;
                }
            });

            // 获取当前图表类型需要的字段的数量
            BI.some(BI.Constants.getConstant("bi.constant.design.widget.detail.chart_type_required_info"), function (index, obj) {
                // mouseout时type=null，提示则变成默认的提示
                if (type && type !== obj.type) {
                    return false;
                }
                var command = "";

                switch (type) {
                    case chartType.HEAT:
                        command = "m";
                        break;
                    case chartType.KPI_CARD:
                    case chartType.COMPARE_COLUMN:
                    case chartType.PIE:
                    case chartType.ROSE:
                    case chartType.WORD_CLOUD:
                    case chartType.FUNNEL:
                    case chartType.GAUGE:
                        command = "m&n";
                        break;
                    case chartType.COLOR_TABLE:
                    case chartType.WATER_FALL:
                    case chartType.RANGE_AREA:
                    case chartType.RECT_TREE:
                        command = ">=m&n";
                        break;
                    case chartType.GROUP_TABLE:
                    case chartType.MINI:
                    case chartType.SLICE_COLUMN:
                    case chartType.STACK_COLUMN:
                    case chartType.SERIES_COLUMN:
                    case chartType.SLICE_LINE:
                    case chartType.SERIES_LINE:
                    case chartType.RADAR:
                    case chartType.COMBINATION:
                    case chartType.POINT:
                        command = ">=m&>=n";
                        break;
                    case chartType.BUBBLE:
                        command = ">=m&(n||k)";
                        break;
                    case chartType.AREA_MAP:
                    case chartType.POINT_MAP:
                    case chartType.HEAT_MAP:
                        command = "2geo";
                        break;
                    case chartType.LINE_MAP:
                        command = "2geo&1";
                        break;
                    default:
                        break;
                }

                info += (type ? ":" : "");
                info += self._getTip(command, obj.required[0].dimension, obj.required[0].measure);

                return true;
            });

            return info;
        },

        _getTableTip: function (type) {
            switch (type) {
                case BICst.DESIGN.WIDGET.TABLE:
                    return BI.i18nText("BI-Design_Group_Table");
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                    return BI.i18nText("BI-Design_Cross_Table");
                case BICst.DESIGN.WIDGET.DETAIL:
                    return BI.i18nText("BI-Design_Detail_Table");
                default:
                    return "";
            }
        },

        /**
         * 根据每一种图表类型来获取对应的提示信息的字符串
         */
        _getTip: function (command, dimensionStr, measureStr) {
            var dimsNum = BI.parseInt(dimensionStr.replace(/>|=/g, "")),
                measuresNum = BI.parseInt(measureStr.replace(/>|=/g, ""));

            switch (command) {
                // 需要m个维度字段
                case "m":
                    return BI.i18nText("BI-Design_{R1}_Dim_Fields", dimsNum);
                    break;
                // 明确需要 m个维度 n个指标
                case "m&n":
                    return BI.i18nText("BI-Design_{R1}_Dim_{R2}_Measure_Fields", dimsNum, measuresNum);

                // 需要至少m个维度和确定的n个指标
                case ">=m&n":
                    return BI.i18nText("BI-Design_At_Least_{R1}_Dim_{R2}_Measure_Fields", dimsNum, measuresNum);

                // 至少需要m个维度和至少n个指标
                case ">=m&>=n":
                    return BI.i18nText("BI-Design_At_Least_{R1}_Dim_At_Least_{R2}_Measure_Fields", dimsNum, measuresNum);

                // 明确需要m个维度和至少n个指标
                case "m&>=n":
                    return BI.i18nText("BI-Design_{R1}_Dim_At_Least_{R2}_Measure_Fields", dimsNum, measuresNum);

                // 至少需要m个维度，指标字段数量可以为n或者k个
                case ">=m&(n||k)":
                    measuresNum = measureStr.split("||");
                    return BI.i18nText("BI-Design_At_Least_{R1}_Dim_{R2}_Or_{R3}_Measure_Fields", dimsNum, measuresNum[0], measuresNum[1]);

                case "2geo":
                    return BI.i18nText("BI-Design_{R1}_Geographic_Dim_Fields", 2);

                // 要求有两个维度，一个维度是经过地理角色转变的结果，另外需要至少n个维度
                case "2geo&1":
                    return BI.i18nText("BI-Design_{R1}_Geographic_Dim_{R2}_Dim_Fields", 2, 1);

                default:
                    return BI.i18nText("BI-Design_Auto_Recommend_Tip");
            }
        }
    });

    BI.service("bi.service.design.widget.detail.chart_type", Service);

})();
/**
 * Create by xiaofu.qin {2018/1/25}
 * description: 智能推荐图表的一些方法
 */

!(function () {

    function clearArray (arr) {
        return BI.isArray(arr) ? arr.splice(0, arr.length) : [];
    }

    var Service = BI.inherit(BI.OB, {

        /**
         * 下面是用户点击每一种推荐的图表的时候在需要处理的逻辑
         * http://www.finedevelop.com/pages/viewpage.action?pageId=14686725
         */
        chooseRecommendChart: function (type, widget, chartAttr, viewAttr) {
            var allDims = this._delAllDimensions(widget, chartAttr);
            this._clearSettings(widget, chartAttr, viewAttr, allDims);
            this._dealDetailChartLogic(type, widget, chartAttr, viewAttr, allDims);
            this._addNewDimensions(widget, chartAttr, allDims);

            return {
                chartAttr: chartAttr,
                widget: widget
            };
        },

        _dealDetailChartLogic: function (type, widget, chartAttr, viewAttr, allDims) {
            var chartType = BI.Constants.getConstant("bi.constant.design.widget.detail.chart_type");

            var dims = BI.filter(allDims, function (idx, dId) {
                return !BI.Utils.isTargetById(dId);
            });
            var measures = BI.filter(allDims, function (idx, dId) {
                return BI.Utils.isTargetById(dId);
            });

            switch (type) {
                case chartType.KPI_CARD:
                    this._kpiCard(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.COLOR_TABLE:
                    this._colorTable(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.GROUP_TABLE:
                    this._groupTable(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.MINI:
                    this._mini(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.HEAT:
                    this._heat(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.SLICE_COLUMN:
                    this._sliceColumn(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.STACK_COLUMN:
                    this._stackColumn(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.SERIES_COLUMN:
                    this._seriesColumn(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.COMPARE_COLUMN:
                    this._compareColumn(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.WATER_FALL:
                    this._waterFall(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.SLICE_LINE:
                    this._sliceLine(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.SERIES_LINE:
                    this._seriesLine(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.RADAR:
                    this._radar(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.RANGE_AREA:
                    this._rangeArea(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.COMBINATION:
                    this._combination(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.POINT:
                    this._point(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.BUBBLE:
                    this._bubble(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.PIE:
                    this._pie(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.ROSE:
                    this._rose(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.AREA_MAP:
                    this._areaMap(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.POINT_MAP:
                    this._pointMap(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.LINE_MAP:
                    this._lineMap(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.HEAT_MAP:
                    this._heatMap(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.RECT_TREE:
                    this._rectTree(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.WORD_CLOUD:
                    this._wordCloud(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.FUNNEL:
                    this._funnel(widget, chartAttr, viewAttr, dims, measures);
                    break;
                case chartType.GAUGE:
                    this._gauge(widget, chartAttr, viewAttr, dims, measures);
                    break;
            }
        },

        /**
         * 给属性面板以及横纵轴上的字段重新生成一个ID，防止一个ID多处使用
         */
        _addNewDimensions: function (widget, chartAttr, allDims) {
            var service = BI.Services.getService("bi.service.design.chart.attr"),
                dimensions = widget.dimensions,
                measureFields = service.getMeasureFields(widget.view),
                dimensionMap = {},
                self = this,
                removeDims = [];

            BI.isEmptyArray(measureFields) && measureFields.push(BICst.WORDS.GRAPHIC);
            measureFields.push(BICst.WORDS.ENTIRE);

            BI.each(chartAttr, function (geomId, geomSettings) {
                // 如果横纵上有指标字段，那么将graphic中的dimensionIds移除掉
                var isNeedClearDims = !BI.contains(measureFields, geomId);

                BI.each(geomSettings, function (attrName, attrSettings) {
                    if (!BI.isArray(attrSettings.dimensionIds) || BI.isEmptyArray(attrSettings.dimensionIds)) {
                        return;
                    }
                    if (isNeedClearDims) {
                        clearArray(attrSettings.dimensionIds);
                        return;
                    }
                    attrSettings.dimensionIds = BI.map(attrSettings.dimensionIds, function (idx, dId) {
                        var newId = service.addDimensions(dimensions, dId);
                        dimensionMap[dId] = newId;
                        removeDims.push(dId);
                        return newId;
                    });
                });

                self.replaceRichTextParams(geomSettings.text, dimensionMap);
                self.replaceRichTextParams(geomSettings.label, dimensionMap);
                self.replaceRichTextParams(geomSettings.tooltip, dimensionMap);
            });
        },

        /**
         * 获取横纵轴面板以及属性面板上所有的字段，并删除横纵轴以及属性面板上的字段
         */
        _delAllDimensions: function (widget, chartAttr) {
            var service = BI.Services.getService("bi.service.design.chart.attr"),
                fields = [],
                view = widget.view,
                measureFields = service.getMeasureFields(view);

            fields = BI.concat(fields, clearArray(view[BICst.REGION.DIMENSION1]));
            fields = BI.concat(fields, clearArray(view[BICst.REGION.TARGET1]));

            // 遍历所有的属性值，获取拖入属性框中的字段
            BI.each(measureFields, function (idx, dId) {
                BI.each(chartAttr[dId], function (name, settings) {
                    if (BI.isPlainObject(settings) && BI.isArray(settings.dimensionIds)) {
                        fields = BI.concat(fields, settings.dimensionIds);
                        settings.dimensionIds = [];
                    }
                });
            });

            // 从graphic中提取属性框中的字段
            BI.each(chartAttr[BICst.WORDS.GRAPHIC], function (name, settings) {
                if (BI.isPlainObject(settings) && BI.isArray(settings.dimensionIds)) {
                    // 横纵轴上有指标字段，则不将graphic的字段压入fields中
                    if (BI.isEmptyArray(measureFields)) {
                        fields = BI.concat(fields, settings.dimensionIds);
                    }
                    clearArray(settings.dimensionIds);
                }
            });

            // 将“全部”面板上的字段也清空，但不将其压入fields中
            BI.each(chartAttr[BICst.WORDS.ENTIRE], function (name, settings) {
                if (BI.isPlainObject(settings) && BI.isArray(settings.dimensionIds)) {
                    clearArray(settings.dimensionIds);
                }
            });

            // 指标名称不参与推荐
            fields = BI.filter(fields, function (idx, dId) {
                return !BI.Utils.isTargetNameFieldById(dId);
            });

            // 字段去重
            return service.uniqueDimension(fields, widget.dimensions);
        },

        /**
         * 添加指标名称这个字段到widget.dimensions中
         * return [指标名称dim.id]
         */
        _addTargetNameDimensionID: function (widget) {
            var targetNameField = BI.Utils.getTargetNameField(widget.wId);
            var service = BI.Services.getService("bi.service.design.widget.region");
            var targetNameDims = service.addDimensions([targetNameField], widget);
            BI.each(targetNameDims, function (i, dim) {
                Fix.set(widget.dimensions, dim.id, dim);
            });
            return BI.map(targetNameDims, function (idx, dim) {
                return dim.id;
            });
        },

        // 替换富文本的参数id
        replaceRichTextParams: function (attrSettings, dimensionMap) {
            if (attrSettings && attrSettings.content) {
                var content = attrSettings.content;
                attrSettings.content = content.replaceAll('(data-id=")(.*?)(")', function () {
                    var prefix = arguments[1],
                        postfix = arguments[3],
                        dId = arguments[2];

                    return prefix + dimensionMap[dId] + postfix;
                });
            }
        },

        /**
         * BI-25236 清空设置
         */
        _clearSettings: function (widget, chartAttr, viewAttr, allDims) {
            this._clearChartAttr(widget, chartAttr);
            this._clearDimensionSettings(widget, allDims);
            this._clearRegionAttr(viewAttr);
        },

        /**
         * BI-25236 推荐图表逻辑优化，在推荐的时候会清空图形属性中的设置
         */
        _clearChartAttr: function (widget, chartAttr) {
            var attrService = BI.Services.getService("bi.service.design.chart.attr");

            function resetGeomSettings(originGeomSettings, newGeomSettings, geomId) {
                newGeomSettings.type = originGeomSettings.type;
                newGeomSettings.selectedType = originGeomSettings.selectedType;
                newGeomSettings.dimensionId = geomId;
                return newGeomSettings;
            }

            // 先清除widget下的chartAttr
            BI.each(widget.settings.chartAttr, function (geomId, geomSettings) {
                BI.each(geomSettings, function (attrName, attrSettings) {
                    if (BI.isNotNull(attrSettings) && BI.isNotEmptyArray(attrSettings.dimensionIds)) {
                        clearArray(attrSettings.dimensionIds);
                    }
                });
            });

            BI.each(BI.keys(chartAttr), function (idx, geomId) {
                var originGeomSettings = chartAttr[geomId];
                var newGeomSettings;
                if (geomId === BICst.WORDS.ENTIRE) {
                    newGeomSettings = attrService.getEntireAttrSetting(widget);
                } else {
                    newGeomSettings = attrService.getBasicAttrSetting(widget);
                }
                chartAttr[geomId] = resetGeomSettings(originGeomSettings, newGeomSettings, geomId);
            });
        },

        /**
         * BI-25236 清空每一个字段的分类轴设置、值轴设置、堆积设置、特殊显示、分析线设置
         */
        _clearDimensionSettings: function (widget, allDims) {
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button"),
                attrService = BI.Services.getService("bi.service.design.chart.attr"),
                dimensions = widget.dimensions;

            BI.each(allDims, function (idx, dId) {
                // 清除堆积设置、特殊显示、分析线设置
                var settings = BI.extend(BI.Utils.getSwitchMeasureSettingById(dId), {
                    stack: false,
                    cordon: [],
                    trendLine: [],
                    flash: [],
                    annotate: [],
                    imageData: []
                });
                service.mountAttribute(dId, "settings", settings);

                // 清除分类轴和值轴设置
                attrService.setPrivateDimSettings(dimensions, dId, "categoryAxis", {});
                attrService.setPrivateDimSettings(dimensions, dId, "valueAxis", {});
            });

            // todo: 钻取目录的分类轴、值轴等设置清空
        },

        /**
         * BI-25236 清空横纵轴的聚合、并列设置
         */
        _clearRegionAttr: function (viewAttr) {
            viewAttr[BICst.REGION.DIMENSION1].left = {};
            viewAttr[BICst.REGION.DIMENSION1].right = {};
            viewAttr[BICst.REGION.TARGET1].left = {};
            viewAttr[BICst.REGION.TARGET1].right = {};
        },

        /**
         * 给所有的图形指标字段构造settings
         */
        _resetViewDims: function (widget, chartAttr, hRegion, vRegion, measureDims) {
            var attrService = BI.Services.getService("bi.service.design.chart.attr");
            var view = widget.view;

            view[BICst.REGION.TARGET1] = vRegion;
            view[BICst.REGION.DIMENSION1] = hRegion;

            BI.each(measureDims, function (idx, dId) {
                if (!BI.has(chartAttr, dId)) {
                    var geomSettings = attrService.getBasicAttrSetting(widget);
                    geomSettings.dimensionId = dId;
                    chartAttr[dId] = geomSettings;
                }
            });
        },

        /**
         * 选择了kpi指标卡图形选项——状选择文本，指标字段置于文本中，文本内容默认为指标名+指标值
         */
        _kpiCard: function (widget, chartAttr, viewAttr, dims, measures) {
            var richTextService = BI.Services.getService("bi.service.design.chart.attr.rich_text");

            BI.each(chartAttr, function (geomId, geomSettings) {
                geomSettings.type = geomSettings.selectedType = BICst.CHART.ATTR.CHART_TYPE.TEXT;
                geomSettings.text.dimensionIds = measures.slice();
                geomSettings.text.content = richTextService.getKPICardContent(measures);
                geomSettings.text.hasModified = true;
            });
        },

        /**
         * 形状选择了颜色表格——所有维度字段置于纵轴；形状选择文本，指标字段同时置于文本和颜色属性中
         */
        _colorTable: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.chart.attr"),
                dimensions = widget.dimensions,
                view = widget.view;

            // 设置指标字段的属性
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.TEXT;
                settings.text.dimensionIds = [service.addDimensions(dimensions, measures[0])];
                settings.color.dimensionIds = measures.slice(0, 1);
            });

            // 所有维度字段置于纵轴
            view[BICst.REGION.TARGET1] = dims.slice();
            view[BICst.REGION.DIMENSION1] = [];
        },

        /**
         * 分组表格：形状选择文本。所有维度按照顺序置于纵轴中，所有指标字段置于文本，指标名称集合置于横轴。
         */
        _groupTable: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.chart.attr"),
                view = widget.view;

            // 所有维度字段置于纵轴，所有指标名称置于横轴
            view[BICst.REGION.TARGET1] = dims.slice();
            // BI-23535
            view[BICst.REGION.DIMENSION1] = this._addTargetNameDimensionID(widget);

            // 设置指标字段的属性
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.TEXT;
                settings.text.dimensionIds = measures.slice();
            });
        },

        /**
         * 迷你图：所有维度字段置于纵轴；形状选择点，一个指标字段置于大小属性，
         * 如果有第二个指标字段则置于颜色属性中，如果有更多的指标字段则置于细粒度中。
         */
        _mini: function (widget, chartAttr, viewAttr, dims, measures) {
            // 所有维度字段置于纵轴   把横轴清空
            this._resetViewDims(widget, chartAttr, [], dims.slice(), []);

            BI.each(chartAttr, function (dId, settings) {
                settings.size.dimensionIds = measures.slice(0, 1);
                settings.color.dimensionIds = measures.slice(1, 2);
                settings.granularity.dimensionIds = measures.slice(2);

                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.POINT;
            });
        },

        /**
         * 热力区域图：形状选择热力点，一个维度字段置于横轴，一个维度字段置于纵轴，
         * 如果有指标字段的话置于大小属性中。颜色选择'热力'
         */
        _heat: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims.slice(0, 1), dims.slice(1, 2), []);

            BI.each(chartAttr, function (dId, settings) {
                settings.size.dimensionIds = measures.slice(0, 1);
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.HEAT_MAP;

                settings.heatColor.name = BICst.WORDS.HEAT;
                settings.granularity.dimensionIds = BI.concat(settings.granularity.dimensionIds, measures.slice(1));
            });
        },

        /**
         * 分区柱形图：形状选择柱形图，所有维度字段置于横轴；所有指标字段置于纵轴，纵轴开启‘指标并列’。
         */
        _sliceColumn: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 横轴开启指标并列
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.INTERVAL;
            });
        },

        /**
         * 堆积柱形图：
         * 形状选择柱形图，所有维度字段置于横轴；所有指标字段置于纵轴，
         * 且都开启堆积模式。纵轴开启‘指标聚合’。指标名称置于颜色属性。
         */
        _stackColumn: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");

            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var targetNameDims = this._addTargetNameDimensionID(widget);
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.INTERVAL;

                settings.color.dimensionIds = targetNameDims.slice();
            });

            // 所有指标字段都开启堆积模式。
            BI.each(measures, function (idx, dId) {
                var settings = BI.extend(BI.Utils.getSwitchMeasureSettingById(dId), {
                    stack: true
                });
                service.mountAttribute(dId, "settings", settings);
            });
        },

        /**
         * 多系列柱形图
         * 形状选择柱形图。所有维度字段置于横轴，所有指标字段置于纵轴，
         * 纵轴开启‘指标聚合’。指标名称置于颜色属性。
         */
        _seriesColumn: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var targetNameDims = this._addTargetNameDimensionID(widget);
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.INTERVAL;

                settings.color.dimensionIds = targetNameDims.slice();
            });
        },

        /**
         * 对比柱状图：
         * 形状选择柱形图。维度字段置于纵轴；两个指标字段都置于横轴，
         * 纵轴开启‘指标并列’。第一个指标字段对应的值轴开启轴逆序。
         */
        _compareColumn: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, measures, dims, measures);

            // 纵轴开启‘指标并列’。
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;
            viewAttr[BICst.REGION.DIMENSION1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;
            widget.viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;
            widget.viewAttr[BICst.REGION.DIMENSION1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;

            // 第一个指标字段对应的值轴开启轴逆序
            if (measures && measures.length > 0) {
                var service = BI.Services.getService("bi.service.design.chart.value.axis");
                var firstMeasureID = measures[0];
                widget.dimensions[firstMeasureID].settings = widget.dimensions[firstMeasureID].settings || {};
                var valueAxisSettings = widget.dimensions[firstMeasureID].settings.valueAxis = service.settings(widget, firstMeasureID);
                valueAxisSettings.reversed = true;
            }

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.INTERVAL;
            });
        },

        /**
         * 瀑布图：
         * 形状选择矩形块。所有维度字段置于横轴，一个指标字段置于纵轴，一个指标字段置于大小属性。
         */
        _waterFall: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures.slice(0, 1), measures.slice(0, 1));

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.SQUARE;

                settings.size.dimensionIds = measures.slice(1, 2);
            });
        },

        /**
         * 分区折线图:
         * 形状选择折线。所有维度字段置于横轴；所有指标字段置于纵轴。纵轴开启‘指标并列’。
         */
        _sliceLine: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标并列’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.PARALLEL;

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.LINE;

                // BI-23583 去除雷达图的设置
                if (settings.lineConnect.convert2Radar) {
                    settings.lineConnect.convert2Radar.selected = false;
                }
            });
        },

        /**
         * 多系列折线图：
         * 形状选择折线。所有维度字段置于横轴；所有指标字段置于纵轴，指标名称置于颜色属性。纵轴开启‘指标聚合’
         */
        _seriesLine: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var targetNameDims = this._addTargetNameDimensionID(widget);
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.LINE;

                settings.color.dimensionIds = targetNameDims.slice();

                // BI-23583 去除雷达图的设置
                if (settings.lineConnect.convert2Radar) {
                    settings.lineConnect.convert2Radar.selected = false;
                }
            });
        },

        /**
         * 折线雷达图：
         * 形状选择折形图。所有维度字段置于横轴；指标字段置于纵轴，指标名称置于颜色属性。
         * 纵轴开启‘指标聚合’。线型设置中，开启雷达图。
         */
        _radar: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var targetNameDims = this._addTargetNameDimensionID(widget);
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.LINE;

                settings.color.dimensionIds = targetNameDims.slice();

                if (BI.contains(BI.keys(settings.lineConnect), "convert2Radar")) {
                    settings.lineConnect.convert2Radar = {
                        valid: true,
                        selected: true
                    };
                } else {
                    // 从entire中继承lineConnect属性
                    var entireSetting = chartAttr[BICst.WORDS.ENTIRE].lineConnect;
                    var inheritService = BI.Services.getService("bi.service.chart.popup.line_setting_inherit");
                    var newSettings;

                    newSettings = BI.extend(inheritService.inheritLineConnectionSetting(entireSetting), settings.lineConnect);
                    settings.lineConnect = newSettings;

                    settings.lineConnect.convert2Radar = {
                        valid: true,
                        selected: true
                    };
                }
            });
        },

        /**
         * 范围面积图：
         * 形状选择面积。所有维度字段置于横轴；所有字段置于纵轴，
         * 且开启堆积属性 ，纵轴开启‘指标聚合’。
         * 颜色设置中第一个颜色设置不透明度设置为0
         * 所有颜色不透明度设置为0.4
         */
        _rangeArea: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");

            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 所有指标开启堆积属性
            BI.each(measures, function (idx, dId) {
                var settings = BI.extend(BI.Utils.getSwitchMeasureSettingById(dId), {
                    stack: true
                });
                service.mountAttribute(dId, "settings", settings);
            });

            // 纵轴开启‘指标聚合’
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var firstMeasureID;
            if (measures && measures.length > 0) {
                firstMeasureID = measures[0];
            }
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.AREA;

                settings.color = settings.color || {};
                settings.color.isUserDefinedOpacity = dId === firstMeasureID;
                settings.color.opacity = dId === firstMeasureID ? 0 : 0.4;
                settings.color.gradient = false;
            });
        },

        /**
         * 组合图：
         * 第一个指标形状选择为折线图，其余指标形状选择为柱形图；所有维度字段置于横轴，
         * 所有指标字段都设置在纵轴，纵轴开启‘指标聚合’。
         */
        _combination: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.chart.attr");

            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’。
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            // 第一个指标形状选择为折线图，其余指标形状选择为柱形图
            service.addAttrSettings(widget, chartAttr, measures);
            var firstMeasure = measures[0];
            chartAttr[firstMeasure].type = chartAttr[firstMeasure].selectedType = BICst.CHART.ATTR.CHART_TYPE.LINE;
            BI.each(chartAttr, function (dId, settings) {
                if (dId !== firstMeasure) {
                    settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.INTERVAL;
                }
                // BI-23583 去除雷达图的设置
                if (settings.lineConnect.convert2Radar) {
                    settings.lineConnect.convert2Radar.selected = false;
                }
            });

        },

        /**
         * 散点图：
         * 形状选择点。所有维度字段置于横轴；指标字段置于纵轴。指标名称置于颜色属性。纵轴开启‘指标聚合’。
         */
        _point: function (widget, chartAttr, viewAttr, dims, measures) {
            this._resetViewDims(widget, chartAttr, dims, measures, measures);

            // 纵轴开启‘指标聚合’。
            viewAttr[BICst.REGION.TARGET1].type = BICst.DESIGN.VIEW_ATTR.POLY;

            var targetNameDims = this._addTargetNameDimensionID(widget);
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.POINT;
                settings.color.dimensionIds = targetNameDims.slice();
            });
        },

        /**
         * 聚合气泡图：
         * 形状选择点，所有维度字段置于细粒度属性中，指标字段置于大小属性中，如果有第二个指标字段，置于颜色属性中。
         */
        _bubble: function (widget, chartAttr, viewAttr, dims, measures) {
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.POINT;

                settings.granularity.dimensionIds = dims.slice();
                settings.size.dimensionIds = measures.slice(0, 1);
                settings.color.dimensionIds = measures.slice(1, 2);
            });
        },

        /**
         * 饼图：
         * 形状选择饼图，维度字段置于颜色属性中，指标字段置于角度属性中。且开启共用半径。
         */
        _pie: function (widget, chartAttr, viewAttr, dims, measures) {
            var inheritService = BI.Services.getService("bi.service.design.chart.attr.size_setting"),
                entireSetting = chartAttr[BICst.WORDS.ENTIRE].size;

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.PIE;

                settings.color.dimensionIds = dims.slice(0, 1);
                settings.pieAngle.dimensionIds = measures.slice(0, 1);

                if (!settings.size.pieRadius) {
                    // 如果没有设置过pieRadius属性，需要继承自entire
                    var newSettings,
                        chartType = BICst.CHART.ATTR.CHART_TYPE.PIE,
                        options = {
                            isFieldsInRegion: false,
                            isOnlyDimsInSomeRegion: false,
                            isOnlyDimsInRegion: false
                        };

                    newSettings = BI.extend(inheritService.inheritSizeSetting(entireSetting, chartType, options), settings.size);
                    settings.size = newSettings;
                }

                settings.size.pieRadius.sameRadius = true;
            });
        },

        /**
         * 玫瑰图：
         * 形状选择饼图，维度字段置于颜色属性中，一个指标字段置于角度属性，另一个字段置于半径属性，不开启共用半径。
         */
        _rose: function (widget, chartAttr, viewAttr, dims, measures) {
            var sizeService = BI.Services.getService("bi.service.design.chart.attr.size_setting"),
                entireSetting = chartAttr[BICst.WORDS.ENTIRE].size;

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.PIE;
                settings.color.dimensionIds = dims.slice(0, 1);

                settings.pieAngle.dimensionIds = measures.slice(0, 1);

                settings.size.dimensionIds = measures.slice(1, 2);

                if (!settings.size.pieRadius) {
                    // 如果没有设置过pieRadius属性，需要继承自entire
                    var newSettings,
                        chartType = BICst.CHART.ATTR.CHART_TYPE.PIE,
                        options = {
                            isFieldsInRegion: false,
                            isOnlyDimsInSomeRegion: false,
                            isOnlyDimsInRegion: false
                        };

                    newSettings = BI.extend(sizeService.inheritSizeSetting(entireSetting, chartType, options), settings.size);
                    settings.size = newSettings;
                }

                settings.size.pieRadius.sameRadius = false;
            });
        },

        /**
         * 区分所有字段中哪些是经度字段，哪些是纬度字段，哪些是普通字段
         */
        _distinguishDimensions: function (dims) {
            var map = {
                latitude: [],
                longitude: [],
                dimension: [],
                measure: []
            };

            BI.each(dims, function (idx, dId) {
                if (BI.Utils.isLatitudeDimension(dId) || BI.Utils.isLatitudeTarget(dId)) {
                    map.latitude.push(dId);
                } else if (BI.Utils.isLongitudeDimension(dId) || BI.Utils.isLongitudeTarget(dId)) {
                    map.longitude.push(dId);
                } else if (BI.Utils.isTargetById(dId)) {
                    map.measure.push(dId);
                } else {
                    map.dimension.push(dId);
                }
            });

            return map;
        },

        /**
         * 区域地图：
         * 形状选择填充地图，维度字段的经纬度分别置于横纵轴，如果有指标字段的话置于颜色属性中。
         */
        _areaMap: function (widget, chartAttr, viewAttr, dims, measures) {
            var dimMap = this._distinguishDimensions(BI.concat(dims, measures));

            this._resetViewDims(widget, chartAttr, dimMap.longitude, dimMap.latitude, []);

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.MAP;
                settings.color.dimensionIds = dimMap.measure.slice(0, 1);
                settings.granularity.dimensionIds = dimMap.measure.slice(1);
            });
        },

        /**
         * 点地图：
         * 形状选择点，维度字段的经纬度分别置于横纵轴，如果有指标字段的话置于颜色属性中。
         */
        _pointMap: function (widget, chartAttr, viewAttr, dims, measures) {
            var dimMap = this._distinguishDimensions(BI.concat(dims, measures));

            this._resetViewDims(widget, chartAttr, dimMap.longitude, dimMap.latitude, []);

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.POINT;
                settings.color.dimensionIds = dimMap.measure.slice(0, 1);
                settings.granularity.dimensionIds = dimMap.measure.slice(1);
            });
        },

        /**
         * 流向地图：
         * 形状选择折线，地理角色维度字段的经纬度分别置于横纵轴，
         * 普通维度字段置于连线属性中，如果有指标字段的话置于大小属性中。
         */
        _lineMap: function (widget, chartAttr, viewAttr, dims, measures) {
            var dimMap = this._distinguishDimensions(BI.concat(dims, measures));

            this._resetViewDims(widget, chartAttr, dimMap.longitude, dimMap.latitude, []);

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.LINE;
                settings.size.dimensionIds = dimMap.measure.slice(0, 1);
                settings.granularity.dimensionIds = dimMap.measure.slice(1);
                settings.lineConnect.dimensionIds = dimMap.dimension.slice();
            });
        },

        /**
         * 热力地图：
         * 形状选择热力点，维度字段的经纬度分别置于横纵轴，如果有指标字段的话置于大小属性中。颜色选中'热力'方案
         */
        _heatMap: function (widget, chartAttr, viewAttr, dims, measures) {
            var dimMap = this._distinguishDimensions(BI.concat(dims, measures)),
                service = BI.Services.getService("bi.service.design.chart.attr");

            this._resetViewDims(widget, chartAttr, dimMap.longitude, dimMap.latitude, []);

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.HEAT_MAP;
                settings.size.dimensionIds = dimMap.measure.slice(0, 1);
                settings.granularity.dimensionIds = dimMap.measure.slice(1);
                settings.heatColor.name = BICst.WORDS.HEAT;
            });
        },

        /**
         * 矩形树图：
         * 形状选择矩形块，维度字段按照顺序添加到细粒度中，指标字段添加到大小属性中。
         */
        _rectTree: function (widget, chartAttr, viewAttr, dims, measures) {
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.SQUARE;

                settings.granularity.dimensionIds = dims.slice();
                settings.size.dimensionIds = measures.slice();
            });
        },

        /**
         * 词云
         * 形状选择文字，维度字段添加到文本中，指标字段添加到大小属性中。
         */
        _wordCloud: function (widget, chartAttr, viewAttr, dims, measures) {
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.TEXT;

                settings.text.dimensionIds = dims.slice();
                settings.size.dimensionIds = measures.slice();
            });
        },

        /**
         * 漏斗图
         * 形状选择漏斗图，维度字段添加到细粒度中，指标字段添加到大小属性中。
         */
        _funnel: function (widget, chartAttr, viewAttr, dims, measures) {
            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.FUNNEL;

                settings.granularity.dimensionIds = dims.slice();
                settings.size.dimensionIds = measures.slice(0, 1);
            });
        },

        /**
         * 仪表盘
         * 形状选择刻度槽型仪表盘，指标字段添加到指针值。
         */
        _gauge: function (widget, chartAttr, viewAttr, dims, measures) {
            var service = BI.Services.getService("bi.service.design.chart.attr");

            BI.each(chartAttr, function (dId, settings) {
                settings.type = settings.selectedType = BICst.CHART.ATTR.CHART_TYPE.GAUGE;
                settings.gaugeType = BICst.CHART.ATTR.GAUGE_TYPE.SLOT_GAUGE;
                settings.gaugePointNumber.dimensionIds = measures.slice(0, 1);
            });
        }
    });

    BI.service("bi.service.design.widget.detail.intelligent_recommend", Service);

})();!(function () {
    var DetailService = BI.inherit(BI.OB, {

        adjustRegionPlaceholder4DimHelper: function (e, ui, wId) {
            if (!$(".bi-design-widget-detail-region-manager." + wId).__isMouseInBounds__(e)) {
                return;
            }
            this.adjustPlaceholder(ui.placeholder, BI.Utils.isTargetById(ui.helper.data("dId")));
        },

        adjustRegionPlaceholder4FiledHelper: function (wId, placeholder, fId) {
            this.adjustPlaceholder(placeholder, BI.Utils.isTargetFieldById(wId, fId));
        },

        adjustPlaceholder: function (placeholder, isTarget) {
            // 排序的过程中dom元素位置变化时触发，处理指标只能拖到维度后面
            var prevDId = placeholder.prev().attr("dimensionId");
            var nextDId = placeholder.next().attr("dimensionId");

            if (isTarget) {
                if (!nextDId || (nextDId && BI.Utils.isTargetById(nextDId))) {
                    this.showPlaceholder(placeholder);
                } else {
                    this.adjustPlaceholderPosition(placeholder);
                }
            } else {
                if (!prevDId || (prevDId && !BI.Utils.isTargetById(prevDId))) {
                    this.showPlaceholder(placeholder);
                } else {
                    this.adjustPlaceholderPosition(placeholder);
                }
            }
        },

        adjustPlaceholderPosition: function (placeholder) {
            // 通过jquery插入指标和维度之间
            var $dim = placeholder.parent().find(".bi-dimension-button");
            var $tar = placeholder.parent().find(".bi-target-button");
            var $lastDim = $($dim[$dim.length - 1]);
            var $firstTar = $($tar[0]);
            if ($lastDim.length > 0) {
                $lastDim.after(placeholder);
            } else if ($firstTar.length > 0) {
                $firstTar.before(placeholder);
            }
        },

        showPlaceholder4ui: function (ui) {
            this.showPlaceholder(ui.placeholder);
        },

        showPlaceholder: function (placeholder) {
            placeholder.show();
            placeholder.data({
                show: true
            });
        },

        hidePlaceholder: function (ui) {
            ui.placeholder.hide();
            ui.placeholder.data({
                show: false
            });
        },

        getSortHelper: function ($currentItem, container) {
            var dId = $currentItem.attr("dimensionId");
            var help = BI.createWidget({
                type: "bi.helper",
                width: 120,
                height: 20,
                data: {dId: dId},
                cls: (BI.Utils.isTargetById(dId) ? "target-capsule-background" : "dimension-capsule-background") + " bi-capsule-border field-draggable",
                text: BI.Utils.getDimensionNameById(dId),
                textAlign: "left"
            });
            BI.createWidget({
                type: "bi.absolute",
                element: container,
                items: [{
                    el: help
                }]
            });
            return help.element;
        },

        isInDeleteArea: function (e, wId) {
            var inRegionArea = $(".bi-design-widget-detail-region-manager." + wId).__isMouseInBounds__(e);
            var inAttrRegionArea = $(".bi-design-widget-detail-table-chart-setting." + wId).__isMouseInBounds__(e);
            var inFilterRegionArea = $(".bi-design-detail-result-filter-group." + wId).__isMouseInBounds__(e);
            return !inRegionArea && !inAttrRegionArea && !inFilterRegionArea;
        },

        isInAttrDeleteArea: function (e, wId) {
            return !$(".bi-design-widget-detail-table-chart-setting." + wId).__isMouseInBounds__(e);
        },

        addRemoveCursor: function (e, ui, wId) {
            if (this.isInDeleteArea(e, wId)) {
                ui.helper.removeClass("delete-draggable").addClass("delete-draggable");
            } else {
                ui.helper.removeClass("delete-draggable");
            }
        },

        addRegionBorder: function (el) {
            el.removeClass("bi-region-border").addClass("bi-border bi-high-light-border");
        },

        removeRegionBorder: function (el) {
            el.removeClass("bi-border bi-high-light-border").addClass("bi-region-border");
        },

        insertDropPlaceholder: function (region, e, placeholder) {
            var $region = region.element;
            var items = $region.find(".region-dimension-button");
            var insert = BI.some(items, function (i, item) {
                var isInItem = $(item).__isMouseInBounds__(e);
                if (isInItem) {
                    var $item = $(item);
                    var itemLeft = $item.offset().left;
                    var itemWidth = $item.width();
                    if ((e.pageX - itemLeft) > itemWidth / 2) {
                        $item.after(placeholder);
                    } else {
                        $item.before(placeholder);
                    }
                    return true;
                }
            });
            if (!insert && $region.__isMouseInBounds__(e) && (placeholder.parent().length === 0)) {
                $region.append(placeholder);
            }
        },

        insertAttrDropPlaceholder: function (dimGroup, e, placeholder) {
            var $dimGroup = dimGroup.element;
            var items = $dimGroup.find(".region-dimension-button");
            var insert = BI.some(items, function (i, item) {
                var isInItem = $(item).__isMouseInBounds__(e);
                if (isInItem) {
                    var $item = $(item);
                    var itemTop = $item.offset().top;
                    var itemHeight = $item.height();
                    if ((e.pageY - itemTop) > itemHeight / 2) {
                        $item.after(placeholder);
                    } else {
                        $item.before(placeholder);
                    }
                    return true;
                }
            });
            if (!insert && $dimGroup.__isMouseInBounds__(e) && (placeholder.parent().length === 0)) {
                $dimGroup.append(placeholder);
            }
        },

        dealWithColumnSize4ViewChange: function (oView, view, columnSize, widgetType) {
            // 增删维度指标对于分组表和明细表需要相应的列宽进行调整
            // 交叉表的行表头区域增删也同样
            if (columnSize.length === 0) {
                return;
            }
            var dIds = [], dIdsCache = [];
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.TABLE:
                    dIds = dIds.concat(view[BICst.REGION.DIMENSION1]).concat(view[BICst.REGION.TARGET1]);
                    dIdsCache = dIdsCache.concat(oView[BICst.REGION.DIMENSION1]).concat(oView[BICst.REGION.TARGET1]);
                    break;
                case BICst.DESIGN.WIDGET.CROSS_TABLE:
                case BICst.DESIGN.WIDGET.DETAIL:
                    dIds = dIds.concat(view[BICst.REGION.DIMENSION1]);
                    dIdsCache = dIdsCache.concat(oView[BICst.REGION.DIMENSION1]);
                    break;
                default:
                    return;
            }
            var dId, index;
            if (dIds.length > dIdsCache.length) {
                // 增加
                dId = this._getDiffOfArr(dIdsCache, dIds);
                index = dIds.indexOf(dId);
                columnSize.splice(index, 0, 0);
            } else if (dIds.length < dIdsCache.length) {
                // 删除
                dId = this._getDiffOfArr(dIds, dIdsCache);
                index = dIdsCache.indexOf(dId);
                columnSize.splice(index, 1);
            }
        },

        _getDiffOfArr: function (ori, added) {
            return BI.find(added, function (i, id) {
                return !ori.contains(id);
            });
        }

    });
    BI.service("bi.service.design.widget.detail", DetailService);
})();
/**
 * Created by shine on 2018/5/5.
 * describe:
 */
!(function () {
    var Service = BI.inherit(BI.OB, {

        settings: function (widget, dimensionId) {
            var valueAxis = BI.deepClone(widget.dimensions[dimensionId].settings.valueAxis);

            var regionAttr = widget.viewAttr[BI.Utils.getRegionTypeById(dimensionId)];
            if (regionAttr.type === BICst.DESIGN.VIEW_ATTR.POLY) {

                var axisName = BI.isEmptyObject(valueAxis) || valueAxis.sharedAxis === BICst.CHART.SHARE_VALUE_AXIS.LEFT ? BICst.WORDS.LEFT : BICst.WORDS.RIGHT;

                valueAxis = BI.deepClone(regionAttr[axisName]);
            }

            if (this._isValueAxisHadNotSet(valueAxis)) {
                return this._getDefaultValueAxisSettings(widget, dimensionId);
            }

            valueAxis.label.fontStyle = this.getLabelFontStyle(valueAxis.label.fontStyle);
            valueAxis.title.fontStyle = this.getTitleFontStyle(valueAxis.title.fontStyle);

            return valueAxis;
        },

        _getDefaultValueAxisSettings: function (widget, dimensionId, targetSharedAxis) {
            var valueAxis = {
                label: {
                    displayed: true,
                    fontStyle: {
                        auto: true
                    },
                    rotation: 0
                },
                title: {
                    displayed: true,
                    fontStyle: {
                        auto: true
                    },
                    title: "",
                    hasModified: false
                },
                sharedAxis: targetSharedAxis || BICst.CHART.SHARE_VALUE_AXIS.LEFT,
                reversed: false,
                log: false,
                customScale: {
                    valid: false,
                    minScale: "",
                    maxScale: "",
                    intervalScale: ""
                }
            };

            valueAxis = this.getTitleContent(widget, dimensionId, valueAxis);
            valueAxis.label.fontStyle = this.getLabelFontStyle(valueAxis.label.fontStyle);
            valueAxis.title.fontStyle = this.getTitleFontStyle(valueAxis.title.fontStyle);

            return valueAxis;
        },

        getLabelFontStyle: function (fontStyle) {
            if (!fontStyle.auto) {
                return fontStyle;
            }
            var attrService = BI.Services.getService("bi.service.design.chart.attr");
            return BI.extend(fontStyle, attrService.getFontStyle());
        },

        getTitleFontStyle: function (fontStyle) {
            if (!fontStyle.auto) {
                return fontStyle;
            }
            var attrService = BI.Services.getService("bi.service.design.chart.attr");
            return BI.extend(fontStyle, attrService.getAxisTitleStyle());
        },

        // 获取当前值轴的标题
        getTitleContent: function (widget, dimensionId, valueAxis) {
            if (BI.isNull(valueAxis.title) || valueAxis && valueAxis.title && valueAxis.title.hasModified) {
                return valueAxis;
            }

            var title,
                self = this;

            // 指标聚合状态下获取所有的指标的名称
            var regionAttr = widget.viewAttr[BI.Utils.getRegionTypeById(dimensionId)];
            if (regionAttr.type === BICst.DESIGN.VIEW_ATTR.POLY) {
                var dims = widget.view[BI.Utils.getRegionTypeById(dimensionId)];
                dims = BI.map(dims, function (idx, dId) {
                    var isSameSharedAxis = BI.Utils.isTargetById(dId)
                        && self.getSharedAxis(widget.dimensions, dId) === valueAxis.sharedAxis;
                    return isSameSharedAxis || dId === dimensionId
                        ? BI.Utils.getDimensionNameById(dId)
                        : "";
                });
                dims = BI.filter(dims, function (idx, item) {
                    return !!item;
                });

                title = dims.join("/");
            } else {
                title = BI.Utils.getDimensionNameById(dimensionId);
            }

            valueAxis.title.title = title;

            return valueAxis;
        },

        // 设置当前值轴的对立轴的标题
        setOppositeValueAxisTitle: function (widget, dimensionId, currentValueAxis) {
            var viewAttr = widget.viewAttr[BI.Utils.getRegionTypeById(dimensionId)];
            var dims = widget.view[BI.Utils.getRegionTypeById(dimensionId)];
            var oppositeSharedAxisName = currentValueAxis.sharedAxis === BICst.CHART.SHARE_VALUE_AXIS.LEFT ? BICst.WORDS.RIGHT : BICst.WORDS.LEFT;
            var oppositeValueAxis = viewAttr[oppositeSharedAxisName];
            var oppositeDims;
            var self = this;

            // 指标并列、标题已经自定义过、值轴未设置时不作处理
            if (viewAttr.type === BICst.DESIGN.VIEW_ATTR.PARALLEL
                || this._isValueAxisHadNotSet(oppositeValueAxis)
                || oppositeValueAxis.title.hasModified) {
                return;
            }

            oppositeDims = BI.filter(dims, function (idx, dId) {
                return BI.Utils.isTargetById(dId)
                    && dId !== dimensionId
                    && self.getSharedAxis(widget.dimensions, dId) === oppositeValueAxis.sharedAxis;
            });

            if (oppositeDims.length > 0) {
                oppositeDims = BI.map(oppositeDims, function (idx, dId) {
                    return BI.Utils.getDimensionNameById(dId);
                });
                oppositeValueAxis.title.title = oppositeDims.join("/");
            }
        },

        // 当前字段所属共享轴发生了改变，则需要清空原来的共享轴中引用了当前字段的公式
        clearOppositeValueAxisFormula: function (widget, dimensionId, currentValueAxis) {
            var viewAttr = widget.viewAttr[BI.Utils.getRegionTypeById(dimensionId)];
            var oppositeSharedAxisName = currentValueAxis.sharedAxis === BICst.CHART.SHARE_VALUE_AXIS.LEFT ? BICst.WORDS.RIGHT : BICst.WORDS.LEFT;
            var oppositeValueAxis = viewAttr[oppositeSharedAxisName];
            var fieldName = BI.Utils.getDimensionNameById(dimensionId);
            var originSharedAxis = widget.dimensions[dimensionId].settings.valueAxis.sharedAxis;

            originSharedAxis = BI.isNull(originSharedAxis) ? BICst.CHART.SHARE_VALUE_AXIS.LEFT : originSharedAxis;

            if (originSharedAxis === currentValueAxis.sharedAxis
                || viewAttr.type === BICst.DESIGN.VIEW_ATTR.PARALLEL
                || this._isValueAxisHadNotSet(oppositeValueAxis)) {
                return;
            }

            viewAttr[oppositeSharedAxisName] = this.clearFormula(oppositeValueAxis, fieldName);
        },

        // 共享轴切换处理
        switchSharedAxis: function (widget, dimensionId, targetSharedAxis) {
            var regionAttr = widget.viewAttr[BI.Utils.getRegionTypeById(dimensionId)];
            var axisName = targetSharedAxis === BICst.CHART.SHARE_VALUE_AXIS.LEFT ? BICst.WORDS.LEFT : BICst.WORDS.RIGHT;
            var valueAxis = BI.deepClone(regionAttr[axisName]);

            if (this._isValueAxisHadNotSet(valueAxis)) {
                return this._getDefaultValueAxisSettings(widget, dimensionId, targetSharedAxis);
            }

            valueAxis = this.getTitleContent(widget, dimensionId, valueAxis);
            valueAxis.label.fontStyle = this.getLabelFontStyle(valueAxis.label.fontStyle);
            valueAxis.title.fontStyle = this.getTitleFontStyle(valueAxis.title.fontStyle, true);

            return valueAxis;
        },

        // 判断值轴是否被设置过
        _isValueAxisHadNotSet: function (valueAxis) {
            return BI.isEmptyObject(valueAxis) || !BI.contains(BI.keys(valueAxis), "label");
        },

        getSharedAxis: function (dimensions, dId) {
            var sharedAxis = dimensions[dId].settings.valueAxis.sharedAxis;
            return BI.isNull(sharedAxis) ? BICst.CHART.SHARE_VALUE_AXIS.LEFT : sharedAxis;
        },

        //字段所属共享轴发生改变或者字段被删除时需要清空引用了该字段的公式
        clearFormula: function (valueAxis, changedDimName) {
            if (!valueAxis.customScale) {
                return valueAxis;
            }

            BI.each(valueAxis.customScale, function (key, value) {
                if (BI.isString(value) && value.indexOf(changedDimName) > -1) {
                    valueAxis.customScale[key] = "";
                }
            });

            return valueAxis;
        },

        // 横纵轴上字段变化，更新共享值轴设置
        regionChanged: function (widget, regionDims, regionAttr) {
            if (regionAttr.type !== BICst.DESIGN.VIEW_ATTR.POLY) {
                return;
            }

            function _getSharedAxis(dId) {
                var dimensionSettings = widget.dimensions[dId];
                if (!dimensionSettings) {
                    return;
                }

                var sharedAxis = dimensionSettings.settings.valueAxis && dimensionSettings.settings.valueAxis.sharedAxis;
                if (BI.isNull(sharedAxis)) {
                    sharedAxis = BICst.CHART.SHARE_VALUE_AXIS.LEFT;
                }
                return sharedAxis;
            }

            var leftDims = [], rightDims = [];
            var leftValueAxis = regionAttr.left;
            var rightValueAxis = regionAttr.right;

            BI.each(regionDims, function (idx, dId) {
                if (!BI.Utils.isTargetById(dId)) {
                    return;
                }
                if (_getSharedAxis(dId) === BICst.CHART.SHARE_VALUE_AXIS.LEFT) {
                    leftDims.push(dId);
                } else {
                    rightDims.push(dId);
                }
            });

            if (BI.isNotEmptyArray(leftDims) && BI.isNotEmptyObject(leftValueAxis)) {
                leftValueAxis = this.getTitleContent(widget, leftDims[0], leftValueAxis);
            } else {
                leftValueAxis = {};
            }

            if (BI.isNotEmptyArray(rightDims) && BI.isNotEmptyObject(rightValueAxis)) {
                rightValueAxis = this.getTitleContent(widget, rightDims[0], rightValueAxis);
            } else {
                rightValueAxis = {};
            }

            regionAttr.left = leftValueAxis;
            regionAttr.right = rightValueAxis;
        }
    });

    BI.service("bi.service.design.chart.value.axis", Service);

})();!(function () {
    var Service = BI.inherit(BI.OB, {
        addDimensions: function (fields, widget) {
            var self = this, dims = [];
            BI.each(fields, function (i, f) {
                var field = BI.Utils.getFieldByIdOfWidget(widget.wId, f.id);
                var type = BI.Utils.getDimensionTypeByFieldType(field.type);
                var dId = BI.UUID();
                var dimConfConstant = BI.deepClone(BI.Constants.getConstant("bi.constant.design.widget.dimension.conf"));
                var dim = BI.extend({}, dimConfConstant, {
                    id: dId,
                    type: type,
                    fieldId: f.id,
                    name: field.name,
                    group: {
                        type: BI.Utils.getDefaultGroupTypeByFieldIdOfWidget(widget.wId, f.id)
                    }
                });
                // 维度经纬度当做分组看
                f.geoType && (dim.group.type = f.geoType);
                // BI-24879 指标经纬度的默认分组为求平均
                if (BI.Utils.isTargetFieldById(widget.wId, f.id) && BI.isNotNull(field.geoType) && field.geoType !== BICst.DESIGN.TARGET_FIELD_GEO.NONE) {
                    dim.group.type = BICst.DESIGN.SUMMARY_TYPE.AVG;
                }
                dims.push(dim);
            });
            return dims;
        },

        addDimensions4Control: function (fields) {
            var dims = [];
            BI.each(fields, function (i, field) {
                var dId = BI.UUID();
                var type = BI.Utils.getDimensionTypeByFieldType(field.type);
                var name = field.transferName || BI.Utils.getFieldTransferName(field.id) || field.name;

                var dim = BI.extend({}, BI.Constants.getConstant("bi.constant.design.control.dimension.conf"), {
                    id: dId,
                    type: type,
                    fieldId: field.id,
                    name: name,
                    sort: {
                        type: BICst.DESIGN.SORT.FILTER_ASC,
                        targetFieldId: field.id
                    }
                });
                dims.push(dim);
            });
            return dims;
        },

        setClusterDimensions: function (dimensions) {
            var dimConfConstant = BI.deepClone(BI.Constants.getConstant("bi.constant.design.widget.dimension.conf"));
            var dId = BI.UUID();
            Fix.set(dimensions, dId, BI.extend({}, dimConfConstant, {
                id: dId,
                type: BICst.DESIGN.DIMENSION_TYPE.DATA_MINING,
                group: {
                    type: BICst.DESIGN.GROUP.ID_GROUP
                }
            }));

            return dId;
        }
    });
    BI.service("bi.service.design.widget.region", Service);
})();
/**
 * 汇总表格帮助类
 * Created by Young's on 2017/1/19.
 */
!(function () {
    var traverse = function (node, callback, index) {
        index = index || 0;
        if (node !== null) {
            var flag = callback && callback(node, index);
            flag && BI.each(node.getChildren(), function (i, child) {
                traverse(child, callback, index + 1);
            });
        }
    };
    var preTraverse = function (node, callback, index) {
        index = index || 0;
        if (BI.isNotNull(node)) {
            BI.each(node.getChildren(), function (i, child) {
                preTraverse(child, callback, index + 1);
            });
            callback && callback(node, index);
        }
    };
    var deleteNode2Root = function (node, tree) {
        var parent = tree.search(node.id) ? tree.search(node.id).getParent() : null;
        if (BI.isNotNull(parent)) {
            parent.removeChild(node);
            if (parent.getChildrenLength() === 0) {
                deleteNode2Root(parent, tree);
            }
        }
    };

    var TableService = BI.inherit(BI.OB, {

        MIN_COLUMN_INIT_WIDTH: 60,
        MAX_COLUMN_INIT_WIDTH: 200,

        mergeRule: function (col1, col2) {
            if (col1.tag && col2.tag) {
                return col1.tag === col2.tag;
            }
            return col1 === col2;
        },

        formatItems: function (items, parentValue, index, pNode, op) {
            parentValue = parentValue || [];
            index = index || 0;
            var self = this;
            BI.each(items, function (i, item) {
                var value = parentValue.slice();
                var node;
                if (BI.isNotNull(item.dId)) {
                    var nodeId = item.dId + item.text;
                    nodeId = pNode ? (pNode.get("id") + nodeId) : nodeId;
                    node = new BI.Node(nodeId);
                    node.set("dId", item.dId);
                    node.set("text", item.text);
                    op.tree && op.tree.addNode(pNode, node);
                    op.treeMap && (op.treeMap[nodeId] = node);
                    op.dimFieldIdMap = op.dimFieldIdMap || {};
                    if (BI.isNull(op.dimFieldIdMap[item.dId])) {
                        op.dimFieldIdMap[item.dId] = BI.Utils.getResultDimensionFieldIdById(item.dId);
                    }
                    value.push({
                        dId: item.dId,
                        text: item.text,
                        fieldId: op.dimFieldIdMap[item.dId]
                    });
                    op.cellCreator(item, value, index + i, pNode, nodeId, false);
                }
                var isLastSum = op.isLastSum;
                if (BI.isNotNull(item.children)) {
                    op.isLastSum = false;
                    self.formatItems(item.children, value, index + i, node, op);
                }
                if (BI.isFunction(op.cellCreator)) {
                    BI.each(item.values, function (j, v) {
                        var pv = value.slice();
                        if (BI.isNotNull(op.crossPV) && BI.isNotNull(op.crossPV[j])) {
                            pv = pv.concat(BI.deepClone(op.crossPV[j]));
                        }
                        v.dId && op.cellCreator(BI.extend(v, {isValue: true}), pv, index + i, null, null, isLastSum);
                    });
                }
            });
            return items;
        },

        formatExpanderTree: function (eTree) {
            var self = this, result = [];
            BI.each(eTree, function (i, t) {
                var item = {};
                item.text = t.node.text;
                item.dId = t.node.dId;
                if (BI.isNotNull(t.children)) {
                    item.children = self.formatExpanderTree(t.children);
                }
                result.push(item);
            });
            return result;
        },

        // 点击展开收起节点
        toggleCellExpand: function (eTree, tree, treeMap, pNode, nodeId, openRowNode, headerExpand) {
            // 全部展开再收起——横向
            var clickNode = eTree.search(nodeId);
            if (openRowNode === true) {
                if (BI.isNull(clickNode)) {
                    // 找到原始tree的这个节点的所有父节点，遍历一遍是否存在于eTree中
                    // a、存在，向eTree直接添加；b、不存在，把这些父级节点都添加进去
                    var pNodes = [], finding = true;
                    while (finding) {
                        if (BI.isNull(eTree.search(nodeId))) {
                            var node = treeMap[nodeId];
                            pNodes.push(node);
                            if (node.getParent().get("id") === tree.getRoot().get("id")) {
                                finding = false;
                            }
                        } else {
                            finding = false;
                        }
                        nodeId = treeMap[nodeId].getParent().get("id");
                    }
                    pNodes.reverse();
                    BI.each(pNodes, function (i, pNode) {
                        var epNode = eTree.search(pNode.getParent().get("id"));
                        pNode.removeAllChilds();
                        eTree.addNode(BI.isNotNull(epNode) ? epNode : eTree.getRoot(), BI.deepClone(pNode));
                    });
                } else {
                    // 如果已经在这个eTree中，看其是否存在兄弟节点，如果没有应该删除当前节点所在的树，有的话， 只删除自身
                    if (eTree.search(nodeId).getParent().getChildrenLength() > 1) {
                        // 当前节点是否为一个父节点 1、如果是只需要删除子节点 2、不是则删除自身
                        if (eTree.search(nodeId).getChildrenLength() > 0) {
                            eTree.search(nodeId).removeAllChilds();
                        } else {
                            eTree.search(nodeId).getParent().removeChild(nodeId);
                        }
                        return;
                    }
                    if (eTree.search(nodeId).getChildrenLength() > 0) {
                        // 此时应该是做收起，把所有的children都remove掉
                        eTree.search(nodeId).removeAllChilds();
                        return;
                    }
                    // 删除到父节点状态与header状态不一样的时候或者有多个子元素
                    // Todo 冷静下再整理
                    _deleteNode2(eTree.search(nodeId));
                }
            } else {
                if (BI.isNull(clickNode)) {
                    var newNode = BI.deepClone(tree.search(nodeId));
                    newNode.removeAllChilds();
                    _addNode(newNode);
                } else {
                    // 反选状态下应该删除所在节点的链
                    _deleteNode(clickNode);
                    // clickNode.getParent().removeChild(nodeId);
                }
            }

            function _addNode (node) {
                var pNode = treeMap[node.get("id")].parent;
                if (BI.isNull(pNode) || pNode.get("id") === tree.getRoot().get("id")) {
                    eTree.addNode(eTree.search(eTree.getRoot().get("id")), node);
                } else {
                    if (eTree.search(pNode.get("id"))) {
                        eTree.addNode(eTree.search(pNode.get("id")), node);
                    } else {
                        var newNode = BI.deepClone(pNode);
                        newNode.removeAllChilds();
                        newNode.addChild(node);
                        _addNode(newNode);
                    }
                }
            }

            function _deleteNode (node) {
                var eNode = node.getParent();
                if (node.getChildrenLength() > 0) {
                    node.removeAllChilds();
                    if (headerExpand[node.get("dId")]) {
                        return;
                    }
                }
                eNode.removeChild(node.get("id"));
                if (headerExpand[eNode.get("dId")] && eNode.getChildrenLength() === 0) {
                    _deleteNode(eNode);
                }
            }

            function _deleteNode2 (node) {
                var eNode = node.getParent();
                if (BI.isNotNull(eNode)) {
                    eNode.removeChild(node.get("id"));
                    if (headerExpand[eNode.get("dId")] && eNode.getChildrenLength() === 0) {
                        _deleteNode2(eNode);
                    }
                }
            }
        },

        toggleHeaderExpand: function (headerId, headerExpand, eTree, view, openNode, isExpand) {
            var regionType = BI.Utils.getRegionTypeById(headerId) || BICst.REGION.DIMENSION1;
            var headerIndex = view[regionType].indexOf(headerId);
            if (isExpand) {
                // 全部收起操作(点击-),收起自己及子节点
                BI.each(view[regionType].slice(headerIndex, view[regionType].length - 1), function (i, did) {
                    headerExpand[did] = false;
                });
                if (openNode) {
                    // 默认展开的情况,删除深度大于headerIndex的分支
                    preTraverse(eTree.getRoot(), function (node, index) {
                        if (index >= headerIndex) {
                            node.removeAllChilds();
                            deleteNode2Root(node, eTree);
                        }
                    });
                } else {
                    traverse(eTree.getRoot(), function (node, index) {
                        if (index >= headerIndex) {
                            _deleteNode(node);
                            return false;
                        }
                        return true;
                    });
                }
            } else {
                // 全部展开操作(点击+),展开自己及父节点
                BI.each(view[regionType].slice(0, headerIndex + 1), function (i, did) {
                    headerExpand[did] = true;
                });
                eTree.getRoot().removeAllChilds();
            }

            function _deleteNode (node) {
                node.removeAllChilds();
                if (headerExpand[node.get("dId")] && headerExpand[node.get("dId")] !== openNode) {
                    _deleteNode(node.getParent());
                }
            }
        },

        isHeaderExpand: function (headerId, headerExpand, eTree, view, openNode) {
            var regionType = BI.Utils.getRegionTypeById(headerId) || BICst.REGION.DIMENSION1;
            var headerIndex = view[regionType].indexOf(headerId);
            var hasExpander = false;
            var isReverse = openNode !== headerExpand[headerId];
            traverse(eTree.getRoot(), function (node, index) {
                if (index >= headerIndex + 1) {
                    (node.getChildrenLength() === 0) && (hasExpander = true);
                    return false;
                }
                return true;
            });

            if (openNode && !isReverse && hasExpander) {
                return false;
            }

            if (!openNode && isReverse && hasExpander) {
                return false;
            }

            return headerExpand[headerId];
        },

        isRowHeaderExpand: function (headerExpand, eTree, openRowNode) {
            var hasExpand = BI.any(headerExpand, function (idx, expand) {
                return expand;
            });
            var clickEmpty = eTree.getRoot().getChildrenLength() === 0;
            if (openRowNode && clickEmpty && hasExpand) {
                return true;
            }
            if (!openRowNode && clickEmpty && hasExpand) {
                return true;
            }
            return false;
        },

        getFinalParent: function (eTree, nodeId) {
            var node = eTree.search(nodeId);
            if (node.getParent().get("id") === eTree.getRoot().get("id")) {
                return nodeId;
            }
            return this.getFinalParent(eTree, node.getParent().get("id"));
        },

        getSummaryRGBAColorByThemeColor: function (wId) {
            var tableStyleService = BI.Services.getService("bi.service.table.style");
            var alpha = tableStyleService.isBothDarkOrLightColor(wId) ? 0.5 : 0.15;
            var filterAlpha = tableStyleService.isBothDarkOrLightColor(wId) ? "80" : "26";
            var themeColor = BI.Utils.getResTableThemeColorById(wId);
            var rgba = BI.Func.parseHEXAlpha(themeColor, alpha);
            if (BI.isEmptyString(rgba)) {
                return {
                    background: rgba
                };
            }
            return {
                background: rgba,
                filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#" + filterAlpha + themeColor.substr(1) + ",endColorstr=#" + filterAlpha + themeColor.substr(1) + ");"
            };
        },

        getOddRGBAColorByThemeColor: function (wId) {
            var tableStyleService = BI.Services.getService("bi.service.table.style");
            var alpha = tableStyleService.isBothDarkOrLightColor(wId) ? 0.25 : 0.08;
            var filterAlpha = tableStyleService.isBothDarkOrLightColor(wId) ? "40" : "14";
            var themeColor = BI.Utils.getResTableThemeColorById(wId);
            var rgba = BI.Func.parseHEXAlpha(themeColor, alpha);
            if (BI.isEmptyString(rgba)) {
                return {
                    background: rgba
                };
            }
            return {
                background: rgba,
                filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#" + filterAlpha + themeColor.substr(1) + ",endColorstr=#" + filterAlpha + themeColor.substr(1) + ");"
            };
        },

        getEvenRGBAColorByThemeColor: function (wId) {
            var tableStyleService = BI.Services.getService("bi.service.table.style");
            var alpha = tableStyleService.isBothDarkOrLightColor(wId) ? 0.1 : 0.04;
            var filterAlpha = tableStyleService.isBothDarkOrLightColor(wId) ? "1a" : "0a";
            var themeColor = BI.Utils.getResTableThemeColorById(wId);
            var rgba = BI.Func.parseHEXAlpha(themeColor, alpha);
            if (BI.isEmptyString(rgba)) {
                return {
                    background: rgba
                };
            }
            return {
                background: rgba,
                filter: "progid:DXImageTransform.Microsoft.gradient(startColorstr=#" + filterAlpha + themeColor.substr(1) + ",endColorstr=#" + filterAlpha + themeColor.substr(1) + ");"
            };
        },

        getRowRGBAColorBYIndexAndThemeColor: function (wId, isOdd) {
            return isOdd ? this.getOddRGBAColorByThemeColor(wId) : this.getEvenRGBAColorByThemeColor(wId);
        },

        getHeaderStyles: function (themeColor, styleType) {
            if (BI.DOM.isRGBColor(themeColor)) {
                themeColor = BI.DOM.rgb2hex(themeColor);
            }
            switch (styleType) {
                case BICst.TABLE_STYLE.STYLE1:
                    return {
                        background: themeColor,
                        color: BI.DOM.getContrastColor(themeColor)
                    };
                case BICst.TABLE_STYLE.STYLE2:
                    return {
                        background: themeColor,
                        color: BI.DOM.getContrastColor(themeColor)
                    };
                case BICst.TABLE_STYLE.STYLE3:
                    return {};
                default :
                    return {};
            }
        },

        getOddBodyStyle: function (wId) {
            return this.getBodyStyles(wId, true);
        },

        getEvenBodyStyle: function (wId) {
            return this.getBodyStyles(wId, false);
        },

        getBodyStyles: function (wId, isOdd) {
            switch (BI.Utils.getResTableStyleTypeById(wId)) {
                case BICst.TABLE_STYLE.STYLE1:
                    return this.getRowRGBAColorBYIndexAndThemeColor(wId, isOdd);
                case BICst.TABLE_STYLE.STYLE2:
                    return {};
                case BICst.TABLE_STYLE.STYLE3:
                    return {};
                default :
                    return {};
            }
        },

        getSummaryStyles: function (wId) {
            switch (BI.Utils.getResTableStyleTypeById(wId)) {
                case BICst.TABLE_STYLE.STYLE1:
                    return BI.extend({
                        fontWeight: "bold"
                    }, this.getSummaryRGBAColorByThemeColor(wId));
                case BICst.TABLE_STYLE.STYLE2:
                    return {
                        fontWeight: "bold"
                    };
                case BICst.TABLE_STYLE.STYLE3:
                    return {
                        color: BI.Utils.getResTableThemeColorById(wId),
                        fontWeight: "bold"
                    };
                default :
                    return {};
            }
        },

        getLastSummaryStyles: function (themeColor, styleType) {
            if (BI.DOM.isRGBColor(themeColor)) {
                themeColor = BI.DOM.rgb2hex(themeColor);
            }
            switch (styleType) {
                case BICst.TABLE_STYLE.STYLE1:
                    return {
                        background: themeColor,
                        color: BI.DOM.getContrastColor(themeColor),
                        fontWeight: "bold"
                    };
                case BICst.TABLE_STYLE.STYLE2:
                    return {
                        background: themeColor,
                        color: BI.DOM.getContrastColor(themeColor),
                        fontWeight: "bold"
                    };
                case BICst.TABLE_STYLE.STYLE3:
                    return {
                        color: themeColor,
                        fontWeight: "bold"
                    };
                default :
                    return {};
            }
        },

        getPageOperatorByPages: function (nextVPage, nextHPage, currVPage, currHPage) {
            var pageOperator = BICst.DESIGN.TABLE_PAGE_OPERATOR.COLUMN_NEXT;
            if (nextVPage > currVPage) {
                pageOperator = BICst.DESIGN.TABLE_PAGE_OPERATOR.ROW_NEXT;
            }
            if (nextVPage < currVPage) {
                pageOperator = BICst.DESIGN.TABLE_PAGE_OPERATOR.ROW_PRE;
            }
            if (nextHPage > currHPage) {
                pageOperator = BICst.DESIGN.TABLE_PAGE_OPERATOR.COLUMN_NEXT;
            }
            if (nextHPage < currHPage) {
                pageOperator = BICst.DESIGN.TABLE_PAGE_OPERATOR.COLUMN_PRE;
            }
            return pageOperator;
        },

        transformItems: function (items, dims, layerIndex, rowIndex, columnContentCache) {
            var self = this;
            layerIndex = layerIndex || 0;
            rowIndex = rowIndex || 0;
            columnContentCache = columnContentCache || [];
            BI.each(items, function (i, item) {
                if (BI.isNotNull(item.children)) {
                    self.transformItems(item.children, dims, layerIndex + 1, rowIndex, columnContentCache);
                }
                if (BI.isNotNull(item.values)) {
                    var dimSize = dims.length;
                    BI.each(item.values, function (j, v) {
                        BI.isNull(columnContentCache[dimSize + j]) && (columnContentCache[dimSize + j] = []);
                        columnContentCache[dimSize + j].push(v);
                    });
                }
                if (BI.isNotNull(item.text)) {
                    BI.isNull(columnContentCache[layerIndex - 1]) && (columnContentCache[layerIndex - 1] = []);
                    columnContentCache[layerIndex - 1].push(item);
                }
                rowIndex++;
            });
            return columnContentCache;
        },

        calculateMinColumnSize: function (columns) {
            // 默认使用最大长度单元格宽度
            // 最大值：均值x2  最小值：60
            var min = this.MIN_COLUMN_INIT_WIDTH;
            return BI.map(columns, function (i, column) {
                if (BI.isNull(column)) {
                    return min;
                }
                var sizes = [], curr = min;
                BI.each(column, function (j, cell) {
                    if (BI.isNotNull(cell.text) && BI.isNotEmptyString(cell.text)) {
                        var size = Math.ceil(BI.Func.getGBWidth(cell.text) * 12 * 1.2);
                        if (cell.isHeader) {
                            size += 58;     // 10 + 24 (iconWidth + hgap + iconWidth)
                        } else {
                            size += 24;
                        }
                        curr = curr > size ? curr : size;
                        sizes.push(size);
                    }
                });
                var max = min;
                if (sizes.length > 0) {
                    max = sizes.reduce(function (pre, curr) {
                        return pre + curr;
                    }) / sizes.length * 2;
                }
                max = max > min ? max : min;
                curr = curr > max ? max : curr;
                curr = curr < min ? min : curr;
                return curr;
            });
        },
        getCellFontStyle: function (fontStyle) {
            var style = {};
            if (fontStyle.bold) {
                style.fontWeight = "bold";
            }
            if (fontStyle.italic) {
                style.fontStyle = "italic";
            }
            if (fontStyle.underline) {
                style.textDecoration = "underline";
            }
            if (fontStyle.fontColor) {
                style.color = fontStyle.fontColor;
            }
            if (fontStyle.fontFamily) {
                style.fontFamily = fontStyle.fontFamily;
            }
            if (fontStyle.fontSize) {
                style.fontSize = fontStyle.fontSize;
            }
            return style;
        },

        getHeaderCellFontStyle: function (fontStyle) {
            var style = this.getCellFontStyle(fontStyle);
            if (fontStyle.fontAlign) {
                style.textAlign = this.getCellFontTextAlign(fontStyle.fontAlign);
            }
            return style;
        },

        getBodyDimCellFontStyle: function (fontStyle) {
            var style = this.getCellFontStyle(fontStyle);
            if (fontStyle.dimFontAlign) {
                style.textAlign = this.getCellFontTextAlign(fontStyle.dimFontAlign);
            }
            return style;
        },

        getBodyTarCellFontStyle: function (fontStyle) {
            var style = this.getCellFontStyle(fontStyle);
            if (fontStyle.tarFontAlign) {
                style.textAlign = this.getCellFontTextAlign(fontStyle.tarFontAlign);
            }
            return style;
        },

        getCellFontTextAlign: function (fontAlign) {
            // 表身
            switch (fontAlign) {
                case BICst.FONT_ALIGN.CENTER:
                    return "center";
                case BICst.FONT_ALIGN.RIGHT:
                    return "right";
                case BICst.FONT_ALIGN.LEFT:
                default:
                    return "left";
            }
        },

        doEqualDivideColumnSize: function (width, size, dimSize) {
            var avgSize = Math.floor(width / size);
            var columnSize = BI.makeArray(size, avgSize > 80 ? avgSize : 80);
            var regionSize = 0;
            BI.each(columnSize, function (i, size) {
                if (i < dimSize) {
                    regionSize += size;
                }
            });
            // 不大于4/5
            regionSize = (regionSize > 0.8 * width) ? 0.8 * width : regionSize;
            return {
                columnSize: columnSize,
                regionColumnSize: [regionSize]
            };
        },

        summaryCellStyleGetter: function (wId, isLast) {
            var defaultStyle = isLast ? this.getLastSummaryStyles(BI.Utils.getResTableThemeColorById(wId), BI.Utils.getResTableStyleTypeById(wId)) :
                this.getSummaryStyles(wId);
            var font = BI.Utils.getResTableFontById(wId);
            // 汇总的textAlign使用dim的，target的在cell内部处理
            return BI.extend(BI.deepClone(defaultStyle), this.getBodyDimCellFontStyle(font.body));
        },

        sequenceCellStyleGetter: function (wId, index) {
            var defaultStyle = this.getBodyStyles(wId, index % 2 === 0);
            var font = BI.Utils.getResTableFontById(wId);
            return BI.extend(BI.deepClone(defaultStyle), this.getBodyDimCellFontStyle(font.body));
        },
        headerCellStyleGetter: function (themeColor, style, font) {
            var defaultStyle = this.getHeaderStyles(themeColor, style);
            return BI.extend(BI.deepClone(defaultStyle), this.getHeaderCellFontStyle(font.header));
        },

        // 默认列宽小于组件宽度，需要进行等比例重新分配
        calculateColumnSize: function (columnSize, width) {
            var total = BI.reduce(columnSize, function (pre, curr) {
                return pre + curr;
            });
            if (total < width) {
                var r = width / total;
                return BI.map(columnSize, function (i, size) {
                    return Math.floor(size * r);
                });
            }
            return columnSize;
        },

        setSortFilter: function (dId, v, callback) {
            switch (v) {
                case BICst.DESIGN.SORT.ASC:
                case BICst.DESIGN.SORT.DESC:
                case BICst.DESIGN.SORT.NONE:
                    this.setSort(dId, v);
                    callback();
                    break;
                default:
                    this.setFilter(dId, callback);
            }
        },

        setSort: function (dId, v) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
            // 指标仅有一个可以设置升序降序，一经设置所有的维度都自动变成以此指标相应排序，其他指标变成不排序
            if (BI.Utils.isTargetById(dId)) {
                BI.each(BI.Utils.getAllDimensionIDs(wId), function (i, id) {
                    if (!BI.Utils.isTargetById(id)) {
                        service.mountAttribute(id, "sort", {
                            type: v,
                            sortTarget: BI.Utils.getDimensionsGroupIdBydId(dId)
                        });
                    }
                });
            }
            service.mountAttribute(dId, "sort", {type: v, sortTarget: BI.Utils.getDimensionsGroupIdBydId(dId)});
        },

        setFilter: function (dId, callback) {
            var self = this, name = BI.UUID();
            var type = BI.Utils.isTargetById(dId) ? "bi.design.target.filter.popover.center" : "bi.design.dimension.filter.popover.center";
            BI.Popovers.create(name, {
                header: BI.i18nText("BI-Design_Add_Dimension_Filter", BI.Utils.getDimensionNameById(dId)),
                body: {
                    type: type,
                    dId: dId,
                    wId: BI.Utils.getWidgetIdBydId(dId),
                    ref: function (_ref) {
                        self.filterCenter = _ref;
                    }
                },
                type: "bi.bar_popover",
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        var v = self.filterCenter.getValue();
                        var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                        service.mountAttribute(dId, "filter", v, !BI.Utils.isTargetById(dId));
                        BI.Popovers.remove(name);
                        callback();
                    }
                }, {
                    eventName: "EVENT_CLOSE",
                    action: function () {
                        BI.Popovers.remove(name);
                    }
                }]
            }).open(name);
        },

        isEmptyWidget: function (wId) {
            var view = BI.Utils.getWidgetViewById(wId);
            var dimSize = 0;
            BI.each(view, function (vId, dims) {
                dimSize += dims.length;
            });
            return dimSize === 0;
        },

        initTableCacheMap: function () {
            return function () {
                var self = this;
                this.switchMeasureSettingMap = {};
                this.resMeasureSettingMap = {};
                this.resDimensionTypeMap = {};
                this.resDimensionGroupTypeMap = {};
                this.sortMap = {};
                this.filterMap = {};
                this.dimFieldNameMap = {};
                this.showDrillMap = {};

                if (BI.isNotNull(this.model.wId)) {
                    var dIds = BI.Utils.getAllDimensionIDs(this.model.wId);
                    BI.each(dIds, function (i, dId) {
                        self.switchMeasureSettingMap[dId] = BI.Utils.getSwitchMeasureSettingById(dId);
                        self.resMeasureSettingMap[dId] = BI.Utils.getResMeasureSettingsById(dId);
                        self.resDimensionTypeMap[dId] = BI.Utils.getResultDimensionTypeById(dId);
                        self.resDimensionGroupTypeMap[dId] = BI.Utils.getResultDimensionGroupTypeById(dId);
                        self.sortMap[dId] = BI.Utils.getResMeasureSortById(dId);
                        self.filterMap[dId] = BI.Utils.getResMeasureFilterById(dId);
                        self.dimFieldNameMap[dId] = BI.Utils.getFieldNameByIdOfWidget(self.model.wId, BI.Utils.getResultDimensionFieldIdById(dId));
                        self.showDrillMap[dId] = BI.Utils.isDimensionExist(dId) &&
                            BI.Utils.isDrillDimensionById(dId) &&
                            !BI.Utils.isGeometricDimension(dId);
                    });
                    this.headerFont = BI.Utils.getResTableHeaderFontById(this.model.wId);
                    this.bodyFont = BI.Utils.getResTableBodyFontById(this.model.wId);
                    this.oddBodyStyle = this.service.getOddBodyStyle(this.model.wId);
                    this.evenBodyStyle = this.service.getEvenBodyStyle(this.model.wId);
                }
            };
        }
    });
    BI.service("bi.service.table", TableService);
})();
/**
 * Created by astronaut007 on 2018/8/17
 */
!(function () {
    var TableStyleService = BI.inherit(BI.OB, {

        setStyle: function (wId, objects) {
            var service = BI.Services.getService("bi.service.design.template.style");
            service.setStyle(wId, objects);
        },

        setTableStyle: function (wId) {
            var tableStyleService = BI.Services.getService("bi.service.table.style");
            var alpha = tableStyleService.isBothDarkOrLightColor(wId) ? 0.7 : 0.15;
            var themeColor = BI.Utils.getResTableThemeColorById(wId);
            var borderColor = BI.Func.parseHEXAlpha(themeColor, alpha);
            var style = BI.extend({
                ".bi-collection-table-cell": {"border-color": borderColor},
                ".bi-grid-table-cell": {"border-color": borderColor}
            });
            var obj = {};
            BI.each(style, function (key, v) {
                obj["#body .bi-dashboard-widget .wId-" + wId + " " + key] = v;
            });
            this.setStyle(wId, obj);
        },

        isBothDarkOrLightColor: function (wId) {
            return BI.isEqual(this._isDarkWidgetBackground(wId), this._isDarkThemeColor(wId));
        },

        _isDarkThemeColor: function (wId) {
            return BI.DOM.isDarkColor(BI.Utils.getResTableThemeColorById(wId));
        },

        _isDarkWidgetBackground: function (wId) {
            return BI.DOM.isDarkColor(this._getActualWidgetBackground(wId));
        },

        _getActualWidgetBackground: function (wId) {
            var service = BI.Services.getService("bi.service.design.template.style");
            var widgetBg = service.getBackgroundValue(BI.Utils.getWidgetBackgroundById(wId));
            var mainBg = service.getActualMainBackground();
            if (BI.DOM.isHexColor(widgetBg)) {
                return widgetBg;
            } else if (widgetBg === "transparent") {
                if (BI.DOM.isHexColor(mainBg)) {
                    return mainBg;
                }
            } else {
                var templateWidgetBg = service.getActualWidgetBackground();
                if (BI.DOM.isHexColor(templateWidgetBg)) {
                    return templateWidgetBg;
                }
                if (BI.DOM.isHexColor(mainBg)) {
                    return mainBg;
                }
            }
        }
    });
    BI.service("bi.service.table.style", TableStyleService);
}());/**
 * Created by astronaut007 on 2018/7/18
 */
!(function () {
    var Service = BI.inherit(BI.OB, {
        syncDimensionGroups: function (wId) {
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return;
            }
            var newDimensionGroups = BI.Utils.getSamePropertyDimensionGroupBydIds(BI.keys(widget.dimensions));
            var resultDimensionGroups = {};
            BI.each(newDimensionGroups, function (newKey, newObj) {
                var result = BI.find(widget.dimensionGroups, function (key, obj) {
                    return obj.group === newObj.group;
                });
                if (BI.isNotNull(result)) {
                    resultDimensionGroups[result.group] = newObj;
                } else {
                    resultDimensionGroups[newObj.group] = newObj;
                }
            });
            if (BI.isNotNull(widget)) {
                widget.dimensionGroups = resultDimensionGroups;
            }
        },

        clearDimensionProperty: function (wId) {
            // 没有聚类胶囊，清空数据挖掘配置
            this.clearClusterConf(wId);
            // 当维度区域没有原始字段+分组(对指标来说是汇总方式和快速计算)对应的胶囊时，需要删除存在measure下的dimension的配置信息
            var dimGroupConf = this._getDimGroupConf(wId);
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return;
            }
            BI.each(widget.measures, function (i, m) {
                var field = BI.Utils.getFieldByIdOfWidget(wId, m.id);
                var group = m.group;
                switch (field.type) {
                    case BICst.COLUMN.NUMBER:
                    case BICst.COLUMN.CALCULATE:
                        BI.each(dimGroupConf.tarGroup, function (i, it) {
                            if (it.fieldId === m.id) {
                                var sumPrefix = "summary_" + it.summary, calPrefix = "cal_" + it.cal;
                                if (BI.isNotEmptyObject(group[sumPrefix])
                                    && BI.isNotEmptyObject(group[sumPrefix]["cal"])
                                    && BI.isNotEmptyObject(group[sumPrefix]["cal"][calPrefix])) {
                                    group[sumPrefix]["cal"][calPrefix].keep = true;
                                }
                            }
                        });
                        BI.each(group, function (key, g) {
                            BI.each(g.cal, function (k, c) {
                                !c.keep && (group[key]["cal"][k] = {});
                                delete group[key]["cal"][k].keep;
                            });
                        });
                        break;
                    case BICst.COLUMN.COUNTER:
                        BI.each(dimGroupConf.counterGroup, function (i, it) {
                            if (it.fieldId === m.id) {
                                var depPrefix = "counterDep_" + it.dep, calPrefix = "cal_" + it.cal;
                                if (BI.isNotEmptyObject(group[depPrefix])
                                    && BI.isNotEmptyObject(group[depPrefix]["cal"])
                                    && BI.isNotEmptyObject(group[depPrefix]["cal"][calPrefix])) {
                                    group[depPrefix]["cal"][calPrefix].keep = true;
                                }
                            }
                        });
                        BI.each(group, function (i, g) {
                            BI.each(g.cal, function (k, c) {
                                !c.keep && (group[i]["cal"][k] = {});
                                delete group[i]["cal"][k].keep;
                            });
                        });
                        break;
                    default:
                        BI.each(dimGroupConf.dimGroup, function (i, it) {
                            if (it.fieldId === m.id) {
                                BI.isNotEmptyObject(group["group_" + it.groupType]) && (group["group_" + it.groupType].keep = true);
                            }
                        });
                        BI.each(group, function (i, g) {
                            !g.keep && (group[i] = {});
                            delete group[i].keep;
                        });
                        break;
                }
            });
        },

        _getDimGroupConf: function (wId) {
            var dimGroup = [];
            var tarGroup = [];
            var counterGroup = [];
            BI.each(BI.Utils.getAllDimensionIDs(wId), function (idx, dId) {
                switch (BI.Utils.getDimensionTypeById(dId)) {
                    case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                        counterGroup.push({
                            fieldId: BI.Utils.getFieldIdBydId(dId),
                            dep: BI.Utils.getDimensionCounterDepById(dId),
                            cal: BI.Utils.getDimensionCalculationTypeById(dId)
                        });
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                        tarGroup.push({
                            fieldId: BI.Utils.getFieldIdBydId(dId),
                            summary: BI.Utils.getDimensionGroupTypeById(dId),
                            cal: BI.Utils.getDimensionCalculationTypeById(dId)
                        });
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                        var fieldId = BI.Utils.getFieldIdBydId(dId);
                        dimGroup.push({
                            fieldId: fieldId,
                            groupType: BI.Utils.getDimensionGroupTypeById(dId)
                        });
                        if (BI.Utils.isDrillField(wId, fieldId)) {
                            var dir = BI.Utils.getFieldDirByIdOfWidget(wId, fieldId);
                            BI.each(dir, function (idx, d) {
                                if (d.id !== fieldId) {
                                    var drillFields = BI.Utils.getMeasureDrillFieldsById(dId);
                                    var groupType = BI.Utils.getDefaultGroupTypeByFieldIdOfWidget(wId, d.id);
                                    if (drillFields && drillFields[d.id] && drillFields[d.id].group && drillFields[d.id].group.type) {
                                        groupType = drillFields[d.id].group.type;
                                    }
                                    dimGroup.push({
                                        fieldId: fieldId,
                                        groupType: groupType
                                    });
                                }
                            });
                        }
                        break;
                    default:
                        break;
                }
            });
            return {
                dimGroup: dimGroup,
                tarGroup: tarGroup,
                counterGroup: counterGroup
            };
        },

        clearClusterConf: function (wId) {
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return;
            }
            // BI-28380
            if (widget.dataMining && BI.isEqual(widget.dataMining.algorithmName, BICst.RAPID_DATA_MINING.ALGORITHM.KMEANS)) {
                var hasClusterDim = BI.some(BI.Utils.getAllDimensionIDs(wId), function (i, id) {
                    if (BI.Utils.getDimensionTypeById(id) === BICst.DESIGN.DIMENSION_TYPE.DATA_MINING) {
                        return true;
                    }
                });
                if (!hasClusterDim) {
                    widget.dataMining = {
                        algorithmName: BICst.RAPID_DATA_MINING.ALGORITHM.EMPTY
                    };
                }
            }
        },

        dimensionsChanged: function (wId) {
            this.syncDimensionGroups(wId);
            this.clearDimensionProperty(wId);
            var measureService = BI.Services.getService("bi.service.design.widget.measure");
            measureService.clearDrillSequence(wId);
        }
    });
    BI.service("bi.service.design.widget.table_chart", Service);
})();
/**
 * @author: Teller
 * @createdAt: 2018/7/13 下午2:05
 * @Description
*/

!(function () {
    var Service = BI.inherit(BI.OB, {
        checkWidgetUsable: function (wId) {
            var map = {};
            BI.each(BI.designModel.widgets, function (widgetId, widget) {
                var measures = widget.measures;
                BI.each(measures, function (idx, field) {
                    if(BI.isNotNull(field.calculate) && field.calculate.type === BICst.DESIGN.CAL_TARGET.FORMULA) {
                        var targetIds = field.targetIds;
                        BI.each(targetIds, function (id, targetId) {
                            var target = targetId.split("_")[0];
                            if (wId === target) {
                                map[widgetId] = map[widgetId] || [];
                                map[widgetId].push(field.id);
                            }
                        });
                    }
                });
            });
            return map;
        },

        getDefaultValue: function (widgetType, valueMap, view, dimensions) {
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.STRING:
                case BICst.DESIGN.WIDGET.STRING_LIST:
                    var stringValue = [];
                    BI.some(valueMap, function (dId, value) {
                        if (BI.has(dimensions, dId)) {
                            stringValue = value;
                            return true;
                        }
                    });
                    return {
                        assist: [],
                        type: BI.Selection.Multi,
                        value: BI.uniq(stringValue)
                    };
                case BICst.DESIGN.WIDGET.TREE_LABEL:
                    var treeLabelValue = [];
                    BI.some(view[BICst.REGION.DIMENSION1], function (index, dId) {
                        if (!BI.has(valueMap, dId)) return false;

                        treeLabelValue.push(BI.uniq(valueMap[dId]));
                    });
                    return treeLabelValue;
                default:
                    var dIds = view[BICst.REGION.DIMENSION1];

                    if (BI.size(dIds) === 0) return;

                    var treeValue = {};

                    BI.each(valueMap[BI.first(dIds)], function (index, val) {
                        treeValue[val] = BI.extend(treeValue[val], {});

                        var remainDIds = BI.deepClone(dIds);
                        remainDIds.shift();

                        var root = treeValue[val];

                        BI.each(remainDIds, function (idx, dId) {
                            var leaf = valueMap[dId][index];
                            root[leaf] = BI.extend(root[leaf], {});
                            root = root[leaf];
                        });
                    });
                    return treeValue;
            }
        }
    });
    BI.service("bi.service.design.widget.template", Service);
})();
!(function () {

    BI.constant("bi.constant.design.target_summary_group", [{
        text: BI.i18nText("BI-Basic_Calculate_Sum"),
        title: BI.i18nText("BI-Basic_Calculate_Sum"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.SUM
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Avg"),
        title: BI.i18nText("BI-Basic_Calculate_Avg"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.AVG
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Median"),
        title: BI.i18nText("BI-Basic_Calculate_Median"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.MIDDLE_VALUE
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Max"),
        title: BI.i18nText("BI-Basic_Calculate_Max"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.MAX
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Min"),
        title: BI.i18nText("BI-Basic_Calculate_Min"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.MIN
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Standard_Deviation"),
        title: BI.i18nText("BI-Basic_Calculate_Standard_Deviation"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.STANDARD_DEVIATION
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Variance"),
        title: BI.i18nText("BI-Basic_Calculate_Variance"),
        cls: "dot-e-font",
        value: BICst.DESIGN.SUMMARY_TYPE.VARIANCE
    }]);

    BI.constant("bi.constant.design.target_rapid_calculation_group", [{
        text: BI.i18nText("BI-Basic_None"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.NONE
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Calculate_Same_Period"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE
        },
        children: [{
            text: BI.i18nText("BI-Basic_Multi_Date_Year"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_YEAR,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Quarter"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_QUARTER,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Multi_Date_Month"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_MONTH,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Multi_Date_Week"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_WEEK,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Week_XingQi"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_VALUE_WEEKDAY,
            cls: "dot-e-font"
        }]
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Same_Ring"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.MONTH_ON_MONTH_VALUE
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Calculate_Same_Period_Rate"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE
        },
        children: [{
            text: BI.i18nText("BI-Basic_Multi_Date_Year"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_YEAR,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Quarter"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_QUARTER,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Multi_Date_Month"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_MONTH,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Multi_Date_Week"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_WEEK,
            cls: "dot-e-font"
        }, {
            text: BI.i18nText("BI-Basic_Week_XingQi"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.YEAR_ON_YEAR_RATE_WEEKDAY,
            cls: "dot-e-font"
        }]
    }, {
        text: BI.i18nText("BI-Basic_Calculate_Same_Ring_Rate"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.MONTH_ON_MONTH_RATE
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Rank"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK
        },
        children: [{
            text: BI.i18nText("BI-Basic_ASC_Sort"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_ASC
        }, {
            text: BI.i18nText("BI-Basic_DSC_Sort"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_DES
        }]
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Rank_In_Group"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_IN_GROUP
        },
        children: [{
            text: BI.i18nText("BI-Basic_ASC_Sort"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_IN_GROUP_ASC
        }, {
            text: BI.i18nText("BI-Basic_DSC_Sort"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.RANK_IN_GROUP_DES
        }]
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Sum_Of_All"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL
        },
        children: [{
            text: BI.i18nText("BI-Basic_Calculate_Sum"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_SUM
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Avg"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_AVG
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Max"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_MAX
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Min"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_MIN
        }]
    }, {
        el: {
            text: BI.i18nText("BI-Basic_Sum_Of_All_In_Group"),
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP
        },
        children: [{
            text: BI.i18nText("BI-Basic_Calculate_Sum"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_SUM
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Avg"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_AVG
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Max"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_MAX
        }, {
            text: BI.i18nText("BI-Basic_Calculate_Min"),
            cls: "dot-e-font",
            value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ALL_IN_GROUP_MIN
        }]
    }, {
        text: BI.i18nText("BI-Basic_Sum_Of_Above"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ABOVE
    }, {
        text: BI.i18nText("BI-Basic_Sum_Of_Above_In_Group"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.SUM_OF_ABOVE_IN_GROUP
    }, {
        text: BI.i18nText("BI-Design_Current_Dimension_Percent"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.CURRENT_DIMENSION_PERCENT
    }, {
        text: BI.i18nText("BI-Design_Current_Target_Percent"),
        cls: "dot-e-font",
        value: BICst.DESIGN.RAPID_CALCULATE_TYPE.CURRENT_TARGET_PERCENT
    }]);

    // 指标字段的特殊显示的选项
    BI.constant("bi.constant.design.target_special_display_item", [{
        text: BI.i18nText("BI-Design_Annotation") + "…",
        value: BICst.DESIGN.SPECIAL_DISPLAY.ANNOTATION
    }, {
        text: BI.i18nText("BI-Design_Flash_Animation") + "…",
        value: BICst.DESIGN.SPECIAL_DISPLAY.FLASH
    }, {
        text: BI.i18nText("BI-Design_Image_Data") + "…",
        value: BICst.DESIGN.SPECIAL_DISPLAY.DATA_IMAGE
    }]);

    // 指标字段设置分析线的item
    BI.constant("bi.constant.design.target_analysis_helper_setting_item", [{
        text: BI.i18nText("BI-Design_Cordon"),
        value: BICst.DESIGN.ANALYSIS_HELPER.CORDON
    }, {
        text: BI.i18nText("BI-Design_Trend_Line"),
        value: BICst.DESIGN.ANALYSIS_HELPER.TREND_LINE
    }]);

    BI.constant("bi.constant.design.dimension_string_item", [[{
        text: BI.i18nText("BI-Basic_In"),
        value: BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_In"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.CONTAIN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_NULL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.END_WITH,
        cls: "dot-e-font"
    }], [ {
        text: BI.i18nText("BI-Basic_Not_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_String_Top_N"),
        value: BICst.ANALYSIS_FILTER_STRING.TOP_N,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_String_Bottom_N"),
        value: BICst.ANALYSIS_FILTER_STRING.BOTTOM_N,
        cls: "dot-e-font"
    }]]);

    BI.constant("bi.constant.design.detail_dimension_string_item", [[{
        text: BI.i18nText("BI-Basic_In"),
        value: BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_In"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.CONTAIN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Contain"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_NULL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.END_WITH,
        cls: "dot-e-font"
    }], [ {
        text: BI.i18nText("BI-Basic_Not_Begin_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_End_With"),
        value: BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH,
        cls: "dot-e-font"
    }]]);

    BI.constant("bi.constant.design.target_number_item", [[{
        text: BI.i18nText("BI-Basic_Number_IN"),
        value: BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Number_In"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Equal_To"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_More_Than"),
        value: BICst.ANALYSIS_FILTER_NUMBER.LARGE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Less_Than"),
        value: BICst.ANALYSIS_FILTER_NUMBER.SMALL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_More_Than") + BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Less_Than") + BI.i18nText("BI-Basic_Equal"),
        value: BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Number_Top_N", "N"),
        value: BICst.ANALYSIS_FILTER_NUMBER.TOP_N,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Number_Bottom_N", "N"),
        value: BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_NUMBER.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL,
        cls: "dot-e-font"
    }]]);

    BI.constant("bi.constant.design.dimension_number_sub_item", [[{
        text: BI.i18nText("BI-Basic_Settled_Value"),
        value: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Average_Value"),
        value: BICst.ANALYSIS_FILTER_NUMBER_VALUE.AVG,
        cls: "dot-e-font"
    }]]);

    BI.constant("bi.constant.design.dimension_date_item", [[{
        text: BI.i18nText("BI-Basic_In"),
        value: BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_In"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_STRING_VALUE,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Contain"),
        value: BICst.ANALYSIS_FILTER_DATE.CONTAIN,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Contain"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_CONTAIN,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Is_Null"),
        value: BICst.ANALYSIS_FILTER_DATE.IS_NULL,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_Null"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_NULL,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_Begin_With"),
        value: BICst.ANALYSIS_FILTER_DATE.BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_End_With"),
        value: BICst.ANALYSIS_FILTER_DATE.END_WITH,
        cls: "dot-e-font"
    }], [ {
        text: BI.i18nText("BI-Basic_Not_Begin_With"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_BEGIN_WITH,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_Not_End_With"),
        value: BICst.ANALYSIS_FILTER_DATE.NOT_END_WITH,
        cls: "dot-e-font"
    }], [{
        text: BI.i18nText("BI-Basic_String_Top_N"),
        value: BICst.ANALYSIS_FILTER_DATE.TOP_N,
        cls: "dot-e-font"
    }, {
        text: BI.i18nText("BI-Basic_String_Bottom_N"),
        value: BICst.ANALYSIS_FILTER_DATE.BOTTOM_N,
        cls: "dot-e-font"
    }]]);

    BI.constant("bi.constant.design.date_range_combo_item", [{
        text: BI.i18nText("BI-Design_Last_Section_Of_Same_Interval"),
        value: BICst.DESIGN.DATE_TYPE.LAST_SAME_PERIOD
    }, {
        text: BI.i18nText("BI-Design_The_Same_Time_Period"),
        value: BICst.DESIGN.DATE_TYPE.SAME_PERIOD
    }]);

    BI.constant("bi.constant.design.date_param_item", [{
        text: BI.i18nText("BI-Design_Front"),
        value: 0
    }, {
        text: BI.i18nText("BI-Design_Behind"),
        value: 1
    }]);

    // 控件类型
    BI.constant("bi.constant.design.control_widgets", [
        BICst.DESIGN.WIDGET.STRING,
        BICst.DESIGN.WIDGET.STRING_LIST,
        BICst.DESIGN.WIDGET.NUMBER,
        BICst.DESIGN.WIDGET.SINGLE_SLIDER,
        BICst.DESIGN.WIDGET.INTERVAL_SLIDER,
        BICst.DESIGN.WIDGET.DATE_INTERVAL,
        BICst.DESIGN.WIDGET.MONTH,
        BICst.DESIGN.WIDGET.QUARTER,
        BICst.DESIGN.WIDGET.TREE,
        BICst.DESIGN.WIDGET.TREE_LIST,
        BICst.DESIGN.WIDGET.STRING_LABEL,
        BICst.DESIGN.WIDGET.TREE_LABEL,
        BICst.DESIGN.WIDGET.YEAR,
        BICst.DESIGN.WIDGET.DATE,
        BICst.DESIGN.WIDGET.DATE_PANE,
        BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL,
        BICst.DESIGN.WIDGET.GENERAL_QUERY
    ]);

    // 自定义控制组件类型
    BI.constant("bi.constant.design.customize_control_widgets", [
        BICst.DESIGN.WIDGET.TABLE,
        BICst.DESIGN.WIDGET.CROSS_TABLE,
        BICst.DESIGN.WIDGET.COMPLEX_TABLE,
        BICst.DESIGN.WIDGET.DETAIL,
        BICst.DESIGN.WIDGET.CHART,
        BICst.DESIGN.WIDGET.CONTENT
    ]);

    // 日期控件类型
    BI.constant("bi.constant.design.date_control_widgets", [
        BICst.DESIGN.WIDGET.DATE_INTERVAL,
        BICst.DESIGN.WIDGET.MONTH,
        BICst.DESIGN.WIDGET.QUARTER,
        BICst.DESIGN.WIDGET.YEAR,
        BICst.DESIGN.WIDGET.DATE,
        BICst.DESIGN.WIDGET.DATE_PANE,
        BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL
    ]);

    // instant控件
    BI.constant("bi.constant.design.instant_widgets", [
        BICst.DESIGN.WIDGET.STRING_LABEL,
        BICst.DESIGN.WIDGET.TREE_LABEL,
        BICst.DESIGN.WIDGET.TREE_LIST,
        BICst.DESIGN.WIDGET.STRING_LIST,
        BICst.DESIGN.WIDGET.SINGLE_SLIDER,
        BICst.DESIGN.WIDGET.DATE_PANE,
        BICst.DESIGN.WIDGET.INTERVAL_SLIDER
    ]);

    // special widget
    BI.constant("bi.constant.design.special_widgets", [
        BICst.DESIGN.WIDGET.CONTENT,
        BICst.DESIGN.WIDGET.IMAGE,
        BICst.DESIGN.WIDGET.WEB
    ]);

    BI.constant("bi.constant.design.widget.detail.table_style.auto_custom", [{
        title: BI.i18nText("BI-Basic_Auto"),
        text: BI.i18nText("BI-Basic_Auto"),
        value: BICst.DESIGN.TABLE_AGG_TYPE.AUTO
    }, {
        title: BI.i18nText("BI-Basic_Custom"),
        text: BI.i18nText("BI-Basic_Custom"),
        value: BICst.DESIGN.TABLE_AGG_TYPE.CUSTOM
    }]);

    BI.constant("bi.constant.design.widget.detail.table_style.font_family", [{
        value: "Microsoft YaHei",
        text: BI.i18nText("BI-Microsoft_YaHei")
    }, {
        value: "PingFangSC-Light",
        text: BI.i18nText("BI-Apple_Light")
    }, {
        value: "arial",
        text: "Arial"
    }, {
        value: "Verdana",
        text: "Verdana"
    }]);

    BI.constant("bi.constant.design.widget.detail.table_style.font_size", [{
        value: 12,
        text: 12
    }, {
        value: 13,
        text: 13
    }, {
        value: 14,
        text: 14
    }, {
        value: 16,
        text: 16
    }, {
        value: 18,
        text: 18
    }, {
        value: 20,
        text: 20
    }, {
        value: 22,
        text: 22
    }, {
        value: 24,
        text: 24
    }, {
        value: 26,
        text: 26
    }, {
        value: 28,
        text: 28
    }, {
        value: 30,
        text: 30
    }, {
        value: 32,
        text: 32
    }, {
        value: 34,
        text: 34
    }, {
        value: 36,
        text: 36
    }, {
        value: 38,
        text: 38
    }, {
        value: 40,
        text: 40
    }, {
        value: 64,
        text: 64
    }, {
        value: 128,
        text: 128
    }]);

    BI.constant("bi.constant.design.widget.detail.table_style.font_style", [{
        title: BI.i18nText("BI-Basic_Bold"),
        cls: "bi-list-item-active text-bold-font",
        value: BICst.FONT_STYLE.BOLD
    }, {
        title: BI.i18nText("BI-Basic_Italic"),
        cls: "bi-list-item-active text-italic-font",
        value: BICst.FONT_STYLE.ITALIC
    }, {
        title: BI.i18nText("BI-Basic_Underline"),
        cls: "bi-list-item-active text-underline-font",
        value: BICst.FONT_STYLE.UNDERLINE
    }]);

    BI.constant("bi.constant.design.widget.detail.table_style.font_align", [{
        title: BI.i18nText("BI-Design_Widget_Title_Left"),
        cls: "bi-list-item-active text-align-left-font",
        value: BICst.FONT_ALIGN.LEFT
    }, {
        title: BI.i18nText("BI-Design_Widget_Title_Center"),
        cls: "bi-list-item-active text-align-center-font",
        value: BICst.FONT_ALIGN.CENTER
    }, {
        title: BI.i18nText("BI-Design_Font_Right"),
        cls: "bi-list-item-active text-align-right-font",
        value: BICst.FONT_ALIGN.RIGHT
    }]);
})();
/**
 * author: young
 * createdDate: 2018/3/15
 * description: 获取后台计算相关 主要为控件和组件获取数据
 */

!(function () {
    BI.Utils = BI.Utils || {};
    var moduleRouter = "/design" + (BI.pool.moduleRouter || "");
    BI.extend(BI.Utils, {

        getWidgetData: function (widgetSetting, callback) {
            this._reqPost("/widget/data", widgetSetting, callback);
        },

        getTargetRangeWidthDimensions: function (data, callback) {
            this._reqPost("/dimensions/target/range", data, callback);
        },

        getFormulaResult: function (data, callback) {
            this._reqPost("/formula/result", data, callback);
        },

        getDimensionRange: function (data, callback) {
            this._reqPost("/dimension/range", data, callback);
        },

        getDimensionDomain: function (data, callback) {
            this._reqPost("/dimension/domain", data, callback);
        },

        getGisOptions: function (callback) {
            this._reqGet("/map/layers", {}, callback);
        },

        getSummaryValuesByTargetIds: function (settings, callback) {
            this._reqPost("/widget/data/summary", settings, callback);
        },

        getJumpFieldInfoByFieldIds: function (setting, callback) {
            this._reqPost("/widget/jump/fields", setting, function (res) {
                callback(res.data);
            });
        },

        getAllReportList: function (callback, complete) {
            this._reqGet("/dashboard/list/all", "", callback, complete);
        },

        getGeoData: function (options, callback) {
            this._reqPost("/widget/map/geometry", options, callback);
        },

        getTooltipInfo: function (options, callback) {
            this._reqPost("/widget/chart/tooltip", options, callback, null, {noProgress: true});
        },

        getGeoPath: function (options, callback) {
            this._reqPost("/widget/map/folder", options, callback);
        },

        getFieldDataById: function (options, callback) {
            var _callback = function (tableData) {
                var data = [];

                BI.some(tableData.data.fields, function (idx, item) {
                    if (item.id === options.fieldId) {
                        BI.each(tableData.data.data, function (index, arr) {
                            data.push(arr[idx]);
                        });
                        return true;
                    }
                });

                tableData.data = BI.union(data);

                callback(tableData);
            };

            BI.Utils.getFields4Design(options.tableName, _callback);
        },

        // 用于控件中的自定义排序
        getDimensionDataByDimension: function (tableName, dimension, callback) {
            var view = {};
            view[BICst.REGION.DIMENSION1] = [dimension.id];
            view[BICst.REGION.TARGET1] = [];

            var dimensions = {};
            dimensions[dimension.id] = dimension;

            var widget = {
                dimensions: dimensions,
                type: BICst.DESIGN.WIDGET.TABLE,
                view: view,
                wId: BI.UUID(),
                tableName: tableName,
                parameter: BI.Utils.getParamCalculation(),
                page: -1,
                reportId: this.getCurrentTemplateId(),
                realData: true
            };

            this.getWidgetData(widget, function (res) {
                callback(BI.map(BI.first(res.data.items).children, "text"));
            });
        },

        getDimensionDataById: function (did, callback) {
            var wid = this.getWidgetIdBydId(did);
            var widget = BI.deepClone(BI.designModel.widgets[wid]);
            var dimensions = widget.dimensions;
            var dimension = widget.dimensions[did];
            dimension.drillSequence = [];
            dimension.filter = {};
            dimension.used = true;
            widget.type = BICst.DESIGN.WIDGET.TABLE;
            widget.wId = wid;
            widget.page = -1;
            widget.dimensions = {};
            widget.dimensions[did] = dimension;
            widget.view = {};
            widget.view[BICst.REGION.DIMENSION1] = [did];
            widget.parameter = BI.Utils.getParamCalculation();
            widget.reportId = this.getCurrentTemplateId();
            widget.realData = true;

            var targetIds = this.getAllTargetDimensionIds(wid);
            BI.each(targetIds, function (idx, targetId) {
                widget.dimensions[targetId] = dimensions[targetId];
                widget.dimensions[targetId].filter = {};
                if (!BI.has(widget.view, BICst.REGION.TARGET1)) {
                    widget.view[BICst.REGION.TARGET1] = [];
                }
                widget.view[BICst.REGION.TARGET1].push(targetId);
            });

            this.getWidgetData(widget, function (res) {
                callback(BI.map(BI.first(res.data.items).children, "text"));
            });
        },

        getDimensionGroupDataById: function (did, callback) {
            var wid = this.getWidgetIdBydId(did);
            var widget = Fix.toJSON(BI.designModel.widgets[wid]);
            var dimensions = widget.dimensions;
            var dimension = widget.dimensions[did];
            dimension.drillSequence = [];
            dimension.fieldId = BI.Utils.getMeasureSwitchFieldById(did);
            dimension.filter = {};
            dimension.group = {
                type: BICst.DESIGN.GROUP.ID_GROUP
            };
            dimension.used = true;
            widget.type = BICst.DESIGN.WIDGET.TABLE;
            widget.wId = wid;
            widget.page = -1;
            widget.dimensions = {};
            widget.dimensions[did] = dimension;
            widget.view = {};
            widget.parameter = BI.Utils.getParamCalculation();
            widget.view[BICst.REGION.DIMENSION1] = [did];
            widget.reportId = this.getCurrentTemplateId();
            widget.realData = true;

            var targetIds = this.getAllTargetDimensionIds(wid);
            BI.each(targetIds, function (idx, targetId) {
                widget.dimensions[targetId] = dimensions[targetId];
                widget.dimensions[targetId].filter = {};
                if (!BI.has(widget.view, BICst.REGION.TARGET1)) {
                    widget.view[BICst.REGION.TARGET1] = [];
                }
                widget.view[BICst.REGION.TARGET1].push(targetId);
            });

            this.getWidgetData(widget, function (res) {
                callback(BI.map(BI.first(res.data.items).children, "text"));
            });
        },

        getDimensionGroupSortById: function (did, callback) {
            var wid = this.getWidgetIdBydId(did);
            var widget = Fix.toJSON(BI.designModel.widgets[wid]);
            var dimensions = widget.dimensions;
            var dimension = widget.dimensions[did];
            dimension.drillSequence = [];
            dimension.filter = {};
            dimension.sort = {};
            dimension.used = true;
            widget.type = BICst.DESIGN.WIDGET.TABLE;
            widget.wId = wid;
            widget.page = -1;
            widget.dimensions = {};
            widget.dimensions[did] = dimension;
            widget.view = {};
            widget.view[BICst.REGION.DIMENSION1] = [did];
            widget.reportId = this.getCurrentTemplateId();
            widget.realData = true;

            var targetIds = this.getAllTargetDimensionIds(wid);
            BI.each(targetIds, function (idx, targetId) {
                widget.dimensions[targetId] = dimensions[targetId];
                widget.dimensions[targetId].filter = {};
                if (!BI.has(widget.view, BICst.REGION.TARGET1)) {
                    widget.view[BICst.REGION.TARGET1] = [];
                }
                widget.view[BICst.REGION.TARGET1].push(targetId);
            });

            this.getWidgetData(widget, function (res) {
                callback(BI.map(BI.first(res.data.items).children, "text"));
            });
        },

        setCurrentSelectPackageID: function (pId) {
            var key = BICst.CACHE.PACKAGE_PREFIX + BI.Utils.getCurrentTemplateId();
            BI.Cache.setItem(key, pId);
        },

        getFilterWidgetSortTypesByDimensions: function (dimensions) {
            var sortTypes = [];

            BI.each(dimensions, function (dId, dimension) {
                if (!BI.has(dimension, "sort")) return;

                switch (dimension.sort.type) {
                    case BICst.DESIGN.SORT.FILTER_ASC:
                    case BICst.DESIGN.SORT.ASC:
                        sortTypes.push(BICst.DESIGN.SORT.ASC);
                        break;
                    case BICst.DESIGN.SORT.FILTER_DESC:
                    case BICst.DESIGN.SORT.DESC:
                        sortTypes.push(BICst.DESIGN.SORT.DESC);
                        break;
                    case BICst.DESIGN.SORT.FILTER_CUSTOM:
                        sortTypes.push(BICst.DESIGN.SORT.FILTER_CUSTOM);
                        break;
                    default:
                        break;
                }
            });

            return BI.uniq(sortTypes);
        },

        getControlCalculations: function (targetWId) {
            var self = this,
                filterValues = [];
            // 控件
            var widgetIds = this.getAllWidgetIds();
            BI.each(widgetIds, function (i, id) {
                if (!self.isControlWidgetByWidgetId(id)) return;

                // 自己不添加自己的过滤条件
                if (id === targetWId) return;

                // 如果存在targetWId且是非过滤组件且不在控制范围
                if (BI.isNotNull(targetWId) && !self.isControlWidgetByWidgetId(targetWId) && !self.isUnderControlRangeById(id, targetWId)) return;

                var type = self.getWidgetTypeById(id);
                var value = self.getWidgetValueById(id);
                if (BI.isNull(value)) return;

                if (BI.contains([BICst.DESIGN.WIDGET.TREE, BICst.DESIGN.WIDGET.TREE_LABEL, BICst.DESIGN.WIDGET.TREE_LIST], type)) {
                    filterValues.push({
                        filterType: BICst.ANALYSIS_FILTER_STRING.BELONG_WIDGET_VALUE,
                        filterValue: {
                            widgetId: id
                        }
                    });
                } else {
                    var dimensionIds = self.getAllDimensionIDs(id);
                    BI.each(dimensionIds, function (i, dimId) {
                        var fValue = value,
                            fType = "";
                        if (BI.isNull(fValue) || BI.isEmptyString(value) || BI.isEmptyObject(value) || !checkValueValid(type, value)) {
                            return;
                        }
                        var filter = null;
                        var fieldId = self.getFieldIdBydId(dimId);
                        switch (type) {
                            case BICst.DESIGN.WIDGET.STRING:
                            case BICst.DESIGN.WIDGET.STRING_LIST:
                            case BICst.DESIGN.WIDGET.STRING_LABEL:
                                fType = BICst.ANALYSIS_FILTER_STRING.BELONG_WIDGET_VALUE;
                                filter = {
                                    filterType: fType,
                                    filterValue: {
                                        widgetId: id
                                    },
                                    fieldId: fieldId
                                };
                                break;
                            case BICst.DESIGN.WIDGET.SINGLE_SLIDER:
                            case BICst.DESIGN.WIDGET.INTERVAL_SLIDER:
                            case BICst.DESIGN.WIDGET.NUMBER:
                                fType = BICst.ANALYSIS_FILTER_NUMBER.BELONG_WIDGET_VALUE;
                                filter = {
                                    filterType: fType,
                                    filterValue: {
                                        widgetId: id
                                    },
                                    fieldId: fieldId
                                };
                                break;
                            case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                            case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                            case BICst.DESIGN.WIDGET.YEAR:
                            case BICst.DESIGN.WIDGET.MONTH:
                            case BICst.DESIGN.WIDGET.QUARTER:
                            case BICst.DESIGN.WIDGET.DATE:
                            case BICst.DESIGN.WIDGET.DATE_PANE:
                                fType = BICst.ANALYSIS_FILTER_DATE.BELONG_WIDGET_VALUE;
                                filter = {
                                    filterType: fType,
                                    filterValue: {
                                        widgetId: id
                                    },
                                    fieldId: fieldId
                                };
                                break;
                            default:
                                break;
                        }
                        BI.isNotNull(filter) && filterValues.push(filter);
                    });
                }

                if (type === BICst.DESIGN.WIDGET.GENERAL_QUERY) {
                    if (BI.isNotNull(parseFilter(value))) {
                        filterValues.push(value);
                    }
                }
            });
            return filterValues;

            function checkValueValid (type, value) {
                switch (type) {
                    case BICst.DESIGN.WIDGET.NUMBER:
                        return !(BI.isEmptyString(value.min) && BI.isEmptyString(value.max));
                    case BICst.DESIGN.WIDGET.DATE_PANE:
                        var v = value.value || value;
                        if(value.type === BICst.DATE_TYPE.STATIC) {
                            return BI.isNotNull(v.year) && BI.isNotNull(v.month) && BI.isNotNull(v.day);
                        }
                        return true;
                    default:
                        return true;
                }
            }
        },

        _getGenerateWidget: function (configuration, options, config) {
            return {
                bounds: {
                    left: 0,
                    top: 0,
                    width: 0,
                    height: 0
                },
                wId: configuration.wId || BI.UUID(),
                name: "__StatisticWidget__" + BI.UUID(),
                dimensions: configuration.dimensions || {},
                filter: configuration.filter || {},
                fields: configuration.fields || [],
                tableName: configuration.tableName,
                type: configuration.type || BICst.DESIGN.WIDGET.TABLE,
                view: configuration.view || {},
                value: configuration.value,
                measures: configuration.measures,
                page: -1,
                options: options || {},
                config: config || {},
                reportId: this.getCurrentTemplateId(),
                widgetIdValueMap: configuration.widgetIdValueMap,
                realData: true
            };
        },

        getWidgetDataByWidgetInfo: function (configuration, callback, options, config) {
            var data = this._getGenerateWidget(configuration, options, config);
            this.getWidgetData(data, function (res) {
                callback(res.data || {});
            });
        },

        getWidgetDataByWidgetInfoWithParam: function (configuration, callback, options, config) {
            var data = this._getGenerateWidget(configuration, options, config);
            data.parameter = this.getParamCalculation();
            this.getWidgetData(data, function (res) {
                callback(res.data || {});
            });
        },

        // 计算所有参数过滤的值
        getParamCalculation: function () {
            var paramFilterValue = {};
            var widgets = Fix.toJSON(BI.designModel.widgets);
            var parameterPool = BI.pool.parameterPool;
            BI.each(widgets, function (wId, widget) {
                if (widget.useParameter !== true) return;

                var widgetType = widget.type;
                var widgetValue = Fix.toJSON(widget.value);
                var params = widget.parameterValue;

                var yearValue, monthValue, quarterValue, startValue, endValue, startYearValue, startMonthValue,
                    endYearValue, endMonthValue;

                switch (widgetType) {
                    case BICst.DESIGN.WIDGET.YEAR:
                    case BICst.DESIGN.WIDGET.DATE:
                    case BICst.DESIGN.WIDGET.DATE_PANE:
                    case BICst.DESIGN.WIDGET.STRING:
                    case BICst.DESIGN.WIDGET.STRING_LABEL:
                    case BICst.DESIGN.WIDGET.STRING_LIST:
                        if (BI.isNull(BI.first(params))) return;

                        paramFilterValue[BI.first(params)] = {
                            type: widgetType,
                            parameterType: parameterPool.parameter[BI.first(params)],
                            value: widgetValue
                        };
                        return;
                    case BICst.DESIGN.WIDGET.MONTH:
                        // 多个参数的要进行拆分
                        if (BI.isNotNull(params[0])) {
                            if (BI.isNull(widgetValue)) {
                                yearValue = widgetValue;
                            } else {
                                yearValue = {
                                    type: widgetValue.type,
                                    value: {
                                        year: widgetValue.value.year
                                    }
                                };
                            }

                            paramFilterValue[params[0]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[0]],
                                value: yearValue
                            };
                        }

                        if (BI.isNotNull(params[1])) {
                            if (BI.isNull(widgetValue)) {
                                monthValue = widgetValue;
                            } else {
                                monthValue = {
                                    type: widgetValue.type,
                                    value: {
                                        month: widgetValue.value.month
                                    }
                                };
                            }

                            paramFilterValue[params[1]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[1]],
                                value: monthValue
                            };
                        }
                        break;
                    case BICst.DESIGN.WIDGET.QUARTER:
                        if (BI.isNotNull(params[0])) {
                            if (BI.isNull(widgetValue)) {
                                yearValue = widgetValue;
                            } else {
                                yearValue = {
                                    type: widgetValue.type,
                                    value: {
                                        year: widgetValue.value.year
                                    }
                                };
                            }

                            paramFilterValue[params[0]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[0]],
                                value: yearValue
                            };
                        }

                        if (BI.isNotNull(params[1])) {
                            if (BI.isNull(widgetValue)) {
                                quarterValue = widgetValue;
                            } else {
                                quarterValue = {
                                    type: widgetValue.type,
                                    value: {
                                        quarter: widgetValue.value.quarter
                                    }
                                };
                            }
                            paramFilterValue[params[1]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[1]],
                                value: quarterValue
                            };
                        }
                        break;
                    case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                        if (BI.isNotNull(params[0])) {
                            if (BI.isNull(widgetValue)) {
                                startValue = widgetValue;
                            } else {
                                startValue = {
                                    start: widgetValue.start
                                };
                            }

                            paramFilterValue[params[0]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[0]],
                                value: startValue
                            };
                        }

                        if (BI.isNotNull(params[1])) {
                            if (BI.isNull(widgetValue)) {
                                endValue = widgetValue;
                            } else {
                                endValue = {
                                    start: widgetValue.end
                                };
                            }

                            paramFilterValue[params[1]] = {
                                parameterType: parameterPool.parameter[params[1]],
                                type: widgetType,
                                value: endValue
                            };
                        }
                        break;
                    case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                        if (BI.isNotNull(params[0])) {
                            if (BI.isNull(widgetValue)) {
                                startYearValue = widgetValue;
                            } else if (BI.isNull(widgetValue.start)) {
                                startYearValue = {
                                    start: widgetValue.start
                                };
                            } else {
                                startYearValue = {
                                    start: {
                                        type: widgetValue.start.type,
                                        value: {
                                            year: widgetValue.start.value.year
                                        }
                                    }
                                };
                            }

                            paramFilterValue[params[0]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[0]],
                                value: startYearValue
                            };
                        }

                        if (BI.isNotNull(params[1])) {
                            if (BI.isNull(widgetValue)) {
                                startMonthValue = widgetValue;
                            } else if (BI.isNull(widgetValue.start)) {
                                startMonthValue = {
                                    start: widgetValue.start
                                };
                            } else {
                                startMonthValue = {
                                    start: {
                                        type: widgetValue.start.type,
                                        value: {
                                            month: widgetValue.start.value.month
                                        }
                                    }
                                };
                            }

                            paramFilterValue[params[1]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[1]],
                                value: startMonthValue
                            };
                        }

                        if (BI.isNotNull(params[2])) {
                            if (BI.isNull(widgetValue)) {
                                endYearValue = widgetValue;
                            } else if (BI.isNull(widgetValue.end)) {
                                endYearValue = {
                                    end: widgetValue.end
                                };
                            } else {
                                endYearValue = {
                                    end: {
                                        type: widgetValue.end.type,
                                        value: {
                                            year: widgetValue.end.value.year
                                        }
                                    }
                                };
                            }

                            paramFilterValue[params[2]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[2]],
                                value: endYearValue
                            };
                        }

                        if (BI.isNotNull(params[3])) {
                            if (BI.isNull(widgetValue)) {
                                endMonthValue = widgetValue;
                            } else if (BI.isNull(widgetValue.end)) {
                                endMonthValue = {
                                    end: widgetValue.end
                                };
                            } else {
                                endMonthValue = {
                                    end: {
                                        type: widgetValue.end.type,
                                        value: {
                                            month: widgetValue.end.value.month
                                        }
                                    }
                                };
                            }

                            paramFilterValue[params[3]] = {
                                type: widgetType,
                                parameterType: parameterPool.parameter[params[3]],
                                value: endMonthValue
                            };
                        }
                        break;
                    default:
                }
            });

            return paramFilterValue;
        },

        getWidgetCalculationByID: function (wid, opts) {
            var self = this;
            opts = opts || {};
            var widget = Fix.toJSON(BI.designModel.widgets[wid]) || {};
            widget.parameter = this.getParamCalculation();
            widget.templateStyle = BI.Utils.getActualTemplateStyle();
            widget.wId = wid;
            var filterValues = [];

            // 所有控件过滤条件（考虑有查询按钮的情况
            filterValues = filterValues.concat(
                this.isQueryControlExist() && !this.isControlWidgetByWidgetId(wid) ?
                    BI.SharingPool.get("controlFilters") : this.getControlCalculations(wid));

            // 考虑明细过滤的日期类型
            var fields = widget.measures;
            BI.each(fields, function (tId, field) {
                if (BI.isNotNull(field)) {
                    if (BI.isNotNull(field.filter)) {
                        parseFilter(field.filter);
                    }
                    if (BI.isNotNull(field.detailFilter)) {
                        parseFilter(field.detailFilter);
                    }
                }
            });
            if(widget.type === BICst.DESIGN.WIDGET.DETAIL) {
                BI.each(widget.settings.tableAttr.filterValue, function (dId) {
                    parseFilter(widget.settings.tableAttr.filterValue[dId]);
                });
            }

            widget.filter = {filterType: BICst.ANALYSIS_FILTER_TYPE.AND, filterValue: filterValues};

            // 构造联动 缓存一个所有已联动的组件数组
            var linkage = widget.linkage;
            if (!opts.isLinkWidget) {
                BI.each(linkage, function (linkId, ob) {
                    if (!BI.Utils.isWidgetExistById(linkId)) {
                        return;
                    }
                    ob.widget = self.getWidgetCalculationByID(linkId, {isLinkWidget: true});
                    ob.clicked = BI.Utils.getClickedOfWidget(linkId);
                });
            }
            widget.widgetIdValueMap = {};
            BI.each(BI.Utils.getAllWidgetIds(), function (idx, wId) {
                var type = BI.Utils.getWidgetTypeById(wId);
                if (BI.Utils.isControlWidgetByWidgetId(wId) && type !== BICst.DESIGN.WIDGET.GENERAL_QUERY) {
                    var value = BI.Utils.getWidgetValueById(wId);
                    if (BI.contains([BICst.DESIGN.WIDGET.DATE_INTERVAL, BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL], type)) {
                        widget.widgetIdValueMap[wId + "_start"] = {
                            type: type,
                            value: {
                                start: value && value.start
                            }
                        };
                        widget.widgetIdValueMap[wId + "_end"] = {
                            type: type,
                            value: {
                                end: value && value.end
                            }
                        };
                    }
                    widget.widgetIdValueMap[wId] = BI.designModel.widgets[wId];
                }
            });
            widget.realData = BI.Utils.isUnderPreviewMode();
            return widget;
        },

        getWidgetDataByID: (function () {
            var cache = {};
            return function (wid, callbacks, options, config) {
                options || (options = {});
                var key = BI.UUID();
                if (!BI.Utils.isControlWidgetByWidgetId(wid)) {
                    key = wid;
                }
                cache[key] = callbacks;
                var widgetSetting = BI.Utils.getWidgetCalculationByID(wid);
                BI.Utils.getWidgetData(BI.extend(widgetSetting, options, {
                    globalFilter: BI.isEmptyObject(BI.designData.filter) ? null : BI.designData.filter,
                    sessionId: BI.sessionId,
                    reportId: BI.Utils.getCurrentTemplateId()
                }), function (data) {
                    if (cache[key] === callbacks) {
                        callbacks.success(data);
                        delete cache[key];
                    } else {
                        callbacks.error && callbacks.error(data);
                    }
                });
            };
        })(),

        getWidgetDetailDataByID: function (wId, widget, callback, options, config) {
            var widgetSetting = BI.extend({}, BI.Utils.getWidgetCalculationByID(wId), widget);
            BI.Utils.getWidgetData(BI.extend({}, widgetSetting, options, {
                globalFilter: BI.isEmptyObject(BI.designModel.filter) ? null : BI.designModel.filter,
                sessionId: BI.sessionId,
                type: BICst.DESIGN.WIDGET.TABLE,
                reportId: this.getCurrentTemplateId(),
                realData: true
            }), callback);
        },

        // 把指定组件的控件过滤条件转化成文本
        getControlWidgetValueTextByID: function (wIdOrdId) {
            var dId, wId;
            if (BI.Utils.isWidgetExistById(wIdOrdId)) {
                wId = wIdOrdId;
            } else {
                wId = BI.Utils.getWidgetIdBydId(wIdOrdId);
                dId = wIdOrdId;
            }
            var widgetValue = BI.Utils.getWidgetValueById(wId);
            var widgetType = BI.Utils.getWidgetTypeById(wId);
            var text = "";
            if (BI.isNull(widgetValue) || BI.isEmptyObject(widgetValue) || BI.isEmptyArray(widgetValue)) {
                return BI.i18nText("BI-Design_All");
            }
            switch (widgetType) {
                case BICst.DESIGN.WIDGET.STRING:
                case BICst.DESIGN.WIDGET.STRING_LIST:
                case BICst.DESIGN.WIDGET.STRING_LABEL:
                    if (BI.isNull(widgetValue.value) || widgetValue.value.length === 0) {
                        return BI.i18nText("BI-Design_All");
                    }
                    var valueFrom = widgetValue.type === BI.Selection.Multi ? "value" : "assist";
                    return _formatStringText(widgetValue[valueFrom]);
                case BICst.DESIGN.WIDGET.SINGLE_SLIDER:
                case BICst.DESIGN.WIDGET.INTERVAL_SLIDER:
                    return getNumberSliderRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.NUMBER:
                    return getNumberRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    widgetValue.showTime = BI.Utils.getWidgetShowTimeById(wId);
                    return getDateRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.MONTH:
                    return getYearMonthText(widgetValue);
                case BICst.DESIGN.WIDGET.QUARTER:
                    return getYearQuarterText(widgetValue);
                case BICst.DESIGN.WIDGET.YEAR:
                    return getYearText(widgetValue);
                case BICst.DESIGN.WIDGET.DATE:
                case BICst.DESIGN.WIDGET.DATE_PANE:
                    widgetValue.showTime = BI.Utils.getWidgetShowTimeById(wId);
                    return getDateText(widgetValue);
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                    widgetValue.showTime = BI.Utils.getWidgetShowTimeById(wId);
                    return getYearMonthIntervalText(widgetValue);
                case BICst.DESIGN.WIDGET.TREE:
                case BICst.DESIGN.WIDGET.TREE_LIST:
                    if (BI.isNotNull(dId)) {
                        var region = BI.Utils.getRegionDimensionIdsBydId(dId);
                        // 只显示层级<=当前被绑定字段的勾选值
                        var level = region.indexOf(dId);
                        var textArr = getChildrenNodeText(widgetValue, 0, level);
                        return _formatStringText(textArr);
                    }
                    // 先把4.1的抄过来
                    return _getTreeFilterText(wId);

                case BICst.DESIGN.WIDGET.TREE_LABEL:
                    if (BI.isNotNull(dId)) {
                        var region = BI.Utils.getRegionDimensionIdsBydId(dId);
                        // 只显示层级<=当前被绑定字段的勾选值
                        var level = region.indexOf(dId);
                        var targetArr = widgetValue[level];
                        if (targetArr.indexOf(BICst.LIST_LABEL_TYPE.ALL) !== -1) {
                            text = BI.i18nText("BI-Design_All");
                        } else {
                            text = _formatStringText(targetArr);
                        }
                        return text;
                    }
                    return _getTreeLabelFilterText(wId);

                default:
                    return widgetValue;
            }
        },

        // 把指定组件的控件的联动条件转化成文本
        getLinkageValueTextByID: function (wId, bindDId) {
            var linkageFilters = BI.Utils.getLinkageOfWidget(wId);
            var text = BI.i18nText("BI-Design_All");
            BI.find(linkageFilters, function (fromWId) {
                var clicked = BI.Utils.getClickedOfWidget(fromWId) || {};
                if (BI.isNotNull(clicked.value)) {
                    var dIds = BI.map(clicked.value, "dId");
                    var index = dIds.indexOf(bindDId);
                    if (index !== -1) {
                        var value = clicked.value[index];
                        var groupType = BI.Utils.getResultDimensionGroupTypeById(value.dId);
                        if (BI.Utils.getResultDimensionTypeById(value.dId) === BICst.DESIGN.DIMENSION_TYPE.DATE) {
                            groupType = groupType || BICst.GROUP.YMD;
                        }
                        text = BI.Format.formatValueByGroup(value.text, groupType);
                        return true;
                    }
                }
            });
            return text;
        },

        doJumpByUrl: function (url, options) {
            options = options || {};
            var target = "_blank";
            var dialog;
            if (options.openPosition === BICst.DESIGN.JUMP_POSITION.CURRENT_WINDOW) {
                target = "_self";
            }
            if (options.openPosition === BICst.DESIGN.JUMP_POSITION.DIALOG) {
                dialog = previewTemplateDialog(options.name);
                target = options.name;
            }
            url = url || "";
            var fieldIds = BI.map(url.match(/\$\{.*?\}/g), function (idx, str) {
                return str.substring(2, str.length - 1);
            });
            if (target === "_blank") {
                var tab = window.open("", target);
                if (BI.isNotEmptyArray(fieldIds)) {
                    BI.Utils.getJumpFieldInfoByFieldIds({
                        fieldIds: fieldIds,
                        clicked: options.clicked,
                        linkedWidget: options.linkedWidget
                    }, doJump);
                } else {
                    doJump();
                }
            } else {
                if (BI.isNotEmptyArray(fieldIds)) {
                    BI.Utils.getJumpFieldInfoByFieldIds({
                        fieldIds: fieldIds,
                        clicked: options.clicked,
                        linkedWidget: options.linkedWidget
                    }, doJump);
                } else {
                    doJump();
                }
            }

            function doJump (res) {
                var urlInfo = editUrl(url, res);
                var resultUrl = BI.Format.formatAddress(urlInfo.prefix) + BI.reduce(urlInfo.params, function (value, result, key) {
                    var linkChar = BI.isEmptyString(result) ? "?" : "&";
                    return result + linkChar + key + "=" + value;
                }, "");
                if (target === "_blank") {
                    tab.location.href = resultUrl;
                } else if (target === "_self") {
                    this.location.href = resultUrl;
                } else {
                    dialog.setSrc(resultUrl);
                }
            }

            function editUrl (url, replaceMap) {
                url = url || "";
                var urlSplit = url.split(/\?/);
                // BI-15575 表名中可能有空格，使得fieldId中也有空格，不能直接去空格
                var prefix = (urlSplit[0] || "").replace(/\s+/g, "");
                // BI-17532 需要支持以前明细表的超链写法
                prefix = prefix.replaceAll("\\$\\{.*?\\}", function (str) {
                    var id = str.substring(2, str.length - 1);
                    if (BI.has(replaceMap, id)) {
                        var items = replaceMap[id];
                        return BI.isArray(items) ? items[0] : items;
                    }
                });
                var param = urlSplit[1] || "";
                // 取得每一项
                var items = BI.isEmptyString(param) ? [] : param.split("&");
                var newParams = {};
                BI.each(items, function (i, item) {
                    if (BI.isEmptyString(item)) {
                        return;
                    }
                    var it = item.split("=");
                    var name = it[0];
                    var value = it[1];
                    // 自己写的静态参数值不做替换
                    if (BI.isNull(value.match(/\$\{.*?\}/))) {
                        newParams[name] = value;
                    } else {
                        if (name.length > 0) {
                            var fieldId = value.substring(2, value.length - 1);
                            // 多于一个时不传值
                            if (BI.has(replaceMap, fieldId) && replaceMap[fieldId].length <= 1) {
                                var replaceText = replaceMap[fieldId];
                                newParams[name] = BI.isArray(replaceText) ? replaceText[0] : replaceText;
                            }
                        }
                    }
                });
                return {
                    prefix: prefix,
                    params: newParams
                };
            }
        },

        doJumpByTemplateId: function (tId, options) {
            options = options || {};
            var target = "_blank";
            if (options.openPosition === BICst.DESIGN.JUMP_POSITION.CURRENT_WINDOW) {
                target = "_self";
            }
            if (options.openPosition === BICst.DESIGN.JUMP_POSITION.DIALOG) {
                previewTemplateDialog(options.name);
                target = options.name;
            }
            var paramObj = {};
            if (BI.isNotNull(options.clicked)) {
                paramObj.clicked = options.clicked;
            }
            var linkedWidget = BI.deepClone(options.linkedWidget);
            if (BI.isNotNull(linkedWidget)) {
                paramObj.linkedWidget = linkedWidget;
                paramObj.linkedWidget.globalFilter = BI.isEmptyObject(BI.designModel.filter) ? null : BI.designModel.filter;

                var fields = BI.get(linkedWidget, "fields", []);
                var measures = BI.get(linkedWidget, "measures", []);

                BI.each(fields, function (index, field) {
                    field.name = BI.Utils.getFieldTransferName(field.source || field.id);
                });

                BI.each(measures, function (index, field) {
                    field.name = BI.Utils.getFieldTransferName(field.source || field.id);
                });
            }
            BI.Func.doActionByForm(moduleRouter + "/report/" + tId + "/edit", paramObj, {
                target: target
            });
        },

        getDefaultFilterValue: function (filterType) {
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                    return {
                        min: "",
                        max: "",
                        closeMin: true,
                        closeMax: false
                    };
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                    return {
                        type: BICst.ANALYSIS_FILTER_NUMBER_VALUE.SETTLED,
                        value: ""
                    };
                case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_STRING_VALUE:
                    return {
                        type: BI.Selection.Multi,
                        value: []
                    };
                case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                case BICst.ANALYSIS_FILTER_STRING.TOP_N:
                case BICst.ANALYSIS_FILTER_STRING.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                case BICst.ANALYSIS_FILTER_NUMBER.TOP_N:
                case BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_DATE.TOP_N:
                case BICst.ANALYSIS_FILTER_DATE.BOTTOM_N:
                case BICst.ANALYSIS_FILTER_DATE.CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.NOT_CONTAIN:
                case BICst.ANALYSIS_FILTER_DATE.BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BEGIN_WITH:
                case BICst.ANALYSIS_FILTER_DATE.END_WITH:
                case BICst.ANALYSIS_FILTER_DATE.NOT_END_WITH:
                    return "";
                case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                    return [];
                default:
                    return;
            }
        },

        getContentWidgetUsedTable: function (wId) {
            var content = BI.designModel.widgets[wId].content || "";
            var altArray = content.match(/\$[\{][^\}]*[\}]/g);
            var tableNames = [];
            BI.each(altArray, function (idx, str) {
                var obj = JSON.parse(str.substring(1, str.length));
                var id = obj.alt;
                var dId;
                if(BI.Utils.isDimensionExist(id)) {
                    dId = id;
                } else {
                    dId = BI.Utils.getDimensionIdByDimensionGroupId(null, id);
                }
                if(BI.Utils.isDimensionExist(dId)) {
                    var type = BI.Utils.getWidgetTypeById(BI.Utils.getWidgetIdBydId(dId));
                    if(BI.Utils.isStaticWidgetByWidgetType(type)) {
                        tableNames.pushDistinct(BI.Utils.getTableNameWidgetId(BI.Utils.getWidgetIdBydId(dId)));
                    }
                }
            });
            return tableNames;
        }
    });


    // format date type filter, group指定日期分组
    function parseFilter (filter, groupType) {
        var filterType = filter.filterType,
            filterValue = filter.filterValue;
        if (filterType === BICst.ANALYSIS_FILTER_TYPE.AND || filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
            BI.each(filterValue, function (i, value) {
                parseFilter(value, groupType);
            });
        }
        // wId的需要转化控件值
        if(BI.isNotNull(filterValue) && BI.has(filterValue, "wId")) {
            var filterWId = filterValue.wId;
            var wValue = BI.Utils.isWidgetExistById(filterWId) ? BI.Utils.getWidgetValueById(filterWId) : null;
            wValue = wValue || BI.Utils.getDefaultFilterValue(filterType);
            switch (filterType) {
                case BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE:
                    var type = BI.Utils.getWidgetTypeById(filterWId);
                    filter.filterValue = {
                        widget: {
                            type: type,
                            value: wValue,
                            point: BI.contains([BICst.DESIGN.WIDGET.DATE_INTERVAL, BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL], type) ? BICst.DATE_TIME_TYPE.INTERVAL : BICst.DATE_TIME_TYPE.POINT
                        },
                        offset: filterValue.offset
                    };
                    break;
                case BICst.ANALYSIS_FILTER_DATE.LESS_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.MORE_THAN_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO_DATE_WIDGET_VALUE:
                case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO_DATE_WIDGET_VALUE:
                    var value = BI.isNull(wValue) ? null : (filterValue.startOrEnd === 1 ? wValue.start : (filterValue.startOrEnd === 2 ? wValue.end : wValue));
                    filter.filterValue = {
                        widget: {
                            type: BI.Utils.getWidgetTypeById(filterWId),
                            value: value,
                            point: BICst.DATE_TIME_TYPE.POINT
                        },
                        offset: filterValue.offset
                    };
                    break;
            }
        }
        return filter;
    }

    function getChildrenNodeText (ob, layer, level) {
        var text = [];
        var keys = BI.Func.getSortedResult(BI.map(BI.keys(ob), function (idx, value) {
            return {
                value: value
            };
        }));
        BI.each(BI.map(keys, "value"), function (idx, name) {
            if (level === layer || (level > layer && BI.isEmptyObject(ob[name]))) {
                text.push(name);
                return;
            }
            if (level > layer) {
                var childNodesText = getChildrenNodeText(ob[name], layer + 1, level);
                text = BI.concat(text, childNodesText);
            }
        });
        return text;
    }

    function _formatStringText (array) {
        var text = "";
        switch (array.length) {
            case 0:
                break;
            case 1:
                text = array[0];
                break;
            case 2:
                text = array.join("&");
                break;
            case 3:
                text = array.join(",");
                break;
            default:
                text = array.slice(0, 3).join(",") + BI.i18nText("BI-Design_Filter_And_Other_More");
                break;
        }
        return text;
    }

    function getNumberSliderRangeText (filterValue) {
        var text = "";
        var min = filterValue.min,
            max = filterValue.max;
        if (BI.isNotNull(min) && BI.isNotNull(max)) {
            if (BI.isEqual(min, max)) {
                text = min;
            } else {
                text = min + "~" + max;
            }
        }
        return text;
    }

    function getNumberRangeText (filterValue) {
        var text = "";
        var min = filterValue.min,
            max = filterValue.max;
        if (BI.isNotNull(min) && BI.isNotEmptyString(min) && BI.isNotNull(max) && BI.isNotEmptyString(max)) {
            if (BI.isEqual(min, max)) {
                text = min;
            } else {
                text = min + "~" + max;
            }
        } else if (BI.isNotNull(min) && BI.isNotEmptyString(min)) {
            text = min + "~" + BI.i18nText("BI-Basic_Positive_Endless");
        } else if (BI.isNotNull(max) && BI.isNotEmptyString(max)) {
            text = "-" + BI.i18nText("BI-Basic_Endless") + "~" + max;
        } else {
            text = BI.i18nText("BI-Design_All");
        }
        return text;
    }

    function getYearText (widgetValue) {
        widgetValue = widgetValue || {};
        var value = widgetValue.value;
        var text = BI.i18nText("BI-Design_All");
        switch (widgetValue.type) {
            case BICst.DATE_TYPE.STATIC:
                text = value.year;
                break;
            case BICst.DATE_TYPE.DYNAMIC:
                var date = BI.Func.getCalculationDateShowValue(value);
                if (BI.isNotNull(date)) {
                    text = date.print("%Y");
                }
                break;
            default:
                break;
        }
        return text;
    }

    function getYearMonthText (widgetValue) {
        var text = BI.i18nText("BI-Design_All");
        widgetValue = widgetValue || {};
        var value = widgetValue.value;

        switch (widgetValue.type) {
            case BICst.DATE_TYPE.STATIC:
                if (BI.isNumeric(value.year) && BI.isNumeric(value.month)) {
                    text = value.year + "-" + value.month;
                } else if (BI.isNumeric(value.year)) {
                    text = value.year;
                } else if (BI.isNumeric(value.month)) {
                    text = value.month;
                } else {
                    text = BI.i18nText("BI-Design_All");
                }
                break;
            case BICst.DATE_TYPE.DYNAMIC:
                var date = BI.Func.getCalculationDateShowValue(value);
                if (BI.isNotNull(date)) {
                    text = date.print("%Y-%X");
                }
                break;
            default:
                break;
        }
        return text;
    }

    function getYearQuarterText (widgetValue) {
        widgetValue = widgetValue || {};
        var text = BI.i18nText("BI-Design_All");
        var value = widgetValue.value;

        switch (widgetValue.type) {
            case BICst.DATE_TYPE.STATIC:
                if (BI.isNumeric(value.year) && BI.isNumeric(value.quarter)) {
                    text = value.year + "-" + value.quarter;
                } else if (BI.isNumeric(value.year)) {
                    text = value.year;
                } else if (BI.isNumeric(value.quarter)) {
                    text = value.quarter;
                }
                break;
            case BICst.DATE_TYPE.DYNAMIC:
                var date = BI.Func.getCalculationDateShowValue(value);
                if (BI.isNotNull(date)) {
                    text = date.print("%Y-%Q");
                }
                break;
            default:
                break;
        }
        return text;
    }

    function getDateText (widgetValue) {
        widgetValue = widgetValue || {};
        var text = BI.i18nText("BI-Design_All");
        var value = widgetValue.value;
        var date;
        switch (widgetValue.type) {
            case BICst.DATE_TYPE.STATIC:
                // text = value.year + "-" + value.month + "-" + value.day;
                date = BI.getDate(value.year, (value.month - 1), value.day, value.hour || 0, value.minute || 0, value.second || 0);
                break;
            case BICst.DATE_TYPE.DYNAMIC:
                date = BI.Func.getCalculationDateShowValue(value);
                break;
            default:
                break;
        }
        if (BI.isNotNull(date)) {
            text = widgetValue.showTime === BICst.SHOW_TIME.SHOW ? date.print("%Y-%X-%d %H:%M:%S") : date.print("%Y-%X-%d");
        }
        return text;
    }

    function getYearMonthIntervalText (widgetValue) {
        widgetValue = widgetValue || {};
        var start = widgetValue.start,
            end = widgetValue.end;
        var sStart = "",
            sEnd = "";
        var text = "";
        if (BI.isNotNull(start)) {
            sStart = getDateText(BI.extend(start, {
                showTime: widgetValue.showTime
            }));
        }
        if (BI.isNotNull(end)) {
            sEnd = getDateText(BI.extend(end, {
                showTime: widgetValue.showTime
            }));
        }
        if (BI.isNotEmptyString(sStart) && BI.isNotEmptyString(sEnd)) {
            text = BI.isEqual(sStart, sEnd) ? sStart : (sStart + BI.i18nText("BI-Basic_To") + sEnd);
        } else if (BI.isNotEmptyString(sStart)) {
            text = sStart + BI.i18nText("BI-Design_Behind");
        } else if (BI.isNotEmptyString(sEnd)) {
            text = sEnd + BI.i18nText("BI-Design_Front");
        } else {
            text = BI.i18nText("BI-Design_All");
        }
        return text;
    }

    function getDateRangeText (filterValue) {
        filterValue = filterValue || {};
        var start = filterValue.start,
            end = filterValue.end;
        var sStart = "",
            sEnd = "";
        var text = "";
        if (BI.isNotNull(start)) {
            sStart = getDateText(BI.extend(start, {
                showTime: filterValue.showTime
            }));
        }
        if (BI.isNotNull(end)) {
            sEnd = getDateText(BI.extend(end, {
                showTime: filterValue.showTime
            }));
        }
        if (BI.isNotEmptyString(sStart) && BI.isNotEmptyString(sEnd)) {
            text = BI.isEqual(sStart, sEnd) ? sStart : (sStart + BI.i18nText("BI-Basic_To") + sEnd);
        } else if (BI.isNotEmptyString(sStart)) {
            text = sStart + BI.i18nText("BI-Design_Behind");
        } else if (BI.isNotEmptyString(sEnd)) {
            text = sEnd + BI.i18nText("BI-Design_Front");
        } else {
            text = BI.i18nText("BI-Design_All");
        }
        return text;
    }

    function _getTreeFilterText (wId) {
        var widgetValue = BI.Utils.getWidgetValueById(wId);
        var text = "";
        BI.each(widgetValue, function (name, children) {
            var childNodes = getChildrenNode(children);
            text += name + (childNodes === "" ? "" : (":" + childNodes)) + "; ";
        });
        if (text !== "") {
            text = BI.i18nText("BI-Basic_In") + " " + text;
        }
        return text;

        function getChildrenNode (ob) {
            var text = "";
            var index = 0, size = BI.size(ob);
            BI.each(ob, function (name, children) {
                index++;
                var childNodes = getChildrenNode(children);
                text += name + (childNodes === "" ? "" : (":" + childNodes)) + (index === size ? "" : ",");
            });
            return text;
        }
    }

    function _getTreeLabelFilterText (wId) {
        var text = "";
        var widgetValue = BI.Utils.getWidgetValueById(wId);
        var textValue = BI.filter(widgetValue, function (index, values) {
            return values.indexOf(BICst.LIST_LABEL_TYPE.ALL) < 0;
        });
        if (textValue.length === 0) {
            return text;
        }
        textValue = descartes(textValue);
        BI.each(textValue, function (index, values) {
            BI.each(values, function (idx, value) {
                text += value + (idx === 0 ? values.length > 1 ? ":" : "" : idx === values.length - 1 ? "" : ",");
            });
            text += ";";
        });
        if (text !== "") {
            text = BI.i18nText("BI-Basic_In") + " " + text;
        }
        return text;

        function descartes (arr) {
            if (!BI.isArray(arr)) {
                arr = [];
            }
            return arr.reduce(function (a, b) {
                return a.map(function (x) {
                    return b.map(function (y) {
                        return x.concat(y);
                    });
                }).reduce(function (a, b) {
                    return a.concat(b);
                }, []);
            }, [[]]);
        }
    }



    function previewTemplateDialog (dId) {
        var popover = null;
        var body = BI.createWidget({
            type: "bi.iframe",
            ref: function (ref) {
                ref.setName(dId);
            }
        });
        BI.Popovers.create(dId, {
            type: "bi.bar_popover",
            ref: function () {
                popover = this;
            },
            body: {
                type: "bi.absolute",
                items: [{
                    el: body,
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            },
            footer: {
                type: "bi.right_vertical_adapt",
                lgap: 10,
                items: [{
                    type: "bi.button",
                    text: BI.i18nText("BI-Basic_Close"),
                    level: "ignore",
                    handler: function () {
                        popover.close();
                        BI.Popovers.remove(dId);
                    }
                }]
            },
            listeners: [{
                eventName: BI.Popover.EVENT_CLOSE,
                action: function () {
                    BI.Popovers.remove(dId);
                }
            }]
        }).open(dId);
        return body;
    }
})();
/**
 * author: young
 * createdDate: 2018/3/15
 * description: 源数据相关的utils方法 如：
 * getFieldNameById 会有回调，请求到的数据会缓存，优先使用缓存
 */

!(function () {
    BI.Utils = BI.Utils || {};
    var moduleRouter = "/design" + (BI.pool.moduleRouter || "");

    BI.extend(BI.Utils, {

        getPack4Design: function (packId, callback, complete) {
            this._reqGet("/packs/" + packId, "", function (res) {
                callback(res);
            }, complete);
        },

        getTableNameByFieldIdInPool: function (fieldId) {
            return BI.findKey(BI.pool.dataPool.tables, function (tableName, table) {
                return BI.find(table.fields, function (idx, field) {
                    return field.id === fieldId;
                });
            });
        },

        getFieldTypeById: function (fieldId, callback) {
            if (BI.isNotNull(BI.pool.fields[fieldId])) {
                callback(BI.pool.fields[fieldId].type);
            } else {
                this.getFieldById(fieldId, function (field) {
                    if (BI.isNotNull(field)) {
                        callback(field.type);
                    }
                });
            }
        },

        getFieldById: function (fieldId, callback) {
            if (BI.isNotNull(BI.pool.fields[fieldId])) {
                callback(BI.pool.fields[fieldId]);
            } else {
                var self = this;
                BI.Utils.getTablesByFieldIds([fieldId], function (res) {
                    BI.each(res, function (idx, table) {
                        self._addTable(table);
                    });
                    callback(BI.pool.fields[fieldId]);
                });
            }
        },

        getFieldsOfTable: function (tableName, callback) {
            BI.Utils.getFields4Design(tableName, function (res) {
                callback(res.data.fields);
            });
        },

        getRelations: function (callback) {
            if (BI.isNotNull(BI.pool.relations)) {
                callback(BI.pool.relations);
            } else {
                BI.Utils.reqRelations4Design(function (res) {
                    BI.pool.relations = res.relations;
                    callback(BI.pool.relations);
                });
            }
        },

        getAllTableFieldsInfoByKeyword: function (data, callback, complete) {
            this._reqPost(BI.Utils.getEncodeURL("/packs/tables/{keyword}", data.keyword), data, function (res) {
                callback(res.data.tables);
            }, complete);
        },

        getAllTableFieldsInfoByTableIds: function (data, callback, complete) {
            var self = this;
            this._reqPost(BI.Utils.getEncodeURL("/tables/{keyword}/fields", data.keyword), data, function (res) {
                BI.each(res.data.tables, function (idx, table) {
                    if (!BI.has(BI.pool.tables[table.name])) {
                        self._addTable(BI.extend({}, {
                            fields: table.fields,
                            name: table.name
                        }));
                    }
                });
                callback(res.data.tables);
            }, complete);
        },

        getFields4Design: function (tableName, callback, complete) {
            this._reqGet(BI.Utils.getEncodeURL("/pack/{tableName}/fields", tableName), "", function (res) {
                callback && callback(res);
            }, complete);
        },

        getTable4Design: function (tableName, callback, complete) {
            this._reqGet(BI.Utils.getEncodeURL("/pack/{tableName}/info", tableName), "", function (res) {
                BI.Utils.syncTable2Pool(res.data.table);
                BI.Utils.syncNoAuthFields2Pool(res.data.noAuthFields);
                callback && callback(res);
            }, complete);
        },

        getGroups4Design: function (callback, complete) {
            var self = this;
            this._reqGet("/groups", "", function (res) {
                BI.each(res.data, function (index, group) {
                    self._addGroup(group);
                });
                callback(res);
            }, complete);
        },

        _addGroup: function (group) {
            BI.pool.groups[group.id] = group;
        },

        _addPackage: function (pack) {
            var self = this;
            BI.pool.packages[pack.id] = pack;
            BI.each(pack.tables, function (id, table) {
                self._addTable(table);
            });
        },

        _addTable: function (table) {
            var self = this;
            BI.pool.tables[table.name] = table.fields;
            BI.each(table.fields, function (id, field) {
                self._addField(BI.extend({}, field, {tableName: table.name}));
            });
        },

        _addField: function (field) {
            BI.pool.fields[field.id] = field;
        }
    });

    // req
    BI.extend(BI.Utils, {

        saveSettings4Design: function (settings, callback, complete) {
            this._reqPost("/save", settings, function (res) {
                callback(res);
            }, complete);
        },

        reqRelations4Design: function (callback, complete) {
            // todo 先用的配置的接口
            BI.reqGet("/conf/relations", "", callback, complete);
        },

        getPackGroupInfo: function (callback, complete) {
            this._reqGet("/groups/info", "", callback, complete);
        },

        // 判断用户的公式是否正确
        getFormulaValidation: function (data, callback, complete) {
            BI.reqPost("/conf/analysis/expression", data, function (res) {
                callback(res);
            }, complete);
        },

        // 上传图片
        postImages: function (attachId, callback, complete) {
            this._reqPost("/image/" + attachId + "/save", {}, function (res) {
                callback(res);
            }, complete);
        },

        // 获取当前模板中用到的表及其主表和子表
        getTablesByTemplateId: function (data, callback, complete) {
            this._reqPost("/template/tables", data, function (res) {
                callback(res.data.tables);
            }, complete);
        },

        getAllRelatedTablesByTable: function (tableName, callback, complete) {
            this._reqGet(BI.Utils.getEncodeURL("/relations/tables/{tableName}", tableName), "", function (res) {
                callback(res.data.tables);
            }, complete);
        },

        getPackIdByTableName: function (tableName, callback, complete) {
            this._reqGet(BI.Utils.getEncodeURL("/{tableName}/pack", tableName), "", function (res) {
                callback(res.data);
            }, complete);
        },

        getTablesByFieldIds: function (fieldIds, callback, complete) {
            this._reqPost("/tables/fields", {
                fieldIds: fieldIds
            }, function (res) {
                callback(res.data.tables);
            }, complete);
        },

        getAllTemplates: function (callback, complete) {
            this._reqPost("/templates", {}, function (res) {
                callback(res.data);
            }, complete);
        },

        searchWidgetsByName: function (name, callback, complete) {
            this._reqPost("/widgets", {
                name: name
            }, function (res) {
                callback(res.data);
            }, complete);
        },

        reqWidgetsByTemplateId: function (template, callback, complete) {
            this._reqPost("/widgets/templates", {
                reportId: template.reportId,
                createBy: template.createBy
            }, function (res) {
                callback(res.data);
            }, complete);
        },

        // 获取所有无权限的fields
        getAllNoAuthFields: function (data, callback, complete) {
            this._reqPost("/unauthorized/fields", data, function (res) {
                BI.pool.noAuthFields = res.data || [];
                callback();
            }, complete);
        },

        updateSession: function (callback) {
            BI.socket.emit("updateReportSession", {
                reportId: BI.designModel.reportId,
                sessionId: BI.sessionId
            }, callback);
        },

        closeSession: function (callback, complete) {
            this._reqPostSync("/widget/template/session/" + BI.sessionId + "/shutdown", {
                reportId: BI.designModel.reportId,
                sessionId: BI.sessionId
            }, function () {
                callback();
            }, complete);
        },

        reportSaveAs: function (from, to, callback, complete) {
            BI.reqPost("/platform/dashboard/saveas", {
                from: from,
                to: to
            }, callback, complete);
        },

        _reqGet: function (url, data, success, complete, opt) {
            return BI.reqGet(moduleRouter + url, data, success, complete, opt);
        },

        _reqPost: function (url, data, success, complete, opt) {
            return BI.reqPost(moduleRouter + url, data, success, complete, opt);
        },

        _reqPostSync: function (url, data, success, complete, opt) {
            return BI.reqPostSync(moduleRouter + url, data, success, complete, opt);
        }
    });
})();
!(function () {
    BI.Utils = BI.Utils || {};

    BI.extend(BI.Utils, {

        isDimensionValidById: function (dId) {
            return BI.Utils.getDimensionState(dId) === BICst.FIELD_STATE.NORMAL;
        },

        getDimensionState: function (dId) {
            if (!BI.Utils.isDimensionExist(dId)) {
                return BICst.DIMENSION_STATE.NORMAL;
            }
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var type = this.getSwitchDimensionRedMarkTypeById(dId);
            var fields = this.getFieldsOfWidget(wId);
            var fieldId = this.getMeasureSwitchFieldById(dId);
            var filedType = this.getFieldTypeByDimensionType(type);
            if (type === BICst.DESIGN.DIMENSION_TYPE.DATA_MINING) {
                return BICst.DIMENSION_STATE.NORMAL;
            }

            var fieldState = this.getFieldStateOfWidget(wId, fieldId);

            // 判断字段丢失
            switch (fieldState) {
                case BICst.FIELD_STATE.NO_AUTH:
                    return BICst.FIELD_STATE.NO_AUTH;
                case BICst.FIELD_STATE.AGG_IN_DETAIL:
                    return BICst.DIMENSION_STATE.AGG_IN_DETAIL;
                case BICst.FIELD_STATE.FIELD_TYPE_ERROR:
                    return BICst.DIMENSION_STATE.FIELD_TYPE_ERROR;
                case BICst.FIELD_STATE.NORMAL:
                    break;
                default:
                    return BICst.DIMENSION_STATE.FIELD_MISS;
            }

            var result = BI.find(fields, function (idx, field) {
                return field.id === fieldId && field.type === filedType;
            });
            return BI.isNotNull(result) ? BICst.DIMENSION_STATE.NORMAL : BICst.DIMENSION_STATE.FIELD_TYPE_ERROR;
        },

        getDimensionConfBydIdAndFieldId: function (dId, fId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            if (this.isControlWidgetByWidgetId(wId)) {
                // 控件的过滤设置等存dimension中
                return this._getDimensionById(dId);
            }
            var dType = BI.Utils.getDimensionTypeById(dId);
            // 非维度字段对应的field
            var field = BI.Utils.getFieldByIdOfWidget(wId, BI.Utils.getFieldIdBydId(dId));
            var mIds = BI.map(BI.designModel.widgets[wId].measures, "id");
            var cal;
            switch (dType) {
                case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                    return {};
                // 组件的过滤设置存measure上
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    // 维度字段对应的field可能是维度切换后或者钻取后的当前字段
                    field = BI.Utils.getFieldByIdOfWidget(wId, fId);
                    // 维度切换后或者钻取后的当前字段对应的维度分组
                    var msGroupType = "group_" + this.getDimensionGroupTypeBydIdAndFieldId(dId, fId);
                    if (!mIds.contains(field.id) || !field.group || !field.group[msGroupType]) {
                        return {};
                    }
                    return field.group[msGroupType];
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    // 记录数
                    var counterDepKey = "counterDep_" + BI.Utils.getDimensionCounterDepById(dId);
                    cal = "cal_" + BI.Utils.getDimensionCalculationTypeById(dId);
                    if (!mIds.contains(field.id)) {
                        return {};
                    }
                    if (field.group && field.group[counterDepKey] && field.group[counterDepKey]["cal"] && field.group[counterDepKey]["cal"][cal]) {
                        return field.group[counterDepKey]["cal"][cal];
                    }
                    return {};
                default:
                    var groupType = "summary_" + BI.Utils.getDimensionGroupTypeById(dId);
                    cal = "cal_" + BI.Utils.getDimensionCalculationTypeById(dId);
                    if (!mIds.contains(field.id)) {
                        return {};
                    }
                    if (field.group && field.group[groupType] && field.group[groupType]["cal"] && field.group[groupType]["cal"][cal]) {
                        return field.group[groupType]["cal"][cal];
                    }
                    return {};
            }
        },

        getDimensionGroupTypeBydIdAndFieldId: function (dId, fieldId) {
            if (BI.Utils.getFieldIdBydId(dId) === fieldId) {
                return BI.Utils.getDimensionGroupTypeById(dId);
            }
            var measureConf = BI.Utils._getDimensionOperatorsBydId(dId);
            var drillFields = measureConf.drillFields || {};
            if (drillFields[fieldId] && drillFields[fieldId].group && drillFields[fieldId].group.type) {
                return drillFields[fieldId].group.type;
            }
            return BI.Utils.getDefaultGroupTypeByFieldIdOfWidget(BI.Utils.getWidgetIdBydId(dId), fieldId);
        },

        getDimensionNameBydIdAndFieldId: function (dId, fieldId, notDisplayName) {
            var wId = this.getWidgetIdBydId(dId);
            if (BI.Utils.getDimensionTypeById(dId) === BICst.DESIGN.DIMENSION_TYPE.DATA_MINING) {
                var dataMining = BI.designModel.widgets[wId].dataMining;
                if (dataMining.algorithmName === BICst.RAPID_DATA_MINING.ALGORITHM.KMEANS) {
                    return dataMining.clusterName;
                }
            }
            if (this.isControlWidgetByWidgetId(wId)) {
                return this._getDimensionById(dId).name;
            }
            var name;
            if (notDisplayName === true) {
                name = this.getFieldNameByIdOfWidget(wId, fieldId)
                    || this.getOriginFieldNameById(fieldId);
            } else {
                name = BI.Utils.getDimensionConfBydIdAndFieldId(dId, fieldId).displayName
                    || this.getFieldNameByIdOfWidget(wId, fieldId)
                    || this.getOriginFieldNameById(fieldId);
            }

            var geoName = "";
            switch (BI.Utils.getDimensionGroupTypeById(dId)) {
                case BICst.DESIGN.GROUP.LONGITUDE:
                    if (BI.Utils.isDrillDimensionById(dId)) {
                        name = BI.Utils.getDrillNameByIdOfWidget(wId, BI.Utils.getFieldIdBydId(dId));
                    }
                    geoName = BI.i18nText("BI-Design_Longitude_With_Brackets");
                    break;
                case BICst.DESIGN.GROUP.LATITUDE:
                    if (BI.Utils.isDrillDimensionById(dId)) {
                        name = BI.Utils.getDrillNameByIdOfWidget(wId, BI.Utils.getFieldIdBydId(dId));
                    }
                    geoName = BI.i18nText("BI-Design_Latitude_With_Brackets");
                    break;
                default:
                    break;
            }
            return name + geoName;
        },

        _getDimensionOperatorsBydId: function (dId) {
            // 只根据group找dimension的配置，不考虑维度切换、钻取联动后dimension的配置
            var fId = BI.Utils.getFieldIdBydId(dId);
            return BI.Utils.getDimensionConfBydIdAndFieldId(dId, fId);
        },

        _getResultDimensionOperatorBydId: function (dId) {
            // 考虑维度切换、钻取联动后dimension的配置,获取维度过滤、排序
            var fId = BI.Utils.getResultDimensionFieldIdById(dId);
            return BI.Utils.getDimensionConfBydIdAndFieldId(dId, fId);
        },

        _getSwitchDimensionOperatorBydId: function (dId) {
            // 只考虑维度切换、不考虑钻取联动后dimension的配置,获取维度过滤、排序
            var fId = BI.Utils.getMeasureSwitchFieldById(dId);
            return BI.Utils.getDimensionConfBydIdAndFieldId(dId, fId);
        },

        // 维度下拉钻取顺序drillOrder、钻取drillSequence、维度切换switchField、子维度的分组drillFields放到钻取目录的第一个节点对应的分组配置，
        // 普通维度指标字段下拉配置用这些方法
        // 调用this._getDimensionOperatorsBydId(dId)
        getMeasureDrillFieldsById: function (dId) {
            var dim = BI.Utils._getDimensionOperatorsBydId(dId);
            if (BI.isNotNull(dim)) {
                return dim.drillFields || {};
            }
        },

        getMeasureDrillOrderById: function (dId) {
            var dim = this._getDimensionOperatorsBydId(dId);
            if (BI.isNotNull(dim)) {
                return dim.drillOrder || BICst.DRILL_ORDER.FIXED;
            }
        },

        getMeasureDrillSequenceById: function (dId) {
            var dim = this._getDimensionOperatorsBydId(dId);
            if (BI.isNotNull(dim)) {
                return dim.drillSequence || [];
            }
        },

        getMeasureSwitchFieldById: function (dId) {
            var dim = this._getDimensionOperatorsBydId(dId);
            if (BI.isNotNull(dim)) {
                return dim.switchFieldId || BI.Utils.getFieldIdBydId(dId);
            }
        },

        getMeasureRepeatCalById: function (dId) {
            var dim = this._getDimensionOperatorsBydId(dId);
            if (BI.isNotNull(dim)) {
                return dim.repeatCal;
            }
        },

        // 其他属性除值轴设置外的维度指标下拉设置存在对应字段的分组配置
        // 去配置分两种场景，维度切换之后当前维度字段的配置和做了钻取、联动之后当前维度字段的配置
        // 想用获取维度切换后当前维度字段的配置调用this._getSwitchDimensionOperatorBydId(dId)
        getSwitchMeasureSettingById: function (dId) {
            var operator = this._getSwitchDimensionOperatorBydId(dId);
            return operator.settings || {};
        },

        getSwitchMeasureStackById: function (dId) {
            var operator = this.getSwitchMeasureSettingById(dId);
            if (BI.isNotNull(operator)) {
                return operator.stack;
            }
        },

        getSwitchMeasureFilterById: function (dId) {
            var operator = this._getSwitchDimensionOperatorBydId(dId);
            if (BI.isNotNull(operator)) {
                return BI.deepClone(operator.filter);
            }
        },

        getSwitchMeasureSortById: function (dId) {
            var operator = this._getSwitchDimensionOperatorBydId(dId);
            if (BI.isNotNull(operator)) {
                return BI.deepClone(operator.sort);
            }
        },

        // 想用获取钻取之后最终结果维度字段的配置调用this._getResultDimensionOperatorBydId(dId)
        // 普通的维度字段和指标字段调用这个
        getResMeasureFilterById: function (dId) {
            var operator = this._getResultDimensionOperatorBydId(dId);
            if (BI.isNotNull(operator)) {
                return BI.deepClone(operator.filter);
            }
        },

        getResMeasureSortById: function (dId) {
            var operator = this._getResultDimensionOperatorBydId(dId);
            if (BI.isNotNull(operator)) {
                return BI.deepClone(operator.sort);
            }
        },

        getResMeasureSettingsById: function (dId) {
            // 获取最终的settings
            var operator = this._getResultDimensionOperatorBydId(dId);
            return operator.settings || {};
        },

        getResMeasureShowMissingTimeById: function (dId) {
            var operator = this._getResultDimensionOperatorBydId(dId);
            if (BI.isNotNull(operator)) {
                return operator.showMissingTime;
            }
        },

        // 放到维度上的配置
        // 普通维度指标字段的分组和钻取维度的第一个字段的分组放dimension.group.type
        getDimensionGroupTypeById: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim) && BI.isNotNull(dim.group) && BI.isNotNull(dim.group.type)) {
                return dim.group.type;
            }
            return BI.Utils.getDefaultGroupTypeByFieldIdOfWidget(BI.Utils.getWidgetIdBydId(dId), BI.Utils.getFieldIdBydId(dId));
        },

        getTargetMetricTypeById: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim)) {
                return dim.metric;
            }
        },

        getDimensionTypeById: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim)) {
                return dim.type;
            }
        },

        getFieldIdBydId: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim)) {
                return dim.fieldId;
            }
        },

        getDimensionCounterDepById: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim)) {
                return dim.counterDep || BICst.DESIGN.COUNTER_DEP.TOTAL_ROWS;
            }
            return BICst.DESIGN.COUNTER_DEP.TOTAL_ROWS;
        },

        getDimensionCalculationTypeById: function (dId) {
            var dim = this._getDimensionById(dId);
            if (BI.isNotNull(dim) && BI.isNotNull(dim.calculation) && BI.isNotNull(dim.calculation.type)) {
                return dim.calculation.type;
            }
            return BICst.DESIGN.RAPID_CALCULATE_TYPE.NONE;
        },

        // 获取维度的type、维度的分组、维度的值轴设置
        // 维度上需要通过维度切换和结果的配置进行计算的配置
        getSwitchDimensionTypeById: function (dId) {
            var type = BI.Utils.getDimensionTypeById(dId);
            switch (type) {
                case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                    return type;
                default:
                    break;
            }
            var fieldId = BI.Utils.getMeasureSwitchFieldById(dId);
            var wId = BI.Utils.getWidgetIdBydId(dId);
            return BI.Utils.getDimensionTypeByFieldType(BI.Utils.getFieldTypeByIdOfWidget(wId, fieldId));
        },

        // 获取widget中保存的维度类型，用于判断field类型改变
        getSwitchDimensionRedMarkTypeById: function (dId) {
            var type = BI.Utils.getDimensionTypeById(dId);
            switch (type) {
                case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                    return type;
                default:
                    break;
            }
            var fieldId = BI.Utils.getMeasureSwitchFieldById(dId);
            var fId = BI.Utils.getFieldIdBydId(dId);
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var drillDir = BI.Utils.getDrillDirByIdOfWidget(wId, fId);
            BI.each(drillDir, function (idx, drill) {
                if (drill.id === fieldId) {
                    type = BI.Utils.getDimensionTypeByFieldType(drill.type);
                }
            });
            return type;
        },

        // 获取维度切换之后当前字段分组
        getSwitchDimensionGroupTypeById: function (dId) {
            var switchFieldId = BI.Utils.getMeasureSwitchFieldById(dId);
            return BI.Utils.getDimensionGroupTypeBydIdAndFieldId(dId, switchFieldId);
        },

        getSwitchDimensionConfById: function (dId) {
            var dim = BI.Utils._getDimensionById(dId);
            var fieldId = BI.Utils.getMeasureSwitchFieldById(dId);
            if (BI.isNotNull(dim) && fieldId === BI.Utils.getFieldIdBydId(dId)) {
                return BI.deepClone(dim);
            }
            return dim.drillDimensions[fieldId] || {};
        },

        getSwitchDimensionSettingById: function (dId) {
            var dimConf = BI.Utils.getSwitchDimensionConfById(dId);
            return dimConf.settings || {};
        },

        getResultDimensionTypeById: function (dId) {
            var self = this;
            var wId = this.getWidgetIdBydId(dId);
            var type = this.getDimensionTypeById(dId);
            var operator = this._getDimensionOperatorsBydId(dId);

            if (operator.switchFieldId) {
                type = self.getDimensionTypeByFieldType(this.getFieldTypeByIdOfWidget(wId, operator.switchFieldId));
            }
            if (operator.drillSequence && operator.drillSequence.length > 0) {
                var fieldId = BI.last(operator.drillSequence).to;
                type = self.getDimensionTypeByFieldType(this.getFieldTypeByIdOfWidget(wId, fieldId));
            }
            return type;
        },

        getResultDimensionFieldIdById: function (dId) {
            var fieldId = this.getMeasureSwitchFieldById(dId);
            var operator = this._getDimensionOperatorsBydId(dId);
            if (operator.drillSequence && operator.drillSequence.length > 0) {
                fieldId = BI.last(operator.drillSequence).to;
            }
            return fieldId;
        },

        getResultDimensionConfById: function (dId) {
            var dim = this._getDimensionById(dId);
            var fieldId = this.getResultDimensionFieldIdById(dId);

            if (BI.isNotNull(dim) && fieldId === BI.Utils.getFieldIdBydId(dId)) {
                return BI.deepClone(dim);
            }
            return dim.drillDimensions[fieldId] || {};
        },

        getResultDimensionGroupTypeById: function (dId) {
            var resFieldId = BI.Utils.getResultDimensionFieldIdById(dId);
            return BI.Utils.getDimensionGroupTypeBydIdAndFieldId(dId, resFieldId);
        },

        getResDimensionSettingById: function (dId) {
            var dim = this.getResultDimensionConfById(dId);
            return dim.settings || {};
        },

        getDimensionSharedAxisById: function (dId) {
            var setting = BI.Utils.getResDimensionSettingById(dId);
            var viewAttr = BI.Utils.getWidgetViewAttrById(BI.Utils.getWidgetIdBydId(dId));
            var regionType = BI.Utils.getRegionTypeById(dId);

            // 指标聚合状态下才有共享轴
            if (viewAttr[regionType].type === BICst.DESIGN.VIEW_ATTR.PARALLEL) {
                return;
            }
            if (setting.valueAxis && setting.valueAxis.sharedAxis) {
                return setting.valueAxis.sharedAxis;
            }
            return BICst.CHART.SHARE_VALUE_AXIS.LEFT;
        },

        // 其他
        getDetailDimensionFilterById: function (dId) {
            var wId = this.getWidgetIdBydId(dId);
            var settings = this.getWidgetSettingsById(wId);
            var filterValue = settings.tableAttr.filterValue;
            return filterValue[dId];
        },

        isDrillDimensionById: function (dId) {
            var fId = this.getFieldIdBydId(dId);
            var wId = this.getWidgetIdBydId(dId);
            return BI.Utils.isDrillField(wId, fId);
        },

        isAggCalculateTarget: function (dId) {
            var fId = this.getFieldIdBydId(dId);
            var wId = this.getWidgetIdBydId(dId);

            return this.checkFieldIsAgg(wId, fId);
        },

        getCalculateTargetIdsById: function (dId) {
            var fId = this.getFieldIdBydId(dId);
            var wId = this.getWidgetIdBydId(dId);
            return this.getCalculateTargetIdsByFieldIdOfWidget(wId, fId);
        },

        getCalculateTypeById: function (dId) {
            var dimension = this._getDimensionById(dId);
            return dimension.calculation ? dimension.calculation.type : null;
        },

        _getDimensionById: function (dId) {
            var wId = this.getWidgetIdBydId(dId);
            if (!this.isWidgetExistById(wId)) {
                return;
            }
            var widget = BI.designModel.widgets[wId];
            return BI.find(widget.dimensions, function (i, dim) {
                return dim.id === dId;
            });
        },

        isDimensionExist: function (dId) {
            return this.getAllDimensionIDs().contains(dId);
        },

        _getDimensionNameById: function (dId, notDisplayName) {
            var switchField = BI.Utils.getMeasureSwitchFieldById(dId);
            return BI.Utils.getDimensionNameBydIdAndFieldId(dId, switchField, notDisplayName);
        },

        getDimensionNameById: function (dId) {
            return this._getDimensionNameById(dId);
        },

        getDimensionDisplayNameById: function (dId) {
            var switchField = BI.Utils.getMeasureSwitchFieldById(dId);

            return BI.Utils.getDimensionConfBydIdAndFieldId(dId, switchField).displayName;
        },

        getDimensionNameTipById: function (dId) {
            // tip显示转义名 不考虑显示名
            return this._getDimensionNameById(dId, true);
        },

        getWidgetIdBydId: function (dId) {
            var self = this;
            if (!this.dimension2WidgetMap) {
                this.dimension2WidgetMap = {};
            }
            if (BI.isNotNull(this.dimension2WidgetMap[dId])) {
                return this.dimension2WidgetMap[dId];
            }
            var widgets = this.getAllWidgetIds();
            var wid = BI.find(widgets, function (i, wid) {
                var dims = self.getAllDimensionIDs(wid);
                return BI.find(dims, function (j, id) {
                    return dId === id;
                });
            });
            this.dimension2WidgetMap[dId] = wid;
            return wid;
        },

        // 获取dimension所在区域的所有dimensionId
        getRegionDimensionIdsBydId: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var view = BI.Utils.getWidgetViewById(wId);
            var regionType = BI.findKey(view, function (regionType, dIds) {
                if (BI.contains(dIds, dId)) {
                    return true;
                }
            });
            return view[regionType];
        },

        getDimensionStringCustomGroupValueById: function (dId) {
            var dim = BI.Utils.getDimensionByDIdGroupType(dId, BICst.GROUP.CUSTOM_GROUP);

            if (BI.isNotNull(dim)) {
                return BI.deepClone(dim.customGroup);
            }
        },

        getDimensionNumberCustomGroupValueById: function (dId) {
            var dim = this.getDimensionByDIdGroupType(dId, BICst.GROUP.NUMBER_GROUP);
            if (BI.isNotNull(dim)) {
                return BI.deepClone(dim.customGroup);
            }
        },

        isCalculateTargetById: function (dId) {
            return this.getDimensionTypeById(dId) === BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET;
        },

        getRegionTypeById: function (dId) {
            var wid = this.getWidgetIdBydId(dId);
            var widget = BI.designModel.widgets[wid] || {};
            return BI.findKey(widget.view, function (regionType, dIds) {
                if (BI.contains(dIds, dId)) {
                    return true;
                }
            });
        },

        isTargetById: function (dId) {
            var type = BI.Utils.getDimensionTypeById(dId);
            switch (type) {
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    return true;
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                default:
                    return false;
            }
        },

        isDimInView: function (dId) {
            var wId = this.getWidgetIdBydId(dId);
            var view = this.getWidgetViewById(wId);
            return BI.some(view, function (id, dims) {
                return dims.contains(dId);
            });
        },

        isLatitudeDimension: function (dId) {
            return this.getDimensionGroupTypeById(dId) === BICst.DESIGN.GROUP.LATITUDE;
        },

        isLongitudeDimension: function (dId) {
            return this.getDimensionGroupTypeById(dId) === BICst.DESIGN.GROUP.LONGITUDE;
        },

        isLatitudeTarget: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var field = BI.Utils.getFieldByIdOfWidget(wId, BI.Utils.getFieldIdBydId(dId));

            return field && field.geoType === BICst.DESIGN.TARGET_FIELD_GEO.LATITUDE;
        },

        isLongitudeTarget: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var field = BI.Utils.getFieldByIdOfWidget(wId, BI.Utils.getFieldIdBydId(dId));

            return field && field.geoType === BICst.DESIGN.TARGET_FIELD_GEO.LONGITUDE;
        },

        // 判断某一个字段是否已经转化为地理角色字段
        isGeometricDimension: function (dId) {
            return this.isLatitudeDimension(dId) || this.isLongitudeDimension(dId)
                || this.isLatitudeTarget(dId) || this.isLongitudeTarget(dId);
        },

        // 是否为指标名称字段
        isTargetNameFieldById: function (dId) {
            return BI.Utils.getDimensionTypeById(dId) === BICst.DESIGN.DIMENSION_TYPE.TARGET_NAME;
        },

        isClusterDimById: function (dId) {
            return BI.Utils.getDimensionTypeById(dId) === BICst.DESIGN.DIMENSION_TYPE.DATA_MINING;
        },

        getFieldNameByDId: function (dId) {
            var wId = this.getWidgetIdBydId(dId);
            var fieldId = this.getFieldIdBydId(dId);
            return this.getFieldNameByIdOfWidget(wId, fieldId);
        },

        getSamePropertyDimensionGroupBydIds: function (dIds) {
            var self = this;
            dIds = dIds || [];
            var stringMap = {}, numberMap = {}, counterMap = {};
            var wId;
            if (BI.isNotEmptyArray(dIds)) {
                wId = BI.Utils.getWidgetIdBydId(dIds[0]);
            }
            BI.each(dIds, function (idx, dId) {
                switch (BI.Utils.getDimensionTypeById(dId)) {
                    case BICst.DESIGN.DIMENSION_TYPE.STRING:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    case BICst.DESIGN.DIMENSION_TYPE.DATA_MINING:
                        groupString(dId);
                        break;
                    case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                        groupCounter(dId);
                        break;
                    default:
                        groupNumber(dId);
                        break;
                }
            });
            var result = BI.extend(numberMap, counterMap, stringMap);
            var map = {};
            BI.each(result, function (key, array) {
                map[BI.UUID()] = {
                    group: key,
                    dimensionIds: array
                };
            });
            return map;

            function groupString (dId) {
                var fieldId = self.getMeasureSwitchFieldById(dId);
                var key = wId + "_" + fieldId + "_" + BI.Utils.getSwitchDimensionGroupTypeById(dId);
                if (BI.isNull(stringMap[key])) {
                    stringMap[key] = [];
                }
                stringMap[key].push(dId);
            }

            function groupNumber (dId) {
                var fieldId = self.getMeasureSwitchFieldById(dId);
                var groupType = BI.Utils.getSwitchDimensionGroupTypeById(dId) || BICst.SUMMARY_TYPE.SUM;
                var key = wId + "_" + fieldId + "_" + groupType + "_" + self.getDimensionCalculationTypeById(dId);
                if (BI.isNull(numberMap[key])) {
                    numberMap[key] = [];
                }
                numberMap[key].push(dId);
            }

            function groupCounter (dId) {
                var counterDepKey = self.getDimensionCounterDepById(dId);
                var key = wId + "_" + counterDepKey + "_" + self.getDimensionCalculationTypeById(dId);
                if (BI.isNull(counterMap[key])) {
                    counterMap[key] = [];
                }
                counterMap[key].push(dId);
            }
        },

        getDimensionsGroupIdBydId: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            return BI.findKey(BI.designModel.widgets[wId].dimensionGroups, function (idx, obj) {
                return BI.contains(obj.dimensionIds, dId);
            });
        },

        // '年月日' '年周数' '年月' '年季度' '年'时,才可进行时序预测
        isSupportForecastingDateById: function (dId) {
            switch (BI.Utils.getSwitchDimensionGroupTypeById(dId)) {
                case BICst.DESIGN.GROUP.YMD:
                case BICst.DESIGN.GROUP.YW:
                case BICst.DESIGN.GROUP.YM:
                case BICst.DESIGN.GROUP.YS:
                case BICst.DESIGN.GROUP.Y:
                    return true;
                default:
                    return false;
            }
        },

        getForecastingDateUnitById: function (dId) {
            switch (BI.Utils.getSwitchDimensionGroupTypeById(dId)) {
                case BICst.DESIGN.GROUP.YMD:
                    return BI.i18nText("BI-Basic_Multi_Date_DAY");
                case BICst.DESIGN.GROUP.YW:
                    return BI.i18nText("BI-Basic_Multi_Date_Week");
                case BICst.DESIGN.GROUP.YM:
                    return BI.i18nText("BI-Basic_Multi_Date_Month");
                case BICst.DESIGN.GROUP.YS:
                    return BI.i18nText("BI-Basic_Quarter");
                case BICst.DESIGN.GROUP.Y:
                    return BI.i18nText("BI-Basic_Multi_Date_Year");
                default:
                    return "";
            }
        },

        // 根据dId和groupType获取对应分组信息
        getDimensionByDIdGroupType: function (dId, groupType) {
            var wId = this.getWidgetIdBydId(dId);

            var mIds = BI.map(BI.designModel.widgets[wId].measures, "id");

            var field = this.getFieldByIdOfWidget(wId, this.getMeasureSwitchFieldById(dId));
            var msGroupType = "group_" + ((groupType) || this.getDefaultGroupTypeByFieldIdOfWidget(wId, field.id));
            if (!mIds.contains(field.id) || !field.group || !field.group[msGroupType]) {
                return {};
            }
            return field.group[msGroupType];
        },

        getDrillDimensionFilterById: function (dId) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var fId = this.getFieldIdBydId(dId);

            var filters = {};

            BI.each(BI.map(BI.Utils.getDrillDirByIdOfWidget(wId, fId), "id"), function (index, fieldId) {
                var groupType = BI.Utils.getDimensionGroupTypeBydIdAndFieldId(dId, fieldId);

                var msGroupType = "group_" + groupType;
                var field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);

                if (BI.isNull(field.group)) return;

                if (BI.isNull(field.group[msGroupType])) return;
                var filter = field.group[msGroupType].filter;

                if (BI.isNull(filter)) return;

                filters[fieldId] = filter;
            });

            return filters;
        }
    });
})();
/**
 * @author: Teller
 * @createdAt: 2018/5/27 下午3:14
 * @Description: 过滤相关
 */

BI.Utils = BI.Utils || {};

BI.extend(BI.Utils, {
    getFilterItemsByWidgetId: function (wId, removeClickValue) {
        var allWidgetIds = BI.Utils.getAllWidgetIds();
        var self = this, items = [];
        var widget = BI.designModel.widgets[wId] || {};
        // 找到所有控件的过滤条件
        BI.each(allWidgetIds, function (i, id) {
            if (BI.Utils.isControlWidgetByWidgetId(id)) {
                // 通用查询
                if (BI.Utils.getWidgetTypeById(id) === BICst.DESIGN.WIDGET.GENERAL_QUERY) {
                    var value = BI.Utils.getWidgetValueById(id);
                    var item = self._parseGeneralQueryFilter(value);
                    if (BI.isNotNull(item)) {
                        items.push(item);
                    }
                } else {
                    var text = BI.Utils.getControlWidgetValueTextByWid(id);
                    if (BI.isNotNull(text) && text !== "") {
                        items.push({
                            type: "bi.design.filter_pane.control_item",
                            iconCls: BI.Utils.getWidgetIconById(id),
                            cls: "bi-split-right bi-split-bottom",
                            wId: id,
                            text: text,
                            id: BI.UUID()
                        });
                    }
                }
            }
        });

        // 组件的联动条件
        var linkWidgets = widget.linkage;
        BI.each(linkWidgets, function (linkId) {
            if (!BI.Utils.isWidgetExistById(linkId) ||
                BI.isEmpty(BI.Utils.getClickedOfWidget(linkId))) {
                return;
            }
            items.push({
                type: "bi.design.table_chart.filter_pane.linkage_item",
                cls: "bi-split-bottom bi-split-right",
                id: BI.UUID(),
                wId: linkId,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: function (v) {
                        if (BI.isFunction(removeClickValue)) {
                            removeClickValue(v);
                        }
                    }
                }]
            });
        });

        // todo 跳转条件
        // 表头上设置的指标过滤条件
        var targetFilter = widget.filterValue;
        BI.each(targetFilter, function (tId, filter) {
            items.push(self._parseTargetFilter(tId, filter));
        });

        // 表头上设置的过滤条件，还要加上所有dimension的过滤条件
        var wType = BI.Utils.getWidgetTypeById(wId);

        // 明细表表头过滤
        if (wType === BICst.DESIGN.WIDGET.DETAIL) {
            var filters = BI.Utils.getWidgetFilterById(wId);

            BI.each(filters, function (tId, filter) {
                var child = self._parseDetailHeaderFilter(tId, filter, wId);

                items.push(child);
            });
        }

        var dimIds = BI.Utils.getAllDimensionIDs(wId);
        BI.each(dimIds, function (i, dimId) {
            if (BI.Utils.isDimensionExist(dimId)) {
                // drill时需要特殊处理
                if (BI.Utils.isDrillDimensionById(dimId)) {
                    var fValues = BI.Utils.getDrillDimensionFilterById(dimId);

                    BI.each(fValues, function (fId, fValue) {
                        if (fValue && BI.isNotEmptyObject(fValue) && wType !== BICst.DESIGN.WIDGET.DETAIL) {
                            var child = self._parseDrillFilter(dimId, fId, fValue, wId);
                            BI.isNotNull(child) && items.push(child);
                        }
                    });

                } else {
                    var fValue = BI.Utils.getResMeasureFilterById(dimId);

                    if (fValue && BI.isNotEmptyObject(fValue) && wType !== BICst.DESIGN.WIDGET.DETAIL) {
                        var child = self._parseDimensionFilter(dimId, fValue, wId);
                        BI.isNotNull(child) && items.push(child);
                    }
                }
            }
        });

        return this.wrapperFilterItems(items);
    },

    wrapperFilterItems: function (items) {
        var filterValues = [];
        if (BI.size(items) > 1) {
            filterValues.push({
                value: BICst.ANALYSIS_FILTER_TYPE.AND,
                children: items,
                id: BI.UUID()
            });
        } else {
            filterValues = items;
        }

        return filterValues;
    },

    getLinkItemsTextByWId: function (wId) {
        var texts = [];

        var clicked = BI.Utils.getClickedOfWidget(wId);
        if (BI.isNotNull(clicked) && BI.isNotNull(clicked.value)) {
            BI.each(clicked.value, function (i, v) {
                var dimensionName = "";

                var text = v.text;

                if (BI.Utils.isDrillDimensionById(v.dId)) {
                    dimensionName = BI.Utils.getFieldDisplayName(BI.Utils.getFieldByIdOfWidget(wId, v.fieldId));
                } else {
                    dimensionName = BI.Utils.getDimensionNameById(v.dId);
                }

                // 时间类型需要reformat
                if (BI.Utils.getFieldTypeByIdOfWidget(wId, v.fieldId) === BICst.COLUMN.DATE) {
                    text = BI.Format.formatValueByGroup(text, BI.Utils.getResultDimensionGroupTypeById(v.dId));
                }

                texts.push({
                    text: dimensionName + "=" + text,
                    value: v
                });
            });
        }

        return texts;
    },

    getFilterValue4ExportByWid: function (wId, nameMap) {
        var self = this;
        var items = this.getFilterItemsByWidgetId(wId);

        function transformItem (item) {
            var value, opt = {};
            if (item.type === "bi.design.table_chart.filter_pane.dim_filter") {
                if (BI.isNotNull(item.tId)) {
                    opt.tId = item.tId;
                } else {
                    opt.fieldId = item.fieldId;
                }
                value = {
                    type: BICst.ANALYSIS_FILTER_TYPE.NONE,
                    text: self.transformFilterItemsToText(item.filter, opt).text
                };
            } else if (item.type === "bi.design.table_chart.filter_pane.drill_filter") {
                opt = {
                    wId: item.wId,
                    tId: item.tId,
                    fieldId: item.fieldId,
                    isDrillFilter: true
                };
                value = {
                    type: BICst.ANALYSIS_FILTER_TYPE.NONE,
                    text: self.transformFilterItemsToText(item.filter, opt).text
                };
            } else if (BI.isNotNull(item.children)) {
                value = {
                    type: item.value,
                    children: []
                };

                BI.each(item.children, function (idx, child) {
                    value.children.push(transformItem(child));
                });
            } else if (item.type === "bi.design.table_chart.filter_pane.linkage_item") {
                BI.each(BI.Utils.getLinkItemsTextByWId(item.wId), function (index, textObj) {
                    value = {
                        type: BICst.ANALYSIS_FILTER_TYPE.NONE,
                        text: [nameMap[item.wId], textObj.text].join(" ")
                    };
                });
            } else {
                value = {
                    type: BICst.ANALYSIS_FILTER_TYPE.NONE,
                    text: (item.type === "bi.design.filter_pane.control_item" ? nameMap[item.wId] + " " : "") + item.text
                };
            }

            return value;
        }

        var filterValue = [];

        BI.each(items, function (index, item) {
            filterValue.push(transformItem(item));
        });

        return filterValue;
    },

    _parseGeneralQueryFilter: function (filter) {
        var self = this;
        if (BI.isNull(filter)) {
            return;
        }
        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || filter.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
            var children = [];
            BI.each(filter.filterValue, function (i, value) {
                var child = self._parseGeneralQueryFilter(value);
                if (BI.isNotNull(child)) {
                    children.push(self._parseGeneralQueryFilter(value));
                }
            });
            return {
                id: BI.UUID(),
                value: filter.filterType,
                children: children
            };
        } else if (BI.isNotNull(filter.fieldId)) {
            return {
                id: BI.UUID(),
                type: "bi.design.table_chart.filter_pane.dim_filter",
                cls: "bi-split-bottom bi-split-right",
                fieldId: filter.fieldId,
                filter: filter
            };
        }
    },

    _parseDrillFilter: function (dimId, fieldId, filter, wId) {
        var self = this;
        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || filter.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
            var children = [];
            BI.each(filter.filterValue, function (i, value) {
                var child = self._parseDrillFilter(dimId, fieldId, value, wId);
                BI.isNotNull(child) && children.push(child);
            });
            return {
                id: BI.UUID(),
                value: filter.filterType,
                children: children
            };
        }

        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.FORMULA) {
            filter.dimensionGroupIdMap = {};

            var isNull = BI.some(filter.formulaIds, function (index, formulaId) {
                var did = BI.Utils.getDimensionIdByDimensionGroupId(wId, formulaId);
                filter.dimensionGroupIdMap[formulaId] = did;

                return BI.isNull(did);
            });

            if (isNull) return null;
        }

        return {
            id: BI.UUID(),
            type: "bi.design.table_chart.filter_pane.drill_filter",
            cls: "bi-split-bottom bi-split-right",
            fieldId: fieldId,
            tId: dimId,
            wId: wId,
            filter: filter
        };
    },

    _parseDimensionFilter: function (dimId, filter, wId) {
        var self = this;
        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || filter.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
            var children = [];
            BI.each(filter.filterValue, function (i, value) {
                var child = self._parseDimensionFilter(dimId, value, wId);
                BI.isNotNull(child) && children.push(child);
            });
            return {
                id: BI.UUID(),
                value: filter.filterType,
                children: children
            };
        }
        var dId;

        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.FORMULA) {
            dId = BI.Utils.getDimensionIdByDimensionGroupId(wId, dimId);

            filter.dimensionGroupIdMap = {};

            var isNull = BI.some(filter.formulaIds, function (index, formulaId) {
                var did = BI.Utils.getDimensionIdByDimensionGroupId(wId, formulaId);
                filter.dimensionGroupIdMap[formulaId] = did;

                return BI.isNull(did);
            });

            if (isNull) return null;
        } else {
            dId = BI.Utils.getDimensionIdByDimensionGroupId(wId, filter.targetId);
        }

        return BI.isNotNull(dId) ? {
            id: BI.UUID(),
            type: "bi.design.table_chart.filter_pane.dim_filter",
            cls: "bi-split-bottom bi-split-right",
            tId: dId || dimId,
            filter: filter
        } : null;
    },

    _parseDetailHeaderFilter: function (tId, filter, wId) {
        var self = this;
        if (filter.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || filter.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
            var children = [];
            BI.each(filter.filterValue, function (i, value) {
                var child = self._parseDetailHeaderFilter(tId, value, wId);
                BI.isNotNull(child) && children.push(child);
            });
            return {
                id: BI.UUID(),
                value: filter.filterType,
                children: children
            };
        }

        return {
            id: BI.UUID(),
            type: "bi.design.table_chart.filter_pane.dim_filter",
            cls: "bi-split-bottom bi-split-right",
            tId: tId,
            filter: filter,
            wId: wId
        };
    },

    transformFilterItemsToText: function (filter, opt) {
        var relation = "", value = "";
        var tId = opt.tId, fieldId = opt.fieldId, isDrillFilter = opt.isDrillFilter, wId = opt.wId;
        var v, sType;

        function formatDateBelongValue () {
            if (isDrillFilter) {
                value = BI.Utils.getDimensionDateTextByGroupType(filter.filterValue.value, BI.Utils.getDimensionGroupTypeBydIdAndFieldId(tId, fieldId));
            } else {
                value = BI.Utils.getDimensionDateText(filter.filterValue.value, tId);
            }
        }

        switch (filter.filterType) {
            // formula
            case BICst.ANALYSIS_FILTER_TYPE.FORMULA:
                relation = BI.i18nText("BI-Basic_Fulfil");
                value = filter.filterValue;
                value = value.replaceAll("\\$\\{.*?\\}", function (dimensionStr) {
                    var dimensionId = dimensionStr.substring(2, dimensionStr.length - 1);

                    return BI.Utils.getDimensionNameById(filter.dimensionGroupIdMap[dimensionId]);
                });
                break;
            // number
            case BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE:
                relation = BI.i18nText("BI-Basic_In");
                value = BI.Utils.getNumberRangeText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.NOT_BELONG_VALUE:
                relation = BI.i18nText("BI-Basic_Not_In");
                value = BI.Utils.getNumberRangeText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.EQUAL_TO:
                relation = BI.i18nText("BI-Basic_Equal");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.NOT_EQUAL_TO:
                relation = BI.i18nText("BI-Basic_Not_Equal_To");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.LARGE:
                relation = BI.i18nText("BI-Basic_More_Than");
                value = filter.filterValue.value;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.SMALL:
                relation = BI.i18nText("BI-Basic_Less_Than");
                value = filter.filterValue.value;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.LARGE_OR_EQUAL:
                relation = BI.i18nText("BI-Basic_More_And_Equal");
                value = filter.filterValue.value;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.SMALL_OR_EQUAL:
                relation = BI.i18nText("BI-Basic_Less_And_Equal");
                value = filter.filterValue.value;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.IS_NULL:
                relation = BI.i18nText("BI-Basic_Is_Null");
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.NOT_NULL:
                relation = BI.i18nText("BI-Basic_Not_Null");
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.TOP_N:
                relation = BI.i18nText("BI-Basic_String_Top_N");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_NUMBER.BOTTOM_N:
                relation = BI.i18nText("BI-Basic_String_Bottom_N");
                value = filter.filterValue;
                break;

            // string
            case BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE:
                v = filter.filterValue;
                sType = v.type;
                relation = sType === BI.Selection.All ? BI.i18nText("BI-Basic_Not_In") : BI.i18nText("BI-Basic_In");
                value = v.value;
                break;
            case BICst.ANALYSIS_FILTER_STRING.NOT_BELONG_VALUE:
                v = filter.filterValue;
                sType = v.type;
                relation = sType === BI.Selection.All ? BI.i18nText("BI-Basic_In") : BI.i18nText("BI-Basic_Not_In");
                value = v.value;
                break;
            case BICst.ANALYSIS_FILTER_STRING.CONTAIN:
                relation = BI.i18nText("BI-Basic_Contain");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.NOT_CONTAIN:
                relation = BI.i18nText("BI-Basic_Not_Contain");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.IS_NULL:
                relation = BI.i18nText("BI-Basic_Is_Null");
                break;
            case BICst.ANALYSIS_FILTER_STRING.NOT_NULL:
                relation = BI.i18nText("BI-Basic_Not_Null");
                break;
            case BICst.ANALYSIS_FILTER_STRING.BEGIN_WITH:
                relation = BI.i18nText("BI-Basic_Begin_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.END_WITH:
                relation = BI.i18nText("BI-Basic_End_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.TOP_N:
                relation = BI.i18nText("BI-Basic_String_Top_N");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.BOTTOM_N:
                relation = BI.i18nText("BI-Basic_String_Bottom_N");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.NOT_BEGIN_WITH:
                relation = BI.i18nText("BI-Basic_Not_Begin_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_STRING.NOT_END_WITH:
                relation = BI.i18nText("BI-Basic_Not_End_With");
                value = filter.filterValue;
                break;
            // date
            case BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE:
                relation = BI.i18nText("BI-Basic_In");
                value = BI.Utils.getDateRangeText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_VALUE:
                relation = BI.i18nText("BI-Basic_Not_In");
                value = BI.Utils.getDateRangeText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.LESS_THAN:
                relation = BI.i18nText("BI-Basic_Date_Less_Than");
                value = BI.Utils.getDateText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.MORE_THAN:
                relation = BI.i18nText("BI-Basic_Date_More_Than");
                value = BI.Utils.getDateText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.EQUAL_TO:
                relation = BI.i18nText("BI-Basic_Equal");
                value = BI.Utils.getDateText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_EQUAL_TO:
                relation = BI.i18nText("BI-Basic_Not_Equal_To");
                value = BI.Utils.getDateText(filter.filterValue);
                break;
            case BICst.ANALYSIS_FILTER_DATE.IS_NULL:
                relation = BI.i18nText("BI-Basic_Is_Null");
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_NULL:
                relation = BI.i18nText("BI-Basic_Not_Null");
                break;
            case BICst.ANALYSIS_FILTER_DATE.CONTAIN:
                relation = BI.i18nText("BI-Basic_Contain");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_CONTAIN:
                relation = BI.i18nText("BI-Basic_Not_Contain");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.TOP_N:
                relation = BI.i18nText("BI-Basic_String_Top_N");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.BOTTOM_N:
                relation = BI.i18nText("BI-Basic_String_Bottom_N");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.BEGIN_WITH:
                relation = BI.i18nText("BI-Basic_Begin_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.END_WITH:
                relation = BI.i18nText("BI-Basic_End_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_BEGIN_WITH:
                relation = BI.i18nText("BI-Basic_Not_Begin_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_END_WITH:
                relation = BI.i18nText("BI-Basic_Not_End_With");
                value = filter.filterValue;
                break;
            case BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE:
                relation = BI.i18nText("BI-Basic_In");
                value = BI.Utils.getDateWidgetFilterText(filter.filterValue, filter.filterType);
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE:
                relation = BI.i18nText("BI-Basic_Not_In");
                value = BI.Utils.getDateWidgetFilterText(filter.filterValue, filter.filterType);
                break;
            case BICst.ANALYSIS_FILTER_DATE.LESS_THAN_DATE_WIDGET_VALUE:
                relation = BI.i18nText("BI-Basic_Date_Less_Than");
                value = BI.Utils.getDateWidgetFilterText(filter.filterValue, filter.filterType);
                break;
            case BICst.ANALYSIS_FILTER_DATE.MORE_THAN_DATE_WIDGET_VALUE:
                relation = BI.i18nText("BI-Basic_Date_More_Than");
                value = BI.Utils.getDateWidgetFilterText(filter.filterValue, filter.filterType);
                break;
            case BICst.ANALYSIS_FILTER_DATE.BELONG_STRING_VALUE:
                v = filter.filterValue || {};
                sType = v.type;
                relation = sType === BI.Selection.All ? BI.i18nText("BI-Basic_Not_In") : BI.i18nText("BI-Basic_In");
                formatDateBelongValue();
                break;
            case BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_STRING_VALUE:
                v = filter.filterValue || {};
                sType = v.type;
                relation = sType === BI.Selection.All ? BI.i18nText("BI-Basic_In") : BI.i18nText("BI-Basic_Not_In");
                formatDateBelongValue();
                break;
            default:
                break;
        }
        var name = "";
        if (isDrillFilter) {
            try {
                name = BI.Utils.getFieldNameByIdOfWidget(wId, fieldId);
            } catch (error) {
                name = "";
            }
        } else if (BI.isNotNull(tId)) {
            name = BI.Utils.getDimensionNameById(tId) || BI.Utils.getFieldNameByDId(tId);
        } else {
            name = BI.Utils.getTableNameByFieldIdInPool(fieldId) + "." + BI.Utils.getFieldNameByIdInDataPool(fieldId);
        }

        return {
            relation: relation,
            value: value,
            name: name,
            text: [name, relation, value].join(" ")
        };
    },

    getDimensionDateText: function (value, dId) {
        return BI.map(value, function (idx, v) {
            return BI.Format.formatValueByGroup(v, BI.Utils.getResultDimensionGroupTypeById(dId));
        });
    },

    getDimensionDateTextByGroupType: function (value, groupType) {
        return BI.map(value, function (idx, v) {
            return BI.Format.formatValueByGroup(v, groupType);
        });
    },

    getDrillItems: function (wId) {
        var dIds = BI.Utils.getAllDimensionIDs(wId);
        var items = [];
        BI.each(dIds, function (i, dId) {
            // BI-30206 经纬度维度的钻取信息不显示在过滤面板上
            if (BI.Utils.isLongitudeDimension(dId) || BI.Utils.isLatitudeDimension(dId)) {
                return;
            }
            var drill = BI.Utils.getMeasureDrillSequenceById(dId);
            BI.each(drill, function (j, d) {
                BI.each(d.attachedFilters, function (index, filter) {
                    var groupType = BI.Utils.getDimensionGroupTypeBydIdAndFieldId(filter.targetId, filter.fieldId);

                    items.push({
                        type: "bi.label",
                        text: BI.Utils.getDimensionNameBydIdAndFieldId(filter.targetId, filter.fieldId) + "=" + BI.Format.formatValueByGroup(filter.value, groupType),
                        height: 30,
                        hgap: 5
                    });
                });

                var fromGroupType = BI.Utils.getDimensionGroupTypeBydIdAndFieldId(dId, d.from);
                items.push({
                    type: "bi.label",
                    text: BI.Utils.getDimensionNameBydIdAndFieldId(dId, d.from) + "=" + BI.Format.formatValueByGroup(d.value, fromGroupType),
                    height: 30,
                    hgap: 5
                });
            });
        });
        if (items.length > 0) {
            items.splice(0, 0, {
                type: "bi.label",
                text: BI.i18nText("BI-Design_Drill_Colon"),
                height: 30
            });
        }
        return items;
    }
});
/**
 * author: young
 * createdDate: 2018/4/27
 * description:
 */
!(function () {
    BI.Utils = BI.Utils || {};
    BI.extend(BI.Utils, {
        getNumberRangeText: function (filterValue) {
            var text = "";
            var closeMin = filterValue.closeMin, closeMax = filterValue.closeMax, min = filterValue.min,
                max = filterValue.max;
            if (BI.isNotNull(min) && BI.isNotEmptyString(min) && BI.isNotNull(max) && BI.isNotEmptyString(max)) {
                text = min + (closeMin ? "<=" : "<") + BI.i18nText("BI-Basic_Value") + (closeMax ? "<=" : "<") + max;
            } else if (BI.isNotNull(min) && BI.isNotEmptyString(min)) {
                text = min + (closeMin ? "<=" : "<") + BI.i18nText("BI-Basic_Value");
            } else if (BI.isNotNull(max) && BI.isNotEmptyString(max)) {
                text = BI.i18nText("BI-Basic_Value") + (closeMax ? "<=" : "<") + max;
            }
            return text;
        },

        getDateRangeText: function (filterValue) {
            if (BI.isNull(filterValue)) {
                return BI.i18nText("BI-Basic_Unrestricted");
            }
            var start = filterValue.start, end = filterValue.end;
            var sStart = "", sEnd = "";
            if (BI.isNotNull(start)) {
                sStart = this.getDateText(start);
            }
            if (BI.isNotNull(end)) {
                sEnd = this.getDateText(end);
            }
            return sStart + "-" + sEnd;
        },

        getDateWidgetFilterText: function (filterValue, filterType) {
            var wId = filterValue.wId;

            if (!BI.Utils.isWidgetExistById(wId)) return;

            var startOrEnd = filterValue.startOrEnd;
            var offset = filterValue.offset;
            var startText = BI.i18nText("BI-Basic_Unrestricted"), endText = BI.i18nText("BI-Basic_Unrestricted");

            var widgetType = BI.Utils.getWidgetTypeById(wId);
            var widgetValue = BI.deepClone(BI.Utils.getWidgetValueById(wId));
            var text = BI.i18nText("BI-Basic_Unrestricted");
            var date;

            function getRangeText () {
                return startText + " - " + endText;
            }

            if (filterType === BICst.ANALYSIS_FILTER_DATE.BELONG_DATE_WIDGET_VALUE || filterType === BICst.ANALYSIS_FILTER_DATE.NOT_BELONG_DATE_WIDGET_VALUE) {
                date = this._getDateControlValue(widgetType, widgetValue, offset);

                if (BI.isNull(date)) {
                    return getRangeText();
                }

                if (BI.isNotNull(date.start)) {
                    startText = this._getDateTextByValue(this._formatDateToObj(date.start));
                }

                if (BI.isNotNull(date.end)) {
                    endText = this._getDateTextByValue(this._formatDateToObj(date.end));
                }

                return getRangeText();
            }

            var position = parseInt(offset.position) === 2 ? "start" : "end";

            switch (widgetType) {
                case BICst.DESIGN.WIDGET.DATE:
                case BICst.DESIGN.WIDGET.DATE_PANE:
                case BICst.DESIGN.WIDGET.MONTH:
                case BICst.DESIGN.WIDGET.QUARTER:
                case BICst.DESIGN.WIDGET.YEAR:
                    date = this._getDateControlValue(widgetType, widgetValue, offset);
                    break;
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    switch (startOrEnd) {
                        case 2:
                            date = this._getDateControlValue(BICst.DESIGN.WIDGET.DATE, widgetValue.end, offset);
                            break;
                        case 1:
                        default:
                            date = this._getDateControlValue(BICst.DESIGN.WIDGET.DATE, widgetValue.start, offset);
                            break;
                    }
                    break;
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                    switch (startOrEnd) {
                        case 2:
                            date = this._getDateControlValue(BICst.DESIGN.WIDGET.MONTH, widgetValue.end, offset);
                            break;
                        case 1:
                        default:
                            date = this._getDateControlValue(BICst.DESIGN.WIDGET.MONTH, widgetValue.start, offset);
                    }
                    break;
                default:
            }

            var resultDate = date[position];
            if (BI.isNotNull(resultDate)) {
                text = this._getDateTextByValue(this._formatDateToObj(resultDate));
            }

            return text;
        },

        parseComplexDate: function (v) {

            function _parseComplexDateCommon (v) {
                var type = v.type, value = v.value;
                var date = BI.getDate();
                var currY = date.getFullYear(), currM = date.getMonth(), currD = date.getDate();
                if (BI.isNull(type) && BI.isNotNull(v.year)) {
                    return BI.getDate(v.year, v.month, v.day);
                }
                switch (type) {
                    case BICst.DATE_TYPE.MULTI_DATE_YEAR_PREV:
                        return BI.getDate(currY - 1 * value, currM, currD);
                    case BICst.DATE_TYPE.MULTI_DATE_YEAR_AFTER:
                        return BI.getDate(currY + 1 * value, currM, currD);
                    case BICst.DATE_TYPE.MULTI_DATE_YEAR_BEGIN:
                        return BI.getDate(currY, 0, 1);
                    case BICst.DATE_TYPE.MULTI_DATE_YEAR_END:
                        return BI.getDate(currY, 11, 31);

                    case BICst.DATE_TYPE.MULTI_DATE_MONTH_PREV:
                        return BI.getDate().getBeforeMultiMonth(value);
                    case BICst.DATE_TYPE.MULTI_DATE_MONTH_AFTER:
                        return BI.getDate().getAfterMultiMonth(value);
                    case BICst.DATE_TYPE.MULTI_DATE_MONTH_BEGIN:
                        return BI.getDate(currY, currM, 1);
                    case BICst.DATE_TYPE.MULTI_DATE_MONTH_END:
                        return BI.getDate(currY, currM, (date.getLastDateOfMonth()).getDate());

                    case BICst.DATE_TYPE.MULTI_DATE_QUARTER_PREV:
                        return BI.getDate().getBeforeMulQuarter(value);
                    case BICst.DATE_TYPE.MULTI_DATE_QUARTER_AFTER:
                        return BI.getDate().getAfterMulQuarter(value);
                    case BICst.DATE_TYPE.MULTI_DATE_QUARTER_BEGIN:
                        return BI.getDate().getQuarterStartDate();
                    case BICst.DATE_TYPE.MULTI_DATE_QUARTER_END:
                        return BI.getDate().getQuarterEndDate();

                    case BICst.DATE_TYPE.MULTI_DATE_WEEK_PREV:
                        return date.getOffsetDate(-7 * value);
                    case BICst.DATE_TYPE.MULTI_DATE_WEEK_AFTER:
                        return date.getOffsetDate(7 * value);

                    case BICst.DATE_TYPE.MULTI_DATE_DAY_PREV:
                        return date.getOffsetDate(-1 * value);
                    case BICst.DATE_TYPE.MULTI_DATE_DAY_AFTER:
                        return date.getOffsetDate(1 * value);
                    case BICst.DATE_TYPE.MULTI_DATE_DAY_TODAY:
                        return date;

                    case BICst.DATE_TYPE.MULTI_DATE_PARAM:
                        var wWid = value.wId, se = value.startOrEnd;
                        if (BI.isNotNull(wWid) && BI.isNotNull(se)) {
                            var wWValue = BI.Utils.getWidgetValueById(wWid);
                            if (se === BI.MultiDateParamPane.start && BI.isNotNull(wWValue.start)) {
                                return BI.getDate(wWValue.start.year, wWValue.start.month, wWValue.start.day);
                            }
                            return BI.getDate(wWValue.end.year, wWValue.end.month, wWValue.end.day);
                        }
                        if (BI.isNotNull(value.year) && BI.isNotNull(value.month) && BI.isNotNull(value.day)) {
                            return BI.getDate(value.year, value.month, value.day);
                        }
                        break;
                    case BICst.DATE_TYPE.MULTI_DATE_CALENDAR:
                        return BI.getDate(value.year, value.month, value.day);
                    default:
                }
            }

            function _parseComplexDate4Param (value) {
                var wid = value.wId, se = value.startOrEnd;
                if (BI.isNotNull(wid) && BI.isNotNull(se)) {
                    var wValue = BI.Utils.getWidgetValueById(wid);
                    if (se === BI.MultiDateParamPane.start && BI.isNotNull(wValue.start)) {
                        return _parseComplexDateCommon(wValue.start);
                    }
                    return _parseComplexDateCommon(wValue.end);

                }
                return _parseComplexDateCommon(BI.Utils.getWidgetValueById());
            }

            if (v.type === BICst.DATE_TYPE.MULTI_DATE_PARAM) {
                return _parseComplexDate4Param(v);
            }
            return _parseComplexDateCommon(v);
        },

        getYearText: function (widgetValue) {
            var dateFilterValue = this._calcDateTypeValue(widgetValue);

            return dateFilterValue.year;
        },

        getQuarterText: function (widgetValue) {
            var year, quarter, text = "";

            var dateFilterValue = this._calcDateTypeValue(widgetValue);
            year = dateFilterValue.year; quarter = dateFilterValue.quarter;


            if (BI.isNumeric(year) && BI.isNumeric(quarter)) {
                text = year + " " + BI.i18nText("BI-Basic_No_Quarter", quarter);
            } else if (BI.isNumeric(year)) {
                text = year;
            } else if (BI.isNumeric(quarter)) {
                text = BI.i18nText("BI-Basic_No_Quarter", quarter);
            }
            return text;
        },

        getMonthText: function (widgetValue) {
            var year, month, text = "";

            var dateFilterValue = this._calcDateTypeValue(widgetValue);
            year = dateFilterValue.year; month = dateFilterValue.month;

            if (BI.isNumeric(year) && BI.isNumeric(month)) {
                text = year + "/" + month;
            } else if (BI.isNumeric(year)) {
                text = year;
            } else if (BI.isNumeric(month)) {
                text = month;
            }

            return text;
        },

        getDateText: function (widgetValue) {
            var fValue = widgetValue || {};
            var value = this._calcDateTypeValue(fValue);

            return this._getDateTextByValue(value);
        },

        _getDateTextByValue: function (value) {
            var sStart = "";

            if (BI.isNotNull(value.year) && BI.isNotNull(value.month) && BI.isNotNull(value.day)) {
                if (BI.isNotNull(value.hour) && BI.isNotNull(value.minute) && BI.isNotNull(value.second)) {
                    sStart = BI.getDate(value.year, value.month - 1, value.day, value.hour, value.minute, value.second).print("%Y-%X-%d %H:%M:%S");
                } else {
                    sStart = value.year + "/" + value.month + "/" + value.day;
                }
            } else {
                var date = BI.Utils.parseComplexDate(value);
                sStart = BI.isNotNull(date) ? (date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate()) : "";
            }

            return sStart;
        },

        getYearMonthIntervalText: function (filterValue) {
            var start = filterValue.start, end = filterValue.end;
            var sStart = "", sEnd = "";
            if (BI.isNotNull(start)) {
                sStart = this.getMonthText(start);
            }
            if (BI.isNotNull(end)) {
                sEnd = this.getMonthText(end);
            }
            return sStart + "-" + sEnd;
        },

        getControlWidgetValueTextByWid: function (wid) {

            function getNumberSliderRangeText (filterValue) {
                var text = "";
                var min = filterValue.min, max = filterValue.max;
                if (BI.isNotNull(min) && BI.isNotNull(max)) {
                    text = min + "<=" + BI.i18nText("BI-Basic_Value") + "<=" + max;
                }
                return text;
            }

            function descartes (arr) {
                if (!BI.isArray(arr)) {
                    arr = [];
                }
                return arr.reduce(function (a, b) {
                    return a.map(function (x) {
                        return b.map(function (y) {
                            return x.concat(y);
                        });
                    }).reduce(function (a, b) {
                        return a.concat(b);
                    }, []);
                }, [[]]);
            }

            function getChildrenNode (ob) {
                var text = "";
                var index = 0, size = BI.size(ob);
                BI.each(ob, function (name, children) {
                    index++;
                    var childNodes = getChildrenNode(children);
                    text += name + (childNodes === "" ? "" : (":" + childNodes)) + (index === size ? "" : ",");
                });
                return text;
            }

            var widgetValue = BI.Utils.getWidgetValueById(wid);
            var widgetType = BI.Utils.getWidgetTypeById(wid);
            var text = "";
            if (BI.isNull(widgetValue)) {
                return text;
            }

            switch (widgetType) {
                case BICst.DESIGN.WIDGET.STRING:
                case BICst.DESIGN.WIDGET.STRING_LIST:
                    if (BI.isNull(widgetValue.value) || widgetValue.value.length === 0) {
                        return text;
                    }
                    if (widgetValue.type === BI.Selection.Multi) {
                        text = BI.i18nText("BI-Basic_In") + " " + widgetValue.value;
                    } else if (widgetValue.type === BI.Selection.All) {
                        text = BI.i18nText("BI-Basic_Not_In") + " " + widgetValue.value;
                    }
                    return text;
                case BICst.DESIGN.WIDGET.STRING_LABEL:
                    return BI.i18nText("BI-Basic_In") + " " + widgetValue.value.join("");
                case BICst.DESIGN.WIDGET.SINGLE_SLIDER:
                case BICst.DESIGN.WIDGET.INTERVAL_SLIDER:
                    return getNumberSliderRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.NUMBER:
                    return BI.Utils.getNumberRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.DATE:
                case BICst.DESIGN.WIDGET.DATE_PANE:
                    return BI.Utils.getDateText(widgetValue);
                case BICst.DESIGN.WIDGET.MONTH:
                    return this.getMonthText(widgetValue);
                case BICst.DESIGN.WIDGET.QUARTER:
                    return this.getQuarterText(widgetValue);
                case BICst.DESIGN.WIDGET.YEAR:
                    return this.getYearText(widgetValue);
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    return BI.Utils.getDateRangeText(widgetValue);
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                    return this.getYearMonthIntervalText(widgetValue);
                case BICst.DESIGN.WIDGET.TREE:
                case BICst.DESIGN.WIDGET.TREE_LIST:
                    BI.each(widgetValue, function (name, children) {
                        var childNodes = getChildrenNode(children);
                        text += name + (childNodes === "" ? "" : (":" + childNodes)) + "; ";
                    });
                    if (text !== "") {
                        text = BI.i18nText("BI-Basic_In") + " " + text;
                    }
                    return text;
                case BICst.DESIGN.WIDGET.TREE_LABEL:
                    var textValue = BI.filter(widgetValue, function (index, values) {
                        return values.indexOf(BICst.LIST_LABEL_TYPE.ALL) < 0;
                    });
                    if (textValue.length === 0) {
                        return text;
                    }
                    textValue = descartes(textValue);
                    BI.each(textValue, function (index, values) {
                        BI.each(values, function (idx, value) {
                            text += value + (idx === 0 ? values.length > 1 ? ":" : "" : idx === values.length - 1 ? "" : ",");
                        });
                        text += ";";
                    });
                    if (text !== "") {
                        text = BI.i18nText("BI-Basic_In") + " " + text;
                    }
                    return text;
                default:
                    return widgetValue;
            }
        },

        _calcDateTypeValue: function (widgetValue) {
            var dateFilterValue = widgetValue.value;

            if (widgetValue.type === BI.DynamicDateCombo.Dynamic) {
                dateFilterValue = this._getDynamicValue(dateFilterValue);
            }

            return dateFilterValue;
        },

        _getDynamicValue: function (value) {
            var dynamicDateValue = BI.DynamicDateHelper.getCalculation(value);

            return this._formatDateToObj(dynamicDateValue);
        },

        _getDateControlValue: function (widgetType, widgetValue, offset) {
            var date = null;
            // 为空直接返回无限制
            if (BI.isNull(widgetValue)) {
                return {
                    yDate: null,
                    start: null,
                    end: null
                };
            }

            var value = widgetValue.value;
            var type = widgetValue.type;

            if (type === BI.DynamicDateCombo.Dynamic) {
                value = this._getDynamicValue(value);
            }

            switch (widgetType) {
                case BICst.DESIGN.WIDGET.YEAR:
                    if (BI.isNumeric(value.year)) {
                        // 年取1月1日
                        date = BI.getDate(value.year, 0, 1);
                    }
                    break;
                case BICst.DESIGN.WIDGET.MONTH:
                    if (BI.isNumeric(value.year)) {
                        // 月取当月1号
                        date = BI.getDate(value.year, BI.isNumeric(value.month) ? value.month - 1 : 0, 1);
                    }
                    break;
                case BICst.DESIGN.WIDGET.QUARTER:
                    if (BI.isNumeric(value.year)) {
                        var quarter = value.quarter;
                        date = BI.getDate(value.year, BI.isNumeric(quarter) ? (quarter * 3 - 1) : 0, 1);
                    }
                    break;
                case BICst.DESIGN.WIDGET.DATE:
                case BICst.DESIGN.WIDGET.DATE_PANE:
                    if (BI.isNotNull(value)) {
                        date = BI.getDate(value.year, value.month - 1, value.day);
                    }
                    break;
                case BICst.DESIGN.WIDGET.DATE_INTERVAL:
                    return {
                        start: this._getDateControlValue(BICst.DESIGN.WIDGET.DATE, widgetValue.start, offset).yDate,
                        end: this._getDateControlValue(BICst.DESIGN.WIDGET.DATE, widgetValue.end, offset).yDate
                    };
                case BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL:
                    return {
                        start: this._getDateControlValue(BICst.DESIGN.WIDGET.MONTH, widgetValue.start, offset).yDate,
                        end: this._getDateControlValue(BICst.DESIGN.WIDGET.MONTH, widgetValue.end, offset).yDate
                    };
                default:
            }

            return this._getOffsetStartEndDate(date, offset);
        },

        _getOffsetStartEndDate: function (date, offset) {
            var startDate, endDate, yDate;
            yDate = startDate = endDate = date;

            if (BI.isNull(date)) {
                return {
                    yDate: yDate,
                    start: startDate,
                    end: endDate
                };
            }

            if (BI.isNotNull(offset)) {
                // 年
                if (BI.isNotNull(offset.year)) {
                    yDate = BI.getDate((yDate.getFullYear() + parseInt(offset.year)), yDate.getMonth(), yDate.getDate());
                    startDate = BI.getDate((startDate.getFullYear() + parseInt(offset.year)), 0, 1);
                    endDate = BI.getDate(startDate.getFullYear(), 11, 31);
                }

                // 季度
                if (BI.isNotNull(offset.quarter)) {
                    yDate = yDate.getOffsetMonth(parseInt(offset.quarter) * 3);
                    startDate = yDate.getQuarterStartDate();
                    endDate = endDate.getQuarterEndDate();
                }

                // 月
                if (BI.isNotNull(offset.month)) {
                    yDate = yDate.getOffsetMonth(parseInt(offset.month));
                    startDate = BI.getDate(yDate.getFullYear(), yDate.getMonth(), 1);
                    endDate = BI.getDate(yDate.getFullYear(), yDate.getMonth(), (yDate.getLastDateOfMonth()).getDate());
                }

                // 周
                if (BI.isNotNull(offset.week)) {
                    yDate = yDate.getOffsetDate(parseInt(offset.week) * 7);
                    startDate = yDate.getWeekStartDate();
                    endDate = startDate.getWeekEndDate();
                }

                if (BI.isNotNull(offset.day)) {
                    yDate = yDate.getOffsetDate(parseInt(offset.day));
                    startDate = yDate;
                    endDate = yDate;
                }
            }

            return {
                yDate: yDate,
                start: startDate,
                end: endDate
            };
        },

        _formatDateToObj: function (date) {
            return {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate(),
                quarter: date.getQuarter()
            };
        }
    });
})();
/**
 * author: young
 * createdDate: 2018/7/20
 * description: 共享池utils相关
 */
!(function () {
    BI.Utils = BI.Utils || {};
    BI.extend(BI.Utils, {

        isNoAuthField: function (fieldId) {
            return BI.contains(BI.pool.authPool.noAuthFields, fieldId);
        },

        isNoAuthTable: function (tableName) {
            return BI.contains(BI.pool.authPool.noAuthTables, tableName);
        },

        getFieldTransferName: function (id) {
            return BI.pool.transferPool.fields[id];
        },

        // 由fieldId获取field转义名，没有转义返回原始名
        // 遍历表去找字段可能比较消耗，之后找过的field可以放bufferpool缓存起来
        getFieldNameByIdInDataPool: function (fieldId) {
            var self = this;
            var name = "";
            BI.find(BI.pool.dataPool.tables, function (tableName, info) {
                var field = BI.find(info.fields, function (idx, field) {
                    return field.id === fieldId;
                });
                if (BI.isNotNull(field)) {
                    name = self.getFieldTransferName(fieldId) || field.name;
                    return true;
                }
            });
            return name;
        },

        getTableNameByFieldIdInDataPool: function (fieldId) {
            return BI.findKey(BI.pool.dataPool.tables, function (tableName, info) {
                return BI.find(info.fields, function (idx, field) {
                    return field.id === fieldId;
                });
            });
        },

        getTableTransferName: function (id) {
            return BI.pool.transferPool.tables[id];
        },

        getFieldsByTableName: function (tableName) {
            var table = BI.pool.dataPool.tables[tableName];
            var fields = [];
            if (BI.isNotNull(table)) {
                BI.each(table.fields, function (i, field) {
                    if (!BI.Utils.isNoAuthField(field.id)) {
                        field.transferName = null;
                        fields.push(BI.deepClone(field));
                    }
                });
            }
            return fields;
        },

        isTableExist: function (tableName) {
            return BI.isNotNull(BI.pool.dataPool.tables[tableName]);
        },

        isOriginFieldExist: function (fieldId) {
            return BI.some(BI.pool.dataPool.tables, function (tableName, table) {
                return BI.some(table.fields, function (i, field) {
                    return fieldId === field.id;
                });
            });
        },

        getOriginFieldById: function (fieldId) {
            var field = null;
            BI.some(BI.pool.dataPool.tables, function (tableName, table) {
                return BI.some(table.fields, function (i, f) {
                    if (f.id === fieldId) {
                        field = f;
                        return true;
                    }
                });
            });
            return field;
        },

        syncTable2Pool: function (table) {
            if (BI.isNull(table)) return;

            BI.pool.dataPool.tables[table.name] = table;
        },

        syncNoAuthFields2Pool: function (noAuthFields) {
            BI.each(noAuthFields, function (i, fieldId) {
                if (!BI.pool.authPool.noAuthFields.contains(fieldId)) {
                    BI.pool.authPool.noAuthFields.push(fieldId);
                }
            });
        }

    });
})();
!(function () {
    BI.Utils = BI.Utils || {};

    BI.extend(BI.Utils, {

        getDefaultChartColor: function () {
            return ["#5caae4", "#70cc7f", "#ebbb67", "#e97e7b", "#6ed3c9"];
        },

        getChartColorConfig: function () {
            return BI.pool.confPool.plateChartColor || BICst.DEFAULT_CHART_COLOR_LIST;
        },

        // plate 平台样式
        getPlateStyle: function () {
            var key = BI.pool.confPool.plateConfig || "DEFAULT";
            var styles = BI.Constants.getConstant("bi.constant.design.prediction.styles");
            return BI.deepClone(styles[key]);
        },

        getPlateTemplateThemeId: function () {
            return BI.Utils.getPlateStyle().id;
        },

        getPlateTemplateTheme: function () {
            return BI.Utils.getPlateStyle().theme;
        },

        getPlateWidgetGap: function () {
            return BI.Utils.getPlateStyle().widgetGap;
        },

        getPlateTemplateBackground: function () {
            return BI.Utils.getPlateStyle().templateBackground;
        },

        getPlateWidgetBackground: function () {
            return BI.Utils.getPlateStyle().widgetBackground;
        },

        getPlateTitleBackground: function () {
            return BI.Utils.getPlateStyle().titleBackground;
        },

        getPlateTitleFont: function () {
            return BI.Utils.getPlateStyle().titleFont;
        },

        getPlateChartColor: function () {
            return BI.Utils.getPlateStyle().chart && BI.Utils.getPlateStyle().chart.chartColor;
        },

        getPlateChartGradient: function () {
            return BI.Utils.getPlateStyle().chart && BI.Utils.getPlateStyle().chart.gradient;
        },

        getPlateChartFont: function () {
            return BI.Utils.getPlateStyle().chart && BI.Utils.getPlateStyle().chart.font;
        },

        getPlateTableStyle: function () {
            return BI.Utils.getPlateStyle().table && BI.Utils.getPlateStyle().table.tableStyle;
        },

        getPlateTableThemeColor: function () {
            return BI.Utils.getPlateStyle().table && BI.Utils.getPlateStyle().table.themeColor;
        },

        getPlateTableFont: function () {
            return BI.Utils.getPlateStyle().table && BI.Utils.getPlateStyle().table.font;
        },

        getPlateControlTheme: function () {
            return BI.Utils.getPlateStyle().controlTheme;
        },

        // 模板样式
        getTemplateStyle: function () {
            return BI.designModel.templateStyle.style;
        },

        getTemplateThemeId: function () {
            return BI.Utils.getTemplateStyle().id;
        },

        getTemplateTheme: function () {
            return BI.Utils.getTemplateStyle().theme;
        },

        getTemplateWidgetGap: function () {
            return BI.Utils.getTemplateStyle().widgetGap;
        },

        getTemplateBackground: function () {
            return BI.Utils.getTemplateStyle().templateBackground;
        },

        getTemplateWidgetBackground: function () {
            return BI.Utils.getTemplateStyle().widgetBackground;
        },

        getTemplateTitleBackground: function () {
            return BI.Utils.getTemplateStyle().titleBackground;
        },

        getTemplateTitleFont: function () {
            return BI.Utils.getTemplateStyle().titleFont;
        },

        getTemplateChartColor: function () {
            return BI.Utils.getTemplateStyle().chart && BI.Utils.getTemplateStyle().chart.chartColor;
        },

        // todo
        getTemplateChartFont: function () {
            return BI.Utils.getTemplateStyle().chart && BI.Utils.getTemplateStyle().chart.font;
        },

        getTemplateChartGradient: function () {
            return BI.Utils.getTemplateStyle().chart && BI.Utils.getTemplateStyle().chart.gradient;
        },

        getTemplateTableStyle: function () {
            return BI.Utils.getTemplateStyle().table && BI.Utils.getTemplateStyle().table.tableStyle;
        },

        getTemplateTableThemeColor: function () {
            return BI.Utils.getTemplateStyle().table && BI.Utils.getTemplateStyle().table.themeColor;
        },

        getTemplateTableFont: function () {
            return BI.Utils.getTemplateStyle().table && BI.Utils.getTemplateStyle().table.font;
        },

        getTemplateControlTheme: function () {
            return BI.Utils.getTemplateStyle().controlTheme;
        },

        // 获取事实上的样式
        getActualTemplateThemeId: function () {
            return BI.Utils.getTemplateThemeId() || BI.Utils.getPlateTemplateThemeId();
        },

        getActualTemplateTheme: function () {
            return BI.Utils.getTemplateTheme() || BI.Utils.getPlateTemplateTheme();
        },

        getActualWidgetGap: function () {
            return BI.Utils.getTemplateWidgetGap() || BI.Utils.getPlateWidgetGap();
        },

        getActualTemplateBackground: function () {
            return BI.Utils.getTemplateBackground() || BI.Utils.getPlateTemplateBackground();
        },

        getActualWidgetBackground: function () {
            return BI.Utils.getTemplateWidgetBackground() || BI.Utils.getPlateWidgetBackground();
        },

        getActualTitleBackground: function () {
            return BI.Utils.getTemplateTitleBackground() || BI.Utils.getPlateTitleBackground();
        },

        getActualTitleFont: function () {
            var tmpTitleFont = BI.Utils.getTemplateTitleFont(), plateTitleFont = BI.Utils.getPlateTitleFont();
            if (tmpTitleFont.type === BICst.AUTO_CUSTOM.AUTO) {
                return BI.extend(plateTitleFont, {
                    type: tmpTitleFont.type
                });
            }
            return {
                type: tmpTitleFont.type,
                fontFamily: BI.isNotNull(tmpTitleFont.fontFamily) ? tmpTitleFont.fontFamily : plateTitleFont.fontFamily,
                fontSize: BI.isNotNull(tmpTitleFont.fontSize) ? tmpTitleFont.fontSize : plateTitleFont.fontSize,
                bold: BI.isNotNull(tmpTitleFont.bold) ? tmpTitleFont.bold : plateTitleFont.bold,
                italic: BI.isNotNull(tmpTitleFont.italic) ? tmpTitleFont.italic : plateTitleFont.italic,
                underline: BI.isNotNull(tmpTitleFont.underline) ? tmpTitleFont.underline : plateTitleFont.underline,
                fontColor: BI.isNotEmptyString(tmpTitleFont.fontColor) ? tmpTitleFont.fontColor : plateTitleFont.fontColor,
                fontAlign: BI.isNotNull(tmpTitleFont.fontAlign) ? tmpTitleFont.fontAlign : plateTitleFont.fontAlign
            };

        },

        getActualChartColor: function () {
            return BI.Utils.getTemplateChartColor() || BI.Utils.getPlateChartColor();
        },

        getActualChartFont: function () {
            var tmpChartFont = BI.Utils.getTemplateChartFont(), plateChartFont = BI.Utils.getPlateChartFont();
            if (tmpChartFont.type === BICst.AUTO_CUSTOM.AUTO) {
                return BI.extend(plateChartFont, {
                    type: tmpChartFont.type
                });
            }
            return {
                type: tmpChartFont.type,
                fontFamily: BI.isNotNull(tmpChartFont.fontFamily) ? tmpChartFont.fontFamily : plateChartFont.fontFamily,
                fontSize: BI.isNotNull(tmpChartFont.fontSize) ? tmpChartFont.fontSize : plateChartFont.fontSize,
                bold: BI.isNotNull(tmpChartFont.bold) ? tmpChartFont.bold : plateChartFont.bold,
                italic: BI.isNotNull(tmpChartFont.italic) ? tmpChartFont.italic : plateChartFont.italic,
                underline: BI.isNotNull(tmpChartFont.underline) ? tmpChartFont.underline : plateChartFont.underline,
                fontColor: BI.isNotEmptyString(tmpChartFont.fontColor) ? tmpChartFont.fontColor : plateChartFont.fontColor
            };
        },

        getActualChartGradient: function () {
            return BI.Utils.getTemplateChartGradient() || BI.Utils.getPlateChartGradient();
        },

        getActualTableStyle: function () {
            return BI.Utils.getTemplateTableStyle() || BI.Utils.getPlateTableStyle();
        },

        getActualTableThemeColor: function () {
            return BI.Utils.getTemplateTableThemeColor() || BI.Utils.getPlateTableThemeColor();
        },

        getActualTableFont: function () {
            var tmpTableFont = BI.Utils.getTemplateTableFont(), plateTableFont = BI.Utils.getPlateTableFont();
            if (tmpTableFont.type === BICst.AUTO_CUSTOM.AUTO) {
                return BI.extend(plateTableFont, {
                    type: tmpTableFont.type
                });
            }
            var tmpHeaderFont = tmpTableFont.header, tmpBodyFont = tmpTableFont.body;
            var plateHeaderFont = plateTableFont.header, plateBodyFont = plateTableFont.body;
            return {
                type: tmpTableFont.type,
                header: {
                    fontFamily: BI.isNotNull(tmpHeaderFont.fontFamily) ? tmpHeaderFont.fontFamily : plateHeaderFont.fontFamily,
                    fontSize: BI.isNotNull(tmpHeaderFont.fontSize) ? tmpHeaderFont.fontSize : plateHeaderFont.fontSize,
                    bold: BI.isNotNull(tmpHeaderFont.bold) ? tmpHeaderFont.bold : plateHeaderFont.bold,
                    italic: BI.isNotNull(tmpHeaderFont.italic) ? tmpHeaderFont.italic : plateHeaderFont.italic,
                    underline: BI.isNotNull(tmpHeaderFont.underline) ? tmpHeaderFont.underline : plateHeaderFont.underline,
                    fontColor: BI.isNotEmptyString(tmpHeaderFont.fontColor) ? tmpHeaderFont.fontColor : plateHeaderFont.fontColor,
                    fontAlign: BI.isNotNull(tmpHeaderFont.fontAlign) ? tmpHeaderFont.fontAlign : plateHeaderFont.fontAlign
                },
                body: {
                    fontFamily: BI.isNotNull(tmpBodyFont.fontFamily) ? tmpBodyFont.fontFamily : plateBodyFont.fontFamily,
                    fontSize: BI.isNotNull(tmpBodyFont.fontSize) ? tmpBodyFont.fontSize : plateBodyFont.fontSize,
                    bold: BI.isNotNull(tmpBodyFont.bold) ? tmpBodyFont.bold : plateBodyFont.bold,
                    italic: BI.isNotNull(tmpBodyFont.italic) ? tmpBodyFont.italic : plateBodyFont.italic,
                    underline: BI.isNotNull(tmpBodyFont.underline) ? tmpBodyFont.underline : plateBodyFont.underline,
                    fontColor: BI.isNotEmptyString(tmpBodyFont.fontColor) ? tmpBodyFont.fontColor : plateBodyFont.fontColor,
                    dimFontAlign: BI.isNotNull(tmpBodyFont.dimFontAlign) ? tmpBodyFont.dimFontAlign : plateBodyFont.dimFontAlign,
                    tarFontAlign: BI.isNotNull(tmpBodyFont.tarFontAlign) ? tmpBodyFont.tarFontAlign : plateBodyFont.tarFontAlign
                }
            };
        },

        getActualControlTheme: function () {
            return BI.Utils.getTemplateControlTheme() || BI.Utils.getPlateControlTheme();
        },

        // 获取事实上的全局样式
        getActualTemplateStyle: function () {
            return {
                id: BI.Utils.getActualTemplateThemeId(),
                theme: BI.Utils.getActualTemplateTheme(),
                widgetGap: BI.Utils.getActualWidgetGap(),
                templateBackground: BI.Utils.getActualTemplateBackground(),
                widgetBackground: BI.Utils.getActualWidgetBackground(),
                titleBackground: BI.Utils.getActualTitleBackground(),
                titleFont: BI.Utils.getActualTitleFont(),
                chart: {
                    chartColor: BI.Utils.getActualChartColor(),
                    font: BI.Utils.getActualChartFont(),
                    gradient: BI.Utils.getActualChartGradient()
                },
                table: {
                    tableStyle: BI.Utils.getActualTableStyle(),
                    themeColor: BI.Utils.getActualTableThemeColor(),
                    font: BI.Utils.getActualTableFont()
                },
                controlTheme: BI.Utils.getActualControlTheme()
            };
        },

        // 组件样式
        getTitleBackgroundById: function (wId) {
            return BI.designModel.widgets[wId].settings.titleBackground;
        },
        getWidgetBackgroundById: function (wId) {
            return BI.designModel.widgets[wId].settings.widgetBackground;
        },

        getWidgetTitleFontType: function (wId) {
            return BI.designModel.widgets[wId].settings.nameStyleType;
        },

        getTableStyleSettingsById: function (wId) {
            return BI.designModel.widgets[wId].settings.tableStyle;
        },

        getTableStyleById: function (wId) {
            return BI.Utils.getTableStyleSettingsById(wId).style;
        },

        getTableThemeById: function (wId) {
            return BI.Utils.getTableStyleSettingsById(wId).themeColor;
        },

        getTableFontById: function (wId) {
            return BI.Utils.getTableStyleSettingsById(wId).font;
        },

        // 全局样式的结果样式
        getResTableStyleTypeById: function (wId) {
            var style = BI.Utils.getTableStyleById(wId);
            return style ? style : BI.Utils.getActualTableStyle();
        },

        getResTableThemeColorById: function (wId) {
            return BI.Utils.getTableThemeById(wId) || BI.Utils.getActualTableThemeColor();
        },

        getResTableFontById: function (wId) {
            var tableFont = BI.Utils.getTableFontById(wId), actualTableFont = BI.Utils.getActualTableFont();
            if (tableFont.type === BICst.AUTO_CUSTOM.AUTO) {
                return BI.extend(actualTableFont, {
                    type: tableFont.type
                });
            }
            var headerFont = tableFont.header, bodyFont = tableFont.body;
            var actualHeaderFont = actualTableFont.header, actualBodyFont = actualTableFont.body;
            return {
                type: tableFont.type,
                header: {
                    fontFamily: BI.isNotNull(headerFont.fontFamily) ? headerFont.fontFamily : actualHeaderFont.fontFamily,
                    fontSize: BI.isNotNull(headerFont.fontSize) ? headerFont.fontSize : actualHeaderFont.fontSize,
                    bold: BI.isNotNull(headerFont.bold) ? headerFont.bold : actualHeaderFont.bold,
                    italic: BI.isNotNull(headerFont.italic) ? headerFont.italic : actualHeaderFont.italic,
                    underline: BI.isNotNull(headerFont.underline) ? headerFont.underline : actualHeaderFont.underline,
                    fontColor: BI.isNotEmptyString(headerFont.fontColor) ? headerFont.fontColor : actualHeaderFont.fontColor,
                    fontAlign: BI.isNotNull(headerFont.fontAlign) ? headerFont.fontAlign : actualHeaderFont.fontAlign
                },
                body: {
                    fontFamily: BI.isNotNull(bodyFont.fontFamily) ? bodyFont.fontFamily : actualBodyFont.fontFamily,
                    fontSize: BI.isNotNull(bodyFont.fontSize) ? bodyFont.fontSize : actualBodyFont.fontSize,
                    bold: BI.isNotNull(bodyFont.bold) ? bodyFont.bold : actualBodyFont.bold,
                    italic: BI.isNotNull(bodyFont.italic) ? bodyFont.italic : actualBodyFont.italic,
                    underline: BI.isNotNull(bodyFont.underline) ? bodyFont.underline : actualBodyFont.underline,
                    fontColor: BI.isNotEmptyString(bodyFont.fontColor) ? bodyFont.fontColor : actualBodyFont.fontColor,
                    dimFontAlign: BI.isNotNull(bodyFont.dimFontAlign) ? bodyFont.dimFontAlign : actualBodyFont.dimFontAlign,
                    tarFontAlign: BI.isNotNull(bodyFont.tarFontAlign) ? bodyFont.tarFontAlign : actualBodyFont.tarFontAlign
                }
            };
        },

        getResTableHeaderFontById: function (wId) {
            return BI.Utils.getResTableFontById(wId).header;
        },

        getResTableBodyFontById: function (wId) {
            return BI.Utils.getResTableFontById(wId).body;
        },

        getResTitleBackgroundById: function (wId) {
            return BI.Utils.getTitleBackgroundById(wId) || BI.Utils.getActualTitleBackground();
        },

        getResWidgetBackgroundById: function (wId) {
            return BI.Utils.getWidgetBackgroundById(wId) || BI.Utils.getActualWidgetBackground();
        }
    });
})();
/**
 * author: young
 * createdDate: 2018/3/15
 * description: 直接可获取的信息，一般为模板组件相关
 * 基本原则：utils出去的值不是可直接监听的，view/model中都可以调用
 */

!(function () {
    BI.Utils = BI.Utils || {};
    var Buffer = {};
    BI.extend(BI.Utils, {

        getWidgetsByTemplateId: function (template, callback) {
            if (template.reportId === this.getCurrentTemplateId()) {
                callback(Data.designModel.widgets);
            } else {
                this.reqWidgetsByTemplateId(template, function (data) {
                    callback(data);
                });
            }
        },

        getCurrentTemplateId: function () {
            return BI.designData.reportId || "";
        },

        getAllUsedTablesByTemplateId: function (tId, callback) {
            var key = "TEMPLATE_";
            var cache = Buffer[key + tId];
            if (BI.isNotNull(cache)) {
                callback(cache);
                return;
            }
            BI.Utils.getTablesByTemplateId({
                reportId: tId,
                createBy: BI.designModel.createBy
            }, function (tables) {
                Buffer[key] = tables || [];
                callback(Buffer[key]);
            });
        },

        getAllWidgetIds: function () {
            return BI.keys(BI.designModel.widgets);
        },

        getAllControlWidgetIds: function () {
            return BI.keys(BI.filter(BI.designModel.widgets, function (wId) {
                return BI.Utils.isControlWidgetByWidgetId(wId);
            }));
        },

        getLinkageGroup: function () {
            return Fix.toJSON(BI.designModel.linkageGroup);
        },

        _getWidgetCalculationTargetIdsByWIds: function (wIds, callback) {
            wIds = BI.isArray(wIds) ? wIds : [wIds];
            var self = this, map4Req = {};
            BI.each(wIds, function (idx, wId) {
                var name = "";
                var widget = BI.designModel.widgets[wId];
                if (BI.isNotNull(widget)) {
                    name = BI.designModel.widgets[wId].name;
                }
                if (BI.Utils.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.CONTENT) {
                    name = BI.designModel.widgets[wId].content || "";
                }
                var strArr = name.match(/\$[\{][^\}]*[\}]/g);
                if (BI.isNotNull(strArr)) {
                    BI.each(strArr, function (i, str) {
                        var obj = JSON.parse(str.substring(1, str.length));
                        var id = obj.alt;
                        // 指标才需要到后台计算
                        var dId = BI.Utils.getDimensionIdByDimensionGroupId(null, id);
                        if (!self.isWidgetExistById(id) && BI.isNotNull(dId) && self.isTargetById(dId)) {
                            if (!BI.has(map4Req, wId)) {
                                var targetWId = BI.Utils.getWidgetIdBydId(dId);
                                var widget = BI.Utils.getWidgetCalculationByID(targetWId);
                                var sourceWidget = BI.Utils.getWidgetCalculationByID(wId);
                                if (!BI.Utils.isWidgetsInSameLinkageGroup([wId, targetWId])) {
                                    widget.linkage = {};
                                    widget.customLinkConf = {};
                                }
                                // 手动设置联动是双向的 = =
                                var targetCustomLinkConf = widget.customLinkConf || {};
                                BI.each(sourceWidget.customLinkConf, function (id, conf) {
                                    targetCustomLinkConf[id] = targetCustomLinkConf[id] || [];
                                    targetCustomLinkConf[id] = BI.concat(targetCustomLinkConf[id], conf);
                                });
                                widget.customLinkConf = targetCustomLinkConf;

                                var extendLinkage = {};
                                // 去除无效的clicked
                                BI.each(sourceWidget.linkage, function (idx, linkage) {
                                    if (linkage.clicked && BI.Utils.isDimensionExist(linkage.clicked.dId)) {
                                        extendLinkage[idx] = linkage;
                                    }
                                });

                                if (BI.isNotNull(extendLinkage) && BI.isNotEmptyObject(extendLinkage) && BI.Utils.isWidgetsInSameLinkageGroup([wId, targetWId])) {
                                    widget.linkage = BI.extend(widget.linkage, extendLinkage);
                                }
                                map4Req[targetWId] = map4Req[targetWId] || {
                                    widget: widget,
                                    targetIds: []
                                };
                            }
                            map4Req[targetWId].targetIds.pushDistinct(dId);
                        }
                    });
                }
            });
            if (BI.size(map4Req) === 0) {
                callback();
            } else {
                BI.Utils.getSummaryValuesByTargetIds(map4Req, function (res) {
                    callback(res.data);
                });
            }
        },

        getWidgetResultFilterById: function (wId) {
            return this.getWidgetById(wId).resultFilter || [];
        },

        getWidgetShowTitleById: function (wId) {
            return BI.designModel.widgets[wId].showTitle;
        },

        getWidgetShowTimeById: function (wId) {
            return BI.designModel.widgets[wId].showTime;
        },

        getWidgetOverlapById: function (wId) {
            return BI.designModel.widgets[wId].allowOverlap;
        },

        getWidgetOpenJumpById: function (wId) {
            return BI.designModel.widgets[wId].openJump;
        },

        // 此方法支持wId的数组，传入是数组，则返回一组string
        // 传入一个id，兼容之前的写法，则返回一个string
        getWidgetNameById: function (wIds, callback, options) {
            options = options || {
                keepStyle: false,
                content: false
            };
            wIds = BI.isArray(wIds) ? wIds : [wIds];
            var self = this;
            var names = {};
            this._getWidgetCalculationTargetIdsByWIds(wIds, function (map) {
                BI.each(wIds, function (idx, wId) {
                    var name = "";
                    var widget = BI.designModel.widgets[wId];
                    if (BI.isNotNull(widget)) {
                        name = BI.designModel.widgets[wId].name;
                    }
                    if (BI.Utils.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.CONTENT && options.content) {
                        name = BI.designModel.widgets[wId].content || "";
                    }
                    var regexStr = options.keepStyle ? BICst.REGULAR_STRING.PLACE_HOLDER : BICst.REGULAR_STRING.PLACE_HOLDER + "|" + BICst.REGULAR_STRING.HTML_STYLE_TAG;
                    names[wId] = BI.htmlDecode(name.replaceAll(regexStr, function (imageStr) {
                        if (imageStr.startWith("${")) {
                            var obj = JSON.parse(imageStr.substring(1, imageStr.length));
                            var id = obj.alt;
                            if (!self.isWidgetExistById(id) && !self.isDimensionExist(id) && !self.isDimensionGroupIdExist(null, id)) {
                                return "<!" + BI.i18nText("BI-Design_Element_Is_Deleted") + "!>";
                            }
                            // 绑定的是控件,组件不能直接绑定
                            if (self.isWidgetExistById(id)) {
                                if (self.isUnderControlRangeById(id, wId)) {
                                    return self.getControlWidgetValueTextByID(id);
                                }

                                return BI.i18nText("BI-Design_All");
                            }
                            var dId = self.isDimensionExist(id) ? id : self.getDimensionIdByDimensionGroupId(null, id);
                            var fromWId = self.getWidgetIdBydId(dId);
                            if (self.isControlWidgetByWidgetId(fromWId)) {
                                if (self.isUnderControlRangeById(fromWId, wId)) {
                                    return self.getControlWidgetValueTextByID(id);
                                }

                                return BI.i18nText("BI-Design_All");
                            }
                            return self.isTargetById(dId) ? self._getFormatTargetValue(dId, map[dId]) : self.getLinkageValueTextByID(wId, dId);
                        }
                        return "";
                    }));
                });
                callback(names);
            });
        },

        // target类型的格式化
        _getFormatTargetValue: function (dId, text) {
            var setting = BI.Utils.getSwitchMeasureSettingById(dId);
            return BI.Format.numberFormat(text, {
                formatStyle: setting.formatStyle,
                formatDecimal: setting.formatDecimal,
                numLevel: setting.numLevel,
                numSeparators: setting.numSeparators,
                unit: setting.unit
            });
        },

        getJumpByID: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].jump || []);
        },

        checkWidgetNameByID: function (name, wId) {
            return !BI.some(BI.designModel.widgets, function (idx, widget) {
                return wId !== idx && widget.name === name;
            });
        },

        getWidgetById: function (wId) {
            return BI.designModel.widgets[wId] || {};
        },

        getWidgetTypeById: function (wId) {
            return BI.Utils.getWidgetById(wId).type;
        },

        // 获取指定widget的拷贝,拷贝信息只包含widget的自身信息，如维度指标及其相关属性
        // 不包含widget间的信息,如widget间的联动什么的
        getWidgetCopy: function (widget) {
            if (BI.isNotNull(widget)) {
                var wid = widget.wId;
                var oldName = widget.name;
                widget.name = BI.Func.createDistinctName(BI.designModel.widgets, widget.name);
                if (oldName.match(/<\/p>(?=((?!<\/p>).)*$)/g)) {
                    var startIndex = oldName.length;
                    // 最后一行如果有换行需要把换行去掉
                    var end = oldName.substring(oldName.length - 8, oldName.length - 4) === "<br>" ? oldName.length - 8 : oldName.length - 4;
                    widget.name = oldName.substring(0, end) + widget.name.substring(startIndex) + "</p>";
                }
                widget.name = BI.Func.createDistinctName(BI.designModel.widgets, widget.name);
                widget.wId = BI.UUID();
                widget.timeStamp = Date.now();
                if (BI.has(widget, "clicked")) {
                    widget.clicked = {};
                }
                if (BI.has(widget, "linkage")) {
                    widget.linkage = {};
                }
                var dimTarIdMap = {};
                BI.each(widget.dimensions, function (dimensionId) {
                    dimTarIdMap[dimensionId] = BI.UUID();
                });
                if (BI.has(widget, "parameterValue")) {
                    var params = BI.map(BI.pool.parameterPool.allParameter, "value");

                    BI.each(BI.designModel.widgets, function (widgetID, widget) {
                        if (!widget.useParameter) return;

                        var value = widget.parameterValue;

                        BI.each(value, function (index, param) {
                            if (BI.isNull(param)) return;
                            BI.remove(params, param);
                        });
                    });

                    BI.each(widget.parameterValue, function (index, param) {
                        if (BI.contains(params, param)) return;

                        widget.parameterValue[index] = undefined;
                    });
                }

                var regexStr = BI.concat(BI.keys(dimTarIdMap), [wid]).join("|");
                var widgetStr = JSON.stringify(widget);
                var resultWidgetStr = BI.isEmptyString(regexStr) ? widgetStr : widgetStr.replaceAll(regexStr, function (str) {
                    return dimTarIdMap[str] || widget.wId;
                });
                return JSON.parse(resultWidgetStr);
            }
        },

        getWidgetCopyByID: function (wid) {
            var widget = BI.deepClone(BI.designModel.widgets[wid]);
            return this.getWidgetCopy(widget);
        },

        getWidgetViewById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].view);
        },

        getWidgetBoundsById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].bounds);
        },

        getWidgetCustomLinkConfById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].customLinkConf || {});
        },

        getWidgetSettingsById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].settings || {});
        },

        getWidgetViewAttrById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].viewAttr || {});
        },

        getLinkageOfWidget: function (wId) {
            return BI.designModel.widgets[wId].linkage || {};
        },

        getClickedOfWidget: function (wId) {
            return BI.designModel.widgets[wId].clicked || {};
        },

        getTableNameWidgetId: function (wId) {
            return BI.designModel.widgets[wId].tableName;
        },

        getAllDimDimensionIds: function (wId) {
            var self = this;
            var allDims = this.getAllDimensionIDs(wId);
            return BI.filter(allDims, function (i, dId) {
                return !self.isTargetById(dId);
            });
        },

        getAllDimensionIDs: function (wId) {
            var ids = [];
            if (!wId) {
                BI.each(BI.designModel.widgets, function (wId, widget) {
                    ids = BI.concat(ids, BI.keys(widget.dimensions));
                });
                return ids;
            }
            if (this.isWidgetExistById(wId)) {
                ids = BI.keys(BI.designModel.widgets[wId].dimensions);
            }
            return ids;
        },

        getWidgetIconByWidget: function (widget) {
            var wType = widget.type;

            if (wType !== BICst.DESIGN.WIDGET.CHART) return BI.Func.getWidgetFontClass(wType);

            var chartAttr = (widget.settings || {}).chartAttr;
            var types = [];
            BI.each(chartAttr, function (dId, dimension) {
                types.push(dimension.type);
            });

            types = BI.uniq(types);

            if (BI.size(types) !== 1) return "approximate-many-icon";

            switch (BI.first(types)) {
                case BICst.CHART.ATTR.CHART_TYPE.INTERVAL:
                    return "approximate-interval-icon";
                case BICst.CHART.ATTR.CHART_TYPE.POINT:
                    return "approximate-point-icon";
                case BICst.CHART.ATTR.CHART_TYPE.HEAT_MAP:
                    return "approximate-heatmap-icon";
                case BICst.CHART.ATTR.CHART_TYPE.LINE:
                    return "approximate-line-icon";
                case BICst.CHART.ATTR.CHART_TYPE.AREA:
                    return "approximate-area-icon";
                case BICst.CHART.ATTR.CHART_TYPE.SQUARE:
                    return "approximate-square-icon";
                case BICst.CHART.ATTR.CHART_TYPE.PIE:
                    return "approximate-pie-icon";
                case BICst.CHART.ATTR.CHART_TYPE.TEXT:
                    return "approximate-text-icon";
                case BICst.CHART.ATTR.CHART_TYPE.MAP:
                    return "approximate-map-icon";
                case BICst.CHART.ATTR.CHART_TYPE.FUNNEL:
                    return "approximate-funnel-icon";
                case BICst.CHART.ATTR.CHART_TYPE.GAUGE:
                    return "approximate-gauge-icon";
                default:
                    return "approximate-many-icon";
            }
        },

        getWidgetIconById: function (wId) {
            return this.getWidgetIconByWidget(this.getWidgetById(wId));
        },

        getAllUsedFieldIdsAndWidgetId: function () {
            var allDIds = this.getAllDimensionIDs();
            var fields = [];
            var self = this;
            BI.each(allDIds, function (i, dId) {
                fields.push({
                    fId: self.getFieldIdBydId(dId),
                    wId: self.getWidgetIdBydId(dId)
                });
            });
            return fields;
        },

        getGlobalExportData: function (callback) {
            BI.Utils.getWidgetNameById(BI.filter(BI.Utils.getAllWidgetIds(), function (index, wId) {
                return BI.Utils.isStaticWidgetByWidgetType(BI.Utils.getWidgetTypeById(wId));
            }), function (names) {
                var widgets = {};
                BI.each(names, function (id, name) {
                    widgets[id] = BI.extend(BI.Utils.getWidgetCalculationByID(id), {
                        wId: BI.UUID(),
                        name: name,
                        globalFilter: BI.designData.filter
                    });
                });
                callback({
                    widgets: widgets
                });
            });
        },

        getExportData4WidgetByWid: function (wId, callback) {
            this.getWidgetNameById(BI.Utils.getAllWidgetIds(), function (names) {
                var widget = BI.extend(BI.Utils.getWidgetCalculationByID(wId), {
                    wId: BI.UUID(),
                    name: names[wId],
                    globalFilter: BI.designData.filter
                });

                var filterValue = BI.Utils.getFilterValue4ExportByWid(wId, names);
                var drillItems = BI.Utils.getDrillItems(wId);
                if (BI.size(drillItems) > 0) {
                    filterValue.push({
                        type: 1,
                        text: BI.map(drillItems, "text").join(" ")
                    });
                }

                callback({
                    // sessionId: Data.SharingPool.get("sessionId"),
                    widget: widget,
                    // reportName: Data.SharingPool.get('reportName'),
                    // FIXME: 方法已写好，等后台适配
                    filterValue: filterValue
                });
            });
        },

        getLastSelectedTableName: function () {
            var lastSelected = null;
            var lastTime = null;
            BI.map(BI.designModel.widgets, function (idx, widget) {
                if (BI.isNotNull(widget.tableName) && widget.timeStamp > lastTime) {
                    lastSelected = widget.tableName || lastSelected;
                    lastTime = widget.timeStamp;
                }
            });
            return lastSelected ? BI.Cache.getItem("lastSelectedTableName") || lastSelected : lastSelected;
        },

        isDrillField: function (wId, fId) {
            var drillDir = BI.Utils.getDrillDirByIdOfWidget(wId, fId);
            return drillDir.length > 1 && BI.Utils.getWidgetTypeById(wId) !== BICst.DESIGN.WIDGET.DETAIL;
        },

        getDrillDirByIdOfWidget: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId);
            return (field && field.drillDir) || [];
        },

        getDrillNameByIdOfWidget: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId);
            return (field && field.drillName) || "";
        },

        getAllDrillNames: function (wId) {
            var measures = BI.Utils.getWidgetById(wId).measures;

            var names = [];

            BI.each(measures, function (index, measure) {
                if (BI.isNull(measure.drillName)) return;

                names.push(measure.drillName);
            });

            return names;
        },

        checkFieldIsAggByDId: function (wId, dId) {
            return this.checkFieldIsAgg(wId, BI.Utils.getFieldIdBydId(dId));
        },

        getCalculateTargetIdsByFieldIdOfWidget: function (wId, fId) {
            if (this.isCalculateFieldByFieldIdOfWidget(wId, fId)) {
                var field = this.getFieldByIdOfWidget(wId, fId);
                return field.targetIds;
            }
        },

        getCalculateValueByFieldIdOfWidget: function (wId, fId) {
            if (this.isCalculateFieldByFieldIdOfWidget(wId, fId)) {
                var field = this.getFieldByIdOfWidget(wId, fId);
                return BI.get(field.calculate, "value");
            }
        },

        isCalculateField4UseByFieldIdOfWidget: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId) || {};
            return field.type === BICst.COLUMN.CALCULATE;
        },

        isCalculateFieldByFieldIdOfWidget: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId) || {};
            return BI.contains([BICst.COLUMN.CALCULATE, BICst.COLUMN.TRANSFORM_FROM_CALC], field.type);
        },

        // 一个计算指标所用到的所有的指标
        getAllUsedCalTargets: function (wId, fId) {
            var allUsedCalTargets = [];

            var field = this.getFieldByIdOfWidget(wId, fId);

            if (BI.isNull(field)) return allUsedCalTargets;

            if (field.type !== BICst.COLUMN.CALCULATE) return allUsedCalTargets;

            BI.each(field.targetIds, function (index, tId) {
                allUsedCalTargets = allUsedCalTargets.concat([tId], BI.Utils.getAllUsedCalTargets(wId, tId));
            });

            return BI.uniq(allUsedCalTargets);
        },

        getUnavailableCalTargets: function (wId, fId) {
            var unavailableCalTargets = [];

            if (BI.isNull(fId)) return unavailableCalTargets;

            var field = this.getFieldByIdOfWidget(wId, fId);

            if (BI.isNull(field)) return unavailableCalTargets;

            if (field.type !== BICst.COLUMN.CALCULATE) return unavailableCalTargets;

            BI.each(this.getFieldsOfWidget(wId), function (index, field) {
                if (field.type !== BICst.COLUMN.CALCULATE || field.id === fId) return;

                var usedCalTargets = BI.Utils.getAllUsedCalTargets(wId, field.id);

                if (!BI.contains(usedCalTargets, fId)) return;

                unavailableCalTargets.push(field.id);
            });

            return unavailableCalTargets;
        },

        checkFieldIsAgg: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId);

            if (BI.isNull(field)) return false;

            if (field.type !== BICst.COLUMN.CALCULATE) return false;

            var isAgg = false;

            // 判断是否用到了AGG函数
            if (field.calculate && field.calculate.type === BICst.DESIGN.CAL_TARGET.FORMULA) {
                isAgg = BI.Utils.checkIfUsedAggFunc(field.calculate.value);
            }

            if (isAgg) return true;

            return this.checkTargetIdsIsAgg(wId, field.targetIds, isAgg, 0);
        },

        checkIfUsedAggFunc: function (formulaStr) {
            var aggFuncNames = BI.deepClone(BICst.AGG_FUNC);

            return BI.some(aggFuncNames, function (index, funcName) {
                var formula = formulaStr.toUpperCase();

                return formula.indexOf(funcName) !== -1;
            });
        },

        checkTargetIdsIsAgg: function (wId, targetIds, isAgg, index) {
            if (BI.isNull(index)) index = 0;

            if (isAgg === true) return isAgg;

            var length = BI.size(targetIds);

            if (index === length) return isAgg;

            return this.checkTargetIdsIsAgg(wId, targetIds, this.checkFieldIsAgg(wId, targetIds[index]), index + 1);
        },

        isWidgetExistById: function (wId) {
            return this.getAllWidgetIds().contains(wId);
        },

        isQueryControlExist: function () {
            var self = this,
                isQueryExist = false;

            BI.some(this.getAllWidgetIds(), function (i, wId) {
                if (self.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.QUERY) {
                    return isQueryExist = true;
                }
            });
            return isQueryExist;
        },

        isGeneralQueryExist: function () {
            var self = this,
                isGeneralQueryExist = false;

            BI.some(this.getAllWidgetIds(), function (i, wId) {
                if (self.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.GENERAL_QUERY) {
                    return isGeneralQueryExist = true;
                }
            });
            return isGeneralQueryExist;
        },

        isResetControlExist: function () {
            var self = this,
                isResetExist = false;

            BI.some(this.getAllWidgetIds(), function (i, wId) {
                if (self.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.RESET) {
                    return isResetExist = true;
                }
            });
            return isResetExist;
        },

        isQueryAutoQueryWhenFresh: function () {
            var self = this, autoQuery = true;

            // 编辑模式下视为自动查询视为打开
            if (!this.isUnderPreviewMode()) {
                return true;
            }

            BI.map(this.getAllWidgetIds(), function (i, wId) {
                if (self.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.QUERY) {
                    var widget = BI.designModel.widgets[wId] || {};
                    autoQuery = widget.autoQuery;

                    return true;
                }
            });

            return autoQuery;
        },

        // 判断是否在编辑模式下
        isUnderPreviewMode: function () {
            var isEdit = BI.designData.isEdit;
            if (BI.isNull(isEdit)) {
                isEdit = true;
            }
            return !isEdit;
        },

        isControlWidgetByWidgetId: function (wId) {
            var widgetType = this.getWidgetTypeById(wId);
            return this.isControlWidgetByWidgetType(widgetType);
        },

        isControlWidgetByWidgetType: function (widgetType) {
            var controlTypes = [
                BICst.DESIGN.WIDGET.STRING,
                BICst.DESIGN.WIDGET.STRING_LIST,
                BICst.DESIGN.WIDGET.NUMBER,
                BICst.DESIGN.WIDGET.SINGLE_SLIDER,
                BICst.DESIGN.WIDGET.INTERVAL_SLIDER,
                BICst.DESIGN.WIDGET.DATE_INTERVAL,
                BICst.DESIGN.WIDGET.MONTH,
                BICst.DESIGN.WIDGET.QUARTER,
                BICst.DESIGN.WIDGET.TREE,
                BICst.DESIGN.WIDGET.TREE_LIST,
                BICst.DESIGN.WIDGET.STRING_LABEL,
                BICst.DESIGN.WIDGET.TREE_LABEL,
                BICst.DESIGN.WIDGET.YEAR,
                BICst.DESIGN.WIDGET.DATE,
                BICst.DESIGN.WIDGET.DATE_PANE,
                BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL,
                BICst.DESIGN.WIDGET.GENERAL_QUERY
            ];
            return controlTypes.contains(widgetType);
        },

        isExtendWidgetByWidgetType: function (widgetType) {
            return widgetType === BICst.DESIGN.WIDGET.CONTENT ||
                widgetType === BICst.DESIGN.WIDGET.WEB ||
                widgetType === BICst.DESIGN.WIDGET.IMAGE ||
                widgetType === BICst.DESIGN.WIDGET.DETAIL;
        },

        isTableWidget: function (wId) {
            var type = this.getWidgetTypeById(wId);
            return type === BICst.DESIGN.WIDGET.TABLE ||
                type === BICst.DESIGN.WIDGET.CROSS_TABLE ||
                type === BICst.DESIGN.WIDGET.DETAIL;
        },

        // 是否是统计组件
        isStaticWidgetByWidgetType: function (type) {
            return type === BICst.DESIGN.WIDGET.TABLE ||
                type === BICst.DESIGN.WIDGET.CROSS_TABLE ||
                type === BICst.DESIGN.WIDGET.DETAIL ||
                type === BICst.DESIGN.WIDGET.CHART;
        },

        isInstantControlWidgetByWidgetId: function (wId) {
            var widgetType = this.getWidgetTypeById(wId);
            return this.isInstantControlWidgetByWidgetType(widgetType);
        },

        isInstantControlWidgetByWidgetType: function (widgetType) {
            var instantTypes = [
                BICst.DESIGN.WIDGET.STRING_LABEL,
                BICst.DESIGN.WIDGET.TREE_LABEL,
                BICst.DESIGN.WIDGET.TREE_LIST,
                BICst.DESIGN.WIDGET.STRING_LIST,
                BICst.DESIGN.WIDGET.SINGLE_SLIDER,
                BICst.DESIGN.WIDGET.DATE_PANE,
                BICst.DESIGN.WIDGET.INTERVAL_SLIDER
            ];
            return instantTypes.contains(widgetType);
        },

        isSpecialWidgetByWidgetId: function (wId) {
            var widgetType = this.getWidgetTypeById(wId);
            return this.isSpecialWidgetByWidgetType(widgetType);
        },

        isSpecialWidgetByWidgetType: function (widgetType) {
            var specialTypes = [
                BICst.DESIGN.WIDGET.CONTENT,
                BICst.DESIGN.WIDGET.IMAGE,
                BICst.DESIGN.WIDGET.WEB
            ];
            return specialTypes.contains(widgetType);
        },

        getWidgetValueById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].value);
        },

        getWidgetFilterById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].settings.tableAttr.filterValue || {});
        },

        getWidgetSortSequence: function (wId) {
            return BI.designModel.widgets[wId].sortSequence;
        },

        getWidgetControlRangeById: function (wId) {
            return Fix.toJSON(BI.designModel.widgets[wId].controlRange || {});
        },

        getDimensionTypeByFieldType: function (type) {
            switch (type) {
                case BICst.COLUMN.STRING:
                    return BICst.DESIGN.DIMENSION_TYPE.STRING;
                case BICst.COLUMN.TARGET_NAME:
                    return BICst.DESIGN.DIMENSION_TYPE.TARGET_NAME;
                case BICst.COLUMN.DATE:
                    return BICst.DESIGN.DIMENSION_TYPE.DATE;
                case BICst.COLUMN.NUMBER:
                    return BICst.DESIGN.DIMENSION_TYPE.NUMBER;
                case BICst.COLUMN.COUNTER:
                    return BICst.DESIGN.DIMENSION_TYPE.COUNTER;
                case BICst.COLUMN.CALCULATE:
                    return BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET;
                case BICst.COLUMN.TRANSFORM_FROM_NUMBER:
                    return BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER;
                case BICst.COLUMN.TRANSFORM_FROM_CALC:
                    return BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL;
                default:
                    break;
            }
        },

        getFieldTypeByDimensionType: function (type) {
            switch (type) {
                case BICst.DESIGN.DIMENSION_TYPE.STRING:
                    return BICst.COLUMN.STRING;
                case BICst.DESIGN.DIMENSION_TYPE.TARGET_NAME:
                    return BICst.COLUMN.TARGET_NAME;
                case BICst.DESIGN.DIMENSION_TYPE.DATE:
                    return BICst.COLUMN.DATE;
                case BICst.DESIGN.DIMENSION_TYPE.NUMBER:
                    return BICst.COLUMN.NUMBER;
                case BICst.DESIGN.DIMENSION_TYPE.COUNTER:
                    return BICst.COLUMN.COUNTER;
                case BICst.DESIGN.DIMENSION_TYPE.CAL_TARGET:
                    return BICst.COLUMN.CALCULATE;
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_NUMBER:
                    return BICst.COLUMN.TRANSFORM_FROM_NUMBER;
                case BICst.DESIGN.DIMENSION_TYPE.TRANSFORM_FROM_CAL:
                    return BICst.COLUMN.TRANSFORM_FROM_CALC;
                default:
                    break;
            }
        },

        getFieldIconByIdOfWidget: function (wId, id) {
            var fieldType = this.getFieldTypeByIdOfWidget(wId, id);
            return this.getFieldIconByFieldType(fieldType);
        },

        getFieldIconByFieldType: function (fieldType) {
            switch (fieldType) {
                case BICst.COLUMN.STRING:
                    return "string-field-font";
                case BICst.COLUMN.NUMBER:
                    return "number-field-font";
                case BICst.COLUMN.DATE:
                    return "date-field-font";
                case BICst.COLUMN.COUNTER:
                    return "number-field-font";
                default:
                    return "string-field-font";
            }
        },

        getDefaultGroupTypeByFieldIdOfWidget: function (wId, fId) {
            var type = BI.Utils.getFieldTypeByIdOfWidget(wId, fId);
            switch (type) {
                case BICst.COLUMN.STRING:
                case BICst.COLUMN.TARGET_NAME:
                    return BICst.DESIGN.GROUP.ID_GROUP;
                case BICst.COLUMN.TRANSFORM_FROM_CALC:
                case BICst.COLUMN.TRANSFORM_FROM_NUMBER:
                    return BICst.GROUP.NUMBER_GROUP;
                case BICst.COLUMN.DATE:
                    return BI.Utils.getFieldGroupTypeByIdOfWidget(wId, fId) || BICst.DESIGN.GROUP.YMD;
                case BICst.COLUMN.NUMBER:
                case BICst.COLUMN.CALCULATE:
                    return BICst.DESIGN.SUMMARY_TYPE.SUM;
                case BICst.COLUMN.COUNTER:
                    return BICst.DESIGN.GROUP.ID_GROUP;
                default:
                    return BICst.DESIGN.GROUP.ID_GROUP;
            }
        },

        isDimensionRegionByRegionType: function (regionType) {
            return BI.parseInt(regionType) < BI.parseInt(BICst.REGION.TARGET1);
        },

        isTargetFieldById: function (wId, fId) {
            var field = this.getFieldByIdOfWidget(wId, fId);
            switch (field.type) {
                case BICst.COLUMN.NUMBER:
                case BICst.COLUMN.COUNTER:
                case BICst.COLUMN.CALCULATE:
                    return true;
                default:
                    return false;
            }
        },

        // 所有的表格属性使用的是相同的指标
        isColorAttrSameTargetById: function (wId) {
            var colorAttr = BI.designModel.widgets[wId].settings.tableAttr.color;
            var allEmpty = true, allNotEmpty = true, dims = [], colors = [];
            BI.some(colorAttr, function (id, attr) {
                if (id === BICst.DESIGN.TABLE_ATTR_ALL) {
                    return;
                }
                if (attr.dims.length > 0) {
                    allEmpty = false;
                } else {
                    allNotEmpty = false;
                }
                dims = dims.concat(attr.dims);
                colors = colors.concat(attr.color);
            });
            if (allNotEmpty) {
                return this.isSameTargetOfTargetIds(dims);
            }
            if (allEmpty) {
                return BI.uniq(colors).length === 1 && colors[0] !== "";
            }
            return false;
        },

        isShapeAttrSameTargetById: function (wId) {
            var shapeAttr = BI.designModel.widgets[wId].settings.tableAttr.shape;
            var allEmpty = true, allNotEmpty = true, dims = [], shapes = [];
            BI.some(shapeAttr, function (id, attr) {
                if (id === BICst.DESIGN.TABLE_ATTR_ALL) {
                    return;
                }
                if (attr.dims.length > 0) {
                    allEmpty = false;
                } else {
                    allNotEmpty = false;
                }
                dims = dims.concat(attr.dims);
                shapes = shapes.concat(attr.shape);
            });
            if (allNotEmpty) {
                return this.isSameTargetOfTargetIds(dims);
            }
            if (allEmpty) {
                return BI.uniq(shapes).length === 1 && shapes[0] !== BICst.DESIGN.SHAPE_TYPE.NONE;
            }
            return false;
        },

        // 是否为“相同”指标
        isSameTargetOfTargetIds: function (targetIds) {

            function getTargetAttr (tId) {
                var wId = BI.Utils.getWidgetIdBydId(tId);
                var widget = BI.designModel.widgets[wId];
                var dim = widget.dimensions[tId];
                if (!dim) {
                    return null;
                }
                var dimGroup = dim.group;
                var fieldId = BI.Utils.getFieldIdBydId(tId);
                var field = BI.Utils.getFieldByIdOfWidget(wId, fieldId);
                var dimCalculation = BI.Utils.getDimensionCalculationTypeById(tId);
                var groupPrefix = "summary_", calculatePrefix = "cal_";

                dimGroup = groupPrefix + (dimGroup ? dimGroup.type : BICst.SUMMARY_TYPE.SUM);
                dimCalculation = calculatePrefix + dimCalculation;
                var attr = {};
                if (BI.isNotNull(field.group) && BI.isNotNull(field.group[dimGroup]) &&
                    BI.isNotNull(field.group[dimGroup].cal)) {
                    attr = field.group[dimGroup].cal[dimCalculation];
                }
                return {
                    dimGroup: dimGroup,
                    dimCalculation: dimCalculation,
                    fieldId: field.id,
                    attr: attr
                };
            }

            if (!BI.isArray(targetIds) || targetIds.length <= 1) {
                return true;
            }
            var preTarAttr = getTargetAttr(targetIds[0]);
            return BI.every(targetIds, function (i, tId) {
                // 分组、快速计算相同 && fields中该组合下的属性相同
                var targetAttr = getTargetAttr(tId);
                if (BI.isNull(preTarAttr) && BI.isNull(targetAttr)) {
                    return true;
                }
                if (BI.isEqual(preTarAttr, targetAttr)) {
                    return true;
                }
            });
        },

        getAllTargetDimensionIds: function (wId) {
            var self = this;
            var allDims = this.getAllDimensionIDs(wId);
            return BI.filter(allDims, function (i, dId) {
                return self.isTargetById(dId);
            });
        },

        broadcastAllWidgets2Reset: function () {
            BI.each(this.getAllWidgetIds(), function (i, widgetId) {
                BI.Broadcasts.send(BICst.BROADCAST.RESET_PREFIX + widgetId);
            });
        },

        broadcastAllControlWidgets2Reset: function () {
            var self = this;
            BI.each(this.getAllWidgetIds(), function (i, widgetId) {
                if (self.isControlWidgetByWidgetId(widgetId)) {
                    BI.Broadcasts.send(BICst.BROADCAST.RESET_PREFIX + widgetId);
                }
            });
        },

        broadcastAllWidgets2Refresh: function (force, wId) {
            var self = this;
            var allWidgetIds = this.getAllWidgetIds();
            if (force === true || this.isQueryControlExist() === false) {
                BI.each(allWidgetIds, function (i, widgetId) {
                    if (!self.isControlWidgetByWidgetId(widgetId) || self.isInstantControlWidgetByWidgetId(widgetId) ||
                        BI.Utils.isSpecialWidgetByWidgetId(widgetId)) {
                        if (BI.isNull(wId) || wId !== widgetId) {
                            BI.Broadcasts.send(BICst.BROADCAST.REFRESH_PREFIX + widgetId);
                        }
                    }
                });
            }
        },

        isUnderControlRangeById: function (filterWId, targetWId) {
            var controlRange = this.getWidgetControlRangeById(filterWId) || {};
            var inControlRange = true;

            if (controlRange.type === BICst.DESIGN.CONTROL_RANGE_TYPE.CUSTOMIZE) {
                inControlRange = inControlRange && BI.contains(controlRange.value || [], targetWId);
            }

            return inControlRange;
        },

        // 根据分组找联动组件
        getLinkageWidgetsOfGroup: function (wId) {
            var linkWidgets = [];
            var allWIds = this.getAllWidgetIds();
            var linkageGroup = this.getLinkageGroup();
            if (BI.isNull(linkageGroup)) {
                linkWidgets = allWIds;
            } else {
                // 新加入的组件没有自动放入到任何分组中，但默认在第一个分组中
                BI.each(allWIds, function (i, id) {
                    var found = BI.some(linkageGroup, function (j, group) {
                        return BI.some(group, function (k, ob) {
                            return id === ob.widgetId;
                        });
                    });
                    if (!found) {
                        linkageGroup[0] = linkageGroup[0] || [];
                        linkageGroup[0].push({widgetId: id});
                    }
                });
                // 相同分组中组件
                BI.some(linkageGroup, function (i, group) {
                    var found = BI.some(group, function (i, widget) {
                        return widget.widgetId === wId;
                    });
                    if (found) {
                        BI.each(group, function (i, widget) {
                            linkWidgets.push(widget.widgetId);
                        });
                        return true;
                    }
                });
            }
            return linkWidgets;
        },

        isWidgetsInSameLinkageGroup: function (wIds) {
            var linkageGroup = this.getLinkageGroup();
            var notInAnyGroup = true;
            var findInExistGroup = BI.any(linkageGroup, function (idx, group) {
                var groupWIds = BI.map(group, "widgetId");
                var length = BI.intersection(groupWIds, wIds).length;
                if (length !== 0) {
                    notInAnyGroup = false;
                }
                if (wIds.length === length) {
                    return true;
                }
            });
            return findInExistGroup || notInAnyGroup;
        },

        // 找到当前所有能联动到的组件
        getAllLinkageWidgets: function (wId, callback) {
            var self = this;
            var linkWidgets = this.getLinkageWidgetsOfGroup(wId);
            var tableName = this.getTableNameWidgetId(wId);
            var linkConf = this.getWidgetCustomLinkConfById(wId);

            function isValidCustomLinkConf (conf, linkTables) {
                // 字段丢失、字段没有权限、未选择字段、字段类型不一致
                if (conf.length === 0) {
                    return false;
                }
                return !BI.some(conf, function (i, dep) {
                    var from = dep.from, to = dep.to;
                    if (from === BICst.COMMON.EMPTY_FIELD || to === BICst.COMMON.EMPTY_FIELD) {
                        return true;
                    }
                    if (BI.Utils.isNoAuthField(from) || BI.Utils.isNoAuthField(to)) {
                        return true;
                    }
                    var fromField = BI.Utils.getOriginFieldById(from),
                        toField = BI.Utils.getOriginFieldById(to);
                    var fromFields = BI.Utils.getFieldsByTableName(tableName);
                    var toFields = [];
                    BI.each(linkTables, function (i, tableName) {
                        toFields = toFields.concat(BI.Utils.getFieldsByTableName(tableName));
                    });
                    var isFromFieldExist = BI.some(fromFields, function (i, field) {
                        return field.id === from;
                    });
                    var isToFieldExist = BI.some(toFields, function (i, field) {
                        return field.id === to;
                    });
                    if (!isFromFieldExist || !isToFieldExist) {
                        return true;
                    }
                    if (fromField.type !== toField.type) {
                        return true;
                    }
                });
            }

            // 异步获取（缓存）所有关联
            BI.Utils.getRelations(function (relations) {
                var foreignTables = self.getForeignTablesOfTable(tableName, relations);
                var links = [];
                BI.each(linkWidgets, function (i, id) {
                    if (id === wId || !BI.Utils.isWidgetExistById(id)) {
                        return;
                    }
                    if (BI.Utils.getWidgetTypeById(id) === BICst.DESIGN.WIDGET.CONTENT) {
                        var linkTables = BI.Utils.getContentWidgetUsedTable(id);
                        if (BI.isNotNull(linkConf[id])) {
                            if (isValidCustomLinkConf(linkConf[id], linkTables)) {
                                links.push(id);
                            }
                        } else if (BI.contains(linkTables, tableName) || BI.isNotEmptyArray(BI.intersection(linkTables, foreignTables))) {
                            links.push(id);
                        }
                    } else {
                        var linkTable = self.getTableNameWidgetId(id);
                        // 相同表 & 子表
                        if (BI.isNotNull(linkConf[id])) {
                            if (isValidCustomLinkConf(linkConf[id], [linkTable])) {
                                links.push(id);
                            }
                        } else if (linkTable === tableName || foreignTables.contains(linkTable)) {
                            links.push(id);
                        }
                    }


                });
                callback(links);
            });
        },

        broadcastLinkWidgets2Refresh: function (wId) {
            this.getAllLinkageWidgets(wId, function (links) {
                BI.each(links, function (i, id) {
                    BI.Broadcasts.send(BICst.BROADCAST.LINKAGE_PREFIX + id, wId);
                });
            });
            var linkWidgets = this.getLinkageWidgetsOfGroup(wId);
            // 文本组件总是刷新
            BI.each(linkWidgets, function (idx, w) {
                if (BI.Utils.isWidgetExistById(w) && BI.Utils.isSpecialWidgetByWidgetId(w)) {
                    BI.Broadcasts.send(BICst.BROADCAST.LINKAGE_PREFIX + w, wId);
                }
            });
        },

        getTargetNameField: function (wId) {
            var fields = this.getFieldsOfWidget(wId);
            return BI.find(fields, function (i, field) {
                return field.type === BICst.COLUMN.TARGET_NAME;
            });
        },

        getFieldByIdOfWidget: function (wId, fieldId) {
            var fields = this.getFieldsOfWidget(wId);
            var field = BI.find(fields, function (i, field) {
                return field.id === fieldId;
            });
            return field || {};
        },

        isFieldInDrillDir: function (wId, fieldId) {
            var widget = BI.designModel.widgets[wId];
            if (!widget) {
                return false;
            }
            return BI.some(widget.measures, function (i, m) {
                var dir = BI.map(m.drillDir, "id");
                if (dir.contains(fieldId)) {
                    return true;
                }
            });
        },

        getFieldDirByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotNull(field)) {
                return field.drillDir;
            }
        },

        getDimensionIdByDimensionGroupId: function (wId, id) {
            var dimensionGroups = {};
            var result;
            if (BI.isNull(wId)) {
                BI.find(this.getAllWidgetIds(), function (idx, w) {
                    result = BI.find(BI.deepClone(BI.designModel.widgets[w].dimensionGroups), function (key, value) {
                        return id === key || value.dimensionIds.contains(id);
                    });
                    return BI.isNotNull(result);
                });
            } else {
                dimensionGroups = BI.deepClone(BI.designModel.widgets[wId].dimensionGroups);
                result = BI.find(dimensionGroups, function (key, value) {
                    return id === key || value.dimensionIds.contains(id);
                });
            }
            if (BI.isNotNull(result)) {
                return result.dimensionIds[0];
            }
        },

        isDimensionGroupIdExist: function (wId, id) {
            if (BI.isNull(wId)) {
                var result = BI.find(this.getAllWidgetIds(), function (idx, wId) {
                    return BI.has(BI.designModel.widgets[wId].dimensionGroups, id);
                });
                return BI.isNotNull(result);
            }
            return BI.has(BI.designModel.widgets[wId].dimensionGroups, id);
        },

        getFieldNameByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotEmptyObject(field)) {
                var geoName = "";
                switch (field.geoType) {
                    case BICst.DESIGN.TARGET_FIELD_GEO.LONGITUDE:
                        geoName = BI.i18nText("BI-Design_Longitude_With_Brackets");
                        break;
                    case BICst.DESIGN.TARGET_FIELD_GEO.LATITUDE:
                        geoName = BI.i18nText("BI-Design_Latitude_With_Brackets");
                        break;
                    default:
                        break;
                }
                return (field.transferName || BI.Utils.getFieldTransferName(field.id) || field.name) + geoName;
            }
        },

        getFieldTypeByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotNull(field)) {
                return field.type;
            }
        },

        getFieldGroupTypeByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotNull(field)) {
                return field.fieldGroupType;
            }
        },

        getFieldFilterByDid: function (dId) {
            var wId = this.getWidgetIdBydId(dId);
            var fieldId = this.getFieldIdBydId(dId);
            return this.getFieldFilterByIdOfWidget(wId, fieldId);
        },

        getFieldFilterByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotNull(field)) {
                return BI.Utils.getWidgetTypeById(wId) === BICst.DESIGN.WIDGET.DETAIL ? field.detailFilter : field.filter;
            }
        },

        getFieldSortByIdOfWidget: function (wId, fieldId) {
            var field = this.getFieldByIdOfWidget(wId, fieldId);
            if (BI.isNotNull(field)) {
                return field.sort;
            }
        },

        getOriginFieldsOfWidget: function (wId) {
            var tableName = this.getTableNameWidgetId(wId);
            return BI.filter(this.getFieldsByTableName(tableName), function (idx, field) {
                return field.type !== BICst.COLUMN.COUNTER && field.type !== BICst.COLUMN.TARGET_NAME;
            });
        },

        // 获取组件中所有的结果字段
        getFieldsOfWidget: function (wId) {
            var widget = BI.designModel.widgets[wId];
            var tableName = widget.tableName;
            var fields = BI.deepClone(this.getFieldsByTableName(tableName)) || [],
                measures = BI.deepClone(widget.measures) || [],
                copiedMap = {};
            BI.each(measures, function (i, fieldOP) {
                var overwrite = BI.some(fields, function (j, oField) {
                    if (fieldOP.id === oField.id) {
                        fields[j] = fieldOP;

                        if (BI.Utils.calcOriginalFieldType(fields[j].type) !== oField.type) {
                            fields[j].type = oField.type;
                        }
                        return true;
                    }
                    // 复制的字段type改变
                    if (fieldOP.source === oField.id) {
                        if (BI.Utils.calcOriginalFieldType(fieldOP.type) !== BI.Utils.calcOriginalFieldType(oField.type) && fieldOP.type !== BICst.COLUMN.CALCULATE) {
                            fieldOP.type = oField.type;
                        }
                    }
                });
                if (overwrite) return;

                if (fieldOP.copied !== true) {
                    fields.push(fieldOP);

                    return;
                }

                if (BI.isNull(copiedMap[fieldOP.source])) copiedMap[fieldOP.source] = [];

                copiedMap[fieldOP.source].push(fieldOP);
            });

            var resultFields = [];

            BI.each(fields, function (index, field) {
                resultFields.push(field);

                var id = field.source || field.id;
                if (BI.isNull(copiedMap[id])) return;

                resultFields = resultFields.concat(copiedMap[id]);
                delete copiedMap[id];
            });
            BI.each(copiedMap, function (idx, map) {
                resultFields = resultFields.concat(map);
            });
            return resultFields;
        },

        calcOriginalFieldType: function (type) {
            switch (type) {
                case BICst.COLUMN.TRANSFORM_FROM_NUMBER:
                    return BICst.COLUMN.NUMBER;
                default:
                    return type;
            }
        },

        isFieldOfWidgetExist: function (wId, fieldId) {
            var fields = this.getFieldsOfWidget(wId);
            var result = BI.find(fields, function (idx, field) {
                return field.id === fieldId;
            });
            return BI.isNotNull(result);
        },

        getFieldStateOfWidget: function (wId, fieldId) {
            if (BI.Utils.isNoAuthField(fieldId)) {
                return BICst.FIELD_STATE.NO_AUTH;
            }
            var fields = this.getFieldsOfWidget(wId);
            var fieldType = BI.Utils.getFieldTypeByIdOfWidget(wId, fieldId);
            var result = BI.find(fields, function (idx, field) {
                BI.each(field.drillDir, function (idx, drill) {
                    if (drill.id === fieldId) {
                        fieldType = drill.type;
                    }
                });
                return field.id === fieldId || field.source === fieldId;
            });
            var validation = true;
            if (BI.isNull(result)) {
                return BICst.FIELD_STATE.FIELD_MISS;
            }

            if (fieldType !== BI.Utils.getFieldTypeByIdOfWidget(wId, fieldId)) {
                return BICst.FIELD_STATE.FIELD_TYPE_ERROR;
            }

            // 复制的指标
            if (result.copied) {
                return this.getFieldStateOfWidget(wId, result.source);
            }

            // 计算指标
            var wType = BI.Utils.getWidgetTypeById(wId);
            // 明细表聚合计算指标标红
            if (result.type === BICst.COLUMN.CALCULATE || result.type === BICst.COLUMN.TRANSFORM_FROM_CALC) {
                if (wType === BICst.DESIGN.WIDGET.DETAIL && BI.Utils.checkFieldIsAgg(wId, fieldId)) {
                    return BICst.FIELD_STATE.AGG_IN_DETAIL;
                }

                var allPossibleIds = [];

                BI.each(BI.Utils.getAllControlWidgetIds(), function (index, wId) {
                    allPossibleIds.push(wId);
                    allPossibleIds.push(wId + "_start");
                    allPossibleIds.push(wId + "_end");
                });

                validation = !BI.any(result.targetIds, function (idx, targetId) {
                    return BI.Utils.getFieldStateOfWidget(wId, targetId) !== BICst.FIELD_STATE.NORMAL && BI.contains(allPossibleIds, targetId);
                });

                return validation ? BICst.FIELD_STATE.NORMAL : BICst.FIELD_STATE.FIELD_MISS;
            }

            validation = BI.Utils.isOriginFieldExist(result.source || result.id);

            return validation ? BICst.FIELD_STATE.NORMAL : BICst.FIELD_STATE.FIELD_MISS;
        },

        getTipTextByFieldState: function (state) {
            var tipText = "";
            switch (state) {
                case BICst.DIMENSION_STATE.FIELD_MISS:
                    tipText = BI.i18nText("BI-Design_Current_Field_Lost");
                    break;
                case BICst.FIELD_STATE.NO_AUTH:
                    return BI.i18nText("BI-Basic_Field_No_Auth");
                case BICst.DIMENSION_STATE.FIELD_TYPE_ERROR:
                    tipText = BI.i18nText("BI-Conf_Field_Type_Changed");
                    break;
                case BICst.DIMENSION_STATE.AGG_IN_DETAIL:
                    tipText = BI.i18nText("BI-Design_Detail_Table_Not_Support_AGG");
                    break;
                case BICst.DIMENSION_STATE.GROUP_TYPE_ERROR:
                    tipText = BI.i18nText("BI-Design_Group_Type_Lost");
                    break;
                default:
                    tipText = "";
            }
            return tipText;
        },

        getAllCalculateFieldsOfWId: function (wId) {
            return BI.filter(BI.Utils.getFieldsOfWidget(wId), function (index, field) {
                return BI.contains([BICst.COLUMN.CALCULATE, BICst.COLUMN.TRANSFORM_FROM_CALC], field.type);
            });
        },

        getRealFormulaByFieldIdOfWId: function (wId, fieldId, map) {
            if (BI.isNull(map)) {
                var allCalculateFields = BI.Utils.getAllCalculateFieldsOfWId(wId);

                map = {};

                BI.each(allCalculateFields, function (index, field) {
                    map[field.id] = field;
                });
            }

            var formula = BI.Utils.getCalculateValueByFieldIdOfWidget(wId, fieldId);

            if (BI.isEmptyString(formula) || BI.isNull(formula)) return;

            var targetIds = BI.Utils.getCalculateTargetIdsByFieldIdOfWidget(wId, fieldId);

            BI.each(targetIds, function (index, tId) {
                if (!BI.Utils.isCalculateField4UseByFieldIdOfWidget(wId, tId)) return;

                var replaceStr = BI.Utils.getRealFormulaByFieldIdOfWId(wId, tId, map);

                formula = formula.replaceAll("\\$\\{.*?\\}", function (targetStr) {
                    var target = targetStr.substring(2, targetStr.length - 1);

                    if (target !== tId) return targetStr;

                    return "(" + replaceStr + ")";
                });
            });

            return formula;
        },

        getFields4CalcTargetValueTextMap: function (wId) {
            var fields = BI.Utils.getFieldsOfWidget(wId);
            var wType = BI.Utils.getWidgetTypeById(wId);

            var map = {};

            BI.each(fields, function (index, field) {
                var type;

                switch (field.type) {
                    case BICst.COLUMN.CALCULATE:
                        type = BICst.COLUMN.NUMBER;
                        break;
                    case BICst.COLUMN.STRING:
                    case BICst.COLUMN.NUMBER:
                    case BICst.COLUMN.DATE:
                        type = field.type;
                        break;
                    default:
                }

                if (BI.isNull(type)) return;

                map[field.id] = {
                    type: type,
                    isAgg: BI.Utils.checkFieldIsAgg(wId, field.id),
                    hasDetailFilter: BI.isNotNull(field[wType === BICst.DESIGN.WIDGET.DETAIL ? "detailFilter" : "filter"])
                };
            });

            BI.each(BI.Utils.getAllWidgetIds(), function (index, widgetId) {
                var widgetType = BI.Utils.getWidgetTypeById(widgetId);
                if (BI.Utils.isIntervalDateWidgetType(widgetType)) {
                    map[widgetId + "_start"] = {
                        type: BICst.COLUMN.DATE,
                        isAgg: false
                    };
                    map[widgetId + "_end"] = {
                        type: BICst.COLUMN.DATE,
                        isAgg: false
                    };
                } else if (BI.Utils.isDateWidgetType(widgetType)) {
                    map[widgetId] = {
                        type: BICst.COLUMN.DATE,
                        isAgg: false
                    };
                }
            });

            return map;
        },

        checkCalTargetValidationByFId: function (wId, fieldId, cb) {
            if (!BI.Utils.isCalculateFieldByFieldIdOfWidget(wId, fieldId)) {
                cb(BICst.FIELD_STATE.NORMAL);

                return;
            }

            BI.Utils.checkCalculationValidation(wId, fieldId, function (state) {
                cb(state);
            });
        },

        checkCalculationValidation: function (wId, fieldId, callback) {
            var map = BI.Utils.getFields4CalcTargetValueTextMap(wId);

            var realFormula = BI.Utils.getRealFormulaByFieldIdOfWId(wId, fieldId);

            var tIds = BI.uniq(realFormula.match(/\$\{.*?\}/g));

            var hasMissedField = BI.some(tIds, function (index, tId) {
                return !BI.has(map, tId.substring(2, tId.length - 1));
            });

            if (hasMissedField) {
                callback(BICst.FIELD_STATE.FIELD_MISS);

                return;
            }

            BI.Func.checkFormulaValidation({
                str: realFormula.replace(/\$\{.*?\}/g, "$a"),
                origin: realFormula,
                fieldsMap: map
            }, function (validate) {
                if (validate) {
                    callback(BICst.FIELD_STATE.NORMAL);

                    return;
                }

                var usedTargetIds = BI.Utils.getCalculateTargetIdsByFieldIdOfWidget(wId, fieldId);

                var iteratorChecker = function (index, valid, cb) {
                    if (valid === false) {
                        cb(valid);
                        return;
                    }

                    if (index === BI.size(usedTargetIds)) {
                        cb(valid);
                        return;
                    }

                    var usedTargetId = usedTargetIds[index];

                    if (!BI.Utils.isCalculateField4UseByFieldIdOfWidget(wId, usedTargetId)) {
                        iteratorChecker(index + 1, valid, cb);

                        return;
                    }

                    var usedTargetFormula = BI.Utils.getRealFormulaByFieldIdOfWId(wId, usedTargetId);

                    BI.Func.checkFormulaValidation({
                        str: usedTargetFormula.replace(/\$\{.*?\}/g, "$a"),
                        origin: usedTargetFormula,
                        fieldsMap: map
                    }, function (valid) {
                        iteratorChecker(index + 1, valid, cb);
                    });
                };

                iteratorChecker(0, true, function (valid) {
                    callback(valid ? BICst.FIELD_STATE.WRONG_FORMULA : BICst.FIELD_STATE.FIELD_MISS);
                });
            });
        },

        isIntervalDateWidgetType: function (widgetType) {
            return BI.contains([BICst.DESIGN.WIDGET.DATE_INTERVAL, BICst.DESIGN.WIDGET.YEAR_MONTH_INTERVAL], widgetType);
        },

        isDateWidgetType: function (widgetType) {
            return BI.contains([BICst.DESIGN.WIDGET.QUARTER, BICst.DESIGN.WIDGET.MONTH, BICst.DESIGN.WIDGET.YEAR,
                BICst.DESIGN.WIDGET.DATE_PANE, BICst.DESIGN.WIDGET.DATE], widgetType);
        },

        exportSingleWidget: function (wId, data, callback) {
            BI.$import(BI.fineServletURL + "/file?path=/com/finebi/web/js/export.min.js&type=plain&parser=plain");
            if (BI.isIE9Below()) {
                BI.Utils.exportFile(BI.ExportExcelURL, data, callback);
            } else {
                var el = $(".bi-fit-widget ." + wId);
                el.removeClass("selected");
                html2canvas(el, {
                    useCORS: true,
                    logging: false,
                    iframeTimeOut: 1500
                }).then(function (canvas) {
                    el.addClass("selected");
                    BI.Utils.exportFile(BI.ExportExcelURL, BI.extend(data, {
                        base64: canvas.toDataURL().replaceAll("data:image/png;base64,", "")
                    }), callback);
                });
            }
        },

        exportFile: function (url, data, cb) {
            var browserExport = !BI.isIE() || !(BI.isIE() && BI.getIEVersion() < 10);
            if (browserExport) {
                BI.downloadProgress(url, data, function () {
                    if (this.status === 200 && this.response !== null) {
                        var contentDisposition = this.getResponseHeader("Content-Disposition");
                        var fileName = contentDisposition && contentDisposition.substring(contentDisposition.indexOf("filename") + 9);
                        fileName = decodeURIComponent(escape(fileName));
                        $.exportSaveAs(this.response, fileName);
                    }
                    cb(false);
                });
                cb(true);
            } else {
                BI.Func.doActionByForm(url, data);
            }
        }
    });
})();
!(function () {
    var Fit = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-fit-4show"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.show.fit");
        },

        render: function () {
            return {
                type: "bi.vertical",
                scrolly: true,
                items: this._createWidgets(this.model.dataWidgets)
            };
        },

        _createWidgets: function (items) {
            return BI.map(items, function (idx, item) {
                return {
                    type: "bi.static.widget.factory",
                    wId: item.wId,
                    width: "100%",
                    height: 400
                };
            });
        },

        mounted: function () {

        }
    });
    BI.shortcut("bi.static.fit", Fit);
})();!(function () {
    var FitModel = BI.inherit(Fix.Model, {

        context: ["widgets", "layoutRatio", "templateStyle"],

        computed: {
            dataWidgets: function () {
                return BI.filter(this.model.widgets, function (i, widget) {
                    return !BI.Utils.isControlWidgetByWidgetId(widget.wId);
                });
            }
        }

    });
    BI.model("bi.model.show.fit", FitModel);
})();!(function () {
    var Service = BI.inherit(BI.OB, {
        getWidgetMap: function (template) {
            var store = this._initStore(template);
            var result = {};
            BI.each(store.widgets, function (idx, widget) {
                result[widget.wId] = BI.Utils.getWidgetCalculationByID(widget.wId);
            });
            return result;
        },

        _initStore: function (template) {
            BI.designData = BI.deepExtend({}, BI.deepClone(BI.Constants.getConstant("bi.constant.design.template.conf")), template);
            BI.designModel = {
                templateStyle: BI.designData.templateStyle,
                widgets: BI.designData.widgets,
                linkageGroup: BI.designData.linkageGroup,
                layoutRatio: BI.designData.layoutRatio || {
                    x: 0,
                    y: 0
                },
                freeLayoutRatio: BI.designData.freeLayoutRatio || {
                    x: 0,
                    y: 0
                },
                reportName: BI.designData.reportName,
                reportId: BI.designData.reportId
            };

            // 是否打开页面时自动查询
            if (BI.Utils.isQueryAutoQueryWhenFresh()) {
                BI.SharingPool.put("controlFilters", BI.Utils.getControlCalculations());
            }

            return BI.designModel;
        }
    });
    BI.service("bi.service.static.calculate", Service);
})();!(function () {
    var Static = BI.inherit(BI.Pane, {

        props: {
            baseCls: "bi-static bi-background"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.static");
        },

        mounted: function () {
            var manager = BI.Services.getService("bi.service.design.template.style");
            // 渲染事实上的样式
            manager.setThemeStyle();
            manager.setGlobalStyle();
        },

        render: function () {
            var self = this;
            var service = BI.Services.getService("bi.service.widgets.render");
            return {
                type: "bi.static.fit",
                ref: function (ref) {
                    self.dashboard = ref;
                },
                listeners: [{
                    eventName: "EVENT_SCROLL",
                    action: function (scroll) {
                        service.setScroll(scroll);
                    }
                }, {
                    eventName: "EVENT_RESIZE",
                    action: function () {
                        service.resize(this.getClientSize());
                    }
                }]
            };
        }
    });
    BI.shortcut("bi.static", Static);
})();!(function () {
    BI.designData = BI.deepExtend({}, BI.deepClone(BI.Constants.getConstant("bi.constant.design.template.conf")), BI.designConfigure);
    BI.widgetData = BI.pool.widgetData;

    var DesignModel = BI.inherit(Fix.Model, {

        _init: function () {
            BI.designData.isEdit = false;
        },

        created: function () {
            BI.designModel = BI.designModel || {};
            BI.designModel = this.model.template;
        },

        state: function () {
            return {
                expand: null,
                template: {
                    templateStyle: BI.designData.templateStyle,
                    widgets: BI.designData.widgets,
                    linkageGroup: BI.designData.linkageGroup,
                    layoutRatio: BI.designData.layoutRatio,
                    reportName: BI.designData.reportName
                }
            };
        },

        childContext: ["template", "widgets", "templateStyle", "hideEmptyTip"],

        computed: {
            templateStyle: function () {
                return this.model.template.templateStyle;
            },
            widgets: function () {
                return this.model.template.widgets;
            },
            linkageGroup: function () {
                return this.model.template.linkageGroup;
            }
        }
    });
    BI.model("bi.model.static", DesignModel);
})();
!(function () {
    BI.extend(BI.Utils, {
        getWidgetDataByID: function (wId, options) {
            var callback = options.success;
            callback && callback(BI.widgetData[wId] || {});
        }
    });
})();!(function () {
    var CONSTANTS = {
        ICON_WIDTH: 24,
        ICON_HEIGHT: 24
    };
    var ShowWidget = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-dashboard-widget bi-card"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.static.widget.table_chart", {
                wId: this.options.wId
            });
        },

        mounted: function () {
            var self = this;
            this._resizeHandler = BI.debounce(function () {
                if (BI.isNull(self.widgetName) || BI.isNull(self.widgetLayout)) {
                    return;
                }
                self.widgetLayout.attr("items")[0].height = self._getTitleHeight();
                self.widgetLayout.resize();
                self.tableChart.resize();
            }, 0);

            BI.ResizeDetector.addResizeListener(this, function () {
                self._resizeHandler();
            });
            this._resizeHandler();
            this._setBackground();
            this.store.getDisplayName();
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                ref: function (_ref) {
                    self.widget = _ref;
                },
                items: [{
                    el: {
                        type: "bi.vtape",
                        ref: function (_ref) {
                            self.widgetLayout = _ref;
                        },
                        items: [{
                            el: this._createTitle(),
                            height: 27
                        }, {
                            el: this._createTableChart()
                        }]
                    },
                    top: 0,
                    left: 0,
                    bottom: 0,
                    right: 0
                }]
            };
        },

        _createTitle: function () {
            var self = this;
            return {
                type: "bi.absolute",
                height: this.model.showTitle ? this.model.titleHeight + 10 : 0,
                cls: "dashboard-widget-title",
                items: [{
                    el: {
                        type: "bi.design.widget.title",
                        cls: "dashboard-title-left",
                        ref: function (ref) {
                            self.widgetName = ref;
                        }
                    },
                    left: 0,
                    top: 5,
                    right: 10,
                    bottom: 5
                }],
                invisible: !this.model.showTitle,
                ref: function (ref) {
                    self.titleWrapper = ref;
                }
            };
        },

        _createTableChart: function () {
            var self = this;
            return {
                type: "bi.design.widget.table_chart_manager",
                wId: this.options.wId,
                ref: function (ref) {
                    self.tableChart = ref;
                }
            };
        },

        _getTitleHeight: function () {
            return this.model.showTitle ? Math.min(this.widgetName.getHeight() + 10, this.widget.element.height()) : 0;
        },

        _setBackground: function () {
            if (!BI.Utils.isWidgetExistById(this.model.wId)) {
                return;
            }
            var service = BI.Services.getService("bi.service.design.template.style");
            var widgetBg = BI.Utils.getResWidgetBackgroundById(this.model.wId);
            this.element.css(service.getBackgroundAndColor(widgetBg) || {});
            if(service.getBackgroundValue(widgetBg) === "transparent") {
                this.element.addClass("transparent");
            }
            var titleBg = BI.Utils.getResTitleBackgroundById(this.model.wId);
            this.titleWrapper.element.css(service.getBackgroundAndColor(titleBg) || {});
        }
    });
    BI.shortcut("bi.static.widget.table_chart", ShowWidget);
})();
!(function () {
    var WidgetModel = BI.inherit(Fix.Model, {

        state: function () {
            return {
                refreshTableChart: false,
                showTitleOperator: false,
                error: {},
                displayName: null
            };
        },

        context: ["widgets"],

        childContext: ["widget", "error"],

        computed: {
            wId: function () {
                return this.options.wId;
            },
            widget: function () {
                return this.model.widgets[this.model.wId];
            },
            name: function () {
                return this.model.widget.name;
            },
            type: function () {
                return this.model.widget.type;
            },
            showTitle: function () {
                return this.model.widget.showTitle;
            },
            titleHeight: function () {
                return this.model.settings.titleHeight;
            }
        },

        actions: {
            showTitle: function () {
                this.model.widget.showTitle = !this.model.widget.showTitle;
            },
            getDisplayName: function () {
                // Todo 从后台直接获取
                return "";
            }
        }
    });
    BI.model("bi.model.static.widget.table_chart", WidgetModel);
})();
!(function () {
    var WidgetFactory = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-show-widget-factory bi-dashboard-widget",
            wId: ""
        },

        render: function () {
            return {
                type: this._getWidgetType(),
                wId: this.options.wId
            };
        },

        _getWidgetType: function () {
            // var type = BI.Utils.getWidgetTypeById(this.options.wId);
            //
            // switch (type) {
            //     case BICst.DESIGN.WIDGET.TABLE:
            //     case BICst.DESIGN.WIDGET.CROSS_TABLE:
            //     case BICst.DESIGN.WIDGET.COMPLEX_TABLE:
            //         return "bi.static.widget.table_chart";
            //     default:
            //         return "bi.static.widget.table_chart";
            // }
            return "bi.static.widget.table_chart";
        }
    });
    BI.shortcut("bi.static.widget.factory", WidgetFactory);
})();/*!webui - 1.0.0 - author - 2018-08-22 10:51:04 */!(function () {
    var FilterComboService = BI.inherit(BI.OB, {
        FILTER_ITEM: -1,

        constant: {
            iconAsc: "dimension-ascend-font",
            iconDes: "dimension-descend-font",
            iconAscFilter: "dimension-ascend-filter-font",
            iconDesFilter: "dimension-descend-filter-font",
            iconFilter: "dimension-non-sort-filter-font",
            iconNoSortNoFilter: "dimension-non-sort-non-filter-font"
        },

        getIconBySortFilter: function (sort, filter) {
            sort = sort || {};
            switch (sort.type) {
                case BICst.DESIGN.SORT.ASC:
                    return BI.isNotEmptyObject(filter) ? this.constant.iconAscFilter : this.constant.iconAsc;
                case BICst.DESIGN.SORT.DESC:
                    return BI.isNotEmptyObject(filter) ? this.constant.iconDesFilter : this.constant.iconDes;
                default :
                    return BI.isNotEmptyObject(filter) ? this.constant.iconFilter : this.constant.iconNoSortNoFilter;
            }
        }
    });

    BI.service("bi.service.sort.filter.combo", FilterComboService);
})();/**
 * 树结构表头排序过滤
 * Created by Young's on 2017/5/15.
 */
!(function () {
    var SortFilterDimensionTreeCombo = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-sort-filter-dimension-tree-combo"
        },

        render: function () {
            var self = this;
            var items = this.createItems();
            return {
                type: "bi.down_list_combo",
                el: {
                    type: "bi.icon_change_button",
                    forceNotSelected: true,
                    cls: this.comboIcon,
                    height: 25,
                    width: 25
                },
                items: items,
                ref: function (ref) {
                    self.combo = ref;
                },
                listeners: [{
                    eventName: BI.DownListCombo.EVENT_CHANGE,
                    action: function (v) {
                        self.fireEvent(SortFilterDimensionTreeCombo.EVENT_CHANGE, v);
                    }
                }, {
                    eventName: BI.DownListCombo.EVENT_SON_VALUE_CHANGE,
                    action: function (v) {
                        self.fireEvent(SortFilterDimensionTreeCombo.EVENT_CHANGE, v);
                    }
                }, {
                    eventName: BI.DownListCombo.EVENT_BEFORE_POPUPVIEW,
                    action: function () {
                        self.populate();
                    }
                }]
            };
        },

        createItems: function () {
            var o = this.options;
            var service = BI.Services.getService("bi.service.sort.filter.combo");
            var wId = o.wId;
            var view = BI.Utils.getWidgetViewById(wId);
            var dimIds = view[BICst.REGION.DIMENSION1];
            var filterItems = [], ascDims = [], filters = [];
            // 行表头、列表头都只需要第一个分组中使用中的维度
            // BI.map(view[], function (i, sRegion) {
            //     if (BI.Utils.isDimensionRegion1ByRegionType(sRegion) &&
            //         view[sRegion].length > 0) {
            //         BI.each(view[sRegion], function (j, dId) {
            //             BI.Utils.isDimensionUsable(dId) && (dimIds.push(dId));
            //         });
            //         return dimIds.length > 0;
            //     }
            // });
            BI.each(dimIds, function (i, dId) {
                filterItems.push({
                    text: BI.Utils.getDimensionNameById(dId),
                    value: dId
                });
                var sort = BI.Utils.getResMeasureSortById(dId);
                if (BI.isNull(sort) || sort.type === BICst.DESIGN.SORT.ASC) {
                    ascDims.push(dId);
                }
                if (BI.isNotEmptyObject(BI.Utils.getResMeasureFilterById(dId))) {
                    filters.push(BI.Utils.getResMeasureFilterById(dId));
                }
            });
            var sortType = BICst.DESIGN.SORT.NONE;
            if (ascDims.length === dimIds.length) {
                sortType = BICst.DESIGN.SORT.ASC;
            } else if (ascDims.length === 0) {
                sortType = BICst.DESIGN.SORT.DESC;
            }
            this.comboIcon = service.getIconBySortFilter({type: sortType}, filters.length > 0 ? filters[0] : null);
            return [
                [{
                    text: BI.i18nText("BI-Basic_Ascend"),
                    value: BICst.DESIGN.SORT.ASC,
                    cls: "dot-e-font",
                    selected: sortType === BICst.DESIGN.SORT.ASC
                }, {
                    text: BI.i18nText("BI-Basic_Descend"),
                    value: BICst.DESIGN.SORT.DESC,
                    cls: "dot-e-font",
                    selected: sortType === BICst.DESIGN.SORT.DESC
                }],
                [{
                    el: {
                        text: BI.i18nText("BI-Design_Filter"),
                        value: service.FILTER_ITEM
                    },
                    children: filterItems
                }]
            ];
        },

        hideView: function () {
            this.combo.hideView();
        },

        populate: function () {
            this.combo.populate(this.createItems());
        }
    });
    SortFilterDimensionTreeCombo.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.sort_filter_dimension_tree_combo", SortFilterDimensionTreeCombo);
})();!(function () {
    var DetailTableCell = BI.inherit(BI.Widget, {

        props: {
            baseCls: "bi-detail-table-cell bi-design-table-cell",
            dId: "",
            text: "",
            shape: BICst.DESIGN.SHAPE_TYPE.NONE,
            color: ""
        },

        render: function () {
            var self = this, o = this.options;
            if (BI.isNotNull(o.styles) && BI.isObject(o.styles)) {
                this.element.css(o.styles);
            }
            if (o.color && o.fontStyle)  {
                o.fontStyle.color = o.color;
            }
            var text = this._getFormatText();
            var el = {
                type: "bi.design.widget.table_cell.text",
                style: o.fontStyle,
                el: {
                    type: "bi.text_button",
                    cls: "detail-table-cell-text",
                    textAlign: o.textAlign,
                    height: o.height,
                    text: text,
                    title: text,
                    lgap: 5,
                    rgap: 5,
                    listeners: [{
                        eventName: BI.TextButton.EVENT_CHANGE,
                        action: BI.bind(this._doClick, this)
                    }],
                    ref: function (ref) {
                        self.text = ref;
                    }
                }
            };
            var iconCls = this._getIcon();
            if (iconCls) {
                el = {
                    type: "bi.htape",
                    items: [el, {
                        type: "bi.icon_label",
                        cls: iconCls,
                        width: 25,
                        height: 25
                    }]
                };
            }

            return el;
        },

        _getFormatText: function () {
            var o = this.options;
            var text = o.text, dId = o.dId;
            var setting = o.setting;
            if (o.dimType === BICst.DESIGN.DIMENSION_TYPE.DATE) {
                var formatType = setting.dateFormat ? setting.dateFormat.type : BICst.DESIGN.DATE_FORMAT.SPLIT;
                return BI.Format.formatValueByGroupAndFormatter(text, o.groupType || BICst.GROUP.YMD, formatType);
            }
            if (!BI.Utils.isTargetById(dId)) {
                return text;
            }
            return BI.Format.numberFormat(text, {
                formatStyle: setting.formatStyle,
                formatDecimal: setting.formatDecimal,
                numLevel: setting.numLevel,
                numSeparators: setting.numSeparators,
                unit: setting.unit
            });
        },

        _getIcon: function () {
            var shape = this.options.shape;
            var iconCls;
            switch (shape) {
                case BICst.DESIGN.SHAPE_TYPE.MIN_DOT:
                    iconCls = "min-dot-font";
                    break;
                case BICst.DESIGN.SHAPE_TYPE.MID_DOT:
                    iconCls = "mid-dot-font";
                    break;
                case BICst.DESIGN.SHAPE_TYPE.MAX_DOT:
                    iconCls = "max-dot-font";
                    break;
                case BICst.DESIGN.SHAPE_TYPE.MIN_ARROW:
                    iconCls = "min-arrow-font";
                    break;
                case BICst.DESIGN.SHAPE_TYPE.MID_ARROW:
                    iconCls = "mid-arrow-font";
                    break;
                case BICst.DESIGN.SHAPE_TYPE.MAX_ARROW:
                    iconCls = "max-arrow-font";
                    break;
                default:
            }
            return iconCls;
        },

        _doClick: function () {
            this._assertCombo();
            if (this._isJumpEnabled()) {
                this.combo.populate(this._getJumpItems());
                this.combo.showView();
            }
        },

        _assertCombo: function () {
            if (this._isJumpEnabled() && BI.isNull(this.combo)) {
                var self = this, o = this.options;
                BI.createWidget({
                    type: "bi.absolute",
                    element: this,
                    items: [{
                        el: {
                            type: "bi.down_list_combo",
                            el: {
                                type: "bi.layout"
                            },
                            height: o.height,
                            trigger: "",
                            direction: "right",
                            items: [],
                            listeners: [{
                                eventName: BI.DownListCombo.EVENT_SON_VALUE_CHANGE,
                                action: function (v) {
                                    self._doJump(v);
                                }
                            }],
                            ref: function (ref) {
                                self.combo = ref;
                            }
                        },
                        top: 0,
                        right: 0,
                        bottom: 0
                    }]
                });
            }
        },

        _isJumpEnabled: function () {
            var o = this.options;
            var service = BI.Services.getService("bi.service.design.jump_setting");
            return service.hasJump(BI.Utils.getJumpByID(BI.Utils.getWidgetIdBydId(o.dId))) && BI.Utils.getWidgetOpenJumpById(BI.Utils.getWidgetIdBydId(o.dId));
        },

        _getJumpItems: function () {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            this.jumpMap = service.getJumpMap(this.options.dId);
            return service.getJumpItems(this.jumpMap);
        },

        _doJump: function (v) {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            var o = this.options;
            service.doJump(this.options.dId, this.jumpMap[v], {
                dId: o.dId,
                value: o.value,
                rowIndex: o.rowIndex,
                pageCount: o.pageCount,
                type: BICst.DESIGN.WIDGET.DETAIL
            });
        }

    });
    BI.shortcut("bi.detail_table_cell", DetailTableCell);
})();/**
 * author: young
 * createdDate: 2018/4/8
 * description:
 */
!(function () {
    var Header = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-widget-detail-table-header bi-design-table-cell",
            dId: "",
            text: "",
            height: 24
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.detail_table.header", this.options);
        },

        render: function () {
            var self = this, o = this.options;
            if (BI.isNotNull(o.styles) && BI.isObject(o.styles)) {
                this.element.css(o.styles);
            }
            if (o.color && o.fontStyle)  {
                o.fontStyle.color = o.color;
            }
            return {
                type: "bi.htape",
                items: [{
                    type: "bi.design.widget.table_cell.text",
                    style: o.fontStyle,
                    el: {
                        type: "bi.label",
                        text: this.model.text,
                        title: this.model.text,
                        height: o.height,
                        hgap: 5
                    }
                }, {
                    el: this.model.isCalculateTarget ? {
                        type: "bi.default",
                        width: 0
                    } : {
                        type: "bi.down_list_combo",
                        cls: "sort-filter-combo",
                        ref: function (ref) {
                            self.combo = ref;
                        },
                        el: {
                            type: "bi.icon_change_button",
                            iconCls: this.model.sortFilterIcon,
                            forceNotSelected: true,
                            height: o.height,
                            width: 24
                        },
                        value: this.model.sortFilterType,
                        items: this.model.sortFilterItems,
                        listeners: [{
                            eventName: BI.DownListCombo.EVENT_CHANGE,
                            action: function () {
                                self.fireEvent("EVENT_SORT_FILTER", arguments);
                            }
                        }, {
                            eventName: BI.DownListCombo.EVENT_BEFORE_POPUPVIEW,
                            action: function () {
                                this.setValue(self.model.sortFilterType);
                            }
                        }]
                    },
                    width: 24
                }],
                height: o.height
            };
        }
    });
    BI.shortcut("bi.design.widget.detail_table.header", Header);
})();/**
 * author: young
 * createdDate: 2018/4/9
 * description:
 */
!(function () {
    var FILTER_ITEM = "__filter_item__";
    var Model = BI.inherit(Fix.Model, {
        computed: {
            sort: function () {
                var o = this.options;
                return BI.Utils.getResMeasureSortById(o.dId);
            },
            filter: function () {
                return BI.Utils.getDetailDimensionFilterById(this.options.dId);
            },
            isCalculateTarget: function () {
                return BI.Utils.isCalculateTargetById(this.options.dId);
            },
            sortFilterType: function () {
                var sort = this.model.sort;
                var filter = this.model.filter;
                var values = [];
                if (BI.isNotNull(filter)) {
                    values.push({value: FILTER_ITEM});
                }
                if (BI.isNotNull(sort)) {
                    values.push({value: sort.type});
                } else {
                    values.push({value: BICst.DESIGN.SORT.NONE});
                }
                return values;
            },
            sortFilterItems: function () {
                return [
                    [{
                        text: BI.i18nText("BI-Basic_Ascend"),
                        value: BICst.DESIGN.SORT.ASC,
                        cls: "dot-e-font"
                    }, {
                        text: BI.i18nText("BI-Basic_Descend"),
                        value: BICst.DESIGN.SORT.DESC,
                        cls: "dot-e-font"
                    }, {
                        text: BI.i18nText("BI-Basic_No_Sort"),
                        value: BICst.DESIGN.SORT.NONE,
                        cls: "dot-e-font"
                    }],
                    [{
                        text: BI.i18nText("BI-Design_Filter"),
                        value: FILTER_ITEM,
                        cls: "dot-e-font"
                    }]
                ];
            },
            sortFilterIcon: function () {
                var sort = this.model.sort;
                var filter = this.model.filter;
                var nonSort = BI.isNull(sort) || sort.type === BICst.DESIGN.SORT.NONE;
                var nonFilter = BI.isNull(filter) || BI.isNull(filter.filterValue);
                if (nonSort && nonFilter) {
                    return "dimension-non-sort-non-filter-font ";
                }
                if (nonSort && !nonFilter) {
                    return "dimension-non-sort-filter-font";
                }
                if (!nonSort && nonFilter) {
                    return sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-font" : "dimension-descend-font";
                }
                if (!nonSort && !nonFilter) {
                    return sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-filter-font" : "dimension-descend-filter-font";
                }
            },

            text: function () {
                var text = this.options.text;
                if (BI.Utils.isTargetById(this.options.dId)) {
                    return BI.Format.headerFormat(BI.Utils.getSwitchMeasureSettingById(this.options.dId), text);
                }
                return text;
            }
        }
    });
    BI.model("bi.model.design.widget.detail_table.header", Model);
})();
!(function () {
    var Filter = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-target-filter-popover-center"
        },

        _store: function () {
            var o = this.options;
            return BI.Models.getModel("bi.model.design.widget.detail_table.header.filter", {
                dId: o.dId
            });
        },

        render: function () {
            var self = this, o = this.options;

            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.filter",
                        el: {
                            type: "bi.filter_operation",
                            selections: [BI.AbstractFilterItem.FILTER_OPERATION_CONDITION]
                        },
                        items: this.model.conditions,
                        itemCreator: function (item) {
                            item.fieldId = BI.Utils.getFieldIdBydId(o.dId);
                            var field = BI.find(self.model.fields, function (idx, field) {
                                return field.id === item.fieldId;
                            });
                            var fieldType = field.type;
                            switch (fieldType) {
                                case BICst.COLUMN.STRING:
                                    item.type = "bi.design.detail.target.filter.string";
                                    break;
                                case BICst.COLUMN.NUMBER:
                                    item.type = "bi.design.detail.target.filter.number";
                                    break;
                                case BICst.COLUMN.DATE:
                                default:
                                    item.type = "bi.design.detail.target.filter.date";
                                    break;
                            }
                            if(item.value === BICst.ANALYSIS_FILTER_TYPE.EMPTY_CONDITION) {
                                switch (fieldType) {
                                    case BICst.COLUMN.STRING:
                                        item.value = BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE;
                                        item.filterType = BICst.ANALYSIS_FILTER_STRING.BELONG_VALUE;
                                        break;
                                    case BICst.COLUMN.NUMBER:
                                        item.value = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                                        item.filterType = BICst.ANALYSIS_FILTER_NUMBER.BELONG_VALUE;
                                        break;
                                    case BICst.COLUMN.DATE:
                                    default:
                                        item.value = BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE;
                                        item.filterType = BICst.ANALYSIS_FILTER_DATE.BELONG_VALUE;
                                        break;
                                }
                                item.node.set("data", item);
                            }
                            item.afterValueChange = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                            item.onDelete = function () {
                                self.store.setFilter(self.filter.getValue()[0]);
                            };
                        },
                        expander: {
                            type: "bi.and.or.filter.expander"
                        },
                        listeners: [{
                            eventName: "EVENT_CHANGE",
                            action: function () {
                                self.store.setFilter(this.getValue()[0]);
                            }
                        }],
                        ref: function (_ref) {
                            self.filter = _ref;
                        }
                    },
                    top: -10,
                    left: 0,
                    right: 0,
                    bottom: 0
                }]
            };
        },

        beforeInit: function (callback) {
            this.store.initFilter(callback);
        },

        getValue: function () {
            return this.store.getFilterValue();
        }
    });
    BI.shortcut("bi.design.widget.detail_table.header.filter", Filter);
}());
!(function () {
    var Model = BI.inherit(Fix.Model, {

        state: function () {
            return {
                dId: this.options.dId,
                wId: this.options.wId,
                fields: []
            };
        },

        computed: {
            conditions: function () {
                var filter = Fix.toJSON(this.model.value);
                return this._transformConditions2Tree(BI.isNotEmptyObject(filter) ? [filter] : []);
            }
        },

        actions: {
            initFilter: function (callback) {
                var self = this;
                var wId = BI.Utils.getWidgetIdBydId(this.model.dId);
                this.model.value = BI.Utils.getWidgetFilterById(wId)[this.model.dId];
                BI.Utils.getFieldsOfTable(BI.Utils.getTableNameWidgetId(wId), function (fields) {
                    self.model.fields = BI.filter(fields, function (idx, field) {
                        return field.type !== BICst.COLUMN.COUNTER && field.type !== BICst.COLUMN.TARGET_NAME;
                    });
                    callback();
                });
            },

            setFilter: function (v) {
                this.model.value = v;
            },

            getFilterValue: function () {
                return this.model.value;
            }
        },

        _transformConditions2Tree: function (conditions) {
            var self = this;
            BI.each(conditions, function (i, condition) {
                condition.id || (condition.id = BI.UUID());
                condition.value = condition.filterType;
                if (condition.filterType === BICst.ANALYSIS_FILTER_TYPE.AND || condition.filterType === BICst.ANALYSIS_FILTER_TYPE.OR) {
                    condition.children = condition.filterValue;
                    self._transformConditions2Tree(condition.children);
                }
            });
            return conditions;
        }
    });
    BI.model("bi.model.design.widget.detail_table.header.filter", Model);
}());/**
 * author: young
 * createdDate: 2018/4/8
 * description:
 */
!(function () {
    var Header = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-widget-table-header bi-design-table-cell",
            dId: "",
            text: "",
            height: 24,
            styles: {}
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.table.header", this.options);
        },

        render: function () {
            var o = this.options;
            if (BI.isNotNull(o.styles) && BI.isObject(o.styles)) {
                this.element.css(o.styles);
            }
            return {
                type: "bi.htape",
                items: this._createContent(),
                height: o.height
            };
        },

        _createContent: function () {
            var self = this, o = this.options;
            var items = [];
            if (o.needExpand) {
                items.push({
                    el: {
                        type: "bi.icon_button",
                        stopPropagation: true,
                        iconWidth: 25,
                        iconHeight: 25,
                        cls: o.isExpanded === true ? "tree-expand-icon-type1" : "tree-collapse-icon-type1",
                        handler: function () {
                            self.fireEvent("EVENT_TOGGLE_EXPAND");
                        }
                    },
                    width: 25
                });
            }
            items = items.concat([{
                el: {
                    type: "bi.design.widget.table_cell.text",
                    style: o.fontStyle,
                    el: {
                        type: "bi.label",
                        text: this.model.text,
                        title: this.model.text,
                        textAlign: o.fontStyle.textAlign,
                        height: o.height,
                        hgap: 5
                    }
                }
            }, {
                el: !this.model.isDimensionExist ? {
                    type: "bi.default",
                    width: 0
                } : {
                    type: "bi.down_list_combo",
                    cls: "sort-filter-combo",
                    ref: function (ref) {
                        self.combo = ref;
                    },
                    el: {
                        type: "bi.icon_change_button",
                        iconCls: this.model.sortFilterIcon,
                        forceNotSelected: true,
                        height: o.height,
                        width: 24
                    },
                    value: this.model.sortFilterType,
                    items: this.model.sortFilterItems,
                    listeners: [{
                        eventName: BI.DownListCombo.EVENT_CHANGE,
                        action: function () {
                            self.fireEvent("EVENT_SORT_FILTER", arguments);
                        }
                    }, {
                        eventName: BI.DownListCombo.EVENT_BEFORE_POPUPVIEW,
                        action: function () {
                            this.setValue(self.model.sortFilterType);
                        }
                    }]
                },
                width: 24
            }]);

            return items;
        }
    });
    BI.shortcut("bi.design.widget.table.header", Header);
})();/**
 * author: young
 * createdDate: 2018/4/9
 * description:
 */
!(function () {
    var FILTER_ITEM = "__filter_item__";
    var Model = BI.inherit(Fix.Model, {

        computed: {
            sortFilterType: function () {
                var o = this.options;
                var values = [];
                if (BI.isNotNull(o.filter)) {
                    values.push({value: FILTER_ITEM});
                }
                if (BI.isNotNull(o.sort)) {
                    values.push({value: o.sort.type});
                } else {
                    var type = BI.Utils.isTargetById(o.dId) ? BICst.DESIGN.SORT.NONE : BICst.DESIGN.SORT.ASC;
                    values.push({value: type});
                }
                return values;
            },
            sortFilterItems: function () {
                // 维度第一层：升序、降序、过滤，内层：组内升序、组内降序、过滤
                // 指标：升序、降序、不排序、过滤
                if (BI.Utils.isTargetById(this.options.dId)) {
                    var items = [
                        [{
                            text: BI.i18nText("BI-Basic_Ascend"),
                            value: BICst.DESIGN.SORT.ASC,
                            cls: "dot-e-font"
                        }, {
                            text: BI.i18nText("BI-Basic_Descend"),
                            value: BICst.DESIGN.SORT.DESC,
                            cls: "dot-e-font"
                        }, {
                            text: BI.i18nText("BI-Basic_No_Sort"),
                            value: BICst.DESIGN.SORT.NONE,
                            cls: "dot-e-font"
                        }]
                    ];
                    if (!BI.Utils.isCalculateTargetById(this.options.dId)) {
                        items.push([{
                            text: BI.i18nText("BI-Design_Filter"),
                            value: FILTER_ITEM,
                            cls: "dot-e-font"
                        }]);
                    }
                    return items;
                }
                var wId = BI.Utils.getWidgetIdBydId(this.options.dId);
                var regionType = BI.Utils.getRegionTypeById(this.options.dId);
                var dimIds = BI.Utils.getWidgetViewById(wId)[regionType];
                var index = dimIds.indexOf(this.options.dId);
                return [
                    [{
                        text: BI.i18nText(index === 0 ? "BI-Basic_Ascend" : "BI-Basic_Group_Ascend"),
                        value: BICst.DESIGN.SORT.ASC,
                        cls: "dot-e-font"
                    }, {
                        text: BI.i18nText(index === 0 ? "BI-Basic_Descend" : "BI-Basic_Group_Descend"),
                        value: BICst.DESIGN.SORT.DESC,
                        cls: "dot-e-font"
                    }],
                    [{
                        text: BI.i18nText("BI-Design_Filter"),
                        value: FILTER_ITEM,
                        cls: "dot-e-font"
                    }]
                ];
            },
            sortFilterIcon: function () {
                var o = this.options;
                var dId = this.options.dId;
                var nonSort = BI.isNull(o.sort) || o.sort.type === BICst.DESIGN.SORT.NONE;
                var nonFilter = BI.isNull(o.filter) || BI.isNull(o.filter.filterValue);
                if (nonSort && nonFilter) {
                    if (!BI.Utils.isTargetById(dId)) {
                        return "dimension-ascend-font";
                    }
                    return "dimension-non-sort-non-filter-font ";
                }
                if (nonSort && !nonFilter) {
                    if (!BI.Utils.isTargetById(dId)) {
                        return "dimension-ascend-filter-font";
                    }
                    return "dimension-non-sort-filter-font";
                }
                if (!nonSort && nonFilter) {
                    return o.sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-font" : "dimension-descend-font";
                }
                if (!nonSort && !nonFilter) {
                    return o.sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-filter-font" : "dimension-descend-filter-font";
                }
            },
            textAlign: function () {
                return this.model.headerFontStyle.textAlign;
            },
            text: function () {
                var text = this.options.text;
                if (BI.Utils.isTargetById(this.options.dId)) {
                    return BI.Format.headerFormat(BI.Utils.getSwitchMeasureSettingById(this.options.dId), text);
                }
                return text;
            },
            isDimensionExist: function () {
                if (this.options.dataMining || this.options.hideDownList) {
                    return false;
                }
                return BI.Utils.isDimensionExist(this.options.dId);
            }
        }
    });
    BI.model("bi.model.design.widget.table.header", Model);
})();
/**
 * created by young
 * 默认风格表格——表头
 */
!(function () {
    var NormalRowHeaderCell = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-normal-row-header-cell bi-design-table-cell",
            width: "100%",
            height: 25
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.widget.row_header", {
                wId: this.options.wId
            });
        },

        mounted: function () {
            this._digestStyle();
        },

        render: function () {
            var self = this, o = this.options;
            var wId = o.wId;
            var name = "";
            var views = BI.Utils.getWidgetViewById(wId);
            var viewType;
            // 先找到要显示哪个区域的维度
            BI.some(views, function (viewId, dimensionsIds) {
                if (BI.Utils.isDimensionRegion1ByRegionType(viewId)) {
                    viewType = viewId;
                    return true;
                }
            });
            if (BI.isNotNull(viewType)) {
                BI.each(views[viewType], function (i, dId) {
                    var dimName = BI.Utils.getDimensionNameById(dId);
                    if (name === "") {
                        name += dimName;
                    } else {
                        name += "/" + dimName;
                    }
                });
            }

            return {
                type: "bi.htape",
                items: [{
                    el: {
                        type: "bi.design.widget.table.header",
                        wId: this.options.wId,
                        text: name || BI.i18nText("BI-Row_Header"),
                        title: name || BI.i18nText("BI-Row_Header"),
                        cls: "header-cell-text",
                        needExpand: o.needExpand,
                        isExpanded: o.isExpanded,
                        listeners: [{
                            eventName: "EVENT_TOGGLE_EXPAND",
                            action: function () {
                                self.fireEvent("EVENT_TOGGLE_EXPAND", arguments);
                            }
                        }],
                        height: o.height
                    }
                }, {
                    el: {
                        type: "bi.center_adapt",
                        items: [{
                            el: {
                                type: "bi.sort_filter_dimension_tree_combo",
                                wId: wId,
                                listeners: [{
                                    eventName: "EVENT_CHANGE",
                                    action: BI.bind(self.store.setSortFilter, self.store)
                                }],
                                ref: function (ref) {
                                    self.combo = ref;
                                }
                            }
                        }],
                        width: 25,
                        height: o.height
                    },
                    width: 25
                }]
            };
        },

        _digestStyle: function () {
            var o = this.options;
            var style = o.styleGetter();
            if (style) {
                this.element.css(style);
            }
        },

        populate: function () {
            this._digestStyle();
        }
    });
    NormalRowHeaderCell.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.design.widget.row_header_cell", NormalRowHeaderCell);
})();!(function () {
    var FILTER_ITEM = "__filter_item__";
    var Model = BI.inherit(Fix.Model, {
        context: ["refreshTableChart", "wId"],
        computed: {
            sort: function () {
                var o = this.options;
                var wId = BI.Utils.getWidgetIdBydId(o.dId);
                var fieldId = BI.Utils.getFieldIdBydId(o.dId);
                return BI.Utils.getFieldSortByIdOfWidget(wId, fieldId);
            },
            filter: function () {
                return BI.Utils.getDetailDimensionFilterById(this.options.dId);
            },
            sortFilterType: function () {
                var sort = this.model.sort;
                var filter = this.model.filter;
                var values = [];
                if (BI.isNotNull(filter)) {
                    values.push({value: FILTER_ITEM});
                }
                if (BI.isNotNull(sort)) {
                    values.push({value: sort.type});
                } else {
                    values.push({value: BICst.DESIGN.SORT.NONE});
                }
                return values;
            },
            sortFilterItems: function () {
                return [
                    [{
                        text: BI.i18nText("BI-Basic_Ascend"),
                        value: BICst.DESIGN.SORT.ASC,
                        cls: "dot-e-font"
                    }, {
                        text: BI.i18nText("BI-Basic_Descend"),
                        value: BICst.DESIGN.SORT.DESC,
                        cls: "dot-e-font"
                    }],
                    [{
                        text: BI.i18nText("BI-Design_Filter"),
                        value: FILTER_ITEM,
                        cls: "dot-e-font"
                    }]
                ];
            },
            sortFilterIcon: function () {
                var sort = this.model.sort;
                var filter = this.model.filter;
                var nonSort = BI.isNull(sort) || sort.type === BICst.DESIGN.SORT.NONE;
                var nonFilter = BI.isNull(filter) || BI.isNull(filter.filterValue);
                if (nonSort && nonFilter) {
                    return "dimension-non-sort-non-filter-font ";
                }
                if (nonSort && !nonFilter) {
                    return "dimension-non-sort-filter-font";
                }
                if (!nonSort && nonFilter) {
                    return sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-font" : "dimension-descend-font";
                }
                if (!nonSort && !nonFilter) {
                    return sort.type === BICst.DESIGN.SORT.ASC ? "dimension-ascend-filter-font" : "dimension-descend-filter-font";
                }
            }
        },
        actions: {
            setSortFilter: function (v) {
                switch (v) {
                    case BICst.DESIGN.SORT.ASC:
                    case BICst.DESIGN.SORT.DESC:
                    case BICst.DESIGN.SORT.NONE:
                        this.setSort(v);
                        break;
                    default:
                        this.setFilter(v);
                }
            },
            setFilter: function (dId) {
                var name = BI.UUID();
                var self = this;
                BI.Popovers.create(name, {
                    header: BI.i18nText("BI-Design_Add_Dimension_Filter", BI.Utils.getDimensionNameById(dId)),
                    body: {
                        type: "bi.design.dimension.filter.popover.center",
                        dId: dId,
                        wId: self.options.wId,
                        ref: function (_ref) {
                            self.filterCenter = _ref;
                        }
                    },
                    type: "bi.bar_popover",
                    listeners: [{
                        eventName: "EVENT_CONFIRM",
                        action: function () {
                            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                            service.mountAttribute(dId, "filter", self.filterCenter.getValue());
                            self.model.refreshTableChart = !self.model.refreshTableChart;
                            BI.Popovers.remove(name);
                        }
                    }, {
                        eventName: "EVENT_CLOSE",
                        action: function () {
                            BI.Popovers.remove(name);
                        }
                    }]
                }).open(name);
            },
            setSort: function (v) {
                var view = BI.Utils.getWidgetViewById(this.options.wId);

                var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
                BI.each(view[BICst.REGION.DIMENSION1], function (i, id) {
                    service.mountAttribute(id, "sort", {type: v, sortTarget: id});
                });
                this.model.refreshTableChart = !this.model.refreshTableChart;
            }
        }
    });
    BI.model("bi.model.design.widget.row_header", Model);
})();/**
 * created by young
 * 默认风格表格——表头
 */
!(function () {
    var NormalSequenceHeaderCell = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-normal-sequence-header-cell bi-design-table-cell"
        },

        mounted: function () {
            this._digestStyle();
        },

        render: function () {
            var self = this, o = this.options;
            return {
                type: "bi.label",
                textAlign: "center",
                height: o.height,
                forceCenter: true,
                hgap: 5,
                text: BI.i18nText("BI-Number_Index")
            };
        },

        _digestStyle: function () {
            var o = this.options;
            var style = o.styleGetter();
            if (style) {
                this.element.css(style);
            }
        },

        populate: function () {
            this._digestStyle();
        }
    });
    NormalSequenceHeaderCell.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.design.widget.sequence_header_cell", NormalSequenceHeaderCell);
})();/**
 * author: young
 * createdDate: 2018/3/13
 * description:
 */
!(function () {
    var TableCell = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-components-data-data-table-cell bi-design-table-cell",
            dId: "",
            text: "",
            children: null,
            values: null,
            layer: 0,
            needExpand: true,
            isExpanded: true
        },

        render: function () {
            var o = this.options;
            if (BI.isNotNull(o.styles) && BI.isObject(o.styles)) {
                this.element.css(o.styles);
            }
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.absolute_center_adapt",
                        items: [{
                            type: "bi.htape",
                            items: this._createContent(),
                            height: 25
                        }]
                    },
                    left: this.options.layer * 30,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            };
        },

        _createContent: function () {
            var self = this, o = this.options;
            var items = [];
            if (o.needExpand) {
                items.push({
                    el: {
                        type: "bi.icon_button",
                        stopPropagation: true,
                        iconWidth: 25,
                        iconHeight: 25,
                        cls: o.isExpanded === true ? "tree-expand-icon-type1" : "tree-collapse-icon-type1",
                        handler: function () {
                            self.fireEvent("EVENT_TOGGLE_EXPAND");
                        }
                    },
                    width: 25
                });
            }
            var text = this.getText();
            items.push({
                type: "bi.design.widget.table_cell.text",
                style: o.fontStyle,
                el: {
                    type: "bi.text_button",
                    text: text,
                    title: text,
                    value: o.text,
                    textAlign: o.textAlign,
                    height: 25,
                    hgap: 5,
                    handler: BI.bind(this._doClick, this)
                }
            });

            if (this.options.showDrill) {
                items.push({
                    el: {
                        type: "bi.center_adapt",
                        items: [{
                            type: "bi.icon_button",
                            title: BI.i18nText("BI-Design_Drill"),
                            cls: "widget-drill widget-drill-font",
                            handler: function () {
                                self.fireEvent("EVENT_DRILL");
                            }
                        }]
                    },
                    width: 25
                });
            }

            return items;
        },

        _doClick: function () {
            if (this._isJumpEnabled()) {
                this._assertCombo();
                this.combo.populate(this._getJumpItems());
                this.combo.showView();
            }
            this.fireEvent(TableCell.EVENT_CLICK_CELL);
        },

        _assertCombo: function () {
            if (BI.isNull(this.combo)) {
                var self = this, o = this.options;
                BI.createWidget({
                    type: "bi.absolute",
                    element: this,
                    items: [{
                        el: {
                            type: "bi.down_list_combo",
                            el: {
                                type: "bi.layout"
                            },
                            trigger: "",
                            height: o.height,
                            direction: "right",
                            listeners: [{
                                eventName: BI.DownListCombo.EVENT_SON_VALUE_CHANGE,
                                action: function (v) {
                                    self._doJump(v);
                                }
                            }],
                            ref: function () {
                                self.combo = this;
                            }
                        },
                        top: 0,
                        right: 0,
                        bottom: 0
                    }]
                });
            }
        },

        getText: function () {
            var o = this.options;
            var text = o.text, dId = o.dId;
            if (!BI.Utils.isDimensionExist(dId)) {
                return text;
            }
            if (o.dimType === BICst.DESIGN.DIMENSION_TYPE.DATE) {
                var formatType = o.setting.dateFormat ? o.setting.dateFormat.type : BICst.DESIGN.DATE_FORMAT.SPLIT;
                return BI.Format.formatValueByGroupAndFormatter(text, o.groupType || BICst.GROUP.YMD, formatType);
            }
            return text;
        },

        _isJumpEnabled: function () {
            var o = this.options;
            var service = BI.Services.getService("bi.service.design.jump_setting");
            return service.hasJump(BI.Utils.getJumpByID(BI.Utils.getWidgetIdBydId(o.dId))) && BI.Utils.getWidgetOpenJumpById(BI.Utils.getWidgetIdBydId(o.dId));
        },

        _getJumpItems: function () {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            this.jumpMap = service.getJumpMap(this.options.dId);
            return service.getJumpItems(this.jumpMap);
        },

        _doJump: function (v) {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            var o = this.options;
            service.doJump(this.options.dId, this.jumpMap[v], BI.extend(o.clicked, {
                type: BICst.DESIGN.WIDGET.TABLE
            }));
        }
    });
    TableCell.EVENT_CLICK_CELL = "EVENT_CLICK_CELL";
    BI.shortcut("bi.design.widget.table_cell", TableCell);
})();/**
 * author: young
 * createdDate: 2018/8/15
 * description: 仅通过css设置样式
 */
!(function () {
    var TableCellText = BI.inherit(BI.Widget, {
        props: {
            style: {},
            el: {
                type: "bi.label"
            }
        },

        render: function () {
            var o = this.options;
            if (BI.isNotEmptyObject(o.style)) {
                this.element.css(o.style);
            }
            return o.el;
        }
    });
    BI.shortcut("bi.design.widget.table_cell.text", TableCellText);
})();/**
 * author: young
 * createdDate: 2018/4/13
 * description:
 */
!(function () {
    var TargetCell = BI.inherit(BI.Widget, {
        props: {
            baseCls: "bi-design-table-target-cell bi-design-table-cell",
            dId: "",
            text: "",
            color: "",
            shape: BICst.DESIGN.SHAPE_TYPE.NONE,
            clicked: {}
        },

        render: function () {
            var o = this.options;
            if (BI.isNotNull(o.styles) && BI.isObject(o.styles)) {
                this.element.css(o.styles);
            }
            return {
                type: "bi.absolute_center_adapt",
                items: [{
                    el: this._createContent()
                }]
            };
        },

        _createContent: function () {
            var self = this;
            var o = this.options;
            var setting = o.setting;
            var text = BI.Format.numberFormat(o.text, {
                formatStyle: setting.formatStyle,
                formatDecimal: setting.formatDecimal,
                numLevel: setting.numLevel,
                numSeparators: setting.numSeparators,
                unit: setting.unit
            });
            if (this.options.color) {
                this.options.fontStyle.color = this.options.color;
            }

            return {
                type: "bi.design.widget.target_cell.trigger",
                text: text,
                iconCls: this.getShapeIcon(),
                style: o.fontStyle,
                listeners: [{
                    eventName: "EVENT_CHANGE",
                    action: BI.bind(this._doClick, this)
                }]
            };
        },

        getShapeIcon: function () {
            var shape = this.options.shape;
            switch (shape) {
                case BICst.DESIGN.SHAPE_TYPE.MIN_DOT:
                    return "min-dot-font";
                case BICst.DESIGN.SHAPE_TYPE.MID_DOT:
                    return "mid-dot-font";
                case BICst.DESIGN.SHAPE_TYPE.MAX_DOT:
                    return "max-dot-font";
                case BICst.DESIGN.SHAPE_TYPE.MIN_ARROW:
                    return "min-arrow-font";
                case BICst.DESIGN.SHAPE_TYPE.MID_ARROW:
                    return "mid-arrow-font";
                case BICst.DESIGN.SHAPE_TYPE.MAX_ARROW:
                    return "max-arrow-font";
                default:
                    return null;
            }
        },

        _doClick: function () {
            if (this._isJumpEnabled() || this._isCalculateTarget()) {
                this._assertCombo();
                this.combo.showView();
            } else {
                this.fireEvent("EVENT_CLICK_CELL", this.options.dId);
            }
        },

        _assertCombo: function () {
            if (BI.isNull(this.combo)) {
                var self = this, o = this.options;
                BI.createWidget({
                    type: "bi.absolute",
                    element: this,
                    items: [{
                        el: {
                            type: "bi.down_list_combo",
                            el: {
                                type: "bi.layout"
                            },
                            height: o.height,
                            width: 0,
                            trigger: "",
                            direction: "right",
                            listeners: [{
                                eventName: BI.DownListCombo.EVENT_CHANGE,
                                action: function (v) {
                                    self.fireEvent("EVENT_CLICK_CELL", v);
                                }
                            }, {
                                eventName: BI.DownListCombo.EVENT_SON_VALUE_CHANGE,
                                action: function (v) {
                                    self._doJump(v);
                                }
                            }, {
                                eventName: BI.DownListCombo.EVENT_BEFORE_POPUPVIEW,
                                action: function () {
                                    self.combo.populate(self._getPopupItems());
                                }
                            }],
                            ref: function (ref) {
                                self.combo = ref;
                            }
                        },
                        top: 0,
                        right: 0,
                        bottom: 0
                    }]
                });
            }
        },

        _getPopupItems: function () {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            if (this._isJumpEnabled()) {
                this.jumpMap = service.getJumpMap(this.options.dId);
                var items = service.getJumpItems(this.jumpMap);
                if(!BI.Utils.isCalculateTargetById(this.options.dId)) {
                    items.splice(0, 0, [{
                        text: BI.i18nText("BI-Design_Link_By", this.options.dimFieldName),
                        value: this.options.dId
                    }]);
                    return items;
                }
            }
            var tableChartService = BI.Services.getService("bi.service.design.widgets.table_chart");
            return tableChartService.getCalTargetLinkagePopupItems(this.options.dId);
        },
        _isJumpEnabled: function () {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            var wId = BI.Utils.getWidgetIdBydId(this.options.dId);
            return service.hasJump(BI.Utils.getJumpByID(wId)) && BI.Utils.getWidgetOpenJumpById(wId);
        },
        _isCalculateTarget: function () {
            if (!BI.Utils.isCalculateTargetById(this.options.dId)) {
                return false;
            }
            var tars = BI.Utils.getCalculateTargetIdsById(this.options.dId);
            tars = BI.filter(tars, function (i, fId) {
                // 计算指标可使用日期类控件，但联动时候不展示
                // BI-26538 区间类控件的key与一般时间控件不同
                return !(BI.Utils.isWidgetExistById(fId) || fId.endWith(BICst.PREFIX.TIME_START) || fId.endWith(BICst.PREFIX.TIME_END));

            });
            return tars.length > 0;
        },

        _doJump: function (v) {
            var service = BI.Services.getService("bi.service.design.jump_setting");
            var o = this.options;
            service.doJump(this.options.dId, this.jumpMap[v], BI.extend(o.clicked, {
                type: BICst.DESIGN.WIDGET.TABLE
            }));
        }
    });
    BI.shortcut("bi.design.widget.target_cell", TargetCell);
})();/**
 * author: young
 * createdDate: 2018/5/7
 * description:
 */

!(function () {
    var Trigger = BI.inherit(BI.BasicButton, {
        props: {
            text: "",
            iconCls: null,
            height: 25,
            style: {}
        },

        render: function () {
            var self = this, o = this.options;
            var items = [{
                type: "bi.design.widget.table_cell.text",
                style: o.style,
                el: {
                    type: "bi.label",
                    text: o.text,
                    title: o.text,
                    value: o.value,
                    height: o.height,
                    textAlign: o.style.textAlign,
                    hgap: 5,
                    keyword: o.keyword,
                    ref: function (ref) {
                        self.text = ref;
                    }
                }
            }];
            if (BI.isNotNull(o.iconCls)) {
                items.push({
                    el: {
                        type: "bi.center_adapt",
                        cls: o.iconCls,
                        items: [{
                            type: "bi.icon"
                        }],
                        width: 24,
                        height: o.height
                    },
                    width: 24
                });
            }
            return {
                type: "bi.htape",
                items: items
            };
        },

        setValue: function () {
            if (!this.isReadOnly()) {
                this.text.setValue.apply(this.text, arguments);
            }
        },

        getValue: function () {
            return this.text.getValue();
        },

        setText: function () {
            this.text.setText.apply(this.text, arguments);
        },

        getText: function () {
            return this.text.getText();
        },

        doClick: function () {
            Trigger.superclass.doClick.apply(this, arguments);
            if (this.isValid()) {
                this.fireEvent("EVENT_CHANGE", this.getValue(), this);
            }
        },

        doRedMark: function () {
            this.text.doRedMark.apply(this.text, arguments);
        },

        unRedMark: function () {
            this.text.unRedMark.apply(this.text, arguments);
        },

        doHighLight: function () {
            this.text.doHighLight.apply(this.text, arguments);
        },

        unHighLight: function () {
            this.text.unHighLight.apply(this.text, arguments);
        }
    });
    BI.IconTextItem.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.design.widget.target_cell.trigger", Trigger);
})();!(function () {
    var CrossTable = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-cross-table"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.cross_table");
        },

        watch: {
            "refresh || resize || templateTableStyle.**": function () {
                this._populate();
            },
            "style || style.** || widgetBg.**": function () {
                this._setTableStyle();
            },
            loading: function (loading) {
                loading && this.loading();
            }
        },

        mounted: function () {
            var self = this;
            var service = BI.Services.getService("bi.service.table.style");
            service.setTableStyle(this.model.wId);
            this._resizeHandler = BI.debounce(function () {
                if (BI.isNull(self.table) || BI.isNull(self.store)) {
                    return;
                }
                var width = self._getTableWidth(), height = self._getTableHeight();
                if (self.table.getWidth() !== width || self.table.getHeight() !== height) {
                    self.store.resizeTable();
                }
            }, 0);

            this.populate();
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.button_group",
                        items: [this._tableCreator()],
                        ref: function (ref) {
                            self.tableContainer = ref;
                        }
                    },
                    left: 10,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            };
        },

        _tableCreator: function () {
            var self = this;
            var publicAttr = {
                type: "bi.page_table",
                width: this._getTableWidth(),
                height: this._getTableHeight(),
                isNeedFreeze: null,
                isNeedMerge: true,
                listeners: [{
                    eventName: BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE,
                    action: function () {
                        self.store.setRegionColumnSize(this.getRegionColumnSize());
                    }
                }, {
                    eventName: BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE,
                    action: function () {
                        self.store.setColumnSize(this.getColumnSize());
                    }
                }],
                ref: function (ref) {
                    self.table = ref;
                },
                summaryCellStyleGetter: BI.bind(this.store.summaryCellStyleGetter, this.store),
                sequenceCellStyleGetter: BI.bind(this.store.sequenceCellStyleGetter, this.store),
                sequenceHeaderStyleGetter: BI.bind(this.store.sequenceHeaderStyleGetter, this.store),
                headerCellStyleGetter: BI.bind(this.store.headerCellStyleGetter, this.store),
                mergeRule: BI.Services.getService("bi.service.table").mergeRule,
                itemsCreator: BI.bind(this._tableItemsCreator, this),
                pager: this._pagerCreator()
            };
            this.tableForm = this.model.tableForm;
            switch (this.tableForm) {
                case BICst.TABLE_TYPE.TREE:
                    return BI.extend(publicAttr, {
                        el: {
                            type: "bi.sequence_table",
                            el: {
                                type: "bi.dynamic_summary_layer_tree_table",
                                rowHeaderCreator: BI.bind(self.store.getRowHeader, self.store),
                                el: {
                                    type: "bi.adaptive_table",
                                    el: {
                                        type: "bi.resizable_table",
                                        el: {
                                            type: "bi.collection_table"
                                        }
                                    }
                                }
                            },
                            sequence: {
                                type: "bi.sequence_table_tree_number",
                                sequenceHeaderCreator: function () {
                                    return {
                                        type: "bi.design.widget.sequence_header_cell",
                                        styleGetter: publicAttr.sequenceHeaderStyleGetter
                                    };
                                }
                            }
                        }
                    });
                default :
                    return BI.extend(publicAttr, {
                        el: {
                            type: "bi.sequence_table",
                            el: {
                                type: "bi.dynamic_summary_tree_table",
                                el: {
                                    type: "bi.adaptive_table",
                                    el: {
                                        type: "bi.resizable_table",
                                        el: {
                                            type: "bi.collection_table"
                                        }
                                    }
                                }
                            },
                            sequence: {
                                type: "bi.sequence_table_dynamic_number",
                                sequenceHeaderCreator: function () {
                                    return {
                                        type: "bi.design.widget.sequence_header_cell",
                                        styleGetter: publicAttr.sequenceHeaderStyleGetter,
                                        height: self.model.sequenceHeaderRowSize
                                    };
                                }
                            }
                        }
                    });
            }
        },

        // 页码
        _pagerCreator: function () {
            var self = this;
            return {
                pages: false,
                curr: 1,
                firstPage: 1,
                horizontal: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用
                    hasPrev: BI.bind(this.store.hasXPrev, this.store),
                    hasNext: BI.bind(this.store.hasXNext, this.store),
                    firstPage: 1,
                    lastPage: BI.emptyFn
                },
                vertical: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用
                    hasPrev: BI.bind(this.store.hasYPrev, this.store),
                    hasNext: BI.bind(this.store.hasYNext, this.store),
                    firstPage: 1,
                    lastPage: BI.emptyFn
                },
                ref: function (ref) {
                    self.pager = ref;
                }
            };
        },

        // 翻页操作
        _tableItemsCreator: function (op) {
            var vPage = op.vpage, hPage = op.hpage;
            var service = BI.Services.getService("bi.service.table");
            var pageOperator = service.getPageOperatorByPages(vPage, hPage, this.model.vPage, this.model.hPage);
            if (this.model.hPage !== hPage) {
                this.table.setLeftHorizontalScroll(0);
                this.table.setRightHorizontalScroll(0);
            }
            if (this.model.vPage !== vPage) {
                this.table.setVerticalScroll(0);
            }
            this.store.setHPage(hPage);
            this.store.setVPage(vPage);
            this.store.setPageOperator(pageOperator);
            this.pageChange = true;
            this.pager.setEnable(false);
            this.store.refreshTable();
        },

        _getTableWidth: function () {
            return this.element.width() - 10;
        },

        _getTableHeight: function () {
            return this.element.height();
        },

        resize: function () {
            this._resizeHandler();
        },

        _populate: function () {
            if (this.tableForm !== this.model.tableForm) {
                this.tableForm = this.model.tableForm;
                this.tableContainer.populate([this._tableCreator()]);
            }
            this.pager.setEnable(true);
            this.table.setVPage(this.model.vPage);
            this.table.setHPage(this.model.hPage);
            this.table.setWidth(this._getTableWidth());
            this.table.setHeight(this._getTableHeight());
            this.table.attr("minColumnSize", this.store.getMinColumnSize());
            this.table.attr("columnSize", this.getColumnSize());
            this.table.attr("regionColumnSize", this.model.regionColumnSize);
            this.table.attr("isNeedFreeze", true);
            this.table.attr("showSequence", this.model.showSequence);
            this.table.attr("freezeCols", this.model.freezeCols);
            this.table.attr("mergeCols", this.model.mergeCols);
            this.table.attr("headerRowSize", this.model.headerRowSize);
            this.table.attr("rowSize", this.model.rowSize);
            try {
                this.table.populate(this.store.getItems(), this.store.getHeader(), this.store.getCrossItems(), this.store.getCrossHeader());
            } catch (e) {
                // exception during populate table
                this.store.setError("exception during populate table !");
            } finally {
                !this.model.loading && this.loaded();
            }
        },

        _setTableStyle: function () {
            var service = BI.Services.getService("bi.service.table.style");
            service.setTableStyle(this.model.wId);
        },

        setTableColumnEqualDivide: function () {
            this.store.setEqualDivideColumn(this._getTableWidth());
            this._populate();
        },

        getColumnSize: function () {
            var columnSize = this.store.getColumnSize();
            if (this.store.isDefaultColumnSize()) {
                var service = BI.Services.getService("bi.service.table");
                return service.calculateColumnSize(columnSize, this._getTableWidth());
            }
            return columnSize;
        },

        populate: function () {
            if (this.pageChange === false) {
                this.store.setPageOperator(BICst.DESIGN.TABLE_PAGE_OPERATOR.REFRESH);
                this.store.setHPage(1);
                this.store.setVPage(1);
                this.store.resetAttr();
            }
            this.pageChange = false;
            this.store.initData();
        }
    });
    CrossTable.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.cross_table", CrossTable);
})();/**
 * author: young
 * createdDate: 2018/3/26
 * description:
 */
!(function () {
    var Model = BI.inherit(Fix.Model, {

        _init: function () {
            this.service = BI.Services.getService("bi.service.table");
            this._initTrees();
            this._initAttributes();
            this.targetTagMap = {};
        },

        context: ["widget", "templateStyle", "error", "refreshTableChart", "dataMiningError", "drillControl"],

        state: function () {
            return {
                resize: true,
                pageOperator: BICst.DESIGN.TABLE_PAGE_OPERATOR.REFRESH,
                page: [0, 0, 0, 0, 0],
                vPage: 1,
                hPage: 1,
                refresh: false,
                loading: false
            };
        },

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            templateTableStyle: function () {
                return this.model.templateStyle.style.table;
            },
            style: function () {
                return this.model.templateStyle.style;
            },
            widgetBg: function () {
                return this.model.widget.settings.widgetBackground;
            },
            view: function () {
                return this.model.widget.view || {};
            },
            settings: function () {
                return this.model.widget.settings;
            },
            dimIds: function () {
                var ids = [];
                BI.each(this.model.widget.view[BICst.REGION.DIMENSION1], function (i, dId) {
                    BI.Utils.isDimensionValidById(dId) && ids.push(dId);
                });
                return ids;
            },
            crossDimIds: function () {
                var ids = [];
                BI.each(this.model.widget.view[BICst.REGION.DIMENSION2], function (i, dId) {
                    BI.Utils.isDimensionValidById(dId) && ids.push(dId);
                });
                return ids;
            },
            targetIds: function () {
                var ids = [];
                BI.each(this.model.widget.view[BICst.REGION.TARGET1], function (i, dId) {
                    BI.Utils.isDimensionValidById(dId) && ids.push(dId);
                });
                return ids;
            },
            regionColumnSize: function () {
                return this.model.widget.regionColumnSize;
            },
            mergeCols: function () {
                var mergeCols = [];
                BI.each(this.model.dimIds, function (i, id) {
                    mergeCols.push(i);
                });
                return mergeCols;
            },
            isNeedFreeze: function () {
                return this.model.tableStyle.freezeDim;
            },
            freezeCols: function () {
                var freezeCols = [];
                BI.each(this.model.dimIds, function (i, id) {
                    freezeCols.push(i);
                });
                return this.model.isNeedFreeze ? freezeCols : [];
            },
            // tableAttr
            tableAttr: function () {
                return this.model.settings.tableAttr;
            },

            // tableStyle
            tableStyle: function () {
                return this.model.settings.tableStyle;
            },
            tableForm: function () {
                return this.model.tableStyle.form;
            },
            showSequence: function () {
                return this.model.tableStyle.showSequence;
            },
            showColSum: function () {
                var metric = this.model.tableStyle.metric;
                return metric.show && metric.position !== BICst.TABLE_AGG_METHOD_SHOW.ROW;
            },
            sequenceHeaderRowSize: function () {
                return this.model.tableStyle.rowHeight * (this.model.crossDimIds.length + 1);
            },
            headerRowSize: function () {
                return this.model.tableStyle.rowHeight;
            },
            rowSize: function () {
                return this.model.tableStyle.rowHeight;
            },
            openRowNode: function () {
                return this.model.tableStyle.expandRowHeader;
            },
            openColNode: function () {
                return this.model.tableStyle.expandColHeader;
            },
            headerExpand: function () {
                var expand = {}, self = this;
                var view = this.model.widget.view;
                var dims = view[BICst.REGION.DIMENSION1];
                BI.each(dims.slice(0, dims.length - 1), function (i, did) {
                    expand[did] = self.model.openRowNode || false;
                });
                return expand;
            },
            crossHeaderExpand: function () {
                var expand = {}, self = this;
                var view = this.model.widget.view;
                var dims = view[BICst.REGION.DIMENSION2];
                BI.each(dims.slice(0, dims.length - 1), function (i, did) {
                    expand[did] = self.model.openColNode || false;
                });
                return expand;
            },
            // 最终的样式
            themeColor: function () {
                return BI.Utils.getResTableThemeColorById(this.model.wId);
            },
            crossStyle: function () {
                return BI.Utils.getResTableStyleTypeById(this.model.wId);
            },
            resTableFont: function () {
                return BI.Utils.getResTableFontById(this.model.wId);
            },
            resTableBodyDimFont: function () {
                return BI.Services.getService("bi.service.table").getBodyDimCellFontStyle(this.model.resTableFont.body);
            },
            resTableHeaderFont: function () {
                return BI.Services.getService("bi.service.table").getHeaderCellFontStyle(this.model.resTableFont.header);
            }
        },

        actions: {
            initData: function () {
                var self = this;
                if (this.service.isEmptyWidget(this.model.wId)) {
                    return;
                }
                this.model.loading = true;
                BI.Utils.getWidgetDataByID(this.model.wId, {
                    success: function (res) {
                        self.model.error = {
                            errorCode: res.errorCode,
                            message: res.errorMsg
                        };
                        self._calculateTableAttributes(res.data);
                        self.model.dataMiningError = {
                            message: res.data && res.data.error
                        };
                        self.model.loading = false;
                    }
                }, {
                    rowExpand: this.service.formatExpanderTree(this.eTree.toJSONWithNode()),
                    colExpand: this.service.formatExpanderTree(this.crossETree.toJSONWithNode()),
                    headerExpand: this.model.headerExpand,
                    crossHeaderExpand: this.model.crossHeaderExpand,
                    expandClick: this.expandClick,
                    page: this.model.pageOperator
                });
            },
            expandPage: function () {
                this.setPageOperator(BICst.DESIGN.TABLE_PAGE_OPERATOR.EXPAND);
            },
            resetAttr: function () {
                this._initTrees();
            },
            resizeTable: function () {
                this.model.resize = !this.model.resize;
            },
            setRegionColumnSize: function (regionColumnSize) {
                this.model.widget.regionColumnSize = regionColumnSize;
            },
            setColumnSize: function (columnSize) {
                this.model.widget.columnSize = columnSize;
            },
            setPageOperator: function (pageOperator) {
                this.model.pageOperator = pageOperator;
                if (pageOperator === BICst.DESIGN.TABLE_PAGE_OPERATOR.COLUMN_NEXT ||
                    pageOperator === BICst.DESIGN.TABLE_PAGE_OPERATOR.COLUMN_PRE) {
                    this.model.widget.columnSize = [];
                }
            },
            setHPage: function (hPage) {
                this.model.hPage = hPage;
            },
            setVPage: function (vPage) {
                this.model.vPage = vPage;
            },
            summaryCellStyleGetter: function (isLast) {
                return this.service.summaryCellStyleGetter(this.model.wId, isLast);
            },
            sequenceCellStyleGetter: function (index) {
                return this.service.sequenceCellStyleGetter(this.model.wId, index);
            },
            sequenceHeaderStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.crossStyle, this.model.resTableFont);
            },
            headerCellStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.crossStyle, this.model.resTableFont);
            },
            hasXPrev: function () {
                return this.model.hasXPrev;
            },
            hasXNext: function () {
                return this.model.hasXNext;
            },
            hasYPrev: function () {
                return this.model.hasYPrev;
            },
            hasYNext: function () {
                return this.model.hasYNext;
            },
            getRowHeader: function () {
                var self = this;
                var expand = this._getRowHeaderExpand();
                return {
                    type: "bi.design.widget.row_header_cell",
                    wId: this.model.wId,
                    styleGetter: BI.bind(this.headerCellStyleGetter, this),
                    needExpand: expand.needExpand,
                    isExpanded: expand.isExpanded,
                    listeners: [{
                        eventName: "EVENT_TOGGLE_EXPAND",
                        action: function () {
                            BI.each(self.model.headerExpand, function (idx) {
                                self.model.headerExpand[idx] = !expand.isExpanded;
                            });
                            self.eTree.getRoot().removeAllChilds();
                            self.expandPage();
                            self.initData();
                        }
                    }]
                };
            },
            setEqualDivideColumn: function (width) {
                var sizeOB = this.service.doEqualDivideColumnSize(width, this.minColumnSize.length, this.model.dimIds.length);
                this.setColumnSize(sizeOB.columnSize);
                this.setRegionColumnSize(sizeOB.regionColumnSize);
            },
            refreshTable: function () {
                this.model.refreshTableChart = !this.model.refreshTableChart;
            },
            triggerWidgetDrill: function (v) {
                this.model.drillControl.value = v;
                this.model.drillControl.trigger = !this.model.drillControl.trigger;
            },
            setError: function (error) {
                this.model.error = {
                    errorCode: -1,
                    message: error
                };
            }
        },

        getItems: function () {
            return this.items;
        },
        getHeader: function () {
            return this.header;
        },
        getCrossItems: function () {
            return this.crossItems;
        },
        getCrossHeader: function () {
            return this.crossHeader;
        },

        getMinColumnSize: function () {
            return this.minColumnSize;
        },

        getColumnSize: function () {
            return this.columnSize;
        },

        _calculateTableAttributes: function (data) {
            this.service.initTableCacheMap().apply(this);
            this.crossItems = this._formatCrossItems(data.top.items);
            this.items = this._formatItems(data.left.items);
            this.header = this._formatHeader(data.left.header);
            this.crossHeader = this._formatHeader(data.top.header);
            this.minColumnSize = this._calMinColumnSize();
            this.columnSize = this._calColumnSize();
            this.model.hasXPrev = data.hasXPrev;
            this.model.hasXNext = data.hasXNext;
            this.model.hasYPrev = data.hasYPrev;
            this.model.hasYNext = data.hasYNext;
            this.model.refresh = !this.model.refresh;
        },

        _calMinColumnSize: function () {
            var columnCache = this.service.transformItems(this.items, this.model.dimIds);
            BI.each(this.header, function (i, item) {
                BI.isNull(columnCache[i]) && (columnCache[i] = []);
                columnCache[i].push(BI.extend({
                    isHeader: true
                }, item));
            });
            // 加上最外层crossItems
            BI.each(this.crossHeader, function (i, item) {
                BI.isNull(columnCache[0]) && (columnCache[0] = []);
                columnCache[0].push(item);
            });

            function travelCrossItems (crossItems, ob) {
                BI.each(crossItems, function (i, item) {
                    if (BI.isNotEmptyArray(item.children)) {
                        travelCrossItems(item.children, ob);
                        // 子节点无子节点认为是最后一层
                        if (item.values && item.values.length > 0) {
                            BI.isNull(columnCache[ob.index]) && (columnCache[ob.index] = []);
                            columnCache[ob.index].push({
                                text: BI.i18nText("BI-Summary_Value")
                            });
                            ob.index++;
                        }
                    } else {
                        BI.isNull(columnCache[ob.index]) && (columnCache[ob.index] = []);
                        columnCache[ob.index].push(item);
                        ob.index++;
                    }
                });
            }

            if (this._isOnlyCrossAndTarget() && BI.isNotNull(this.items)) {
                var index = 1;
                if (this.items[0].children.length === 0) {
                    index = 0;
                }
                var indexOB = {index: index};
                travelCrossItems(this.crossItems, indexOB);
            }
            return this.service.calculateMinColumnSize(columnCache);
        },
        _calColumnSize: function () {
            var self = this;
            var columnSize = this.model.widget.columnSize;
            if (this.isDefaultColumnSize()) {
                return this.minColumnSize.slice();
            }
            BI.each(columnSize, function (i, size) {
                if (size === 0) {
                    columnSize[i] = self.minColumnSize[i];
                }
            });
            return columnSize;
        },

        isDefaultColumnSize: function () {
            var columnSize = this.model.widget.columnSize;
            return this.minColumnSize.length !== columnSize.length;
        },

        _formatItems: function (items, parentValue, index, pNode) {
            var crossPV = [];
            this._calculateCrossPV(this.crossItems, [], crossPV);
            // 最后target个数的去掉
            var tarLen = this.model.targetIds.length;
            if (crossPV.length > 1) {
                BI.each(crossPV, function (i) {
                    if (i >= (crossPV.length - tarLen)) {
                        crossPV[i] = [];
                    }
                });
            }
            if (this._isOnlyCrossAndTarget() && BI.isNotNull(items)) {
                // 加上单位
                var children = items.length > 0 ? items[0].children : [];
                BI.each(children, function (i, child) {
                    child.text = BI.Format.headerFormat(BI.Utils.getSwitchMeasureSettingById(child.dId), child.text);
                });
            }
            return this.service.formatItems(items, parentValue, index, pNode, {
                tree: this.tree,
                treeMap: this.treeMap,
                cellCreator: BI.bind(this._cellCreator, this),
                crossPV: crossPV,
                isLastSum: true
            });
        },

        _calculateCrossPV: function (items, pv, crossPV) {
            var self = this;
            BI.each(items, function (i, item) {
                var tmpPV = pv.slice();
                if (BI.isNotNull(item.dId)) {
                    tmpPV.push({
                        dId: item.dId,
                        text: item.text,
                        fieldId: BI.Utils.getResultDimensionFieldIdById(item.dId)
                    });
                }
                if (item.children && item.children.length > 0) {
                    self._calculateCrossPV(item.children, tmpPV, crossPV);
                    if (item.values && item.values.length > 0 &&
                        (BI.isNull(item.children[0].children) || item.children[0].children.length === 0)) {
                        BI.each(item.values, function () {
                            crossPV.push(tmpPV);
                        });
                    }
                } else {
                    if (item.values && item.values.length > 0) {
                        BI.each(item.values, function () {
                            crossPV.push(tmpPV);
                        });
                    } else {
                        crossPV.push(tmpPV);
                    }
                }
            });
        },

        _cellCreator: function (cell, value, index, pNode, nodeId, isLastSum) {
            var self = this;
            var dId = cell.dId;
            var styles = isLastSum ?
                this.service.getLastSummaryStyles(this.model.themeColor, this.model.crossStyle) :
                (index % 2 === 0 ? this.oddBodyStyle : this.evenBodyStyle);
            var clicked = {
                dId: cell.dId,
                value: value
            };
            if (cell.isValue) {
                return BI.extend(cell, {
                    type: "bi.design.widget.target_cell",
                    styles: styles,
                    clicked: clicked,
                    setting: this.switchMeasureSettingMap[dId] || {},
                    dimFieldName: this.dimFieldNameMap[dId],
                    fontStyle: this.service.getBodyTarCellFontStyle(this.bodyFont),
                    listeners: [{
                        eventName: "EVENT_CLICK_CELL",
                        action: function (id) {
                            var fieldId = BI.Utils.isCalculateTargetById(dId) ? id : BI.Utils.getFieldIdBydId(dId);
                            self._link(dId, value, fieldId);
                        }
                    }]
                });
            }
            var expand = this._getExpand(dId, nodeId);
            var regionType = BI.Utils.getRegionTypeById(dId);
            var isHeader = regionType === BICst.REGION.DIMENSION2 ||
                regionType === BICst.REGION.TARGET1;
            return BI.extend(cell, {
                type: "bi.design.widget.table_cell",
                styles: styles,
                needExpand: expand.needExpand,
                isExpanded: expand.isExpanded,
                wId: this.model.wId,
                clicked: {
                    dId: cell.dId,
                    value: value
                },
                dimType: this.resDimensionTypeMap[dId],
                groupType: this.resDimensionGroupTypeMap[dId],
                setting: this.resMeasureSettingMap[dId],
                fontStyle: this.service.getCellFontStyle(isHeader ? this.headerFont : this.bodyFont),
                textAlign: this.service.getCellFontTextAlign(isHeader ? this.headerFont.fontAlign : this.bodyFont.dimFontAlign),
                showDrill: this.showDrillMap[dId],
                listeners: [{
                    eventName: "EVENT_CLICK_CELL",
                    action: function () {
                        self._link(cell.dId, value, BI.Utils.getFieldIdBydId(cell.dId));
                    }
                }, {
                    eventName: "EVENT_TOGGLE_EXPAND",
                    action: function () {
                        self.expandClick = {
                            type: BICst.EXPAND_TYPE.CELL,
                            dId: dId
                        };
                        self.service.toggleCellExpand(self.eTree, self.tree, self.treeMap, pNode, nodeId, self.model.openRowNode, self.model.headerExpand);
                        self.expandPage();
                        self.initData();
                    }
                }, {
                    eventName: "EVENT_DRILL",
                    action: function () {
                        var drillValue = BI.map(value, function (i, it) {
                            return {
                                dId: it.dId,
                                value: it.text,
                                fieldId: it.fieldId,
                                hide: it.dId !== dId
                            };
                        });
                        self.triggerWidgetDrill(drillValue);
                    }
                }]
            });
        },

        _formatCrossItems: function (items, parentValue, index, pNode) {
            return this.service.formatItems(items, parentValue, index, pNode, {
                tree: this.crossTree,
                treeMap: this.treeMap,
                cellCreator: BI.bind(this._crossCellCreator, this)
            });
        },

        _crossCellCreator: function (cell, value, index, pNode, nodeId) {
            var self = this, dId = cell.dId;
            if (BI.Utils.isTargetById(cell.dId)) {
                if (BI.isNull(this.targetTagMap[cell.dId])) {
                    this.targetTagMap[cell.dId] = BI.UUID();
                }
                cell.text = BI.i18nText("BI-Summary_Values") + ":" + cell.text;
                return BI.extend(cell, this._headerCreator(cell, this.targetTagMap[cell.dId]));
            }
            var expand = this._getExpand(cell.dId, nodeId);
            var regionType = BI.Utils.getRegionTypeById(dId);
            var isHeader = regionType === BICst.REGION.DIMENSION2 ||
                regionType === BICst.REGION.TARGET1;
            return BI.extend(cell, {
                type: "bi.design.widget.table_cell",
                styles: this.service.getHeaderStyles(this.model.themeColor, this.model.crossStyle),
                needExpand: expand.needExpand,
                isExpanded: expand.isExpanded,
                wId: this.model.wId,
                tag: BI.UUID(),
                clicked: {
                    dId: cell.dId,
                    value: value
                },
                dimType: this.resDimensionTypeMap[dId],
                groupType: this.resDimensionGroupTypeMap[dId],
                setting: this.resMeasureSettingMap[dId],
                fontStyle: this.service.getCellFontStyle(isHeader ? this.headerFont : this.bodyFont),
                textAlign: this.service.getCellFontTextAlign(isHeader ? this.headerFont.fontAlign : this.bodyFont.dimFontAlign),
                showDrill: this.showDrillMap[dId],
                listeners: [{
                    eventName: "EVENT_CLICK_CELL",
                    action: function () {
                        Fix.set(self.model.widget, "clicked", {
                            dId: cell.dId,
                            value: value
                        });
                    }
                }, {
                    eventName: "EVENT_TOGGLE_EXPAND",
                    action: function () {
                        self.expandClick = {
                            type: BICst.EXPAND_TYPE.CROSS_CELL,
                            dId: cell.dId
                        };
                        self.service.toggleCellExpand(self.crossETree, self.crossTree, self.treeMap, pNode, nodeId, self.model.openColNode, self.model.crossHeaderExpand);
                        self.expandPage();
                        self.initData();
                    }
                }, {
                    eventName: "EVENT_DRILL",
                    action: function () {
                        var drillValue = BI.map(value, function (i, it) {
                            return {
                                dId: it.dId,
                                value: it.text,
                                fieldId: it.fieldId,
                                hide: it.dId !== cell.dId
                            };
                        });
                        self.triggerWidgetDrill(drillValue);
                    }
                }]
            });
        },

        _getCrossLastRow: function (items, row) {
            var self = this;
            var isLast = false;
            BI.each(items, function (i, item) {
                if (BI.isNotNull(item.children)) {
                    self._getCrossLastRow(item.children, row);
                    if (self.model.showColSum && BI.isNotNull(item.values)) {
                        row.push(item.values[0]);
                    }
                } else {
                    row.push(item);
                    isLast = true;
                }
            });
            return isLast;
        },

        _formatHeader: function (header) {
            var self = this;
            // 最后n个使用同上面的 仅包含一个指标的时候合并到上一行
            if (this.model.targetIds.length === 1) {
                var crossLastRow = [];
                this._getCrossLastRow(this.crossItems, crossLastRow);
            }
            return BI.map(header, function (i, item) {
                var size = header.length - self.model.targetIds.length;
                if (BI.Utils.isTargetById(item.dId)) {
                    if (size <= i && self.model.showColSum) {
                        return self._headerCreator(item, self.targetTagMap[self.model.targetIds[i - size]]);
                    }
                    if (self.model.targetIds.length === 1 && self.model.crossDimIds.length > 0) {
                        return self._headerCreator(item, crossLastRow[i - self.model.dimIds.length].tag);
                    }
                }
                return self._headerCreator(item);
            });
        },

        _headerCreator: function (header, tag) {
            var self = this;
            var expand = this._getHeaderExpand(header.dId);
            header.wId = this.model.wId;
            tag = tag || BI.UUID();
            return BI.extend({}, header, {
                type: "bi.design.widget.table.header",
                styles: this.service.getHeaderStyles(this.model.themeColor, this.model.crossStyle),
                needExpand: expand.needExpand,
                isExpanded: expand.isExpanded,
                sort: this.sortMap[header.dId],
                filter: this.filterMap[header.dId],
                tag: tag,
                fontStyle: this.service.getHeaderCellFontStyle(this.headerFont),
                listeners: [{
                    eventName: "EVENT_TOGGLE_EXPAND",
                    action: function () {
                        var isDimension1 = BI.Utils.getRegionTypeById(header.dId) === BICst.REGION.DIMENSION1;
                        var clickType = isDimension1 ? BICst.EXPAND_TYPE.HEADER : BICst.EXPAND_TYPE.CROSS_HEADER;
                        var headerExpand = isDimension1 ? self.model.headerExpand : self.model.crossHeaderExpand;
                        var tree = isDimension1 ? self.eTree : self.crossETree;
                        var openNode = isDimension1 ? self.model.openRowNode : self.model.openColNode;
                        self.expandClick = {
                            type: clickType,
                            dId: header.dId
                        };
                        self.service.toggleHeaderExpand(header.dId, headerExpand, tree, self.model.view, openNode, expand.isExpanded);
                        self.expandPage();
                        self.initData();
                    }
                }, {
                    eventName: "EVENT_SORT_FILTER",
                    action: function (v) {
                        self.service.setSortFilter(header.dId, v, function () {
                            self.refreshTable();
                        });
                    }
                }]
            });
        },

        _getExpand: function (dId, nodeId) {
            var view = this.model.widget.view;
            var viewType = BI.Utils.getRegionTypeById(dId);
            var headerExpand = viewType === BICst.REGION.DIMENSION1 ? this.model.headerExpand : this.model.crossHeaderExpand;
            var openNode = viewType === BICst.REGION.DIMENSION1 ? this.model.openRowNode : this.model.openColNode;
            var needExpand = !BI.Utils.isTargetById(dId),
                isExpanded = headerExpand[dId] !== openNode ? !openNode : openNode;
            if (!BI.Utils.isDimensionExist(dId) ||
                !BI.Utils.isDimInView(dId)) {
                needExpand = false;
            } else {
                var dims = view[viewType];
                if (needExpand) {
                    // 最后一个维度无需展开
                    needExpand = dims.indexOf(dId) !== (dims.length - 1);
                }
                if (needExpand) {
                    var eTree = viewType === BICst.REGION.DIMENSION1 ? this.eTree : this.crossETree;
                    var eNode = eTree.search(nodeId);
                    if (openNode) {
                        if (headerExpand[dId] === false) {
                            if (BI.isNotNull(eNode)) {
                                isExpanded = !isExpanded;
                            }
                        } else {
                            if (BI.isNotNull(eNode) && eNode.getChildren().length === 0) {
                                isExpanded = !isExpanded;
                            }
                        }
                    } else {
                        // 反选
                        if (headerExpand[dId]) {
                            if (BI.isNotNull(eNode) && eNode.getChildren().length === 0) {
                                isExpanded = !isExpanded;
                            }
                        } else {
                            if (BI.isNotNull(eNode)) {
                                isExpanded = !isExpanded;
                            }
                        }
                    }
                }
            }
            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        _getHeaderExpand: function (dId) {
            var needExpand = !BI.Utils.isTargetById(dId);
            var isExpanded = false;
            if (!BI.Utils.isDimensionExist(dId) ||
                !BI.Utils.isDimInView(dId)) {
                needExpand = false;
            } else {
                var view = this.model.widget.view;
                var viewType = BI.Utils.getRegionTypeById(dId);
                var dims = view[viewType];
                var dimIndex = dims.indexOf(dId);
                if (needExpand) {
                    // 最后一个维度无需展开
                    needExpand = dimIndex !== (dims.length - 1);
                }
                var headerExpand = viewType === BICst.REGION.DIMENSION1 ? this.model.headerExpand : this.model.crossHeaderExpand;
                var tree = viewType === BICst.REGION.DIMENSION1 ? this.eTree : this.crossETree;
                var openNode = viewType === BICst.REGION.DIMENSION1 ? this.model.openRowNode : this.model.openColNode;
                isExpanded = this.service.isHeaderExpand(dId, headerExpand, tree, view, openNode);
            }

            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        _getRowHeaderExpand: function () {
            var view = this.model.widget.view;
            var dims = view[BICst.REGION.DIMENSION1];
            var needExpand = dims.length > 1;
            var isExpanded = this.service.isRowHeaderExpand(this.model.headerExpand, this.eTree, this.model.openRowNode);
            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        // clicked的设置需要检查是否存在被联动组件
        _link: function (dId, value, fieldId) {
            var self = this;
            BI.Utils.getAllLinkageWidgets(this.model.wId, function (links) {
                if (links.length > 0) {
                    Fix.set(self.model.widget, "clicked", {
                        dId: dId,
                        value: value,
                        fieldId: fieldId
                    });
                }
            });
        },

        _initTrees: function () {
            this.tree = new BI.Tree();
            this.crossTree = new BI.Tree();
            this.eTree = new BI.Tree();
            this.crossETree = new BI.Tree();
            this.treeMap = {};
        },

        _initAttributes: function () {
            this.items = [];
            this.header = [];
            this.crossItems = [];
            this.crossHeader = [];
            this.minColumnSize = [];
            this.columnSize = [];
            this.hasXPrev = false;
            this.hasXNext = false;
            this.hasYPrev = false;
            this.hasYNext = false;
        },

        _isOnlyCrossAndTarget: function () {
            return this.model.dimIds.length === 0 &&
                this.model.crossDimIds.length > 0 &&
                this.model.targetIds.length > 0;
        }
    });
    BI.model("bi.model.cross_table", Model);
})();
!(function () {
    var DetailTable = BI.inherit(BI.Pane, {
        props: {
            baseCls: "bi-detail-table",
            overlap: false,
            wId: ""
        },

        watch: {
            "refresh || resize || templateTableStyle.**": function () {
                this._populate();
            },
            "style || style.** || widgetBg.**": function () {
                this._setTableStyle();
            },
            filterSetting: function () {
                this._setFilter();
            },
            loading: function (loading) {
                loading && this.loading();
            }
        },

        _store: function () {
            return BI.Models.getModel("bi.model.design.components.detail.table");
        },

        mounted: function () {
            var self = this;
            var service = BI.Services.getService("bi.service.table.style");
            service.setTableStyle(this.model.wId);
            this._resizeHandler = BI.debounce(function () {
                var width = this._getTableWidth(), height = this._getTableHeight();
                if (self.table.getWidth() !== width || self.table.getHeight() !== height) {
                    self.store.resizeTable();
                }
            }, 0);

            this.populate();
        },

        render: function () {
            return {
                type: "bi.absolute",
                items: [{
                    el: this._createDetailTable(),
                    left: 10,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            };
        },

        _createDetailTable: function () {
            var self = this;
            return {
                type: "bi.page_table",
                width: this._getTableWidth(),
                height: this._getTableHeight(),
                isNeedFreeze: true,
                isNeedMerge: false,
                freezeCols: this.model.freezeCols,
                visible: this.model.showTable,
                showSequence: this.model.showSequence,
                headerRowSize: this.model.headerRowSize,
                rowSize: this.model.rowSize,
                ref: function (ref) {
                    self.table = ref;
                },
                listeners: [{
                    eventName: BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE,
                    action: function () {
                        self.store.setRegionColumnSize(this.getRegionColumnSize());
                    }
                }, {
                    eventName: BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE,
                    action: function () {
                        self.store.setColumnSize(this.getColumnSize());
                    }
                }],
                summaryCellStyleGetter: BI.bind(this.store.summaryCellStyleGetter, this.store),
                sequenceCellStyleGetter: BI.bind(this.store.sequenceCellStyleGetter, this.store),
                headerCellStyleGetter: BI.bind(this.store.headerCellStyleGetter, this.store),
                el: {
                    type: "bi.sequence_table",
                    el: {
                        type: "bi.adaptive_table",
                        el: {
                            type: "bi.resizable_table",
                            el: {
                                type: "bi.grid_table"
                            }
                        }
                    },
                    sequence: {
                        type: "bi.sequence_table_list_number",
                        pageSize: 100,
                        sequenceHeaderCreator: function () {
                            return {
                                type: "bi.design.widget.sequence_header_cell",
                                styleGetter: BI.bind(self.store.sequenceHeaderStyleGetter, self.store),
                                height: self.model.headerRowSize
                            };
                        }
                    }
                },
                itemsCreator: function (op) {
                    self.store.setPage(op.vpage);
                },
                pager: {
                    type: "bi.all_count_pager",
                    cls: "page-table-pager",
                    ref: function (ref) {
                        self.pager = ref;
                    }
                }
            };
        },

        _setFilter: function () {
            var self = this, name = BI.UUID();
            var dId = this.model.filterDId;
            BI.Popovers.create(name, {
                header: BI.i18nText("BI-Design_Add_Dimension_Filter", BI.Utils.getDimensionNameById(dId)),
                body: {
                    type: "bi.design.widget.detail_table.header.filter",
                    dId: dId,
                    ref: function (_ref) {
                        self.filterCenter = _ref;
                    }
                },
                type: "bi.bar_popover",
                listeners: [{
                    eventName: "EVENT_CONFIRM",
                    action: function () {
                        self.store.setFilter(dId, self.filterCenter.getValue());
                        BI.Popovers.remove(name);
                    }
                }, {
                    eventName: "EVENT_CLOSE",
                    action: function () {
                        BI.Popovers.remove(name);
                    }
                }]
            }).open(name);
        },

        _getTableWidth: function () {
            return this.element.width() - 10;
        },

        _getTableHeight: function () {
            return this.element.height();
        },

        _populate: function () {
            if (this.table) {
                this.pager.setCount(this.store.getRow());
                this.pager.setAllPages(this.store.getPages());
                this.table.setVerticalScroll(0);
                this.table.setVPage(this.model.page);
                this.table.setWidth(this._getTableWidth());
                this.table.setHeight(this._getTableHeight());
                this.table.attr("minColumnSize", this.store.getMinColumnSize());
                this.table.attr("columnSize", this.getColumnSize());
                this.table.attr("regionColumnSize", this.model.regionColumnSize);
                this.table.attr("isNeedFreeze", true);
                this.table.attr("freezeCols", this.model.freezeCols);
                this.table.attr("showSequence", this.model.showSequence);
                this.table.attr("headerRowSize", this.model.headerRowSize);
                this.table.attr("rowSize", this.model.rowSize);

                try {
                    this.table.populate(BI.deepClone(this.store.getItems()), BI.deepClone(this.store.getHeader()));
                } catch (e) {
                    // exception during populate table
                    this.store.setError("exception during populate table !");
                } finally {
                    !this.model.loading && this.loaded();
                }
            }
        },

        _setTableStyle: function () {
            var service = BI.Services.getService("bi.service.table.style");
            service.setTableStyle(this.model.wId);
        },

        populate: function () {
            var isEmptyWidget = this.store.setPage(1);
            if (isEmptyWidget) {
                this.resize();
            }
        },

        resize: function () {
            this._resizeHandler();
        },

        setTableColumnEqualDivide: function () {
            this.store.setEqualDivideColumn(this._getTableWidth());
            this._populate();
        },

        getColumnSize: function () {
            var columnSize = this.store.getColumnSize();
            if (this.store.isDefaultColumnSize()) {
                var service = BI.Services.getService("bi.service.table");
                return service.calculateColumnSize(columnSize, this._getTableWidth());
            }
            return columnSize;
        }
    });
    DetailTable.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.detail_table", DetailTable);
})();!(function () {
    var DetailTableModel = BI.inherit(Fix.Model, {

        _init: function () {
            this.service = BI.Services.getService("bi.service.table");
            this.items = [];
            this.header = [];
            this.columnSize = [];
            this.minColumnSize = [];
            this.row = 0;
            this.pages = 0;
        },

        state: function () {
            return {
                showTable: true,
                showErrorPane: false,
                page: 1,
                resize: true,
                filterDId: null,
                filterSetting: false,
                refresh: false,
                loading: false
            };
        },

        context: ["widget", "refreshTableChart", "templateStyle", "error"],

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            templateTableStyle: function () {
                return this.model.templateStyle.style.table;
            },
            style: function () {
                return this.model.templateStyle.style;
            },
            widgetBg: function () {
                return this.model.widget.settings.widgetBackground;
            },
            size: function () {
                return BICst.DESIGN.DEFAULT_PAGE_ROW_SIZE;   // 一页行数
            },
            // tableAttr
            tableAttr: function () {
                return this.model.widget.settings.tableAttr;
            },
            regionColumnSize: function () {
                return this.model.widget.regionColumnSize;
            },

            // tableStyle
            tableStyle: function () {
                return this.model.widget.settings.tableStyle;
            },
            tableForm: function () {
                return this.model.tableStyle.form;
            },
            isNeedFreeze: function () {
                return this.model.tableStyle.freezeDim;
            },
            freezeCols: function () {
                return this.model.isNeedFreeze ? [0] : [];
            },
            showSequence: function () {
                return this.model.tableStyle.showSequence;
            },
            headerRowSize: function () {
                return this.model.tableStyle.rowHeight;
            },
            rowSize: function () {
                return this.model.tableStyle.rowHeight;
            },

            // 最终样式
            themeColor: function () {
                return BI.Utils.getResTableThemeColorById(this.model.wId);
            },
            detailStyle: function () {
                return BI.Utils.getResTableStyleTypeById(this.model.wId);
            },
            resTableFont: function () {
                return BI.Utils.getResTableFontById(this.model.wId);
            },
            resTableBodyDimFont: function () {
                return BI.Services.getService("bi.service.table").getBodyDimCellFontStyle(this.model.resTableFont.body);
            },
            resTableHeaderFont: function () {
                return BI.Services.getService("bi.service.table").getHeaderCellFontStyle(this.model.resTableFont.header);
            }
        },

        actions: {
            setPage: function (page) {
                var self = this;
                if (this.service.isEmptyWidget(this.model.wId)) {
                    return true;
                }
                this.model.page = page || 1;
                this.model.loading = true;
                BI.Utils.getWidgetDataByID(this.model.wId, {
                    success: function (res) {
                        self.model.error = {
                            errorCode: res.errorCode,
                            message: res.errorMsg
                        };
                        self._calculateTableAttributes(res.data);
                        self.model.loading = false;
                    }
                }, {
                    page: this.model.page
                });
            },
            resizeTable: function () {
                this.model.resize = !this.model.resize;
            },
            showTable: function () {
                this.model.showTable = true;
                this.model.showErrorPane = false;
            },
            setRegionColumnSize: function (regionColumnSize) {
                this.model.widget.regionColumnSize = regionColumnSize;
            },
            setColumnSize: function (columnSize) {
                this.model.widget.columnSize = columnSize;
            },
            showErrorPane: function () {
                this.model.showTable = false;
                this.model.showErrorPane = true;
            },
            summaryCellStyleGetter: function (isLast) {
                return this.service.summaryCellStyleGetter(this.model.wId, isLast);
            },
            sequenceCellStyleGetter: function (index) {
                return this.service.sequenceCellStyleGetter(this.model.wId, index);
            },
            sequenceHeaderStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.detailStyle, this.model.resTableFont);
            },
            headerCellStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.detailStyle, this.model.resTableFont);
            },
            setEqualDivideColumn: function (width) {
                var sizeOB = this.service.doEqualDivideColumnSize(width, this.minColumnSize.length, 1);
                this.setColumnSize(sizeOB.columnSize);
                this.setRegionColumnSize(sizeOB.regionColumnSize);
            },
            setError: function (error) {
                this.model.error = {
                    errorCode: -1,
                    message: error
                };
            },
            setFilter: function (dId, v) {
                if (BI.isNull(v)) {
                    Fix.del(this.model.widget.settings.tableAttr.filterValue, dId);
                } else {
                    Fix.set(this.model.widget.settings.tableAttr.filterValue, dId, v);
                }
                this.model.refreshTableChart = !this.model.refreshTableChart;
            }
        },

        getItems: function () {
            return this.items;
        },

        getHeader: function () {
            return this.header;
        },

        getMinColumnSize: function () {
            return this.minColumnSize;
        },

        getColumnSize: function () {
            return this.columnSize;
        },

        getRow: function () {
            return this.row;
        },

        getPages: function () {
            return this.pages;
        },

        _calculateTableAttributes: function (data) {
            this.service.initTableCacheMap().apply(this);
            this.items = this._formatItems(data.items);
            this.header = this._formatHeader(data.header);
            this.minColumnSize = this._calMinColumnSize();
            this.columnSize = this._calColumnSize();
            this.row = data.row || 0;    // 行数
            this.pages = Math.ceil(this.row / this.model.size);
            this.model.refresh = !this.model.refresh;
        },

        isDefaultColumnSize: function () {
            var columnSize = this.model.widget.columnSize;
            return this.minColumnSize.length !== columnSize.length;
        },
        _calColumnSize: function () {
            var self = this;
            var columnSize = this.model.widget.columnSize;
            if (this.isDefaultColumnSize()) {
                return this.minColumnSize.slice();
            }
            BI.each(columnSize, function (i, size) {
                if (size === 0) {
                    columnSize[i] = self.minColumnSize[i];
                }
            });
            return columnSize;
        },
        _calMinColumnSize: function () {
            if (BI.isNull(this.header) || BI.isNull(this.items)) {
                return [];
            }
            var items = BI.deepClone(this.items);
            items.splice(0, 0, BI.map(this.header[0], function (i, item) {
                return BI.extend({
                    isHeader: true
                }, item);
            }));
            return this.service.calculateMinColumnSize(BI.unzip(items));
        },

        _formatHeader: function (header) {
            var self = this;
            BI.each(header, function (i, cell) {
                return BI.extend(cell, {
                    type: "bi.design.widget.detail_table.header",
                    styles: self.service.getHeaderStyles(self.model.themeColor, self.model.detailStyle),
                    fontStyle: self.service.getHeaderCellFontStyle(self.headerFont),
                    listeners: [{
                        eventName: "EVENT_SORT_FILTER",
                        action: function (v) {
                            self._setSortFilter(cell.dId, v);
                        }
                    }]
                });
            });
            return [header];
        },

        _setSortFilter: function (dId, v) {
            switch (v) {
                case BICst.DESIGN.SORT.ASC:
                case BICst.DESIGN.SORT.DESC:
                case BICst.DESIGN.SORT.NONE:
                    this._setSort(dId, v);
                    break;
                default:
                    this.model.filterDId = dId;
                    this.model.filterSetting = !this.model.filterSetting;
            }
        },

        _setSort: function (dId, v) {
            var wId = BI.Utils.getWidgetIdBydId(dId);
            var service = BI.Services.getService("bi.service.design.expander.detail.region.dimension_button");
            service.mountAttribute(dId, "sort", {type: v, sortTarget: BI.Utils.getDimensionsGroupIdBydId(dId)});
            // widget中存sortSequence
            var sortSequence = BI.Utils.getWidgetSortSequence(wId) || [];
            if (sortSequence.contains(dId)) {
                sortSequence.splice(sortSequence.indexOf(dId), 1);
            }
            sortSequence.push(dId);
            Fix.set(this.model.widget, "sortSequence", sortSequence);
            this.model.refreshTableChart = !this.model.refreshTableChart;
        },

        _formatItems: function (items) {
            var self = this;
            BI.each(items, function (i, row) {
                BI.each(row, function (j, cell) {
                    var fontStyle = BI.Utils.isTargetById(cell.dId) ?
                        self.service.getBodyTarCellFontStyle(self.bodyFont) :
                        self.service.getBodyDimCellFontStyle(self.bodyFont);
                    var textAlign = self.service.getCellFontTextAlign(BI.Utils.isTargetById(cell.dId) ? self.bodyFont.tarFontAlign : self.bodyFont.dimFontAlign);
                    BI.extend(cell, {
                        type: "bi.detail_table_cell",
                        styles: i % 2 === 0 ? self.oddBodyStyle : self.evenBodyStyle,
                        rowIndex: i,
                        pageCount: self.model.page,
                        fontStyle: fontStyle,
                        dimType: self.resDimensionTypeMap[cell.dId],
                        groupType: self.resDimensionGroupTypeMap[cell.dId],
                        setting: self.resMeasureSettingMap[cell.dId],
                        textAlign: textAlign
                    });
                });
            });
            return items;
        }

    });
    BI.model("bi.model.design.components.detail.table", DetailTableModel);
})();
!(function () {

    var GroupTable = BI.inherit(BI.Pane, {

        props: {
            baseCls: "bi-group-table"
        },

        _store: function () {
            return BI.Models.getModel("bi.model.group.table");
        },

        mounted: function () {
            var self = this;
            this._setTableStyle();
            this._resizeHandler = BI.debounce(function () {
                if (BI.isNull(self.table) || BI.isNull(self.store)) {
                    return;
                }
                var width = self._getTableWidth(), height = self._getTableHeight();
                if (self.table.getWidth() !== width || self.table.getHeight() !== height) {
                    self.store.resizeTable();
                }
            }, 0);

            this.populate();
        },

        watch: {
            "refresh || resize || templateTableStyle.**": function () {
                this._populate();
            },
            "style || style.** || widgetBg.**": function () {
                this._setTableStyle();
            },
            loading: function (loading) {
                loading && this.loading();
            }
        },

        render: function () {
            var self = this;
            return {
                type: "bi.absolute",
                items: [{
                    el: {
                        type: "bi.button_group",
                        items: [this._tableCreator()],
                        ref: function (ref) {
                            self.tableContainer = ref;
                        }
                    },
                    left: 10,
                    right: 0,
                    top: 0,
                    bottom: 0
                }]
            };
        },

        // 创建表格
        _tableCreator: function () {
            var self = this;
            this.tableForm = this.model.tableForm;
            var publicAttr = {
                type: "bi.page_table",
                width: this._getTableWidth(),
                height: this._getTableHeight(),
                isNeedFreeze: null,
                isNeedMerge: true,
                listeners: [{
                    eventName: BI.Table.EVENT_TABLE_AFTER_REGION_RESIZE,
                    action: function () {
                        self.store.setRegionColumnSize(this.getRegionColumnSize());
                    }
                }, {
                    eventName: BI.Table.EVENT_TABLE_AFTER_COLUMN_RESIZE,
                    action: function () {
                        self.store.setColumnSize(this.getColumnSize());
                    }
                }],
                ref: function (ref) {
                    self.table = ref;
                },
                summaryCellStyleGetter: BI.bind(this.store.summaryCellStyleGetter, this.store),
                sequenceCellStyleGetter: BI.bind(this.store.sequenceCellStyleGetter, this.store),
                sequenceHeaderStyleGetter: BI.bind(this.store.sequenceHeaderStyleGetter, this.store),
                headerCellStyleGetter: BI.bind(this.store.headerCellStyleGetter, this.store),
                mergeRule: BI.Services.getService("bi.service.table").mergeRule,
                itemsCreator: BI.bind(this._tableItemsCreator, this),
                pager: this._pagerCreator()
            };
            switch (this.tableForm) {
                case BICst.TABLE_TYPE.TREE:
                    return BI.extend(publicAttr, {
                        el: {
                            type: "bi.sequence_table",
                            el: {
                                type: "bi.dynamic_summary_layer_tree_table",
                                rowHeaderCreator: BI.bind(self.store.getRowHeader, self.store),
                                el: {
                                    type: "bi.adaptive_table",
                                    el: {
                                        type: "bi.resizable_table",
                                        el: {
                                            type: "bi.collection_table"
                                        }
                                    }
                                }
                            },
                            sequence: {
                                type: "bi.sequence_table_tree_number",
                                sequenceHeaderCreator: function () {
                                    return {
                                        type: "bi.design.widget.sequence_header_cell",
                                        styleGetter: publicAttr.sequenceHeaderStyleGetter
                                    };
                                }
                            }
                        }
                    });
                default :
                    return BI.extend(publicAttr, {
                        el: {
                            type: "bi.sequence_table",
                            el: {
                                type: "bi.dynamic_summary_tree_table",
                                el: {
                                    type: "bi.adaptive_table",
                                    el: {
                                        type: "bi.resizable_table",
                                        el: {
                                            type: "bi.collection_table"
                                        }
                                    }
                                }
                            },
                            sequence: {
                                type: "bi.sequence_table_dynamic_number",
                                sequenceHeaderCreator: function () {
                                    return {
                                        type: "bi.design.widget.sequence_header_cell",
                                        styleGetter: publicAttr.sequenceHeaderStyleGetter,
                                        height: self.model.headerRowSize
                                    };
                                }
                            }
                        }
                    });
            }
        },

        // 页码
        _pagerCreator: function () {
            var self = this;
            return {
                pages: false,
                curr: 1,
                firstPage: 1,
                horizontal: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用
                    hasPrev: function () {
                        return false;
                    },
                    hasNext: function () {
                        return false;
                    },
                    firstPage: 1,
                    lastPage: BI.emptyFn
                },
                vertical: {
                    pages: false, // 总页数
                    curr: 1, // 初始化当前页， pages为数字时可用
                    hasPrev: BI.bind(this.store.hasPrev, this.store),
                    hasNext: BI.bind(this.store.hasNext, this.store),
                    firstPage: 1,
                    lastPage: BI.emptyFn
                },
                ref: function (ref) {
                    self.pager = ref;
                }
            };
        },

        // 翻页操作
        _tableItemsCreator: function (op) {
            var vPage = op.vpage, hPage = op.hpage;
            var service = BI.Services.getService("bi.service.table");
            var pageOperator = service.getPageOperatorByPages(vPage, hPage, this.model.vPage, this.model.hPage);
            if (this.model.hPage !== hPage) {
                this.table.setLeftHorizontalScroll(0);
                this.table.setRightHorizontalScroll(0);
            }
            if (this.model.vPage !== vPage) {
                this.table.setVerticalScroll(0);
            }
            this.store.setHPage(hPage);
            this.store.setVPage(vPage);
            this.store.setPageOperator(pageOperator);
            this.pageChange = true;
            this.pager.setEnable(false);
            this.store.refreshTable();
        },

        _getTableWidth: function () {
            return this.element.width() - 10;
        },

        _getTableHeight: function () {
            return this.element.height();
        },

        resize: function () {
            this._resizeHandler();
        },

        _populate: function () {
            if (this.tableForm !== this.model.tableForm) {
                this.tableForm = this.model.tableForm;
                this.tableContainer.populate([this._tableCreator()]);
            }
            this.pager.setEnable(true);
            this.table.setVPage(this.model.vPage);
            this.table.setHPage(this.model.hPage);
            this.table.setWidth(this._getTableWidth());
            this.table.setHeight(this._getTableHeight());
            this.table.attr("minColumnSize", this.store.getMinColumnSize());
            this.table.attr("columnSize", this.getColumnSize());
            this.table.attr("regionColumnSize", this.model.regionColumnSize);
            this.table.attr("isNeedFreeze", true);
            this.table.attr("showSequence", this.model.showSequence);
            this.table.attr("freezeCols", this.model.freezeCols);
            this.table.attr("mergeCols", this.model.mergeCols);
            this.table.attr("headerRowSize", this.model.headerRowSize);
            this.table.attr("rowSize", this.model.rowSize);
            try {
                this.table.populate(this.store.getItems(), this.store.getHeader());
            } catch (e) {
                // exception during populate table
                this.store.setError("exception during populate table !");
            } finally {
                !this.model.loading && this.loaded();
            }
        },

        _setTableStyle: function () {
            var service = BI.Services.getService("bi.service.table.style");
            service.setTableStyle(this.model.wId);
        },

        setTableColumnEqualDivide: function () {
            this.store.setEqualDivideColumn(this._getTableWidth());
            this._populate();
        },

        getColumnSize: function () {
            var columnSize = this.store.getColumnSize();
            if (this.store.isDefaultColumnSize()) {
                var service = BI.Services.getService("bi.service.table");
                return service.calculateColumnSize(columnSize, this._getTableWidth());
            }
            return columnSize;
        },

        populate: function () {
            if (this.pageChange === false) {
                this.store.setPageOperator(BICst.DESIGN.TABLE_PAGE_OPERATOR.REFRESH);
                this.store.setHPage(1);
                this.store.setVPage(1);
                this.store.resetAttr();
            }
            this.pageChange = false;
            this.store.initData();
        }
    });
    GroupTable.EVENT_CHANGE = "EVENT_CHANGE";
    BI.shortcut("bi.group_table", GroupTable);
})();!(function () {
    var GroupTableModel = BI.inherit(Fix.Model, {

        _init: function () {
            this.service = BI.Services.getService("bi.service.table");
            this._initTrees();
            this._initAttributes();
        },

        context: ["widget", "templateStyle", "refreshTableChart", "error", "dataMiningError", "drillControl"],

        state: function () {
            return {
                resize: true,
                pageOperator: BICst.DESIGN.TABLE_PAGE_OPERATOR.REFRESH,
                vPage: 1,
                hPage: 1,
                refresh: false,
                hasPrev: false,
                hasNext: false,
                loading: false
            };
        },

        computed: {
            wId: function () {
                return this.model.widget.wId;
            },
            templateTableStyle: function () {
                return this.model.templateStyle.style.table;
            },
            style: function () {
                return this.model.templateStyle.style;
            },
            widgetBg: function () {
                return this.model.widget.settings.widgetBackground;
            },
            dimIds: function () {
                var ids = [];
                BI.each(this.model.widget.view[BICst.REGION.DIMENSION1], function (i, dId) {
                    BI.Utils.isDimensionValidById(dId) && ids.push(dId);
                });
                return ids;
            },
            targetIds: function () {
                var ids = [];
                BI.each(this.model.widget.view[BICst.REGION.TARGET1], function (i, dId) {
                    BI.Utils.isDimensionValidById(dId) && ids.push(dId);
                });
                return ids;
            },
            regionColumnSize: function () {
                return this.model.widget.regionColumnSize;
            },

            mergeCols: function () {
                var mergeCols = [];
                BI.each(this.model.dimIds, function (i, id) {
                    mergeCols.push(i);
                });
                return mergeCols;
            },
            isNeedFreeze: function () {
                return this.model.tableStyle.freezeDim;
            },
            freezeCols: function () {
                var freezeCols = [];
                BI.each(this.model.dimIds, function (i, id) {
                    freezeCols.push(i);
                });
                return this.model.isNeedFreeze ? freezeCols : [];
            },
            settings: function () {
                return this.model.widget.settings;
            },
            // tableAttr
            tableAttr: function () {
                return this.model.settings.tableAttr;
            },

            // tableStyle
            tableStyle: function () {
                return this.model.settings.tableStyle;
            },
            tableForm: function () {
                return this.model.tableStyle.form;
            },
            showSequence: function () {
                return this.model.tableStyle.showSequence;
            },
            headerRowSize: function () {
                return this.model.tableStyle.rowHeight;
            },
            rowSize: function () {
                return this.model.tableStyle.rowHeight;
            },
            openRowNode: function () {
                return this.model.tableStyle.expandRowHeader;
            },
            view: function () {
                return this.model.widget.view;
            },
            headerExpand: function () {
                var expand = {}, self = this;
                var view = this.model.widget.view;
                var dims = view[BICst.REGION.DIMENSION1];
                BI.each(dims.slice(0, dims.length - 1), function (i, did) {
                    expand[did] = self.model.openRowNode || false;
                });
                return expand;
            },
            // 最终的字体样式
            themeColor: function () {
                return BI.Utils.getResTableThemeColorById(this.model.wId);
            },
            groupTableStyle: function () {
                // 全局样式
                return BI.Utils.getResTableStyleTypeById(this.model.wId);
            },
            resTableFont: function () {
                return BI.Utils.getResTableFontById(this.model.wId);
            },
            resTableBodyDimFont: function () {
                return BI.Services.getService("bi.service.table").getBodyDimCellFontStyle(this.model.resTableFont.body);
            },
            resTableHeaderFont: function () {
                return BI.Services.getService("bi.service.table").getHeaderCellFontStyle(this.model.resTableFont.header);
            }
        },

        actions: {
            initData: function () {
                var self = this;
                if (this.service.isEmptyWidget(this.model.wId)) {
                    return;
                }
                this.model.loading = true;
                BI.Utils.getWidgetDataByID(this.model.wId, {
                    success: function (res) {
                        self.model.error = {
                            errorCode: res.errorCode,
                            message: res.errorMsg
                        };
                        self._calculateTableAttributes(res.data);
                        self.model.dataMiningError = {
                            message: res.data && res.data.error
                        };
                        self.model.loading = false;
                    }
                }, {
                    rowExpand: this.service.formatExpanderTree(this.eTree.toJSONWithNode()),
                    headerExpand: this.model.headerExpand,
                    expandClick: this.expandClick,
                    page: this.model.pageOperator
                });
            },
            expandPage: function () {
                this.setPageOperator(BICst.DESIGN.TABLE_PAGE_OPERATOR.EXPAND);
            },
            resetAttr: function () {
                this.expandClick = {};
                this._initTrees();
            },
            resizeTable: function () {
                this.model.resize = !this.model.resize;
            },
            setPageOperator: function (pageOperator) {
                this.model.pageOperator = pageOperator;
            },
            setHPage: function (hPage) {
                this.model.hPage = hPage;
            },
            setVPage: function (vPage) {
                this.model.vPage = vPage;
            },
            setRegionColumnSize: function (regionColumnSize) {
                this.model.widget.regionColumnSize = regionColumnSize;
            },
            setColumnSize: function (columnSize) {
                this.model.widget.columnSize = columnSize;
            },
            summaryCellStyleGetter: function (isLast) {
                return this.service.summaryCellStyleGetter(this.model.wId, isLast);
            },
            sequenceCellStyleGetter: function (index) {
                return this.service.sequenceCellStyleGetter(this.model.wId, index);
            },
            sequenceHeaderStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.groupTableStyle, this.model.resTableFont);
            },
            headerCellStyleGetter: function () {
                return this.service.headerCellStyleGetter(this.model.themeColor, this.model.groupTableStyle, this.model.resTableFont);
            },
            hasPrev: function () {
                return this.model.hasPrev;
            },
            hasNext: function () {
                return this.model.hasNext;
            },
            getRowHeader: function () {
                var self = this;
                var expand = this._getRowHeaderExpand();
                return {
                    type: "bi.design.widget.row_header_cell",
                    wId: this.model.wId,
                    styleGetter: BI.bind(this.headerCellStyleGetter, this),
                    needExpand: expand.needExpand,
                    isExpanded: expand.isExpanded,
                    listeners: [{
                        eventName: "EVENT_TOGGLE_EXPAND",
                        action: function () {
                            BI.each(self.model.headerExpand, function (idx) {
                                self.model.headerExpand[idx] = !expand.isExpanded;
                            });
                            self.eTree.getRoot().removeAllChilds();
                            self.expandPage();
                            self.initData();
                        }
                    }]
                };
            },
            setEqualDivideColumn: function (width) {
                var sizeOB = this.service.doEqualDivideColumnSize(width, this.minColumnSize.length, this.model.dimIds.length);
                this.setColumnSize(sizeOB.columnSize);
                this.setRegionColumnSize(sizeOB.regionColumnSize);
            },
            refreshTable: function () {
                this.model.refreshTableChart = !this.model.refreshTableChart;
            },

            triggerWidgetDrill: function (v) {
                this.model.drillControl.value = v;
                this.model.drillControl.trigger = !this.model.drillControl.trigger;
            },
            setError: function (error) {
                this.model.error = {
                    errorCode: -1,
                    message: error
                };
            }
        },

        _calculateTableAttributes: function (data) {
            this.service.initTableCacheMap().apply(this);
            this.items = this._formatItems(data.items);
            this.header = this._formatHeader(data.header);
            this.minColumnSize = this._calMinColumnSize();
            this.columnSize = this._calColumnSize();
            this.model.hasPrev = data.hasPrev;
            this.model.hasNext = data.hasNext;
            this.model.refresh = !this.model.refresh;
        },

        _calMinColumnSize: function () {
            var columnCache = this.service.transformItems(BI.deepClone(this.items), this.model.dimIds);
            BI.each(BI.deepClone(this.header), function (i, item) {
                BI.isNull(columnCache[i]) && (columnCache[i] = []);
                columnCache[i].push(BI.extend({
                    isHeader: true
                }, item));
            });
            return this.service.calculateMinColumnSize(columnCache);
        },

        _calColumnSize: function () {
            var self = this;
            var columnSize = this.model.widget.columnSize;
            if (this.isDefaultColumnSize()) {
                return this.minColumnSize.slice();
            }
            BI.each(columnSize, function (i, size) {
                if (size === 0) {
                    columnSize[i] = self.minColumnSize[i];
                }
            });
            return columnSize;
        },

        getItems: function () {
            return this.items;
        },

        getHeader: function () {
            return this.header;
        },

        getMinColumnSize: function () {
            return this.minColumnSize;
        },

        getColumnSize: function () {
            return this.columnSize;
        },

        isDefaultColumnSize: function () {
            var columnSize = this.model.widget.columnSize;
            return this.minColumnSize.length !== columnSize.length;
        },

        _formatItems: function (items, parentValue, index, pNode) {
            return this.service.formatItems(items, parentValue, index, pNode, {
                tree: this.tree,
                treeMap: this.treeMap,
                cellCreator: BI.bind(this._cellCreator, this),
                isLastSum: true
            });
        },

        _formatHeader: function (header) {
            var self = this;
            return BI.map(header, function (i, item) {
                return self._headerCreator(item);
            });
        },

        _headerCreator: function (header) {
            var self = this, dId = header.dId;
            var expand = this._getHeaderExpand(dId);
            return BI.extend({}, header, {
                type: "bi.design.widget.table.header",
                styles: this.service.getHeaderStyles(this.model.themeColor, this.model.groupTableStyle),
                needExpand: expand.needExpand,
                isExpanded: expand.isExpanded,
                sort: this.sortMap[dId],
                filter: this.filterMap[dId],
                fontStyle: this.service.getHeaderCellFontStyle(this.headerFont),
                listeners: [{
                    eventName: "EVENT_TOGGLE_EXPAND",
                    action: function () {
                        self.expandClick = {
                            dId: header.dId,
                            type: BICst.EXPAND_TYPE.HEADER
                        };
                        self.service.toggleHeaderExpand(header.dId, self.model.headerExpand, self.eTree, self.model.view, self.model.openRowNode, expand.isExpanded);
                        self.expandPage();
                        self.initData();
                    }
                }, {
                    eventName: "EVENT_SORT_FILTER",
                    action: function (v) {
                        self.service.setSortFilter(header.dId, v, function () {
                            self.refreshTable();
                        });
                    }
                }]
            });
        },

        _getHeaderExpand: function (dId) {
            var needExpand = !BI.Utils.isTargetById(dId);
            var view = this.model.widget.view;
            var viewType = BI.Utils.getRegionTypeById(dId);
            var dims = view[viewType];
            var dimIndex = dims.indexOf(dId);
            // var this.model.widget.
            if (needExpand) {
                // 最后一个维度无需展开
                needExpand = dimIndex !== (dims.length - 1);
            }
            var isExpanded = this.service.isHeaderExpand(dId, this.model.headerExpand, this.eTree, this.model.view, this.model.openRowNode);

            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        _getRowHeaderExpand: function () {
            var view = this.model.widget.view;
            var dims = view[BICst.REGION.DIMENSION1];
            var needExpand = dims.length > 1;
            var isExpanded = this.service.isRowHeaderExpand(this.model.headerExpand, this.eTree, this.model.openRowNode);
            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        // 表格展开需要先看header
        _getExpand: function (dId, nodeId) {
            var needExpand = !BI.Utils.isTargetById(dId),
                isExpanded = this.model.headerExpand[dId] !== this.model.openRowNode ? !this.model.openRowNode : this.model.openRowNode;
            if (needExpand) {
                // 最后一个维度无需展开
                var view = this.model.widget.view;
                var dims = view[BICst.REGION.DIMENSION1];
                needExpand = dims.indexOf(dId) !== (dims.length - 1);
            }
            // Todo 优化下逻辑
            if (needExpand) {
                var eNode = this.eTree.search(nodeId);

                if (this.model.openRowNode) {
                    if (this.model.headerExpand[dId] === false) {
                        if (BI.isNotNull(eNode)) {
                            isExpanded = !isExpanded;
                        }
                    } else {
                        if (BI.isNotNull(eNode) && eNode.getChildren().length === 0) {
                            isExpanded = !isExpanded;
                        }
                    }
                } else {
                    if (this.model.headerExpand[dId]) {
                        if (BI.isNotNull(eNode) && eNode.getChildren().length === 0) {
                            isExpanded = !isExpanded;
                        }
                    } else {
                        if (BI.isNotNull(eNode)) {
                            isExpanded = !isExpanded;
                        }
                    }

                }
            }
            return {
                needExpand: needExpand,
                isExpanded: isExpanded
            };
        },

        _cellCreator: function (cell, value, index, pNode, nodeId, isLastSum) {
            var self = this;
            var dId = cell.dId;
            var styles = isLastSum ?
                this.service.getLastSummaryStyles(this.model.themeColor, this.model.groupTableStyle) :
                (index % 2 === 0 ? this.oddBodyStyle : this.evenBodyStyle);
            var clicked = {
                dId: cell.dId,
                value: value
            };
            if (BI.Utils.isTargetById(dId)) {
                return BI.extend(cell, {
                    type: "bi.design.widget.target_cell",
                    styles: styles,
                    clicked: clicked,
                    setting: this.switchMeasureSettingMap[dId],
                    dimFieldName: this.dimFieldNameMap[dId],
                    fontStyle: this.service.getBodyTarCellFontStyle(this.bodyFont),
                    listeners: [{
                        eventName: "EVENT_CLICK_CELL",
                        action: function (id) {
                            var fieldId = BI.Utils.isCalculateTargetById(dId) ? id : BI.Utils.getFieldIdBydId(dId);
                            self._link(dId, value, fieldId);
                        }
                    }]
                });
            }
            var expander = this._getExpand(dId, nodeId);
            var regionType = BI.Utils.getRegionTypeById(dId);
            var isHeader = regionType === BICst.REGION.DIMENSION2 ||
                regionType === BICst.REGION.TARGET1;
            return BI.extend(cell, {
                type: "bi.design.widget.table_cell",
                styles: styles,
                needExpand: expander.needExpand,
                isExpanded: expander.isExpanded,
                clicked: clicked,
                dimType: this.resDimensionTypeMap[dId],
                groupType: this.resDimensionGroupTypeMap[dId],
                setting: this.resMeasureSettingMap[dId],
                fontStyle: this.service.getCellFontStyle(isHeader ? this.headerFont : this.bodyFont),
                textAlign: this.service.getCellFontTextAlign(isHeader ? this.headerFont.fontAlign : this.bodyFont.dimFontAlign),
                showDrill: this.showDrillMap[dId],
                listeners: [{
                    eventName: "EVENT_CLICK_CELL",
                    action: function () {
                        self._link(cell.dId, value, BI.Utils.getFieldIdBydId(cell.dId));
                    }
                }, {
                    eventName: "EVENT_TOGGLE_EXPAND",
                    action: function () {
                        self.expandClick = {
                            dId: dId,
                            type: BICst.EXPAND_TYPE.CELL
                        };
                        self.service.toggleCellExpand(self.eTree, self.tree, self.treeMap, pNode, nodeId, self.model.openRowNode, self.model.headerExpand);
                        self.expandPage();
                        self.initData();
                    }
                }, {
                    eventName: "EVENT_DRILL",
                    action: function () {
                        var drillValue = BI.map(value, function (i, it) {
                            return {
                                dId: it.dId,
                                value: it.text,
                                fieldId: it.fieldId,
                                hide: it.dId !== dId
                            };
                        });
                        self.triggerWidgetDrill(drillValue);
                    }
                }]
            });
        },

        // clicked的设置需要检查是否存在被联动组件
        _link: function (dId, value, fieldId) {
            var self = this;
            BI.Utils.getAllLinkageWidgets(this.model.wId, function (links) {
                if (links.length > 0) {
                    Fix.set(self.model.widget, "clicked", {
                        dId: dId,
                        value: value,
                        fieldId: fieldId
                    });
                }
            });
        },

        _initTrees: function () {
            this.tree = new BI.Tree();
            this.eTree = new BI.Tree();
            this.treeMap = {};
        },

        _initAttributes: function () {
            this.items = [];
            this.header = [];
            this.minColumnSize = [];
            this.columnSize = [];
            this.hasPrev = false;
            this.hasNext = false;
        }
    });
    BI.model("bi.model.group.table", GroupTableModel);
})();